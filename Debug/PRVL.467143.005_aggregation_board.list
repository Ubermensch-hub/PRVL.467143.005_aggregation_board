
PRVL.467143.005_aggregation_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068cc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006988  08006988  00007988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069c8  080069c8  00008064  2**0
                  CONTENTS
  4 .ARM          00000000  080069c8  080069c8  00008064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069c8  080069c8  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069c8  080069c8  000079c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069cc  080069cc  000079cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080069d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000064  08006a34  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08006a34  000082f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec0c  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002342  00000000  00000000  00016c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00018fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c44  00000000  00000000  00019f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fcc  00000000  00000000  0001ab9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001261a  00000000  00000000  00032b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bb56  00000000  00000000  00045182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0cd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000383c  00000000  00000000  000e0d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e4558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000064 	.word	0x20000064
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006970 	.word	0x08006970

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000068 	.word	0x20000068
 8000100:	08006970 	.word	0x08006970

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <UpdateLED>:
void PowerOffAdapter(uint8_t adapter_number);
void UpdateCPU_PSON();
void RebootAdapter(uint8_t adapter_number, uint8_t is_hard_reboot);

void UpdateLED(LEDState *led)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	if (led->is_blinking) {
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	7d1b      	ldrb	r3, [r3, #20]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d038      	beq.n	800029e <UpdateLED+0x82>
		uint32_t current_time = HAL_GetTick();
 800022c:	f001 fdfa 	bl	8001e24 <HAL_GetTick>
 8000230:	0003      	movs	r3, r0
 8000232:	60fb      	str	r3, [r7, #12]
		uint32_t elapsed_time = current_time - led->blink_start_time;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	68fa      	ldr	r2, [r7, #12]
 800023a:	1ad3      	subs	r3, r2, r3
 800023c:	60bb      	str	r3, [r7, #8]

		if (elapsed_time < led->blink_duration) {
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	68db      	ldr	r3, [r3, #12]
 8000242:	68ba      	ldr	r2, [r7, #8]
 8000244:	429a      	cmp	r2, r3
 8000246:	d21f      	bcs.n	8000288 <UpdateLED+0x6c>
			// Мигание
			if (elapsed_time % led->blink_period < led->blink_period / 2) {
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	691a      	ldr	r2, [r3, #16]
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	0011      	movs	r1, r2
 8000250:	0018      	movs	r0, r3
 8000252:	f7ff ffdd 	bl	8000210 <__aeabi_uidivmod>
 8000256:	000b      	movs	r3, r1
 8000258:	001a      	movs	r2, r3
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	691b      	ldr	r3, [r3, #16]
 800025e:	085b      	lsrs	r3, r3, #1
 8000260:	429a      	cmp	r2, r3
 8000262:	d208      	bcs.n	8000276 <UpdateLED+0x5a>
				HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, SET);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	6818      	ldr	r0, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	889b      	ldrh	r3, [r3, #4]
 800026c:	2201      	movs	r2, #1
 800026e:	0019      	movs	r1, r3
 8000270:	f002 fb10 	bl	8002894 <HAL_GPIO_WritePin>
			// Завершение мигания
			HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
			led->is_blinking = 0;
		}
	}
}
 8000274:	e013      	b.n	800029e <UpdateLED+0x82>
				HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	6818      	ldr	r0, [r3, #0]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	889b      	ldrh	r3, [r3, #4]
 800027e:	2200      	movs	r2, #0
 8000280:	0019      	movs	r1, r3
 8000282:	f002 fb07 	bl	8002894 <HAL_GPIO_WritePin>
}
 8000286:	e00a      	b.n	800029e <UpdateLED+0x82>
			HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	6818      	ldr	r0, [r3, #0]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	889b      	ldrh	r3, [r3, #4]
 8000290:	2200      	movs	r2, #0
 8000292:	0019      	movs	r1, r3
 8000294:	f002 fafe 	bl	8002894 <HAL_GPIO_WritePin>
			led->is_blinking = 0;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2200      	movs	r2, #0
 800029c:	751a      	strb	r2, [r3, #20]
}
 800029e:	46c0      	nop			@ (mov r8, r8)
 80002a0:	46bd      	mov	sp, r7
 80002a2:	b004      	add	sp, #16
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <StartBlinking>:

void StartBlinking(LEDState *led, uint32_t frequency, uint32_t duration)
{
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b084      	sub	sp, #16
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	60f8      	str	r0, [r7, #12]
 80002ae:	60b9      	str	r1, [r7, #8]
 80002b0:	607a      	str	r2, [r7, #4]
	led->blink_period = 1000 / frequency; // Период мигания в мс
 80002b2:	68b9      	ldr	r1, [r7, #8]
 80002b4:	23fa      	movs	r3, #250	@ 0xfa
 80002b6:	0098      	lsls	r0, r3, #2
 80002b8:	f7ff ff24 	bl	8000104 <__udivsi3>
 80002bc:	0003      	movs	r3, r0
 80002be:	001a      	movs	r2, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	611a      	str	r2, [r3, #16]
	led->blink_duration = duration;       // Длительность мигания
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	687a      	ldr	r2, [r7, #4]
 80002c8:	60da      	str	r2, [r3, #12]
	led->blink_start_time = HAL_GetTick(); // Время начала мигания
 80002ca:	f001 fdab 	bl	8001e24 <HAL_GetTick>
 80002ce:	0002      	movs	r2, r0
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	609a      	str	r2, [r3, #8]
	led->is_blinking = 1;                 // Включить мигание
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	2201      	movs	r2, #1
 80002d8:	751a      	strb	r2, [r3, #20]
}
 80002da:	46c0      	nop			@ (mov r8, r8)
 80002dc:	46bd      	mov	sp, r7
 80002de:	b004      	add	sp, #16
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <HandleButtonAction>:
void HandleButtonAction(uint8_t button_number, uint32_t press_duration)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	0002      	movs	r2, r0
 80002ec:	6039      	str	r1, [r7, #0]
 80002ee:	1dfb      	adds	r3, r7, #7
 80002f0:	701a      	strb	r2, [r3, #0]
	if (button_number == 1) {
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d12e      	bne.n	8000358 <HandleButtonAction+0x74>
		if (press_duration <= 1000) {
 80002fa:	683a      	ldr	r2, [r7, #0]
 80002fc:	23fa      	movs	r3, #250	@ 0xfa
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	429a      	cmp	r2, r3
 8000302:	d803      	bhi.n	800030c <HandleButtonAction+0x28>
			// Короткое нажатие (0-1 сек) - включение адаптера 1
			PowerOnAdapter(1);
 8000304:	2001      	movs	r0, #1
 8000306:	f001 f953 	bl	80015b0 <PowerOnAdapter>
		} else if (press_duration > 6000) {
			// Очень долгое нажатие (6-10 сек) - выключение адаптера 2
			PowerOffAdapter(2);
		}
	}
}
 800030a:	e057      	b.n	80003bc <HandleButtonAction+0xd8>
		} else if (press_duration <= 3000) {
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	4a2d      	ldr	r2, [pc, #180]	@ (80003c4 <HandleButtonAction+0xe0>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d80a      	bhi.n	800032a <HandleButtonAction+0x46>
			RebootAdapter(1, 0);
 8000314:	2100      	movs	r1, #0
 8000316:	2001      	movs	r0, #1
 8000318:	f001 fa38 	bl	800178c <RebootAdapter>
			StartBlinking(&led1, 4, 5000); // Мигание 4 Гц, 5 сек
 800031c:	4a2a      	ldr	r2, [pc, #168]	@ (80003c8 <HandleButtonAction+0xe4>)
 800031e:	4b2b      	ldr	r3, [pc, #172]	@ (80003cc <HandleButtonAction+0xe8>)
 8000320:	2104      	movs	r1, #4
 8000322:	0018      	movs	r0, r3
 8000324:	f7ff ffbf 	bl	80002a6 <StartBlinking>
}
 8000328:	e048      	b.n	80003bc <HandleButtonAction+0xd8>
		} else if (press_duration <= 6000) {
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	4a28      	ldr	r2, [pc, #160]	@ (80003d0 <HandleButtonAction+0xec>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d80a      	bhi.n	8000348 <HandleButtonAction+0x64>
			RebootAdapter(1, 1);
 8000332:	2101      	movs	r1, #1
 8000334:	2001      	movs	r0, #1
 8000336:	f001 fa29 	bl	800178c <RebootAdapter>
			StartBlinking(&led1, 4, 5000); // Мигание 4 Гц, 5 сек
 800033a:	4a23      	ldr	r2, [pc, #140]	@ (80003c8 <HandleButtonAction+0xe4>)
 800033c:	4b23      	ldr	r3, [pc, #140]	@ (80003cc <HandleButtonAction+0xe8>)
 800033e:	2104      	movs	r1, #4
 8000340:	0018      	movs	r0, r3
 8000342:	f7ff ffb0 	bl	80002a6 <StartBlinking>
}
 8000346:	e039      	b.n	80003bc <HandleButtonAction+0xd8>
		} else if (press_duration > 6000) {
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	4a21      	ldr	r2, [pc, #132]	@ (80003d0 <HandleButtonAction+0xec>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d935      	bls.n	80003bc <HandleButtonAction+0xd8>
			PowerOffAdapter(1);
 8000350:	2001      	movs	r0, #1
 8000352:	f001 f9c1 	bl	80016d8 <PowerOffAdapter>
}
 8000356:	e031      	b.n	80003bc <HandleButtonAction+0xd8>
	} else if (button_number == 2) {
 8000358:	1dfb      	adds	r3, r7, #7
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b02      	cmp	r3, #2
 800035e:	d12d      	bne.n	80003bc <HandleButtonAction+0xd8>
		if (press_duration <= 1000) {
 8000360:	683a      	ldr	r2, [r7, #0]
 8000362:	23fa      	movs	r3, #250	@ 0xfa
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	429a      	cmp	r2, r3
 8000368:	d803      	bhi.n	8000372 <HandleButtonAction+0x8e>
			PowerOnAdapter(2);
 800036a:	2002      	movs	r0, #2
 800036c:	f001 f920 	bl	80015b0 <PowerOnAdapter>
}
 8000370:	e024      	b.n	80003bc <HandleButtonAction+0xd8>
		} else if (press_duration <= 3000) {
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	4a13      	ldr	r2, [pc, #76]	@ (80003c4 <HandleButtonAction+0xe0>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d80a      	bhi.n	8000390 <HandleButtonAction+0xac>
			RebootAdapter(2, 0);
 800037a:	2100      	movs	r1, #0
 800037c:	2002      	movs	r0, #2
 800037e:	f001 fa05 	bl	800178c <RebootAdapter>
			StartBlinking(&led2, 4, 5000); // Мигание 4 Гц, 5 сек
 8000382:	4a11      	ldr	r2, [pc, #68]	@ (80003c8 <HandleButtonAction+0xe4>)
 8000384:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <HandleButtonAction+0xf0>)
 8000386:	2104      	movs	r1, #4
 8000388:	0018      	movs	r0, r3
 800038a:	f7ff ff8c 	bl	80002a6 <StartBlinking>
}
 800038e:	e015      	b.n	80003bc <HandleButtonAction+0xd8>
		} else if (press_duration <= 6000) {
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	4a0f      	ldr	r2, [pc, #60]	@ (80003d0 <HandleButtonAction+0xec>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d80a      	bhi.n	80003ae <HandleButtonAction+0xca>
			RebootAdapter(2, 1);
 8000398:	2101      	movs	r1, #1
 800039a:	2002      	movs	r0, #2
 800039c:	f001 f9f6 	bl	800178c <RebootAdapter>
			StartBlinking(&led2, 4, 5000); // Мигание 4 Гц, 5 сек
 80003a0:	4a09      	ldr	r2, [pc, #36]	@ (80003c8 <HandleButtonAction+0xe4>)
 80003a2:	4b0c      	ldr	r3, [pc, #48]	@ (80003d4 <HandleButtonAction+0xf0>)
 80003a4:	2104      	movs	r1, #4
 80003a6:	0018      	movs	r0, r3
 80003a8:	f7ff ff7d 	bl	80002a6 <StartBlinking>
}
 80003ac:	e006      	b.n	80003bc <HandleButtonAction+0xd8>
		} else if (press_duration > 6000) {
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	4a07      	ldr	r2, [pc, #28]	@ (80003d0 <HandleButtonAction+0xec>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d902      	bls.n	80003bc <HandleButtonAction+0xd8>
			PowerOffAdapter(2);
 80003b6:	2002      	movs	r0, #2
 80003b8:	f001 f98e 	bl	80016d8 <PowerOffAdapter>
}
 80003bc:	46c0      	nop			@ (mov r8, r8)
 80003be:	46bd      	mov	sp, r7
 80003c0:	b002      	add	sp, #8
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	00000bb8 	.word	0x00000bb8
 80003c8:	00001388 	.word	0x00001388
 80003cc:	20000000 	.word	0x20000000
 80003d0:	00001770 	.word	0x00001770
 80003d4:	20000018 	.word	0x20000018

080003d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003dc:	f001 fca6 	bl	8001d2c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003e0:	f000 f82c 	bl	800043c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003e4:	f000 fa1a 	bl	800081c <MX_GPIO_Init>
	MX_DMA_Init();
 80003e8:	f000 fa02 	bl	80007f0 <MX_DMA_Init>
	MX_I2C2_Init();
 80003ec:	f000 f8b6 	bl	800055c <MX_I2C2_Init>
	MX_TIM3_Init();
 80003f0:	f000 f9a6 	bl	8000740 <MX_TIM3_Init>
	MX_TIM1_Init();
 80003f4:	f000 f8f4 	bl	80005e0 <MX_TIM1_Init>
	MX_TIM2_Init();
 80003f8:	f000 f94e 	bl	8000698 <MX_TIM2_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80003fc:	f000 f878 	bl	80004f0 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	//ResetBus();
	HAL_Delay(500);
 8000400:	23fa      	movs	r3, #250	@ 0xfa
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	0018      	movs	r0, r3
 8000406:	f001 fd17 	bl	8001e38 <HAL_Delay>
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	2101      	movs	r1, #1
 800040e:	2007      	movs	r0, #7
 8000410:	f001 fde2 	bl	8001fd8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000414:	2007      	movs	r0, #7
 8000416:	f001 fdf4 	bl	8002002 <HAL_NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800041a:	b662      	cpsie	i
}
 800041c:	46c0      	nop			@ (mov r8, r8)
			PowerOffAdapter(2);
			button2.very_long_press = 0;
		}*/

		// Обновление состояния светодиодов
		UpdateLED(&led1);
 800041e:	4b05      	ldr	r3, [pc, #20]	@ (8000434 <main+0x5c>)
 8000420:	0018      	movs	r0, r3
 8000422:	f7ff fefb 	bl	800021c <UpdateLED>
		UpdateLED(&led2);
 8000426:	4b04      	ldr	r3, [pc, #16]	@ (8000438 <main+0x60>)
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff fef7 	bl	800021c <UpdateLED>
		UpdateLED(&led1);
 800042e:	46c0      	nop			@ (mov r8, r8)
 8000430:	e7f5      	b.n	800041e <main+0x46>
 8000432:	46c0      	nop			@ (mov r8, r8)
 8000434:	20000000 	.word	0x20000000
 8000438:	20000018 	.word	0x20000018

0800043c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800043c:	b590      	push	{r4, r7, lr}
 800043e:	b093      	sub	sp, #76	@ 0x4c
 8000440:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	2410      	movs	r4, #16
 8000444:	193b      	adds	r3, r7, r4
 8000446:	0018      	movs	r0, r3
 8000448:	2338      	movs	r3, #56	@ 0x38
 800044a:	001a      	movs	r2, r3
 800044c:	2100      	movs	r1, #0
 800044e:	f006 fa63 	bl	8006918 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000452:	003b      	movs	r3, r7
 8000454:	0018      	movs	r0, r3
 8000456:	2310      	movs	r3, #16
 8000458:	001a      	movs	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f006 fa5c 	bl	8006918 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000460:	2380      	movs	r3, #128	@ 0x80
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	0018      	movs	r0, r3
 8000466:	f004 ff21 	bl	80052ac <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800046a:	193b      	adds	r3, r7, r4
 800046c:	2201      	movs	r2, #1
 800046e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000470:	193b      	adds	r3, r7, r4
 8000472:	2280      	movs	r2, #128	@ 0x80
 8000474:	0252      	lsls	r2, r2, #9
 8000476:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000478:	0021      	movs	r1, r4
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2202      	movs	r2, #2
 800047e:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2203      	movs	r2, #3
 8000484:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLN = 16;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2210      	movs	r2, #16
 8000490:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2280      	movs	r2, #128	@ 0x80
 8000496:	0292      	lsls	r2, r2, #10
 8000498:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	22c0      	movs	r2, #192	@ 0xc0
 800049e:	04d2      	lsls	r2, r2, #19
 80004a0:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2280      	movs	r2, #128	@ 0x80
 80004a6:	0592      	lsls	r2, r2, #22
 80004a8:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	0018      	movs	r0, r3
 80004ae:	f004 ff3d 	bl	800532c <HAL_RCC_OscConfig>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0x7e>
	{
		Error_Handler();
 80004b6:	f001 fa47 	bl	8001948 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ba:	003b      	movs	r3, r7
 80004bc:	2207      	movs	r2, #7
 80004be:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c0:	003b      	movs	r3, r7
 80004c2:	2202      	movs	r2, #2
 80004c4:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c6:	003b      	movs	r3, r7
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004cc:	003b      	movs	r3, r7
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004d2:	003b      	movs	r3, r7
 80004d4:	2102      	movs	r1, #2
 80004d6:	0018      	movs	r0, r3
 80004d8:	f005 fa42 	bl	8005960 <HAL_RCC_ClockConfig>
 80004dc:	1e03      	subs	r3, r0, #0
 80004de:	d001      	beq.n	80004e4 <SystemClock_Config+0xa8>
	{
		Error_Handler();
 80004e0:	f001 fa32 	bl	8001948 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 80004e4:	f005 fbc6 	bl	8005c74 <HAL_RCC_EnableCSS>
}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b013      	add	sp, #76	@ 0x4c
 80004ee:	bd90      	pop	{r4, r7, pc}

080004f0 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2101      	movs	r1, #1
 80004f8:	2009      	movs	r0, #9
 80004fa:	f001 fd6d 	bl	8001fd8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004fe:	2009      	movs	r0, #9
 8000500:	f001 fd7f 	bl	8002002 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 8000504:	2200      	movs	r2, #0
 8000506:	2101      	movs	r1, #1
 8000508:	200a      	movs	r0, #10
 800050a:	f001 fd65 	bl	8001fd8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800050e:	200a      	movs	r0, #10
 8000510:	f001 fd77 	bl	8002002 <HAL_NVIC_EnableIRQ>
	/* TIM1_BRK_UP_TRG_COM_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 2, 0);
 8000514:	2200      	movs	r2, #0
 8000516:	2102      	movs	r1, #2
 8000518:	200d      	movs	r0, #13
 800051a:	f001 fd5d 	bl	8001fd8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800051e:	200d      	movs	r0, #13
 8000520:	f001 fd6f 	bl	8002002 <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000524:	2200      	movs	r2, #0
 8000526:	2102      	movs	r1, #2
 8000528:	200f      	movs	r0, #15
 800052a:	f001 fd55 	bl	8001fd8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800052e:	200f      	movs	r0, #15
 8000530:	f001 fd67 	bl	8002002 <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000534:	2200      	movs	r2, #0
 8000536:	2102      	movs	r1, #2
 8000538:	2010      	movs	r0, #16
 800053a:	f001 fd4d 	bl	8001fd8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800053e:	2010      	movs	r0, #16
 8000540:	f001 fd5f 	bl	8002002 <HAL_NVIC_EnableIRQ>
	/* I2C2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C2_IRQn, 1, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	2101      	movs	r1, #1
 8000548:	2018      	movs	r0, #24
 800054a:	f001 fd45 	bl	8001fd8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C2_IRQn);
 800054e:	2018      	movs	r0, #24
 8000550:	f001 fd57 	bl	8002002 <HAL_NVIC_EnableIRQ>
}
 8000554:	46c0      	nop			@ (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000560:	4b1c      	ldr	r3, [pc, #112]	@ (80005d4 <MX_I2C2_Init+0x78>)
 8000562:	4a1d      	ldr	r2, [pc, #116]	@ (80005d8 <MX_I2C2_Init+0x7c>)
 8000564:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10B17DB5;
 8000566:	4b1b      	ldr	r3, [pc, #108]	@ (80005d4 <MX_I2C2_Init+0x78>)
 8000568:	4a1c      	ldr	r2, [pc, #112]	@ (80005dc <MX_I2C2_Init+0x80>)
 800056a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 800056c:	4b19      	ldr	r3, [pc, #100]	@ (80005d4 <MX_I2C2_Init+0x78>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000572:	4b18      	ldr	r3, [pc, #96]	@ (80005d4 <MX_I2C2_Init+0x78>)
 8000574:	2201      	movs	r2, #1
 8000576:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000578:	4b16      	ldr	r3, [pc, #88]	@ (80005d4 <MX_I2C2_Init+0x78>)
 800057a:	2200      	movs	r2, #0
 800057c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800057e:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <MX_I2C2_Init+0x78>)
 8000580:	2200      	movs	r2, #0
 8000582:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000584:	4b13      	ldr	r3, [pc, #76]	@ (80005d4 <MX_I2C2_Init+0x78>)
 8000586:	2200      	movs	r2, #0
 8000588:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800058a:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <MX_I2C2_Init+0x78>)
 800058c:	2200      	movs	r2, #0
 800058e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000590:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <MX_I2C2_Init+0x78>)
 8000592:	2280      	movs	r2, #128	@ 0x80
 8000594:	0292      	lsls	r2, r2, #10
 8000596:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000598:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <MX_I2C2_Init+0x78>)
 800059a:	0018      	movs	r0, r3
 800059c:	f002 f9c2 	bl	8002924 <HAL_I2C_Init>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d001      	beq.n	80005a8 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 80005a4:	f001 f9d0 	bl	8001948 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005a8:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <MX_I2C2_Init+0x78>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	0018      	movs	r0, r3
 80005ae:	f004 fde5 	bl	800517c <HAL_I2CEx_ConfigAnalogFilter>
 80005b2:	1e03      	subs	r3, r0, #0
 80005b4:	d001      	beq.n	80005ba <MX_I2C2_Init+0x5e>
	{
		Error_Handler();
 80005b6:	f001 f9c7 	bl	8001948 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <MX_I2C2_Init+0x78>)
 80005bc:	2100      	movs	r1, #0
 80005be:	0018      	movs	r0, r3
 80005c0:	f004 fe28 	bl	8005214 <HAL_I2CEx_ConfigDigitalFilter>
 80005c4:	1e03      	subs	r3, r0, #0
 80005c6:	d001      	beq.n	80005cc <MX_I2C2_Init+0x70>
	{
		Error_Handler();
 80005c8:	f001 f9be 	bl	8001948 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80005cc:	46c0      	nop			@ (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	20000080 	.word	0x20000080
 80005d8:	40005800 	.word	0x40005800
 80005dc:	10b17db5 	.word	0x10b17db5

080005e0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e6:	2310      	movs	r3, #16
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	0018      	movs	r0, r3
 80005ec:	2310      	movs	r3, #16
 80005ee:	001a      	movs	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	f006 f991 	bl	8006918 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	0018      	movs	r0, r3
 80005fa:	230c      	movs	r3, #12
 80005fc:	001a      	movs	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	f006 f98a 	bl	8006918 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000604:	4b21      	ldr	r3, [pc, #132]	@ (800068c <MX_TIM1_Init+0xac>)
 8000606:	4a22      	ldr	r2, [pc, #136]	@ (8000690 <MX_TIM1_Init+0xb0>)
 8000608:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 63999;
 800060a:	4b20      	ldr	r3, [pc, #128]	@ (800068c <MX_TIM1_Init+0xac>)
 800060c:	4a21      	ldr	r2, [pc, #132]	@ (8000694 <MX_TIM1_Init+0xb4>)
 800060e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000610:	4b1e      	ldr	r3, [pc, #120]	@ (800068c <MX_TIM1_Init+0xac>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 124;
 8000616:	4b1d      	ldr	r3, [pc, #116]	@ (800068c <MX_TIM1_Init+0xac>)
 8000618:	227c      	movs	r2, #124	@ 0x7c
 800061a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061c:	4b1b      	ldr	r3, [pc, #108]	@ (800068c <MX_TIM1_Init+0xac>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000622:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <MX_TIM1_Init+0xac>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000628:	4b18      	ldr	r3, [pc, #96]	@ (800068c <MX_TIM1_Init+0xac>)
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800062e:	4b17      	ldr	r3, [pc, #92]	@ (800068c <MX_TIM1_Init+0xac>)
 8000630:	0018      	movs	r0, r3
 8000632:	f005 fd0f 	bl	8006054 <HAL_TIM_Base_Init>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <MX_TIM1_Init+0x5e>
	{
		Error_Handler();
 800063a:	f001 f985 	bl	8001948 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800063e:	2110      	movs	r1, #16
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2280      	movs	r2, #128	@ 0x80
 8000644:	0152      	lsls	r2, r2, #5
 8000646:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000648:	187a      	adds	r2, r7, r1
 800064a:	4b10      	ldr	r3, [pc, #64]	@ (800068c <MX_TIM1_Init+0xac>)
 800064c:	0011      	movs	r1, r2
 800064e:	0018      	movs	r0, r3
 8000650:	f005 febc 	bl	80063cc <HAL_TIM_ConfigClockSource>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8000658:	f001 f976 	bl	8001948 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800066e:	1d3a      	adds	r2, r7, #4
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <MX_TIM1_Init+0xac>)
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f006 f8c9 	bl	800680c <HAL_TIMEx_MasterConfigSynchronization>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM1_Init+0xa2>
	{
		Error_Handler();
 800067e:	f001 f963 	bl	8001948 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b008      	add	sp, #32
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	2000018c 	.word	0x2000018c
 8000690:	40012c00 	.word	0x40012c00
 8000694:	0000f9ff 	.word	0x0000f9ff

08000698 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069e:	2310      	movs	r3, #16
 80006a0:	18fb      	adds	r3, r7, r3
 80006a2:	0018      	movs	r0, r3
 80006a4:	2310      	movs	r3, #16
 80006a6:	001a      	movs	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	f006 f935 	bl	8006918 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	0018      	movs	r0, r3
 80006b2:	230c      	movs	r3, #12
 80006b4:	001a      	movs	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	f006 f92e 	bl	8006918 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <MX_TIM2_Init+0xa0>)
 80006be:	2280      	movs	r2, #128	@ 0x80
 80006c0:	05d2      	lsls	r2, r2, #23
 80006c2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 63999;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <MX_TIM2_Init+0xa0>)
 80006c6:	4a1d      	ldr	r2, [pc, #116]	@ (800073c <MX_TIM2_Init+0xa4>)
 80006c8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <MX_TIM2_Init+0xa0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 249;
 80006d0:	4b19      	ldr	r3, [pc, #100]	@ (8000738 <MX_TIM2_Init+0xa0>)
 80006d2:	22f9      	movs	r2, #249	@ 0xf9
 80006d4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d6:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <MX_TIM2_Init+0xa0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006dc:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <MX_TIM2_Init+0xa0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <MX_TIM2_Init+0xa0>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f005 fcb5 	bl	8006054 <HAL_TIM_Base_Init>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM2_Init+0x5a>
	{
		Error_Handler();
 80006ee:	f001 f92b 	bl	8001948 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f2:	2110      	movs	r1, #16
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2280      	movs	r2, #128	@ 0x80
 80006f8:	0152      	lsls	r2, r2, #5
 80006fa:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006fc:	187a      	adds	r2, r7, r1
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <MX_TIM2_Init+0xa0>)
 8000700:	0011      	movs	r1, r2
 8000702:	0018      	movs	r0, r3
 8000704:	f005 fe62 	bl	80063cc <HAL_TIM_ConfigClockSource>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 800070c:	f001 f91c 	bl	8001948 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800071c:	1d3a      	adds	r2, r7, #4
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <MX_TIM2_Init+0xa0>)
 8000720:	0011      	movs	r1, r2
 8000722:	0018      	movs	r0, r3
 8000724:	f006 f872 	bl	800680c <HAL_TIMEx_MasterConfigSynchronization>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM2_Init+0x98>
	{
		Error_Handler();
 800072c:	f001 f90c 	bl	8001948 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b008      	add	sp, #32
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200001d8 	.word	0x200001d8
 800073c:	0000f9ff 	.word	0x0000f9ff

08000740 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000746:	2310      	movs	r3, #16
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	0018      	movs	r0, r3
 800074c:	2310      	movs	r3, #16
 800074e:	001a      	movs	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	f006 f8e1 	bl	8006918 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	0018      	movs	r0, r3
 800075a:	230c      	movs	r3, #12
 800075c:	001a      	movs	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	f006 f8da 	bl	8006918 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <MX_TIM3_Init+0xa0>)
 8000766:	4a1f      	ldr	r2, [pc, #124]	@ (80007e4 <MX_TIM3_Init+0xa4>)
 8000768:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 63999;
 800076a:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <MX_TIM3_Init+0xa0>)
 800076c:	4a1e      	ldr	r2, [pc, #120]	@ (80007e8 <MX_TIM3_Init+0xa8>)
 800076e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <MX_TIM3_Init+0xa0>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <MX_TIM3_Init+0xa0>)
 8000778:	4a1c      	ldr	r2, [pc, #112]	@ (80007ec <MX_TIM3_Init+0xac>)
 800077a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_TIM3_Init+0xa0>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <MX_TIM3_Init+0xa0>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000788:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_TIM3_Init+0xa0>)
 800078a:	0018      	movs	r0, r3
 800078c:	f005 fc62 	bl	8006054 <HAL_TIM_Base_Init>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM3_Init+0x58>
	{
		Error_Handler();
 8000794:	f001 f8d8 	bl	8001948 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000798:	2110      	movs	r1, #16
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	0152      	lsls	r2, r2, #5
 80007a0:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007a2:	187a      	adds	r2, r7, r1
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_TIM3_Init+0xa0>)
 80007a6:	0011      	movs	r1, r2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f005 fe0f 	bl	80063cc <HAL_TIM_ConfigClockSource>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 80007b2:	f001 f8c9 	bl	8001948 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007c2:	1d3a      	adds	r2, r7, #4
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_TIM3_Init+0xa0>)
 80007c6:	0011      	movs	r1, r2
 80007c8:	0018      	movs	r0, r3
 80007ca:	f006 f81f 	bl	800680c <HAL_TIMEx_MasterConfigSynchronization>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM3_Init+0x96>
	{
		Error_Handler();
 80007d2:	f001 f8b9 	bl	8001948 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b008      	add	sp, #32
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	20000224 	.word	0x20000224
 80007e4:	40000400 	.word	0x40000400
 80007e8:	0000f9ff 	.word	0x0000f9ff
 80007ec:	000003e7 	.word	0x000003e7

080007f0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MX_DMA_Init+0x28>)
 80007f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80007fa:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <MX_DMA_Init+0x28>)
 80007fc:	2101      	movs	r1, #1
 80007fe:	430a      	orrs	r2, r1
 8000800:	639a      	str	r2, [r3, #56]	@ 0x38
 8000802:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <MX_DMA_Init+0x28>)
 8000804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000806:	2201      	movs	r2, #1
 8000808:	4013      	ands	r3, r2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b002      	add	sp, #8
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	40021000 	.word	0x40021000

0800081c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b08b      	sub	sp, #44	@ 0x2c
 8000820:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	2414      	movs	r4, #20
 8000824:	193b      	adds	r3, r7, r4
 8000826:	0018      	movs	r0, r3
 8000828:	2314      	movs	r3, #20
 800082a:	001a      	movs	r2, r3
 800082c:	2100      	movs	r1, #0
 800082e:	f006 f873 	bl	8006918 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b8b      	ldr	r3, [pc, #556]	@ (8000a60 <MX_GPIO_Init+0x244>)
 8000834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000836:	4b8a      	ldr	r3, [pc, #552]	@ (8000a60 <MX_GPIO_Init+0x244>)
 8000838:	2104      	movs	r1, #4
 800083a:	430a      	orrs	r2, r1
 800083c:	635a      	str	r2, [r3, #52]	@ 0x34
 800083e:	4b88      	ldr	r3, [pc, #544]	@ (8000a60 <MX_GPIO_Init+0x244>)
 8000840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000842:	2204      	movs	r2, #4
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800084a:	4b85      	ldr	r3, [pc, #532]	@ (8000a60 <MX_GPIO_Init+0x244>)
 800084c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800084e:	4b84      	ldr	r3, [pc, #528]	@ (8000a60 <MX_GPIO_Init+0x244>)
 8000850:	2120      	movs	r1, #32
 8000852:	430a      	orrs	r2, r1
 8000854:	635a      	str	r2, [r3, #52]	@ 0x34
 8000856:	4b82      	ldr	r3, [pc, #520]	@ (8000a60 <MX_GPIO_Init+0x244>)
 8000858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800085a:	2220      	movs	r2, #32
 800085c:	4013      	ands	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b7f      	ldr	r3, [pc, #508]	@ (8000a60 <MX_GPIO_Init+0x244>)
 8000864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000866:	4b7e      	ldr	r3, [pc, #504]	@ (8000a60 <MX_GPIO_Init+0x244>)
 8000868:	2101      	movs	r1, #1
 800086a:	430a      	orrs	r2, r1
 800086c:	635a      	str	r2, [r3, #52]	@ 0x34
 800086e:	4b7c      	ldr	r3, [pc, #496]	@ (8000a60 <MX_GPIO_Init+0x244>)
 8000870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000872:	2201      	movs	r2, #1
 8000874:	4013      	ands	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b79      	ldr	r3, [pc, #484]	@ (8000a60 <MX_GPIO_Init+0x244>)
 800087c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800087e:	4b78      	ldr	r3, [pc, #480]	@ (8000a60 <MX_GPIO_Init+0x244>)
 8000880:	2102      	movs	r1, #2
 8000882:	430a      	orrs	r2, r1
 8000884:	635a      	str	r2, [r3, #52]	@ 0x34
 8000886:	4b76      	ldr	r3, [pc, #472]	@ (8000a60 <MX_GPIO_Init+0x244>)
 8000888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800088a:	2202      	movs	r2, #2
 800088c:	4013      	ands	r3, r2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	4b73      	ldr	r3, [pc, #460]	@ (8000a60 <MX_GPIO_Init+0x244>)
 8000894:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000896:	4b72      	ldr	r3, [pc, #456]	@ (8000a60 <MX_GPIO_Init+0x244>)
 8000898:	2108      	movs	r1, #8
 800089a:	430a      	orrs	r2, r1
 800089c:	635a      	str	r2, [r3, #52]	@ 0x34
 800089e:	4b70      	ldr	r3, [pc, #448]	@ (8000a60 <MX_GPIO_Init+0x244>)
 80008a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008a2:	2208      	movs	r2, #8
 80008a4:	4013      	ands	r3, r2
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, FP_MB1_PWRLED_Pin|FP_MB2_PWRLED_Pin|CPU_PSON_Pin|MB1_PWR_SW_Pin, GPIO_PIN_RESET);
 80008aa:	496e      	ldr	r1, [pc, #440]	@ (8000a64 <MX_GPIO_Init+0x248>)
 80008ac:	4b6e      	ldr	r3, [pc, #440]	@ (8000a68 <MX_GPIO_Init+0x24c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 ffef 	bl	8002894 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, SGPIO_I2C2_RES_G_Pin|SGPIO_I2C2_RES_Pin|SGPIO_I2C1_RES_Pin, GPIO_PIN_SET);
 80008b6:	23c4      	movs	r3, #196	@ 0xc4
 80008b8:	01db      	lsls	r3, r3, #7
 80008ba:	486b      	ldr	r0, [pc, #428]	@ (8000a68 <MX_GPIO_Init+0x24c>)
 80008bc:	2201      	movs	r2, #1
 80008be:	0019      	movs	r1, r3
 80008c0:	f001 ffe8 	bl	8002894 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, MB1_STATUS_LED_Pin|MB2_STATUS_LED_Pin, GPIO_PIN_RESET);
 80008c4:	23a0      	movs	r3, #160	@ 0xa0
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	2200      	movs	r2, #0
 80008ca:	2150      	movs	r1, #80	@ 0x50
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 ffe1 	bl	8002894 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SGPIO_I2C3_RES_Pin|SGPIO_I2C3RES_G_Pin, GPIO_PIN_SET);
 80008d2:	4b66      	ldr	r3, [pc, #408]	@ (8000a6c <MX_GPIO_Init+0x250>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	2106      	movs	r1, #6
 80008d8:	0018      	movs	r0, r3
 80008da:	f001 ffdb 	bl	8002894 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, SGPIO_I2C1_RES_G_Pin|TEMP_I2C2_RES_Pin|TEMP_I2C1_RES_Pin, GPIO_PIN_SET);
 80008de:	4b64      	ldr	r3, [pc, #400]	@ (8000a70 <MX_GPIO_Init+0x254>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	2107      	movs	r1, #7
 80008e4:	0018      	movs	r0, r3
 80008e6:	f001 ffd5 	bl	8002894 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : FP_MB1_PWRLED_Pin SGPIO_I2C2_RES_G_Pin SGPIO_I2C2_RES_Pin FP_MB2_PWRLED_Pin
                           CPU_PSON_Pin MB1_PWR_SW_Pin SGPIO_I2C1_RES_Pin */
	GPIO_InitStruct.Pin = FP_MB1_PWRLED_Pin|SGPIO_I2C2_RES_G_Pin|SGPIO_I2C2_RES_Pin|FP_MB2_PWRLED_Pin
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	4a61      	ldr	r2, [pc, #388]	@ (8000a74 <MX_GPIO_Init+0x258>)
 80008ee:	601a      	str	r2, [r3, #0]
			|CPU_PSON_Pin|MB1_PWR_SW_Pin|SGPIO_I2C1_RES_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	2201      	movs	r2, #1
 80008f4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000902:	193b      	adds	r3, r7, r4
 8000904:	4a58      	ldr	r2, [pc, #352]	@ (8000a68 <MX_GPIO_Init+0x24c>)
 8000906:	0019      	movs	r1, r3
 8000908:	0010      	movs	r0, r2
 800090a:	f001 fe5f 	bl	80025cc <HAL_GPIO_Init>

	/*Configure GPIO pins : D_DRIVE4_ACTIVITY_Pin B_DRIVE4_ACTIVITY_Pin B_DRIVE3_ACTIVITY_Pin B_DRIVE2_ACTIVITY_Pin
                           C_DRIVE1_ACTIVITY_Pin C_DRIVE2_ACTIVITY_Pin E_DRIVE1_ACTIVITY_Pin */
	GPIO_InitStruct.Pin = D_DRIVE4_ACTIVITY_Pin|B_DRIVE4_ACTIVITY_Pin|B_DRIVE3_ACTIVITY_Pin|B_DRIVE2_ACTIVITY_Pin
 800090e:	193b      	adds	r3, r7, r4
 8000910:	4a59      	ldr	r2, [pc, #356]	@ (8000a78 <MX_GPIO_Init+0x25c>)
 8000912:	601a      	str	r2, [r3, #0]
			|C_DRIVE1_ACTIVITY_Pin|C_DRIVE2_ACTIVITY_Pin|E_DRIVE1_ACTIVITY_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000920:	193b      	adds	r3, r7, r4
 8000922:	4a51      	ldr	r2, [pc, #324]	@ (8000a68 <MX_GPIO_Init+0x24c>)
 8000924:	0019      	movs	r1, r3
 8000926:	0010      	movs	r0, r2
 8000928:	f001 fe50 	bl	80025cc <HAL_GPIO_Init>

	/*Configure GPIO pins : MB1_BITCH_Pin MB2_BITCH_Pin CPU_PWROK_Pin A_DRIVE4_ACTIVITY_Pin
                           B_DRIVE1_ACTIVITY_Pin D_DRIVE1_ACTIVITY_Pin D_DRIVE2_ACTIVITY_Pin D_DRIVE3_ACTIVITY_Pin */
	GPIO_InitStruct.Pin = MB1_BITCH_Pin|MB2_BITCH_Pin|CPU_PWROK_Pin|A_DRIVE4_ACTIVITY_Pin
 800092c:	193b      	adds	r3, r7, r4
 800092e:	4a53      	ldr	r2, [pc, #332]	@ (8000a7c <MX_GPIO_Init+0x260>)
 8000930:	601a      	str	r2, [r3, #0]
			|B_DRIVE1_ACTIVITY_Pin|D_DRIVE1_ACTIVITY_Pin|D_DRIVE2_ACTIVITY_Pin|D_DRIVE3_ACTIVITY_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	193a      	adds	r2, r7, r4
 8000940:	23a0      	movs	r3, #160	@ 0xa0
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	0011      	movs	r1, r2
 8000946:	0018      	movs	r0, r3
 8000948:	f001 fe40 	bl	80025cc <HAL_GPIO_Init>

	/*Configure GPIO pins : MB1_STATUS_LED_Pin MB2_STATUS_LED_Pin */
	GPIO_InitStruct.Pin = MB1_STATUS_LED_Pin|MB2_STATUS_LED_Pin;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2250      	movs	r2, #80	@ 0x50
 8000950:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2201      	movs	r2, #1
 8000956:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	193b      	adds	r3, r7, r4
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	193a      	adds	r2, r7, r4
 8000966:	23a0      	movs	r3, #160	@ 0xa0
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	0011      	movs	r1, r2
 800096c:	0018      	movs	r0, r3
 800096e:	f001 fe2d 	bl	80025cc <HAL_GPIO_Init>

	/*Configure GPIO pins : MB1_ATTACH_Pin A_DRIVE1_ACTIVITY_Pin A_DRIVE2_ACTIVITY_Pin A_DRIVE3_ACTIVITY_Pin
                           F_DRIVE4_ACTIVITY_Pin F_DRIVE3_ACTIVITY_Pin F_DRIVE2_ACTIVITY_Pin F_DRIVE1_ACTIVITY_Pin
                           E_DRIVE4_ACTIVITY_Pin E_DRIVE3_ACTIVITY_Pin E_DRIVE2_ACTIVITY_Pin */
	GPIO_InitStruct.Pin = MB1_ATTACH_Pin|A_DRIVE1_ACTIVITY_Pin|A_DRIVE2_ACTIVITY_Pin|A_DRIVE3_ACTIVITY_Pin
 8000972:	193b      	adds	r3, r7, r4
 8000974:	4a42      	ldr	r2, [pc, #264]	@ (8000a80 <MX_GPIO_Init+0x264>)
 8000976:	601a      	str	r2, [r3, #0]
			|F_DRIVE4_ACTIVITY_Pin|F_DRIVE3_ACTIVITY_Pin|F_DRIVE2_ACTIVITY_Pin|F_DRIVE1_ACTIVITY_Pin
			|E_DRIVE4_ACTIVITY_Pin|E_DRIVE3_ACTIVITY_Pin|E_DRIVE2_ACTIVITY_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2200      	movs	r2, #0
 800097c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	193b      	adds	r3, r7, r4
 8000986:	4a39      	ldr	r2, [pc, #228]	@ (8000a6c <MX_GPIO_Init+0x250>)
 8000988:	0019      	movs	r1, r3
 800098a:	0010      	movs	r0, r2
 800098c:	f001 fe1e 	bl	80025cc <HAL_GPIO_Init>

	/*Configure GPIO pins : SGPIO_I2C3_RES_Pin SGPIO_I2C3RES_G_Pin */
	GPIO_InitStruct.Pin = SGPIO_I2C3_RES_Pin|SGPIO_I2C3RES_G_Pin;
 8000990:	193b      	adds	r3, r7, r4
 8000992:	2206      	movs	r2, #6
 8000994:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	193b      	adds	r3, r7, r4
 8000998:	2201      	movs	r2, #1
 800099a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	4a30      	ldr	r2, [pc, #192]	@ (8000a6c <MX_GPIO_Init+0x250>)
 80009ac:	0019      	movs	r1, r3
 80009ae:	0010      	movs	r0, r2
 80009b0:	f001 fe0c 	bl	80025cc <HAL_GPIO_Init>

	/*Configure GPIO pins : C_DRIVE3_ACTIVITY_Pin C_DRIVE4_ACTIVITY_Pin MB2_ATTACH_Pin MB2_PWR_SW_Pin */
	GPIO_InitStruct.Pin = C_DRIVE3_ACTIVITY_Pin|C_DRIVE4_ACTIVITY_Pin|MB2_ATTACH_Pin|MB2_PWR_SW_Pin;
 80009b4:	0021      	movs	r1, r4
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	22d8      	movs	r2, #216	@ 0xd8
 80009ba:	0092      	lsls	r2, r2, #2
 80009bc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	000c      	movs	r4, r1
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2200      	movs	r2, #0
 80009c4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	4a28      	ldr	r2, [pc, #160]	@ (8000a70 <MX_GPIO_Init+0x254>)
 80009d0:	0019      	movs	r1, r3
 80009d2:	0010      	movs	r0, r2
 80009d4:	f001 fdfa 	bl	80025cc <HAL_GPIO_Init>

	/*Configure GPIO pin : FP_MB1_PWR_SW_Pin */
	GPIO_InitStruct.Pin = FP_MB1_PWR_SW_Pin;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	2280      	movs	r2, #128	@ 0x80
 80009dc:	0212      	lsls	r2, r2, #8
 80009de:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	22c4      	movs	r2, #196	@ 0xc4
 80009e4:	0392      	lsls	r2, r2, #14
 80009e6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	2201      	movs	r2, #1
 80009ec:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(FP_MB1_PWR_SW_GPIO_Port, &GPIO_InitStruct);
 80009ee:	193a      	adds	r2, r7, r4
 80009f0:	23a0      	movs	r3, #160	@ 0xa0
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f001 fde8 	bl	80025cc <HAL_GPIO_Init>

	/*Configure GPIO pin : FP_MB2_PWR_SW_Pin */
	GPIO_InitStruct.Pin = FP_MB2_PWR_SW_Pin;
 80009fc:	0021      	movs	r1, r4
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2280      	movs	r2, #128	@ 0x80
 8000a02:	0052      	lsls	r2, r2, #1
 8000a04:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	22c4      	movs	r2, #196	@ 0xc4
 8000a0a:	0392      	lsls	r2, r2, #14
 8000a0c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2201      	movs	r2, #1
 8000a12:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(FP_MB2_PWR_SW_GPIO_Port, &GPIO_InitStruct);
 8000a14:	000c      	movs	r4, r1
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	4a13      	ldr	r2, [pc, #76]	@ (8000a68 <MX_GPIO_Init+0x24c>)
 8000a1a:	0019      	movs	r1, r3
 8000a1c:	0010      	movs	r0, r2
 8000a1e:	f001 fdd5 	bl	80025cc <HAL_GPIO_Init>

	/*Configure GPIO pins : SGPIO_I2C1_RES_G_Pin TEMP_I2C2_RES_Pin TEMP_I2C1_RES_Pin */
	GPIO_InitStruct.Pin = SGPIO_I2C1_RES_G_Pin|TEMP_I2C2_RES_Pin|TEMP_I2C1_RES_Pin;
 8000a22:	0021      	movs	r1, r4
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2207      	movs	r2, #7
 8000a28:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a70 <MX_GPIO_Init+0x254>)
 8000a40:	0019      	movs	r1, r3
 8000a42:	0010      	movs	r0, r2
 8000a44:	f001 fdc2 	bl	80025cc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	2007      	movs	r0, #7
 8000a4e:	f001 fac3 	bl	8001fd8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a52:	2007      	movs	r0, #7
 8000a54:	f001 fad5 	bl	8002002 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a58:	46c0      	nop			@ (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b00b      	add	sp, #44	@ 0x2c
 8000a5e:	bd90      	pop	{r4, r7, pc}
 8000a60:	40021000 	.word	0x40021000
 8000a64:	00000831 	.word	0x00000831
 8000a68:	50000800 	.word	0x50000800
 8000a6c:	50000400 	.word	0x50000400
 8000a70:	50000c00 	.word	0x50000c00
 8000a74:	00006a31 	.word	0x00006a31
 8000a78:	000084ce 	.word	0x000084ce
 8000a7c:	00001fa8 	.word	0x00001fa8
 8000a80:	0000e3f9 	.word	0x0000e3f9

08000a84 <ResetBus>:

	}
}

void ResetBus()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	flag_update = 10;
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <ResetBus+0xe4>)
 8000a8a:	220a      	movs	r2, #10
 8000a8c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TEMP_I2C1_RES_GPIO_Port, TEMP_I2C1_RES_Pin, RESET);
 8000a8e:	4b37      	ldr	r3, [pc, #220]	@ (8000b6c <ResetBus+0xe8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	2104      	movs	r1, #4
 8000a94:	0018      	movs	r0, r3
 8000a96:	f001 fefd 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_G_GPIO_Port, SGPIO_I2C1_RES_G_Pin, RESET);
 8000a9a:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <ResetBus+0xe8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f001 fef7 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_GPIO_Port, SGPIO_I2C1_RES_Pin, RESET);
 8000aa6:	2380      	movs	r3, #128	@ 0x80
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4831      	ldr	r0, [pc, #196]	@ (8000b70 <ResetBus+0xec>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	0019      	movs	r1, r3
 8000ab0:	f001 fef0 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3RES_G_GPIO_Port, SGPIO_I2C3RES_G_Pin, RESET);
 8000ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8000b74 <ResetBus+0xf0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2104      	movs	r1, #4
 8000aba:	0018      	movs	r0, r3
 8000abc:	f001 feea 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3_RES_GPIO_Port, SGPIO_I2C3_RES_Pin, RESET);
 8000ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b74 <ResetBus+0xf0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 fee4 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_GPIO_Port, SGPIO_I2C2_RES_Pin, RESET);
 8000acc:	2380      	movs	r3, #128	@ 0x80
 8000ace:	01db      	lsls	r3, r3, #7
 8000ad0:	4827      	ldr	r0, [pc, #156]	@ (8000b70 <ResetBus+0xec>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	f001 fedd 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_G_GPIO_Port, SGPIO_I2C2_RES_G_Pin, RESET);
 8000ada:	2380      	movs	r3, #128	@ 0x80
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	4824      	ldr	r0, [pc, #144]	@ (8000b70 <ResetBus+0xec>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	0019      	movs	r1, r3
 8000ae4:	f001 fed6 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_I2C2_RES_GPIO_Port, TEMP_I2C2_RES_Pin, RESET);
 8000ae8:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <ResetBus+0xe8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	2102      	movs	r1, #2
 8000aee:	0018      	movs	r0, r3
 8000af0:	f001 fed0 	bl	8002894 <HAL_GPIO_WritePin>

	flag_update = 11;
 8000af4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b68 <ResetBus+0xe4>)
 8000af6:	220b      	movs	r2, #11
 8000af8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TEMP_I2C1_RES_GPIO_Port, TEMP_I2C1_RES_Pin, SET);
 8000afa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <ResetBus+0xe8>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	2104      	movs	r1, #4
 8000b00:	0018      	movs	r0, r3
 8000b02:	f001 fec7 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_G_GPIO_Port, SGPIO_I2C1_RES_G_Pin, SET);
 8000b06:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <ResetBus+0xe8>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f001 fec1 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_GPIO_Port, SGPIO_I2C1_RES_Pin, SET);
 8000b12:	2380      	movs	r3, #128	@ 0x80
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4816      	ldr	r0, [pc, #88]	@ (8000b70 <ResetBus+0xec>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	f001 feba 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3RES_G_GPIO_Port, SGPIO_I2C3RES_G_Pin, SET);
 8000b20:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <ResetBus+0xf0>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	2104      	movs	r1, #4
 8000b26:	0018      	movs	r0, r3
 8000b28:	f001 feb4 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3_RES_GPIO_Port, SGPIO_I2C3_RES_Pin, SET);
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <ResetBus+0xf0>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2102      	movs	r1, #2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f001 feae 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_GPIO_Port, SGPIO_I2C2_RES_Pin, SET);
 8000b38:	2380      	movs	r3, #128	@ 0x80
 8000b3a:	01db      	lsls	r3, r3, #7
 8000b3c:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <ResetBus+0xec>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	0019      	movs	r1, r3
 8000b42:	f001 fea7 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_G_GPIO_Port, SGPIO_I2C2_RES_G_Pin, SET);
 8000b46:	2380      	movs	r3, #128	@ 0x80
 8000b48:	019b      	lsls	r3, r3, #6
 8000b4a:	4809      	ldr	r0, [pc, #36]	@ (8000b70 <ResetBus+0xec>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	0019      	movs	r1, r3
 8000b50:	f001 fea0 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_I2C2_RES_GPIO_Port, TEMP_I2C2_RES_Pin, SET);
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <ResetBus+0xe8>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	2102      	movs	r1, #2
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 fe9a 	bl	8002894 <HAL_GPIO_WritePin>

}
 8000b60:	46c0      	nop			@ (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	20000271 	.word	0x20000271
 8000b6c:	50000c00 	.word	0x50000c00
 8000b70:	50000800 	.word	0x50000800
 8000b74:	50000400 	.word	0x50000400

08000b78 <Set_Led>:

void Set_Led()
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	HAL_I2C_Master_Transmit_DMA(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1);
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <Set_Led+0x78>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	18db      	adds	r3, r3, r3
 8000b82:	b299      	uxth	r1, r3
 8000b84:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf4 <Set_Led+0x7c>)
 8000b86:	481c      	ldr	r0, [pc, #112]	@ (8000bf8 <Set_Led+0x80>)
 8000b88:	2301      	movs	r3, #1
 8000b8a:	f002 f89b 	bl	8002cc4 <HAL_I2C_Master_Transmit_DMA>
	HAL_I2C_Master_Transmit_DMA(&hi2c2, (LED_adr << 1), channel_one, 3);
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <Set_Led+0x84>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	18db      	adds	r3, r3, r3
 8000b94:	b299      	uxth	r1, r3
 8000b96:	4a1a      	ldr	r2, [pc, #104]	@ (8000c00 <Set_Led+0x88>)
 8000b98:	4817      	ldr	r0, [pc, #92]	@ (8000bf8 <Set_Led+0x80>)
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	f002 f892 	bl	8002cc4 <HAL_I2C_Master_Transmit_DMA>
	HAL_I2C_Master_Transmit_DMA(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1);
 8000ba0:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <Set_Led+0x78>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	18db      	adds	r3, r3, r3
 8000ba6:	b299      	uxth	r1, r3
 8000ba8:	4a16      	ldr	r2, [pc, #88]	@ (8000c04 <Set_Led+0x8c>)
 8000baa:	4813      	ldr	r0, [pc, #76]	@ (8000bf8 <Set_Led+0x80>)
 8000bac:	2301      	movs	r3, #1
 8000bae:	f002 f889 	bl	8002cc4 <HAL_I2C_Master_Transmit_DMA>
	HAL_I2C_Master_Transmit_DMA(&hi2c2, (LED_adr << 1), channel_two, 3);
 8000bb2:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <Set_Led+0x84>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	18db      	adds	r3, r3, r3
 8000bb8:	b299      	uxth	r1, r3
 8000bba:	4a13      	ldr	r2, [pc, #76]	@ (8000c08 <Set_Led+0x90>)
 8000bbc:	480e      	ldr	r0, [pc, #56]	@ (8000bf8 <Set_Led+0x80>)
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	f002 f880 	bl	8002cc4 <HAL_I2C_Master_Transmit_DMA>
	HAL_I2C_Master_Transmit_DMA(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1);
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <Set_Led+0x78>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	18db      	adds	r3, r3, r3
 8000bca:	b299      	uxth	r1, r3
 8000bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8000c0c <Set_Led+0x94>)
 8000bce:	480a      	ldr	r0, [pc, #40]	@ (8000bf8 <Set_Led+0x80>)
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f002 f877 	bl	8002cc4 <HAL_I2C_Master_Transmit_DMA>
	HAL_I2C_Master_Transmit_DMA(&hi2c2, (LED_adr << 1), channel_three, 3);
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <Set_Led+0x84>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	18db      	adds	r3, r3, r3
 8000bdc:	b299      	uxth	r1, r3
 8000bde:	4a0c      	ldr	r2, [pc, #48]	@ (8000c10 <Set_Led+0x98>)
 8000be0:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <Set_Led+0x80>)
 8000be2:	2303      	movs	r3, #3
 8000be4:	f002 f86e 	bl	8002cc4 <HAL_I2C_Master_Transmit_DMA>
}
 8000be8:	46c0      	nop			@ (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	20000049 	.word	0x20000049
 8000bf4:	20000034 	.word	0x20000034
 8000bf8:	20000080 	.word	0x20000080
 8000bfc:	20000047 	.word	0x20000047
 8000c00:	2000004c 	.word	0x2000004c
 8000c04:	20000038 	.word	0x20000038
 8000c08:	20000050 	.word	0x20000050
 8000c0c:	2000003c 	.word	0x2000003c
 8000c10:	20000054 	.word	0x20000054

08000c14 <Set_Led_On>:

void Set_Led_On()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af02      	add	r7, sp, #8
	flag_update = 5;
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <Set_Led_On+0x5c>)
 8000c1c:	2205      	movs	r2, #5
 8000c1e:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_IsDeviceReady(&hi2c2, LED_adr << 1, 3, 100) == HAL_OK) {
 8000c20:	4b14      	ldr	r3, [pc, #80]	@ (8000c74 <Set_Led_On+0x60>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	18db      	adds	r3, r3, r3
 8000c26:	b299      	uxth	r1, r3
 8000c28:	4813      	ldr	r0, [pc, #76]	@ (8000c78 <Set_Led_On+0x64>)
 8000c2a:	2364      	movs	r3, #100	@ 0x64
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	f002 fa79 	bl	8003124 <HAL_I2C_IsDeviceReady>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d10b      	bne.n	8000c4e <Set_Led_On+0x3a>
		HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 8000c36:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <Set_Led_On+0x60>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	18db      	adds	r3, r3, r3
 8000c3c:	b299      	uxth	r1, r3
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c7c <Set_Led_On+0x68>)
 8000c40:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <Set_Led_On+0x64>)
 8000c42:	230a      	movs	r3, #10
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2303      	movs	r3, #3
 8000c48:	f001 ff12 	bl	8002a70 <HAL_I2C_Master_Transmit>
 8000c4c:	e002      	b.n	8000c54 <Set_Led_On+0x40>
	} else {
		flag_update = 7;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <Set_Led_On+0x5c>)
 8000c50:	2207      	movs	r2, #7
 8000c52:	701a      	strb	r2, [r3, #0]
	}


	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), ledbufON, 3, 10);
 8000c54:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <Set_Led_On+0x60>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	18db      	adds	r3, r3, r3
 8000c5a:	b299      	uxth	r1, r3
 8000c5c:	4a08      	ldr	r2, [pc, #32]	@ (8000c80 <Set_Led_On+0x6c>)
 8000c5e:	4806      	ldr	r0, [pc, #24]	@ (8000c78 <Set_Led_On+0x64>)
 8000c60:	230a      	movs	r3, #10
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	2303      	movs	r3, #3
 8000c66:	f001 ff03 	bl	8002a70 <HAL_I2C_Master_Transmit>
}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000271 	.word	0x20000271
 8000c74:	20000047 	.word	0x20000047
 8000c78:	20000080 	.word	0x20000080
 8000c7c:	20000030 	.word	0x20000030
 8000c80:	20000040 	.word	0x20000040

08000c84 <Set_Led_Off>:

void Set_Led_Off()
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <Set_Led_Off+0x38>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	18db      	adds	r3, r3, r3
 8000c90:	b299      	uxth	r1, r3
 8000c92:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc0 <Set_Led_Off+0x3c>)
 8000c94:	480b      	ldr	r0, [pc, #44]	@ (8000cc4 <Set_Led_Off+0x40>)
 8000c96:	230a      	movs	r3, #10
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	f001 fee8 	bl	8002a70 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), ledbufOFF, 3, 10);
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <Set_Led_Off+0x38>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	18db      	adds	r3, r3, r3
 8000ca6:	b299      	uxth	r1, r3
 8000ca8:	4a07      	ldr	r2, [pc, #28]	@ (8000cc8 <Set_Led_Off+0x44>)
 8000caa:	4806      	ldr	r0, [pc, #24]	@ (8000cc4 <Set_Led_Off+0x40>)
 8000cac:	230a      	movs	r3, #10
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	f001 fedd 	bl	8002a70 <HAL_I2C_Master_Transmit>

}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000047 	.word	0x20000047
 8000cc0:	20000030 	.word	0x20000030
 8000cc4:	20000080 	.word	0x20000080
 8000cc8:	20000044 	.word	0x20000044

08000ccc <Led_Init>:
void Led_Init()
{	flag_update = 1;
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	4b36      	ldr	r3, [pc, #216]	@ (8000dac <Led_Init+0xe0>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 8000cd8:	4b35      	ldr	r3, [pc, #212]	@ (8000db0 <Led_Init+0xe4>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	18db      	adds	r3, r3, r3
 8000cde:	b299      	uxth	r1, r3
 8000ce0:	4a34      	ldr	r2, [pc, #208]	@ (8000db4 <Led_Init+0xe8>)
 8000ce2:	4835      	ldr	r0, [pc, #212]	@ (8000db8 <Led_Init+0xec>)
 8000ce4:	230a      	movs	r3, #10
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2301      	movs	r3, #1
 8000cea:	f001 fec1 	bl	8002a70 <HAL_I2C_Master_Transmit>
flag_update = 3;
 8000cee:	4b2f      	ldr	r3, [pc, #188]	@ (8000dac <Led_Init+0xe0>)
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	701a      	strb	r2, [r3, #0]
Set_Led_On();
 8000cf4:	f7ff ff8e 	bl	8000c14 <Set_Led_On>
HAL_Delay(250);
 8000cf8:	20fa      	movs	r0, #250	@ 0xfa
 8000cfa:	f001 f89d 	bl	8001e38 <HAL_Delay>

HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8000db0 <Led_Init+0xe4>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	18db      	adds	r3, r3, r3
 8000d04:	b299      	uxth	r1, r3
 8000d06:	4a2d      	ldr	r2, [pc, #180]	@ (8000dbc <Led_Init+0xf0>)
 8000d08:	482b      	ldr	r0, [pc, #172]	@ (8000db8 <Led_Init+0xec>)
 8000d0a:	230a      	movs	r3, #10
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2301      	movs	r3, #1
 8000d10:	f001 feae 	bl	8002a70 <HAL_I2C_Master_Transmit>
Set_Led_On();
 8000d14:	f7ff ff7e 	bl	8000c14 <Set_Led_On>
HAL_Delay(250);
 8000d18:	20fa      	movs	r0, #250	@ 0xfa
 8000d1a:	f001 f88d 	bl	8001e38 <HAL_Delay>
HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 8000d1e:	4b24      	ldr	r3, [pc, #144]	@ (8000db0 <Led_Init+0xe4>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	18db      	adds	r3, r3, r3
 8000d24:	b299      	uxth	r1, r3
 8000d26:	4a26      	ldr	r2, [pc, #152]	@ (8000dc0 <Led_Init+0xf4>)
 8000d28:	4823      	ldr	r0, [pc, #140]	@ (8000db8 <Led_Init+0xec>)
 8000d2a:	230a      	movs	r3, #10
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	f001 fe9e 	bl	8002a70 <HAL_I2C_Master_Transmit>
Set_Led_On();
 8000d34:	f7ff ff6e 	bl	8000c14 <Set_Led_On>
HAL_Delay(250);
 8000d38:	20fa      	movs	r0, #250	@ 0xfa
 8000d3a:	f001 f87d 	bl	8001e38 <HAL_Delay>
HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000db0 <Led_Init+0xe4>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	18db      	adds	r3, r3, r3
 8000d44:	b299      	uxth	r1, r3
 8000d46:	4a1b      	ldr	r2, [pc, #108]	@ (8000db4 <Led_Init+0xe8>)
 8000d48:	481b      	ldr	r0, [pc, #108]	@ (8000db8 <Led_Init+0xec>)
 8000d4a:	230a      	movs	r3, #10
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2301      	movs	r3, #1
 8000d50:	f001 fe8e 	bl	8002a70 <HAL_I2C_Master_Transmit>
Set_Led_Off();
 8000d54:	f7ff ff96 	bl	8000c84 <Set_Led_Off>
HAL_Delay(250);
 8000d58:	20fa      	movs	r0, #250	@ 0xfa
 8000d5a:	f001 f86d 	bl	8001e38 <HAL_Delay>
HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 8000d5e:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <Led_Init+0xe4>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	18db      	adds	r3, r3, r3
 8000d64:	b299      	uxth	r1, r3
 8000d66:	4a15      	ldr	r2, [pc, #84]	@ (8000dbc <Led_Init+0xf0>)
 8000d68:	4813      	ldr	r0, [pc, #76]	@ (8000db8 <Led_Init+0xec>)
 8000d6a:	230a      	movs	r3, #10
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f001 fe7e 	bl	8002a70 <HAL_I2C_Master_Transmit>
Set_Led_Off();
 8000d74:	f7ff ff86 	bl	8000c84 <Set_Led_Off>
HAL_Delay(250);
 8000d78:	20fa      	movs	r0, #250	@ 0xfa
 8000d7a:	f001 f85d 	bl	8001e38 <HAL_Delay>
HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <Led_Init+0xe4>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	18db      	adds	r3, r3, r3
 8000d84:	b299      	uxth	r1, r3
 8000d86:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc0 <Led_Init+0xf4>)
 8000d88:	480b      	ldr	r0, [pc, #44]	@ (8000db8 <Led_Init+0xec>)
 8000d8a:	230a      	movs	r3, #10
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f001 fe6e 	bl	8002a70 <HAL_I2C_Master_Transmit>
Set_Led_Off();
 8000d94:	f7ff ff76 	bl	8000c84 <Set_Led_Off>
HAL_Delay(250);
 8000d98:	20fa      	movs	r0, #250	@ 0xfa
 8000d9a:	f001 f84d 	bl	8001e38 <HAL_Delay>
flag_update = 2;
 8000d9e:	4b03      	ldr	r3, [pc, #12]	@ (8000dac <Led_Init+0xe0>)
 8000da0:	2202      	movs	r2, #2
 8000da2:	701a      	strb	r2, [r3, #0]
}
 8000da4:	46c0      	nop			@ (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	20000271 	.word	0x20000271
 8000db0:	20000049 	.word	0x20000049
 8000db4:	20000034 	.word	0x20000034
 8000db8:	20000080 	.word	0x20000080
 8000dbc:	20000038 	.word	0x20000038
 8000dc0:	2000003c 	.word	0x2000003c

08000dc4 <Read_disks_connected>:
	}
	//flag_update++;
}

void Read_disks_connected()
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af02      	add	r7, sp, #8
				flag_read = 5;
			}
			if (reg == 0x00) break; // Выход из цикла после обработки reg = 0x00
		}
	}*/
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 1);
 8000dca:	4bcf      	ldr	r3, [pc, #828]	@ (8001108 <Read_disks_connected+0x344>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	18db      	adds	r3, r3, r3
 8000dd0:	b299      	uxth	r1, r3
 8000dd2:	4ace      	ldr	r2, [pc, #824]	@ (800110c <Read_disks_connected+0x348>)
 8000dd4:	48ce      	ldr	r0, [pc, #824]	@ (8001110 <Read_disks_connected+0x34c>)
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f001 fe48 	bl	8002a70 <HAL_I2C_Master_Transmit>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 8000de0:	4bcc      	ldr	r3, [pc, #816]	@ (8001114 <Read_disks_connected+0x350>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	001a      	movs	r2, r3
 8000de6:	4bcc      	ldr	r3, [pc, #816]	@ (8001118 <Read_disks_connected+0x354>)
 8000de8:	0019      	movs	r1, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	f000 f9a6 	bl	800113c <Read_Register>


	if (~Buf_PRSTN[0] & 0x02)		//PRSTN F1
 8000df0:	4bc9      	ldr	r3, [pc, #804]	@ (8001118 <Read_disks_connected+0x354>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	001a      	movs	r2, r3
 8000df6:	2302      	movs	r3, #2
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d103      	bne.n	8000e04 <Read_disks_connected+0x40>
	{
		disks[0].isConnected = 1;
 8000dfc:	4bc7      	ldr	r3, [pc, #796]	@ (800111c <Read_disks_connected+0x358>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e002      	b.n	8000e0a <Read_disks_connected+0x46>
	} else {
		disks[0].isConnected = 0;
 8000e04:	4bc5      	ldr	r3, [pc, #788]	@ (800111c <Read_disks_connected+0x358>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN F2
 8000e0a:	4bc3      	ldr	r3, [pc, #780]	@ (8001118 <Read_disks_connected+0x354>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	001a      	movs	r2, r3
 8000e10:	2308      	movs	r3, #8
 8000e12:	4013      	ands	r3, r2
 8000e14:	d103      	bne.n	8000e1e <Read_disks_connected+0x5a>
	{
		disks[1].isConnected = 1;
 8000e16:	4bc1      	ldr	r3, [pc, #772]	@ (800111c <Read_disks_connected+0x358>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	711a      	strb	r2, [r3, #4]
 8000e1c:	e002      	b.n	8000e24 <Read_disks_connected+0x60>
	} else {
		disks[1].isConnected = 0;
 8000e1e:	4bbf      	ldr	r3, [pc, #764]	@ (800111c <Read_disks_connected+0x358>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	711a      	strb	r2, [r3, #4]
	}

	if (~Buf_PRSTN[0] & 0x20)		//PRSTN F3
 8000e24:	4bbc      	ldr	r3, [pc, #752]	@ (8001118 <Read_disks_connected+0x354>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	001a      	movs	r2, r3
 8000e2a:	2320      	movs	r3, #32
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	d103      	bne.n	8000e38 <Read_disks_connected+0x74>
	{
		disks[2].isConnected = 1;
 8000e30:	4bba      	ldr	r3, [pc, #744]	@ (800111c <Read_disks_connected+0x358>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	721a      	strb	r2, [r3, #8]
 8000e36:	e002      	b.n	8000e3e <Read_disks_connected+0x7a>
	} else {
		disks[2].isConnected = 0;
 8000e38:	4bb8      	ldr	r3, [pc, #736]	@ (800111c <Read_disks_connected+0x358>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	721a      	strb	r2, [r3, #8]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN F4
 8000e3e:	4bb6      	ldr	r3, [pc, #728]	@ (8001118 <Read_disks_connected+0x354>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b25b      	sxtb	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db03      	blt.n	8000e50 <Read_disks_connected+0x8c>
	{
		disks[3].isConnected = 1;
 8000e48:	4bb4      	ldr	r3, [pc, #720]	@ (800111c <Read_disks_connected+0x358>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	731a      	strb	r2, [r3, #12]
 8000e4e:	e002      	b.n	8000e56 <Read_disks_connected+0x92>
	} else {
		disks[3].isConnected = 0;
 8000e50:	4bb2      	ldr	r3, [pc, #712]	@ (800111c <Read_disks_connected+0x358>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	731a      	strb	r2, [r3, #12]
	}

	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 8000e56:	4baf      	ldr	r3, [pc, #700]	@ (8001114 <Read_disks_connected+0x350>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	001a      	movs	r2, r3
 8000e5c:	4bae      	ldr	r3, [pc, #696]	@ (8001118 <Read_disks_connected+0x354>)
 8000e5e:	0019      	movs	r1, r3
 8000e60:	2000      	movs	r0, #0
 8000e62:	f000 f96b 	bl	800113c <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN E1
 8000e66:	4bac      	ldr	r3, [pc, #688]	@ (8001118 <Read_disks_connected+0x354>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	001a      	movs	r2, r3
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d103      	bne.n	8000e7a <Read_disks_connected+0xb6>
	{
		disks[4].isConnected = 1;
 8000e72:	4baa      	ldr	r3, [pc, #680]	@ (800111c <Read_disks_connected+0x358>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	741a      	strb	r2, [r3, #16]
 8000e78:	e002      	b.n	8000e80 <Read_disks_connected+0xbc>
	} else {
		disks[4].isConnected = 0;
 8000e7a:	4ba8      	ldr	r3, [pc, #672]	@ (800111c <Read_disks_connected+0x358>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	741a      	strb	r2, [r3, #16]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN E2
 8000e80:	4ba5      	ldr	r3, [pc, #660]	@ (8001118 <Read_disks_connected+0x354>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	001a      	movs	r2, r3
 8000e86:	2308      	movs	r3, #8
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d103      	bne.n	8000e94 <Read_disks_connected+0xd0>
	{
		disks[5].isConnected = 1;
 8000e8c:	4ba3      	ldr	r3, [pc, #652]	@ (800111c <Read_disks_connected+0x358>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	751a      	strb	r2, [r3, #20]
 8000e92:	e002      	b.n	8000e9a <Read_disks_connected+0xd6>
	} else {
		disks[5].isConnected = 0;
 8000e94:	4ba1      	ldr	r3, [pc, #644]	@ (800111c <Read_disks_connected+0x358>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	751a      	strb	r2, [r3, #20]
	}

	if (~Buf_PRSTN[0] & 0x20)		//PRSTN E3
 8000e9a:	4b9f      	ldr	r3, [pc, #636]	@ (8001118 <Read_disks_connected+0x354>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	001a      	movs	r2, r3
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d103      	bne.n	8000eae <Read_disks_connected+0xea>
	{
		disks[6].isConnected = 1;
 8000ea6:	4b9d      	ldr	r3, [pc, #628]	@ (800111c <Read_disks_connected+0x358>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	761a      	strb	r2, [r3, #24]
 8000eac:	e002      	b.n	8000eb4 <Read_disks_connected+0xf0>
	} else {
		disks[6].isConnected = 0;
 8000eae:	4b9b      	ldr	r3, [pc, #620]	@ (800111c <Read_disks_connected+0x358>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	761a      	strb	r2, [r3, #24]
	}

	if (~Buf_PRSTN[0] & 0x80)		//PRSTN E4
 8000eb4:	4b98      	ldr	r3, [pc, #608]	@ (8001118 <Read_disks_connected+0x354>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db03      	blt.n	8000ec6 <Read_disks_connected+0x102>

	{
		disks[7].isConnected = 1;
 8000ebe:	4b97      	ldr	r3, [pc, #604]	@ (800111c <Read_disks_connected+0x358>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	771a      	strb	r2, [r3, #28]
 8000ec4:	e002      	b.n	8000ecc <Read_disks_connected+0x108>
	} else {
		disks[7].isConnected = 0;
 8000ec6:	4b95      	ldr	r3, [pc, #596]	@ (800111c <Read_disks_connected+0x358>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	771a      	strb	r2, [r3, #28]
	}

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 1);
 8000ecc:	4b8e      	ldr	r3, [pc, #568]	@ (8001108 <Read_disks_connected+0x344>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	18db      	adds	r3, r3, r3
 8000ed2:	b299      	uxth	r1, r3
 8000ed4:	4a92      	ldr	r2, [pc, #584]	@ (8001120 <Read_disks_connected+0x35c>)
 8000ed6:	488e      	ldr	r0, [pc, #568]	@ (8001110 <Read_disks_connected+0x34c>)
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2301      	movs	r3, #1
 8000ede:	f001 fdc7 	bl	8002a70 <HAL_I2C_Master_Transmit>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 8000ee2:	4b8c      	ldr	r3, [pc, #560]	@ (8001114 <Read_disks_connected+0x350>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	001a      	movs	r2, r3
 8000ee8:	4b8b      	ldr	r3, [pc, #556]	@ (8001118 <Read_disks_connected+0x354>)
 8000eea:	0019      	movs	r1, r3
 8000eec:	2001      	movs	r0, #1
 8000eee:	f000 f925 	bl	800113c <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN D1
 8000ef2:	4b89      	ldr	r3, [pc, #548]	@ (8001118 <Read_disks_connected+0x354>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	001a      	movs	r2, r3
 8000ef8:	2302      	movs	r3, #2
 8000efa:	4013      	ands	r3, r2
 8000efc:	d104      	bne.n	8000f08 <Read_disks_connected+0x144>
	{
		disks[8].isConnected = 1;
 8000efe:	4b87      	ldr	r3, [pc, #540]	@ (800111c <Read_disks_connected+0x358>)
 8000f00:	2220      	movs	r2, #32
 8000f02:	2101      	movs	r1, #1
 8000f04:	5499      	strb	r1, [r3, r2]
 8000f06:	e003      	b.n	8000f10 <Read_disks_connected+0x14c>
	} else {
		disks[8].isConnected = 0;
 8000f08:	4b84      	ldr	r3, [pc, #528]	@ (800111c <Read_disks_connected+0x358>)
 8000f0a:	2220      	movs	r2, #32
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN D2
 8000f10:	4b81      	ldr	r3, [pc, #516]	@ (8001118 <Read_disks_connected+0x354>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	001a      	movs	r2, r3
 8000f16:	2308      	movs	r3, #8
 8000f18:	4013      	ands	r3, r2
 8000f1a:	d104      	bne.n	8000f26 <Read_disks_connected+0x162>
	{
		disks[9].isConnected = 1;
 8000f1c:	4b7f      	ldr	r3, [pc, #508]	@ (800111c <Read_disks_connected+0x358>)
 8000f1e:	2224      	movs	r2, #36	@ 0x24
 8000f20:	2101      	movs	r1, #1
 8000f22:	5499      	strb	r1, [r3, r2]
 8000f24:	e003      	b.n	8000f2e <Read_disks_connected+0x16a>
	} else {
		disks[9].isConnected = 0;
 8000f26:	4b7d      	ldr	r3, [pc, #500]	@ (800111c <Read_disks_connected+0x358>)
 8000f28:	2224      	movs	r2, #36	@ 0x24
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN D3
 8000f2e:	4b7a      	ldr	r3, [pc, #488]	@ (8001118 <Read_disks_connected+0x354>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	001a      	movs	r2, r3
 8000f34:	2320      	movs	r3, #32
 8000f36:	4013      	ands	r3, r2
 8000f38:	d104      	bne.n	8000f44 <Read_disks_connected+0x180>
	{
		disks[10].isConnected = 1;
 8000f3a:	4b78      	ldr	r3, [pc, #480]	@ (800111c <Read_disks_connected+0x358>)
 8000f3c:	2228      	movs	r2, #40	@ 0x28
 8000f3e:	2101      	movs	r1, #1
 8000f40:	5499      	strb	r1, [r3, r2]
 8000f42:	e003      	b.n	8000f4c <Read_disks_connected+0x188>
	} else {
		disks[10].isConnected = 0;
 8000f44:	4b75      	ldr	r3, [pc, #468]	@ (800111c <Read_disks_connected+0x358>)
 8000f46:	2228      	movs	r2, #40	@ 0x28
 8000f48:	2100      	movs	r1, #0
 8000f4a:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN D4
 8000f4c:	4b72      	ldr	r3, [pc, #456]	@ (8001118 <Read_disks_connected+0x354>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db04      	blt.n	8000f60 <Read_disks_connected+0x19c>
	{
		disks[11].isConnected = 1;
 8000f56:	4b71      	ldr	r3, [pc, #452]	@ (800111c <Read_disks_connected+0x358>)
 8000f58:	222c      	movs	r2, #44	@ 0x2c
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	5499      	strb	r1, [r3, r2]
 8000f5e:	e003      	b.n	8000f68 <Read_disks_connected+0x1a4>
	} else {
		disks[11].isConnected = 0;
 8000f60:	4b6e      	ldr	r3, [pc, #440]	@ (800111c <Read_disks_connected+0x358>)
 8000f62:	222c      	movs	r2, #44	@ 0x2c
 8000f64:	2100      	movs	r1, #0
 8000f66:	5499      	strb	r1, [r3, r2]
	}
	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 8000f68:	4b6a      	ldr	r3, [pc, #424]	@ (8001114 <Read_disks_connected+0x350>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	4b6a      	ldr	r3, [pc, #424]	@ (8001118 <Read_disks_connected+0x354>)
 8000f70:	0019      	movs	r1, r3
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 f8e2 	bl	800113c <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN C1
 8000f78:	4b67      	ldr	r3, [pc, #412]	@ (8001118 <Read_disks_connected+0x354>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	2302      	movs	r3, #2
 8000f80:	4013      	ands	r3, r2
 8000f82:	d104      	bne.n	8000f8e <Read_disks_connected+0x1ca>
	{
		disks[12].isConnected = 1;
 8000f84:	4b65      	ldr	r3, [pc, #404]	@ (800111c <Read_disks_connected+0x358>)
 8000f86:	2230      	movs	r2, #48	@ 0x30
 8000f88:	2101      	movs	r1, #1
 8000f8a:	5499      	strb	r1, [r3, r2]
 8000f8c:	e003      	b.n	8000f96 <Read_disks_connected+0x1d2>
	} else {
		disks[12].isConnected = 0;
 8000f8e:	4b63      	ldr	r3, [pc, #396]	@ (800111c <Read_disks_connected+0x358>)
 8000f90:	2230      	movs	r2, #48	@ 0x30
 8000f92:	2100      	movs	r1, #0
 8000f94:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN C2
 8000f96:	4b60      	ldr	r3, [pc, #384]	@ (8001118 <Read_disks_connected+0x354>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	2308      	movs	r3, #8
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	d104      	bne.n	8000fac <Read_disks_connected+0x1e8>
	{
		disks[13].isConnected = 1;
 8000fa2:	4b5e      	ldr	r3, [pc, #376]	@ (800111c <Read_disks_connected+0x358>)
 8000fa4:	2234      	movs	r2, #52	@ 0x34
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	5499      	strb	r1, [r3, r2]
 8000faa:	e003      	b.n	8000fb4 <Read_disks_connected+0x1f0>
	} else {
		disks[13].isConnected = 0;
 8000fac:	4b5b      	ldr	r3, [pc, #364]	@ (800111c <Read_disks_connected+0x358>)
 8000fae:	2234      	movs	r2, #52	@ 0x34
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN C3
 8000fb4:	4b58      	ldr	r3, [pc, #352]	@ (8001118 <Read_disks_connected+0x354>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	001a      	movs	r2, r3
 8000fba:	2320      	movs	r3, #32
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d104      	bne.n	8000fca <Read_disks_connected+0x206>
	{
		disks[14].isConnected = 1;
 8000fc0:	4b56      	ldr	r3, [pc, #344]	@ (800111c <Read_disks_connected+0x358>)
 8000fc2:	2238      	movs	r2, #56	@ 0x38
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	5499      	strb	r1, [r3, r2]
 8000fc8:	e003      	b.n	8000fd2 <Read_disks_connected+0x20e>
	} else {
		disks[14].isConnected = 0;
 8000fca:	4b54      	ldr	r3, [pc, #336]	@ (800111c <Read_disks_connected+0x358>)
 8000fcc:	2238      	movs	r2, #56	@ 0x38
 8000fce:	2100      	movs	r1, #0
 8000fd0:	5499      	strb	r1, [r3, r2]
	}

	if (~Buf_PRSTN[0] & 0x80)		//PRSTN C4
 8000fd2:	4b51      	ldr	r3, [pc, #324]	@ (8001118 <Read_disks_connected+0x354>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b25b      	sxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db04      	blt.n	8000fe6 <Read_disks_connected+0x222>
	{
		disks[15].isConnected = 1;
 8000fdc:	4b4f      	ldr	r3, [pc, #316]	@ (800111c <Read_disks_connected+0x358>)
 8000fde:	223c      	movs	r2, #60	@ 0x3c
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	5499      	strb	r1, [r3, r2]
 8000fe4:	e003      	b.n	8000fee <Read_disks_connected+0x22a>
	} else {
		disks[15].isConnected = 0;
 8000fe6:	4b4d      	ldr	r3, [pc, #308]	@ (800111c <Read_disks_connected+0x358>)
 8000fe8:	223c      	movs	r2, #60	@ 0x3c
 8000fea:	2100      	movs	r1, #0
 8000fec:	5499      	strb	r1, [r3, r2]
	}

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 1);
 8000fee:	4b46      	ldr	r3, [pc, #280]	@ (8001108 <Read_disks_connected+0x344>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	18db      	adds	r3, r3, r3
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	4a4b      	ldr	r2, [pc, #300]	@ (8001124 <Read_disks_connected+0x360>)
 8000ff8:	4845      	ldr	r0, [pc, #276]	@ (8001110 <Read_disks_connected+0x34c>)
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2301      	movs	r3, #1
 8001000:	f001 fd36 	bl	8002a70 <HAL_I2C_Master_Transmit>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 8001004:	4b43      	ldr	r3, [pc, #268]	@ (8001114 <Read_disks_connected+0x350>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	001a      	movs	r2, r3
 800100a:	4b43      	ldr	r3, [pc, #268]	@ (8001118 <Read_disks_connected+0x354>)
 800100c:	0019      	movs	r1, r3
 800100e:	2001      	movs	r0, #1
 8001010:	f000 f894 	bl	800113c <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN B1
 8001014:	4b40      	ldr	r3, [pc, #256]	@ (8001118 <Read_disks_connected+0x354>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	001a      	movs	r2, r3
 800101a:	2302      	movs	r3, #2
 800101c:	4013      	ands	r3, r2
 800101e:	d104      	bne.n	800102a <Read_disks_connected+0x266>
	{
		disks[16].isConnected = 1;
 8001020:	4b3e      	ldr	r3, [pc, #248]	@ (800111c <Read_disks_connected+0x358>)
 8001022:	2240      	movs	r2, #64	@ 0x40
 8001024:	2101      	movs	r1, #1
 8001026:	5499      	strb	r1, [r3, r2]
 8001028:	e003      	b.n	8001032 <Read_disks_connected+0x26e>
	} else {
		disks[16].isConnected = 0;
 800102a:	4b3c      	ldr	r3, [pc, #240]	@ (800111c <Read_disks_connected+0x358>)
 800102c:	2240      	movs	r2, #64	@ 0x40
 800102e:	2100      	movs	r1, #0
 8001030:	5499      	strb	r1, [r3, r2]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN B2
 8001032:	4b39      	ldr	r3, [pc, #228]	@ (8001118 <Read_disks_connected+0x354>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	001a      	movs	r2, r3
 8001038:	2308      	movs	r3, #8
 800103a:	4013      	ands	r3, r2
 800103c:	d104      	bne.n	8001048 <Read_disks_connected+0x284>
	{
		disks[17].isConnected = 1;
 800103e:	4b37      	ldr	r3, [pc, #220]	@ (800111c <Read_disks_connected+0x358>)
 8001040:	2244      	movs	r2, #68	@ 0x44
 8001042:	2101      	movs	r1, #1
 8001044:	5499      	strb	r1, [r3, r2]
 8001046:	e003      	b.n	8001050 <Read_disks_connected+0x28c>
	} else {
		disks[17].isConnected = 0;
 8001048:	4b34      	ldr	r3, [pc, #208]	@ (800111c <Read_disks_connected+0x358>)
 800104a:	2244      	movs	r2, #68	@ 0x44
 800104c:	2100      	movs	r1, #0
 800104e:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN B3
 8001050:	4b31      	ldr	r3, [pc, #196]	@ (8001118 <Read_disks_connected+0x354>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	001a      	movs	r2, r3
 8001056:	2320      	movs	r3, #32
 8001058:	4013      	ands	r3, r2
 800105a:	d104      	bne.n	8001066 <Read_disks_connected+0x2a2>
	{
		disks[18].isConnected = 1;
 800105c:	4b2f      	ldr	r3, [pc, #188]	@ (800111c <Read_disks_connected+0x358>)
 800105e:	2248      	movs	r2, #72	@ 0x48
 8001060:	2101      	movs	r1, #1
 8001062:	5499      	strb	r1, [r3, r2]
 8001064:	e003      	b.n	800106e <Read_disks_connected+0x2aa>
	} else {
		disks[18].isConnected = 0;
 8001066:	4b2d      	ldr	r3, [pc, #180]	@ (800111c <Read_disks_connected+0x358>)
 8001068:	2248      	movs	r2, #72	@ 0x48
 800106a:	2100      	movs	r1, #0
 800106c:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN B4
 800106e:	4b2a      	ldr	r3, [pc, #168]	@ (8001118 <Read_disks_connected+0x354>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b25b      	sxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	db04      	blt.n	8001082 <Read_disks_connected+0x2be>
	{
		disks[19].isConnected = 1;
 8001078:	4b28      	ldr	r3, [pc, #160]	@ (800111c <Read_disks_connected+0x358>)
 800107a:	224c      	movs	r2, #76	@ 0x4c
 800107c:	2101      	movs	r1, #1
 800107e:	5499      	strb	r1, [r3, r2]
 8001080:	e003      	b.n	800108a <Read_disks_connected+0x2c6>
	} else {
		disks[19].isConnected = 0;
 8001082:	4b26      	ldr	r3, [pc, #152]	@ (800111c <Read_disks_connected+0x358>)
 8001084:	224c      	movs	r2, #76	@ 0x4c
 8001086:	2100      	movs	r1, #0
 8001088:	5499      	strb	r1, [r3, r2]
	}
	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 800108a:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <Read_disks_connected+0x350>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	001a      	movs	r2, r3
 8001090:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <Read_disks_connected+0x354>)
 8001092:	0019      	movs	r1, r3
 8001094:	2000      	movs	r0, #0
 8001096:	f000 f851 	bl	800113c <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN A1
 800109a:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <Read_disks_connected+0x354>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	001a      	movs	r2, r3
 80010a0:	2302      	movs	r3, #2
 80010a2:	4013      	ands	r3, r2
 80010a4:	d104      	bne.n	80010b0 <Read_disks_connected+0x2ec>
	{
		disks[20].isConnected = 1;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <Read_disks_connected+0x358>)
 80010a8:	2250      	movs	r2, #80	@ 0x50
 80010aa:	2101      	movs	r1, #1
 80010ac:	5499      	strb	r1, [r3, r2]
 80010ae:	e003      	b.n	80010b8 <Read_disks_connected+0x2f4>
	} else {
		disks[20].isConnected = 0;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <Read_disks_connected+0x358>)
 80010b2:	2250      	movs	r2, #80	@ 0x50
 80010b4:	2100      	movs	r1, #0
 80010b6:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN A2
 80010b8:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <Read_disks_connected+0x354>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	001a      	movs	r2, r3
 80010be:	2308      	movs	r3, #8
 80010c0:	4013      	ands	r3, r2
 80010c2:	d104      	bne.n	80010ce <Read_disks_connected+0x30a>
	{
		disks[21].isConnected = 1;
 80010c4:	4b15      	ldr	r3, [pc, #84]	@ (800111c <Read_disks_connected+0x358>)
 80010c6:	2254      	movs	r2, #84	@ 0x54
 80010c8:	2101      	movs	r1, #1
 80010ca:	5499      	strb	r1, [r3, r2]
 80010cc:	e003      	b.n	80010d6 <Read_disks_connected+0x312>
	} else {
		disks[21].isConnected = 0;
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <Read_disks_connected+0x358>)
 80010d0:	2254      	movs	r2, #84	@ 0x54
 80010d2:	2100      	movs	r1, #0
 80010d4:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN A3
 80010d6:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <Read_disks_connected+0x354>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	001a      	movs	r2, r3
 80010dc:	2320      	movs	r3, #32
 80010de:	4013      	ands	r3, r2
 80010e0:	d104      	bne.n	80010ec <Read_disks_connected+0x328>
	{
		disks[22].isConnected = 1;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <Read_disks_connected+0x358>)
 80010e4:	2258      	movs	r2, #88	@ 0x58
 80010e6:	2101      	movs	r1, #1
 80010e8:	5499      	strb	r1, [r3, r2]
 80010ea:	e003      	b.n	80010f4 <Read_disks_connected+0x330>
	} else {
		disks[22].isConnected = 0;
 80010ec:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <Read_disks_connected+0x358>)
 80010ee:	2258      	movs	r2, #88	@ 0x58
 80010f0:	2100      	movs	r1, #0
 80010f2:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN A4
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <Read_disks_connected+0x354>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db14      	blt.n	8001128 <Read_disks_connected+0x364>
	{
		disks[23].isConnected = 1;
 80010fe:	4b07      	ldr	r3, [pc, #28]	@ (800111c <Read_disks_connected+0x358>)
 8001100:	225c      	movs	r2, #92	@ 0x5c
 8001102:	2101      	movs	r1, #1
 8001104:	5499      	strb	r1, [r3, r2]
	} else {
		disks[23].isConnected = 0;
	}
}
 8001106:	e013      	b.n	8001130 <Read_disks_connected+0x36c>
 8001108:	20000049 	.word	0x20000049
 800110c:	20000034 	.word	0x20000034
 8001110:	20000080 	.word	0x20000080
 8001114:	20000048 	.word	0x20000048
 8001118:	20000274 	.word	0x20000274
 800111c:	20000278 	.word	0x20000278
 8001120:	20000038 	.word	0x20000038
 8001124:	2000003c 	.word	0x2000003c
		disks[23].isConnected = 0;
 8001128:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <Read_disks_connected+0x374>)
 800112a:	225c      	movs	r2, #92	@ 0x5c
 800112c:	2100      	movs	r1, #0
 800112e:	5499      	strb	r1, [r3, r2]
}
 8001130:	46c0      	nop			@ (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	20000278 	.word	0x20000278

0800113c <Read_Register>:

void Read_Register(uint8_t register_pointer, uint8_t* receive_buffer, uint16_t adr_rep)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6039      	str	r1, [r7, #0]
 8001144:	0011      	movs	r1, r2
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	1c02      	adds	r2, r0, #0
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	1c0a      	adds	r2, r1, #0
 8001150:	801a      	strh	r2, [r3, #0]
	//set pointer to register

	HAL_I2C_Master_Transmit_DMA(&hi2c2, (adr_rep << 1), &register_pointer, 1);
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	18db      	adds	r3, r3, r3
 8001158:	b299      	uxth	r1, r3
 800115a:	1dfa      	adds	r2, r7, #7
 800115c:	4808      	ldr	r0, [pc, #32]	@ (8001180 <Read_Register+0x44>)
 800115e:	2301      	movs	r3, #1
 8001160:	f001 fdb0 	bl	8002cc4 <HAL_I2C_Master_Transmit_DMA>
	//receive data to receive_buffer
	HAL_I2C_Master_Receive_DMA(&hi2c2, (adr_rep << 1), receive_buffer, 1);
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	18db      	adds	r3, r3, r3
 800116a:	b299      	uxth	r1, r3
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	4804      	ldr	r0, [pc, #16]	@ (8001180 <Read_Register+0x44>)
 8001170:	2301      	movs	r3, #1
 8001172:	f001 fed1 	bl	8002f18 <HAL_I2C_Master_Receive_DMA>

}
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	20000080 	.word	0x20000080

08001184 <UpdateLEDStates>:

void UpdateLEDStates()
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
	static uint8_t blinkState = 0; // Состояние мигания (0 или 1)
	blinkState = !blinkState;     // �?нвертируем состояние каждые 125 мс (4 Гц)
 800118a:	4b9d      	ldr	r3, [pc, #628]	@ (8001400 <UpdateLEDStates+0x27c>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	425a      	negs	r2, r3
 8001190:	4153      	adcs	r3, r2
 8001192:	b2db      	uxtb	r3, r3
 8001194:	001a      	movs	r2, r3
 8001196:	4b9a      	ldr	r3, [pc, #616]	@ (8001400 <UpdateLEDStates+0x27c>)
 8001198:	701a      	strb	r2, [r3, #0]

	// Очищаем буферы каналов
	channel_one[1] = 0xFF; // Все биты установлены в 1 (светодиоды выключены)
 800119a:	4b9a      	ldr	r3, [pc, #616]	@ (8001404 <UpdateLEDStates+0x280>)
 800119c:	22ff      	movs	r2, #255	@ 0xff
 800119e:	705a      	strb	r2, [r3, #1]
	channel_one[2] = 0xFF;
 80011a0:	4b98      	ldr	r3, [pc, #608]	@ (8001404 <UpdateLEDStates+0x280>)
 80011a2:	22ff      	movs	r2, #255	@ 0xff
 80011a4:	709a      	strb	r2, [r3, #2]
	channel_two[1] = 0xFF;
 80011a6:	4b98      	ldr	r3, [pc, #608]	@ (8001408 <UpdateLEDStates+0x284>)
 80011a8:	22ff      	movs	r2, #255	@ 0xff
 80011aa:	705a      	strb	r2, [r3, #1]
	channel_two[2] = 0xFF;
 80011ac:	4b96      	ldr	r3, [pc, #600]	@ (8001408 <UpdateLEDStates+0x284>)
 80011ae:	22ff      	movs	r2, #255	@ 0xff
 80011b0:	709a      	strb	r2, [r3, #2]
	channel_three[1] = 0xFF;
 80011b2:	4b96      	ldr	r3, [pc, #600]	@ (800140c <UpdateLEDStates+0x288>)
 80011b4:	22ff      	movs	r2, #255	@ 0xff
 80011b6:	705a      	strb	r2, [r3, #1]
	channel_three[2] = 0xFF;
 80011b8:	4b94      	ldr	r3, [pc, #592]	@ (800140c <UpdateLEDStates+0x288>)
 80011ba:	22ff      	movs	r2, #255	@ 0xff
 80011bc:	709a      	strb	r2, [r3, #2]

	// Обновляем состояние светодиодов для каждого диска
	for (int i = 0; i < MAX_DISKS; ++i) {
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	e1e7      	b.n	8001594 <UpdateLEDStates+0x410>
		if (disks[i].isConnected) {
 80011c4:	4b92      	ldr	r3, [pc, #584]	@ (8001410 <UpdateLEDStates+0x28c>)
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	5cd3      	ldrb	r3, [r2, r3]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d100      	bne.n	80011d2 <UpdateLEDStates+0x4e>
 80011d0:	e1dd      	b.n	800158e <UpdateLEDStates+0x40a>
			// Определяем, какой канал использовать
			uint8_t *channel;
			uint8_t greenBit;
			uint8_t redBit;

			if (i < 8) {
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	dc4e      	bgt.n	8001276 <UpdateLEDStates+0xf2>
				channel = channel_one;
 80011d8:	4b8a      	ldr	r3, [pc, #552]	@ (8001404 <UpdateLEDStates+0x280>)
 80011da:	60bb      	str	r3, [r7, #8]
				if (i < 4) {
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	dc24      	bgt.n	800122c <UpdateLEDStates+0xa8>
					// Диски 0-3: первый байт
					greenBit = (i == 0) ? 6 : (i == 1) ? 4 : (i == 2) ? 2 : 1;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00b      	beq.n	8001200 <UpdateLEDStates+0x7c>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d006      	beq.n	80011fc <UpdateLEDStates+0x78>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d101      	bne.n	80011f8 <UpdateLEDStates+0x74>
 80011f4:	2302      	movs	r3, #2
 80011f6:	e004      	b.n	8001202 <UpdateLEDStates+0x7e>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e002      	b.n	8001202 <UpdateLEDStates+0x7e>
 80011fc:	2304      	movs	r3, #4
 80011fe:	e000      	b.n	8001202 <UpdateLEDStates+0x7e>
 8001200:	2306      	movs	r3, #6
 8001202:	1dfa      	adds	r2, r7, #7
 8001204:	7013      	strb	r3, [r2, #0]
					redBit = (i == 0) ? 7 : (i == 1) ? 5 : (i == 2) ? 3 : 0;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00b      	beq.n	8001224 <UpdateLEDStates+0xa0>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d006      	beq.n	8001220 <UpdateLEDStates+0x9c>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d101      	bne.n	800121c <UpdateLEDStates+0x98>
 8001218:	2303      	movs	r3, #3
 800121a:	e004      	b.n	8001226 <UpdateLEDStates+0xa2>
 800121c:	2300      	movs	r3, #0
 800121e:	e002      	b.n	8001226 <UpdateLEDStates+0xa2>
 8001220:	2305      	movs	r3, #5
 8001222:	e000      	b.n	8001226 <UpdateLEDStates+0xa2>
 8001224:	2307      	movs	r3, #7
 8001226:	1dba      	adds	r2, r7, #6
 8001228:	7013      	strb	r3, [r2, #0]
 800122a:	e0c4      	b.n	80013b6 <UpdateLEDStates+0x232>
				} else {
					// Диски 4-7: второй байт
					greenBit = (i == 4) ? 7 : (i == 5) ? 4 : (i == 6) ? 3 : 1;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b04      	cmp	r3, #4
 8001230:	d00b      	beq.n	800124a <UpdateLEDStates+0xc6>
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2b05      	cmp	r3, #5
 8001236:	d006      	beq.n	8001246 <UpdateLEDStates+0xc2>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b06      	cmp	r3, #6
 800123c:	d101      	bne.n	8001242 <UpdateLEDStates+0xbe>
 800123e:	2303      	movs	r3, #3
 8001240:	e004      	b.n	800124c <UpdateLEDStates+0xc8>
 8001242:	2301      	movs	r3, #1
 8001244:	e002      	b.n	800124c <UpdateLEDStates+0xc8>
 8001246:	2304      	movs	r3, #4
 8001248:	e000      	b.n	800124c <UpdateLEDStates+0xc8>
 800124a:	2307      	movs	r3, #7
 800124c:	1dfa      	adds	r2, r7, #7
 800124e:	7013      	strb	r3, [r2, #0]
					redBit = (i == 4) ? 6 : (i == 5) ? 5 : (i == 6) ? 2 : 0;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b04      	cmp	r3, #4
 8001254:	d00b      	beq.n	800126e <UpdateLEDStates+0xea>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2b05      	cmp	r3, #5
 800125a:	d006      	beq.n	800126a <UpdateLEDStates+0xe6>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b06      	cmp	r3, #6
 8001260:	d101      	bne.n	8001266 <UpdateLEDStates+0xe2>
 8001262:	2302      	movs	r3, #2
 8001264:	e004      	b.n	8001270 <UpdateLEDStates+0xec>
 8001266:	2300      	movs	r3, #0
 8001268:	e002      	b.n	8001270 <UpdateLEDStates+0xec>
 800126a:	2305      	movs	r3, #5
 800126c:	e000      	b.n	8001270 <UpdateLEDStates+0xec>
 800126e:	2306      	movs	r3, #6
 8001270:	1dba      	adds	r2, r7, #6
 8001272:	7013      	strb	r3, [r2, #0]
 8001274:	e09f      	b.n	80013b6 <UpdateLEDStates+0x232>
				}
			} else if (i < 16) {
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	dc4e      	bgt.n	800131a <UpdateLEDStates+0x196>
				channel = channel_two;
 800127c:	4b62      	ldr	r3, [pc, #392]	@ (8001408 <UpdateLEDStates+0x284>)
 800127e:	60bb      	str	r3, [r7, #8]
				if (i < 12) {
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b0b      	cmp	r3, #11
 8001284:	dc24      	bgt.n	80012d0 <UpdateLEDStates+0x14c>
					// Диски 8-11: первый байт
					greenBit = (i == 8) ? 6 : (i == 9) ? 5 : (i == 10) ? 2 : 1;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b08      	cmp	r3, #8
 800128a:	d00b      	beq.n	80012a4 <UpdateLEDStates+0x120>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b09      	cmp	r3, #9
 8001290:	d006      	beq.n	80012a0 <UpdateLEDStates+0x11c>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b0a      	cmp	r3, #10
 8001296:	d101      	bne.n	800129c <UpdateLEDStates+0x118>
 8001298:	2302      	movs	r3, #2
 800129a:	e004      	b.n	80012a6 <UpdateLEDStates+0x122>
 800129c:	2301      	movs	r3, #1
 800129e:	e002      	b.n	80012a6 <UpdateLEDStates+0x122>
 80012a0:	2305      	movs	r3, #5
 80012a2:	e000      	b.n	80012a6 <UpdateLEDStates+0x122>
 80012a4:	2306      	movs	r3, #6
 80012a6:	1dfa      	adds	r2, r7, #7
 80012a8:	7013      	strb	r3, [r2, #0]
					redBit = (i == 8) ? 7 : (i == 9) ? 4 : (i == 10) ? 3 : 0;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	d00b      	beq.n	80012c8 <UpdateLEDStates+0x144>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b09      	cmp	r3, #9
 80012b4:	d006      	beq.n	80012c4 <UpdateLEDStates+0x140>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b0a      	cmp	r3, #10
 80012ba:	d101      	bne.n	80012c0 <UpdateLEDStates+0x13c>
 80012bc:	2303      	movs	r3, #3
 80012be:	e004      	b.n	80012ca <UpdateLEDStates+0x146>
 80012c0:	2300      	movs	r3, #0
 80012c2:	e002      	b.n	80012ca <UpdateLEDStates+0x146>
 80012c4:	2304      	movs	r3, #4
 80012c6:	e000      	b.n	80012ca <UpdateLEDStates+0x146>
 80012c8:	2307      	movs	r3, #7
 80012ca:	1dba      	adds	r2, r7, #6
 80012cc:	7013      	strb	r3, [r2, #0]
 80012ce:	e072      	b.n	80013b6 <UpdateLEDStates+0x232>
				} else {
					// Диски 12-15: второй байт
					greenBit = (i == 12) ? 6 : (i == 13) ? 4 : (i == 14) ? 2 : 1;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b0c      	cmp	r3, #12
 80012d4:	d00b      	beq.n	80012ee <UpdateLEDStates+0x16a>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b0d      	cmp	r3, #13
 80012da:	d006      	beq.n	80012ea <UpdateLEDStates+0x166>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b0e      	cmp	r3, #14
 80012e0:	d101      	bne.n	80012e6 <UpdateLEDStates+0x162>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e004      	b.n	80012f0 <UpdateLEDStates+0x16c>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e002      	b.n	80012f0 <UpdateLEDStates+0x16c>
 80012ea:	2304      	movs	r3, #4
 80012ec:	e000      	b.n	80012f0 <UpdateLEDStates+0x16c>
 80012ee:	2306      	movs	r3, #6
 80012f0:	1dfa      	adds	r2, r7, #7
 80012f2:	7013      	strb	r3, [r2, #0]
					redBit = (i == 12) ? 7 : (i == 13) ? 5 : (i == 14) ? 3 : 0;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b0c      	cmp	r3, #12
 80012f8:	d00b      	beq.n	8001312 <UpdateLEDStates+0x18e>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b0d      	cmp	r3, #13
 80012fe:	d006      	beq.n	800130e <UpdateLEDStates+0x18a>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b0e      	cmp	r3, #14
 8001304:	d101      	bne.n	800130a <UpdateLEDStates+0x186>
 8001306:	2303      	movs	r3, #3
 8001308:	e004      	b.n	8001314 <UpdateLEDStates+0x190>
 800130a:	2300      	movs	r3, #0
 800130c:	e002      	b.n	8001314 <UpdateLEDStates+0x190>
 800130e:	2305      	movs	r3, #5
 8001310:	e000      	b.n	8001314 <UpdateLEDStates+0x190>
 8001312:	2307      	movs	r3, #7
 8001314:	1dba      	adds	r2, r7, #6
 8001316:	7013      	strb	r3, [r2, #0]
 8001318:	e04d      	b.n	80013b6 <UpdateLEDStates+0x232>
				}
			} else {
				channel = channel_three;
 800131a:	4b3c      	ldr	r3, [pc, #240]	@ (800140c <UpdateLEDStates+0x288>)
 800131c:	60bb      	str	r3, [r7, #8]
				if (i < 20) {
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2b13      	cmp	r3, #19
 8001322:	dc24      	bgt.n	800136e <UpdateLEDStates+0x1ea>
					// Диски 16-19: первый байт
					greenBit = (i == 16) ? 7 : (i == 17) ? 5 : (i == 18) ? 3 : 1;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b10      	cmp	r3, #16
 8001328:	d00b      	beq.n	8001342 <UpdateLEDStates+0x1be>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2b11      	cmp	r3, #17
 800132e:	d006      	beq.n	800133e <UpdateLEDStates+0x1ba>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b12      	cmp	r3, #18
 8001334:	d101      	bne.n	800133a <UpdateLEDStates+0x1b6>
 8001336:	2303      	movs	r3, #3
 8001338:	e004      	b.n	8001344 <UpdateLEDStates+0x1c0>
 800133a:	2301      	movs	r3, #1
 800133c:	e002      	b.n	8001344 <UpdateLEDStates+0x1c0>
 800133e:	2305      	movs	r3, #5
 8001340:	e000      	b.n	8001344 <UpdateLEDStates+0x1c0>
 8001342:	2307      	movs	r3, #7
 8001344:	1dfa      	adds	r2, r7, #7
 8001346:	7013      	strb	r3, [r2, #0]
					redBit = (i == 16) ? 6 : (i == 17) ? 4 : (i == 18) ? 2 : 0;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2b10      	cmp	r3, #16
 800134c:	d00b      	beq.n	8001366 <UpdateLEDStates+0x1e2>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2b11      	cmp	r3, #17
 8001352:	d006      	beq.n	8001362 <UpdateLEDStates+0x1de>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b12      	cmp	r3, #18
 8001358:	d101      	bne.n	800135e <UpdateLEDStates+0x1da>
 800135a:	2302      	movs	r3, #2
 800135c:	e004      	b.n	8001368 <UpdateLEDStates+0x1e4>
 800135e:	2300      	movs	r3, #0
 8001360:	e002      	b.n	8001368 <UpdateLEDStates+0x1e4>
 8001362:	2304      	movs	r3, #4
 8001364:	e000      	b.n	8001368 <UpdateLEDStates+0x1e4>
 8001366:	2306      	movs	r3, #6
 8001368:	1dba      	adds	r2, r7, #6
 800136a:	7013      	strb	r3, [r2, #0]
 800136c:	e023      	b.n	80013b6 <UpdateLEDStates+0x232>
				} else {
					// Диски 20-23: второй байт
					greenBit = (i == 20) ? 6 : (i == 21) ? 4 : (i == 22) ? 2 : 1;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2b14      	cmp	r3, #20
 8001372:	d00b      	beq.n	800138c <UpdateLEDStates+0x208>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b15      	cmp	r3, #21
 8001378:	d006      	beq.n	8001388 <UpdateLEDStates+0x204>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b16      	cmp	r3, #22
 800137e:	d101      	bne.n	8001384 <UpdateLEDStates+0x200>
 8001380:	2302      	movs	r3, #2
 8001382:	e004      	b.n	800138e <UpdateLEDStates+0x20a>
 8001384:	2301      	movs	r3, #1
 8001386:	e002      	b.n	800138e <UpdateLEDStates+0x20a>
 8001388:	2304      	movs	r3, #4
 800138a:	e000      	b.n	800138e <UpdateLEDStates+0x20a>
 800138c:	2306      	movs	r3, #6
 800138e:	1dfa      	adds	r2, r7, #7
 8001390:	7013      	strb	r3, [r2, #0]
					redBit = (i == 20) ? 7 : (i == 21) ? 5 : (i == 22) ? 3 : 0;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2b14      	cmp	r3, #20
 8001396:	d00b      	beq.n	80013b0 <UpdateLEDStates+0x22c>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b15      	cmp	r3, #21
 800139c:	d006      	beq.n	80013ac <UpdateLEDStates+0x228>
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2b16      	cmp	r3, #22
 80013a2:	d101      	bne.n	80013a8 <UpdateLEDStates+0x224>
 80013a4:	2303      	movs	r3, #3
 80013a6:	e004      	b.n	80013b2 <UpdateLEDStates+0x22e>
 80013a8:	2300      	movs	r3, #0
 80013aa:	e002      	b.n	80013b2 <UpdateLEDStates+0x22e>
 80013ac:	2305      	movs	r3, #5
 80013ae:	e000      	b.n	80013b2 <UpdateLEDStates+0x22e>
 80013b0:	2307      	movs	r3, #7
 80013b2:	1dba      	adds	r2, r7, #6
 80013b4:	7013      	strb	r3, [r2, #0]
				}
			}

			// Управление светодиодами
			if (disks[i].error) {
 80013b6:	4a16      	ldr	r2, [pc, #88]	@ (8001410 <UpdateLEDStates+0x28c>)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	18d3      	adds	r3, r2, r3
 80013be:	3302      	adds	r3, #2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d026      	beq.n	8001414 <UpdateLEDStates+0x290>
				// Ошибка: красный светодиод горит постоянно
				channel[redBit / 8 + 1] &= ~(1 << (redBit % 8)); // Включаем красный светодиод
 80013c6:	1dbb      	adds	r3, r7, #6
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	b2d8      	uxtb	r0, r3
 80013ce:	0003      	movs	r3, r0
 80013d0:	3301      	adds	r3, #1
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	18d3      	adds	r3, r2, r3
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	1dba      	adds	r2, r7, #6
 80013dc:	7812      	ldrb	r2, [r2, #0]
 80013de:	2107      	movs	r1, #7
 80013e0:	400a      	ands	r2, r1
 80013e2:	2101      	movs	r1, #1
 80013e4:	4091      	lsls	r1, r2
 80013e6:	000a      	movs	r2, r1
 80013e8:	b252      	sxtb	r2, r2
 80013ea:	43d2      	mvns	r2, r2
 80013ec:	b252      	sxtb	r2, r2
 80013ee:	4013      	ands	r3, r2
 80013f0:	b259      	sxtb	r1, r3
 80013f2:	0003      	movs	r3, r0
 80013f4:	3301      	adds	r3, #1
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	18d3      	adds	r3, r2, r3
 80013fa:	b2ca      	uxtb	r2, r1
 80013fc:	701a      	strb	r2, [r3, #0]
 80013fe:	e0c6      	b.n	800158e <UpdateLEDStates+0x40a>
 8001400:	200002f0 	.word	0x200002f0
 8001404:	2000004c 	.word	0x2000004c
 8001408:	20000050 	.word	0x20000050
 800140c:	20000054 	.word	0x20000054
 8001410:	20000278 	.word	0x20000278
			} else if (disks[i].locate) {
 8001414:	4a64      	ldr	r2, [pc, #400]	@ (80015a8 <UpdateLEDStates+0x424>)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	18d3      	adds	r3, r2, r3
 800141c:	3303      	adds	r3, #3
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d071      	beq.n	8001508 <UpdateLEDStates+0x384>
				// Локация: зеленый и красный светодиоды мигают
				if (blinkState) {
 8001424:	4b61      	ldr	r3, [pc, #388]	@ (80015ac <UpdateLEDStates+0x428>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d038      	beq.n	800149e <UpdateLEDStates+0x31a>
					channel[greenBit / 8 + 1] &= ~(1 << (greenBit % 8)); // Включаем зеленый светодиод
 800142c:	1dfb      	adds	r3, r7, #7
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	b2d8      	uxtb	r0, r3
 8001434:	0003      	movs	r3, r0
 8001436:	3301      	adds	r3, #1
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	18d3      	adds	r3, r2, r3
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b25b      	sxtb	r3, r3
 8001440:	1dfa      	adds	r2, r7, #7
 8001442:	7812      	ldrb	r2, [r2, #0]
 8001444:	2107      	movs	r1, #7
 8001446:	400a      	ands	r2, r1
 8001448:	2101      	movs	r1, #1
 800144a:	4091      	lsls	r1, r2
 800144c:	000a      	movs	r2, r1
 800144e:	b252      	sxtb	r2, r2
 8001450:	43d2      	mvns	r2, r2
 8001452:	b252      	sxtb	r2, r2
 8001454:	4013      	ands	r3, r2
 8001456:	b259      	sxtb	r1, r3
 8001458:	0003      	movs	r3, r0
 800145a:	3301      	adds	r3, #1
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	18d3      	adds	r3, r2, r3
 8001460:	b2ca      	uxtb	r2, r1
 8001462:	701a      	strb	r2, [r3, #0]
					channel[redBit / 8 + 1] &= ~(1 << (redBit % 8)); // Включаем красный светодиод
 8001464:	1dbb      	adds	r3, r7, #6
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	08db      	lsrs	r3, r3, #3
 800146a:	b2d8      	uxtb	r0, r3
 800146c:	0003      	movs	r3, r0
 800146e:	3301      	adds	r3, #1
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	18d3      	adds	r3, r2, r3
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b25b      	sxtb	r3, r3
 8001478:	1dba      	adds	r2, r7, #6
 800147a:	7812      	ldrb	r2, [r2, #0]
 800147c:	2107      	movs	r1, #7
 800147e:	400a      	ands	r2, r1
 8001480:	2101      	movs	r1, #1
 8001482:	4091      	lsls	r1, r2
 8001484:	000a      	movs	r2, r1
 8001486:	b252      	sxtb	r2, r2
 8001488:	43d2      	mvns	r2, r2
 800148a:	b252      	sxtb	r2, r2
 800148c:	4013      	ands	r3, r2
 800148e:	b259      	sxtb	r1, r3
 8001490:	0003      	movs	r3, r0
 8001492:	3301      	adds	r3, #1
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	18d3      	adds	r3, r2, r3
 8001498:	b2ca      	uxtb	r2, r1
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	e077      	b.n	800158e <UpdateLEDStates+0x40a>
				} else {
					channel[greenBit / 8 + 1] |= (1 << (greenBit % 8));  // Выключаем зеленый светодиод
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	08db      	lsrs	r3, r3, #3
 80014a4:	b2d8      	uxtb	r0, r3
 80014a6:	0003      	movs	r3, r0
 80014a8:	3301      	adds	r3, #1
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	18d3      	adds	r3, r2, r3
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b25a      	sxtb	r2, r3
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2107      	movs	r1, #7
 80014b8:	400b      	ands	r3, r1
 80014ba:	2101      	movs	r1, #1
 80014bc:	4099      	lsls	r1, r3
 80014be:	000b      	movs	r3, r1
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b259      	sxtb	r1, r3
 80014c6:	0003      	movs	r3, r0
 80014c8:	3301      	adds	r3, #1
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	18d3      	adds	r3, r2, r3
 80014ce:	b2ca      	uxtb	r2, r1
 80014d0:	701a      	strb	r2, [r3, #0]
					channel[redBit / 8 + 1] |= (1 << (redBit % 8));  // Выключаем красный светодиод
 80014d2:	1dbb      	adds	r3, r7, #6
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	08db      	lsrs	r3, r3, #3
 80014d8:	b2d8      	uxtb	r0, r3
 80014da:	0003      	movs	r3, r0
 80014dc:	3301      	adds	r3, #1
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	18d3      	adds	r3, r2, r3
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b25a      	sxtb	r2, r3
 80014e6:	1dbb      	adds	r3, r7, #6
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2107      	movs	r1, #7
 80014ec:	400b      	ands	r3, r1
 80014ee:	2101      	movs	r1, #1
 80014f0:	4099      	lsls	r1, r3
 80014f2:	000b      	movs	r3, r1
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b259      	sxtb	r1, r3
 80014fa:	0003      	movs	r3, r0
 80014fc:	3301      	adds	r3, #1
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	18d3      	adds	r3, r2, r3
 8001502:	b2ca      	uxtb	r2, r1
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	e042      	b.n	800158e <UpdateLEDStates+0x40a>
				}
			} else if (disks[i].activity) {
 8001508:	4a27      	ldr	r2, [pc, #156]	@ (80015a8 <UpdateLEDStates+0x424>)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	18d3      	adds	r3, r2, r3
 8001510:	3301      	adds	r3, #1
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d03a      	beq.n	800158e <UpdateLEDStates+0x40a>
				// Активность: зеленый светодиод мигает
				if (blinkState) {
 8001518:	4b24      	ldr	r3, [pc, #144]	@ (80015ac <UpdateLEDStates+0x428>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d01c      	beq.n	800155a <UpdateLEDStates+0x3d6>
					channel[redBit / 8 + 1] &= ~(1 << (redBit % 8)); // Включаем красный светодиод
 8001520:	1dbb      	adds	r3, r7, #6
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	08db      	lsrs	r3, r3, #3
 8001526:	b2d8      	uxtb	r0, r3
 8001528:	0003      	movs	r3, r0
 800152a:	3301      	adds	r3, #1
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	18d3      	adds	r3, r2, r3
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b25b      	sxtb	r3, r3
 8001534:	1dba      	adds	r2, r7, #6
 8001536:	7812      	ldrb	r2, [r2, #0]
 8001538:	2107      	movs	r1, #7
 800153a:	400a      	ands	r2, r1
 800153c:	2101      	movs	r1, #1
 800153e:	4091      	lsls	r1, r2
 8001540:	000a      	movs	r2, r1
 8001542:	b252      	sxtb	r2, r2
 8001544:	43d2      	mvns	r2, r2
 8001546:	b252      	sxtb	r2, r2
 8001548:	4013      	ands	r3, r2
 800154a:	b259      	sxtb	r1, r3
 800154c:	0003      	movs	r3, r0
 800154e:	3301      	adds	r3, #1
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	18d3      	adds	r3, r2, r3
 8001554:	b2ca      	uxtb	r2, r1
 8001556:	701a      	strb	r2, [r3, #0]
 8001558:	e019      	b.n	800158e <UpdateLEDStates+0x40a>
				} else {
					channel[redBit / 8 + 1] |= (1 << (redBit % 8));  // Выключаем красный светодиод
 800155a:	1dbb      	adds	r3, r7, #6
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	08db      	lsrs	r3, r3, #3
 8001560:	b2d8      	uxtb	r0, r3
 8001562:	0003      	movs	r3, r0
 8001564:	3301      	adds	r3, #1
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	18d3      	adds	r3, r2, r3
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b25a      	sxtb	r2, r3
 800156e:	1dbb      	adds	r3, r7, #6
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2107      	movs	r1, #7
 8001574:	400b      	ands	r3, r1
 8001576:	2101      	movs	r1, #1
 8001578:	4099      	lsls	r1, r3
 800157a:	000b      	movs	r3, r1
 800157c:	b25b      	sxtb	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b259      	sxtb	r1, r3
 8001582:	0003      	movs	r3, r0
 8001584:	3301      	adds	r3, #1
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	18d3      	adds	r3, r2, r3
 800158a:	b2ca      	uxtb	r2, r1
 800158c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_DISKS; ++i) {
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3301      	adds	r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b17      	cmp	r3, #23
 8001598:	dc00      	bgt.n	800159c <UpdateLEDStates+0x418>
 800159a:	e613      	b.n	80011c4 <UpdateLEDStates+0x40>
			}
		}
	}

	// Обновляем светодиоды на расширителе
	Set_Led();
 800159c:	f7ff faec 	bl	8000b78 <Set_Led>
}
 80015a0:	46c0      	nop			@ (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b004      	add	sp, #16
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000278 	.word	0x20000278
 80015ac:	200002f0 	.word	0x200002f0

080015b0 <PowerOnAdapter>:
	}
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET); // Выключить светодиод после мигания
}

void PowerOnAdapter(uint8_t adapter_number)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	0002      	movs	r2, r0
 80015b8:	1dfb      	adds	r3, r7, #7
 80015ba:	701a      	strb	r2, [r3, #0]


	if (adapter_number == 1 && adapter1_state != 1) {
 80015bc:	1dfb      	adds	r3, r7, #7
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d136      	bne.n	8001632 <PowerOnAdapter+0x82>
 80015c4:	4b38      	ldr	r3, [pc, #224]	@ (80016a8 <PowerOnAdapter+0xf8>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d032      	beq.n	8001632 <PowerOnAdapter+0x82>
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 80015cc:	4b37      	ldr	r3, [pc, #220]	@ (80016ac <PowerOnAdapter+0xfc>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	2110      	movs	r1, #16
 80015d2:	0018      	movs	r0, r3
 80015d4:	f001 f95e 	bl	8002894 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MB1_PWR_SW_GPIO_Port, MB1_PWR_SW_Pin, SET);
 80015d8:	4b34      	ldr	r3, [pc, #208]	@ (80016ac <PowerOnAdapter+0xfc>)
 80015da:	2201      	movs	r2, #1
 80015dc:	2120      	movs	r1, #32
 80015de:	0018      	movs	r0, r3
 80015e0:	f001 f958 	bl	8002894 <HAL_GPIO_WritePin>
		adapter1_state = 1;
 80015e4:	4b30      	ldr	r3, [pc, #192]	@ (80016a8 <PowerOnAdapter+0xf8>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 80015ea:	2064      	movs	r0, #100	@ 0x64
 80015ec:	f000 fc24 	bl	8001e38 <HAL_Delay>
		flag_update = 13;
 80015f0:	4b2f      	ldr	r3, [pc, #188]	@ (80016b0 <PowerOnAdapter+0x100>)
 80015f2:	220d      	movs	r2, #13
 80015f4:	701a      	strb	r2, [r3, #0]
		ResetBus();
 80015f6:	f7ff fa45 	bl	8000a84 <ResetBus>
		flag_update = 14;
 80015fa:	4b2d      	ldr	r3, [pc, #180]	@ (80016b0 <PowerOnAdapter+0x100>)
 80015fc:	220e      	movs	r2, #14
 80015fe:	701a      	strb	r2, [r3, #0]
		if(BP_ON == 0) Led_Init();
 8001600:	4b2c      	ldr	r3, [pc, #176]	@ (80016b4 <PowerOnAdapter+0x104>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <PowerOnAdapter+0x5c>
 8001608:	f7ff fb60 	bl	8000ccc <Led_Init>
		HAL_TIM_Base_Start_IT(&htim1);
 800160c:	4b2a      	ldr	r3, [pc, #168]	@ (80016b8 <PowerOnAdapter+0x108>)
 800160e:	0018      	movs	r0, r3
 8001610:	f004 fd78 	bl	8006104 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim2);
 8001614:	4b29      	ldr	r3, [pc, #164]	@ (80016bc <PowerOnAdapter+0x10c>)
 8001616:	0018      	movs	r0, r3
 8001618:	f004 fd74 	bl	8006104 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 800161c:	4b28      	ldr	r3, [pc, #160]	@ (80016c0 <PowerOnAdapter+0x110>)
 800161e:	0018      	movs	r0, r3
 8001620:	f004 fd70 	bl	8006104 <HAL_TIM_Base_Start_IT>
		StartBlinking(&led1, 2, 10000); // Мигание 2 Гц, 10 сек
 8001624:	4a27      	ldr	r2, [pc, #156]	@ (80016c4 <PowerOnAdapter+0x114>)
 8001626:	4b28      	ldr	r3, [pc, #160]	@ (80016c8 <PowerOnAdapter+0x118>)
 8001628:	2102      	movs	r1, #2
 800162a:	0018      	movs	r0, r3
 800162c:	f7fe fe3b 	bl	80002a6 <StartBlinking>
 8001630:	e033      	b.n	800169a <PowerOnAdapter+0xea>
	} else if (adapter_number == 2 && adapter2_state != 1) {
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d12f      	bne.n	800169a <PowerOnAdapter+0xea>
 800163a:	4b24      	ldr	r3, [pc, #144]	@ (80016cc <PowerOnAdapter+0x11c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d02b      	beq.n	800169a <PowerOnAdapter+0xea>
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 8001642:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <PowerOnAdapter+0xfc>)
 8001644:	2201      	movs	r2, #1
 8001646:	2110      	movs	r1, #16
 8001648:	0018      	movs	r0, r3
 800164a:	f001 f923 	bl	8002894 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MB2_PWR_SW_GPIO_Port, MB2_PWR_SW_Pin, SET);
 800164e:	4b20      	ldr	r3, [pc, #128]	@ (80016d0 <PowerOnAdapter+0x120>)
 8001650:	2201      	movs	r2, #1
 8001652:	2140      	movs	r1, #64	@ 0x40
 8001654:	0018      	movs	r0, r3
 8001656:	f001 f91d 	bl	8002894 <HAL_GPIO_WritePin>
		adapter2_state = 1;
 800165a:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <PowerOnAdapter+0x11c>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8001660:	2064      	movs	r0, #100	@ 0x64
 8001662:	f000 fbe9 	bl	8001e38 <HAL_Delay>
		ResetBus();
 8001666:	f7ff fa0d 	bl	8000a84 <ResetBus>
		if(BP_ON == 0) Led_Init();
 800166a:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <PowerOnAdapter+0x104>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <PowerOnAdapter+0xc6>
 8001672:	f7ff fb2b 	bl	8000ccc <Led_Init>
		HAL_TIM_Base_Start_IT(&htim1);
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <PowerOnAdapter+0x108>)
 8001678:	0018      	movs	r0, r3
 800167a:	f004 fd43 	bl	8006104 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim2);
 800167e:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <PowerOnAdapter+0x10c>)
 8001680:	0018      	movs	r0, r3
 8001682:	f004 fd3f 	bl	8006104 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <PowerOnAdapter+0x110>)
 8001688:	0018      	movs	r0, r3
 800168a:	f004 fd3b 	bl	8006104 <HAL_TIM_Base_Start_IT>
		StartBlinking(&led2, 2, 10000); // Мигание 2 Гц, 10 сек
 800168e:	4a0d      	ldr	r2, [pc, #52]	@ (80016c4 <PowerOnAdapter+0x114>)
 8001690:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <PowerOnAdapter+0x124>)
 8001692:	2102      	movs	r1, #2
 8001694:	0018      	movs	r0, r3
 8001696:	f7fe fe06 	bl	80002a6 <StartBlinking>
	}
	UpdateCPU_PSON(); // Обновляем состояние CPU_PSON
 800169a:	f000 f84d 	bl	8001738 <UpdateCPU_PSON>
}
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b002      	add	sp, #8
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			@ (mov r8, r8)
 80016a8:	200002d8 	.word	0x200002d8
 80016ac:	50000800 	.word	0x50000800
 80016b0:	20000271 	.word	0x20000271
 80016b4:	200002da 	.word	0x200002da
 80016b8:	2000018c 	.word	0x2000018c
 80016bc:	200001d8 	.word	0x200001d8
 80016c0:	20000224 	.word	0x20000224
 80016c4:	00002710 	.word	0x00002710
 80016c8:	20000000 	.word	0x20000000
 80016cc:	200002d9 	.word	0x200002d9
 80016d0:	50000c00 	.word	0x50000c00
 80016d4:	20000018 	.word	0x20000018

080016d8 <PowerOffAdapter>:

void PowerOffAdapter(uint8_t adapter_number)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	0002      	movs	r2, r0
 80016e0:	1dfb      	adds	r3, r7, #7
 80016e2:	701a      	strb	r2, [r3, #0]
	if (adapter_number == 1) {
 80016e4:	1dfb      	adds	r3, r7, #7
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d109      	bne.n	8001700 <PowerOffAdapter+0x28>
		HAL_GPIO_WritePin(MB1_PWR_SW_GPIO_Port, MB1_PWR_SW_Pin, RESET);
 80016ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <PowerOffAdapter+0x50>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	2120      	movs	r1, #32
 80016f2:	0018      	movs	r0, r3
 80016f4:	f001 f8ce 	bl	8002894 <HAL_GPIO_WritePin>
		adapter1_state = 0;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <PowerOffAdapter+0x54>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
 80016fe:	e00c      	b.n	800171a <PowerOffAdapter+0x42>
	} else if (adapter_number == 2) {
 8001700:	1dfb      	adds	r3, r7, #7
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d108      	bne.n	800171a <PowerOffAdapter+0x42>
		HAL_GPIO_WritePin(MB2_PWR_SW_GPIO_Port, MB2_PWR_SW_Pin, RESET);
 8001708:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <PowerOffAdapter+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	2140      	movs	r1, #64	@ 0x40
 800170e:	0018      	movs	r0, r3
 8001710:	f001 f8c0 	bl	8002894 <HAL_GPIO_WritePin>
		adapter2_state = 0;
 8001714:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <PowerOffAdapter+0x5c>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
	}
	UpdateCPU_PSON(); // Обновляем состояние CPU_PSON
 800171a:	f000 f80d 	bl	8001738 <UpdateCPU_PSON>
}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	46bd      	mov	sp, r7
 8001722:	b002      	add	sp, #8
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	50000800 	.word	0x50000800
 800172c:	200002d8 	.word	0x200002d8
 8001730:	50000c00 	.word	0x50000c00
 8001734:	200002d9 	.word	0x200002d9

08001738 <UpdateCPU_PSON>:

void UpdateCPU_PSON()
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	if (adapter1_state == 1 || adapter2_state == 1) {
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <UpdateCPU_PSON+0x44>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d003      	beq.n	800174c <UpdateCPU_PSON+0x14>
 8001744:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <UpdateCPU_PSON+0x48>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d109      	bne.n	8001760 <UpdateCPU_PSON+0x28>
		// Если хотя бы один адаптер включен, выставляем CPU_PSON в 1
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 800174c:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <UpdateCPU_PSON+0x4c>)
 800174e:	2201      	movs	r2, #1
 8001750:	2110      	movs	r1, #16
 8001752:	0018      	movs	r0, r3
 8001754:	f001 f89e 	bl	8002894 <HAL_GPIO_WritePin>
		BP_ON = 1;
 8001758:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <UpdateCPU_PSON+0x50>)
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
 800175e:	e009      	b.n	8001774 <UpdateCPU_PSON+0x3c>
	} else {
		// Если оба адаптера выключены, выставляем CPU_PSON в 0
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, RESET);
 8001760:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <UpdateCPU_PSON+0x4c>)
 8001762:	2200      	movs	r2, #0
 8001764:	2110      	movs	r1, #16
 8001766:	0018      	movs	r0, r3
 8001768:	f001 f894 	bl	8002894 <HAL_GPIO_WritePin>
		BP_ON = 0;
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <UpdateCPU_PSON+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
	}
}
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	46c0      	nop			@ (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	46c0      	nop			@ (mov r8, r8)
 800177c:	200002d8 	.word	0x200002d8
 8001780:	200002d9 	.word	0x200002d9
 8001784:	50000800 	.word	0x50000800
 8001788:	200002da 	.word	0x200002da

0800178c <RebootAdapter>:

void RebootAdapter(uint8_t adapter_number, uint8_t is_hard_reboot)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	0002      	movs	r2, r0
 8001794:	1dfb      	adds	r3, r7, #7
 8001796:	701a      	strb	r2, [r3, #0]
 8001798:	1dbb      	adds	r3, r7, #6
 800179a:	1c0a      	adds	r2, r1, #0
 800179c:	701a      	strb	r2, [r3, #0]
	PowerOffAdapter(adapter_number);
 800179e:	1dfb      	adds	r3, r7, #7
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	0018      	movs	r0, r3
 80017a4:	f7ff ff98 	bl	80016d8 <PowerOffAdapter>
	HAL_Delay(is_hard_reboot ? 1000 : 500); // Задержка для hard/soft reboot
 80017a8:	1dbb      	adds	r3, r7, #6
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <RebootAdapter+0x2a>
 80017b0:	23fa      	movs	r3, #250	@ 0xfa
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	e001      	b.n	80017ba <RebootAdapter+0x2e>
 80017b6:	23fa      	movs	r3, #250	@ 0xfa
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	0018      	movs	r0, r3
 80017bc:	f000 fb3c 	bl	8001e38 <HAL_Delay>
	PowerOnAdapter(adapter_number);
 80017c0:	1dfb      	adds	r3, r7, #7
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	0018      	movs	r0, r3
 80017c6:	f7ff fef3 	bl	80015b0 <PowerOnAdapter>
}
 80017ca:	46c0      	nop			@ (mov r8, r8)
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b002      	add	sp, #8
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) // 8 раз в секунду
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d102      	bne.n	80017ec <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		UpdateLEDStates();
 80017e6:	f7ff fccd 	bl	8001184 <UpdateLEDStates>
		} else
			if (htim->Instance == TIM3) // 1 раз в секунду
			{
				Read_disks_connected();
			}
}
 80017ea:	e00c      	b.n	8001806 <HAL_TIM_PeriodElapsedCallback+0x32>
		if (htim->Instance == TIM2) // 4 раза в секунду
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2380      	movs	r3, #128	@ 0x80
 80017f2:	05db      	lsls	r3, r3, #23
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d006      	beq.n	8001806 <HAL_TIM_PeriodElapsedCallback+0x32>
			if (htim->Instance == TIM3) // 1 раз в секунду
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d101      	bne.n	8001806 <HAL_TIM_PeriodElapsedCallback+0x32>
				Read_disks_connected();
 8001802:	f7ff fadf 	bl	8000dc4 <Read_disks_connected>
}
 8001806:	46c0      	nop			@ (mov r8, r8)
 8001808:	46bd      	mov	sp, r7
 800180a:	b002      	add	sp, #8
 800180c:	bd80      	pop	{r7, pc}
 800180e:	46c0      	nop			@ (mov r8, r8)
 8001810:	40012c00 	.word	0x40012c00
 8001814:	40000400 	.word	0x40000400

08001818 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	0002      	movs	r2, r0
 8001820:	1dbb      	adds	r3, r7, #6
 8001822:	801a      	strh	r2, [r3, #0]
    uint32_t current_time = HAL_GetTick();
 8001824:	f000 fafe 	bl	8001e24 <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	60fb      	str	r3, [r7, #12]

    if (GPIO_Pin == FP_MB1_PWR_SW_Pin)
 800182c:	1dbb      	adds	r3, r7, #6
 800182e:	881a      	ldrh	r2, [r3, #0]
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	429a      	cmp	r2, r3
 8001836:	d116      	bne.n	8001866 <HAL_GPIO_EXTI_Rising_Callback+0x4e>
    {
        if (current_time - button1_debounce_time >= DEBOUNCE_DELAY)
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b31      	cmp	r3, #49	@ 0x31
 8001842:	d910      	bls.n	8001866 <HAL_GPIO_EXTI_Rising_Callback+0x4e>
        {
            button1_pressed = 0; // Кнопка отпущена
 8001844:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <HAL_GPIO_EXTI_Rising_Callback+0x94>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
            HandleButtonAction(1, current_time - button1_press_time);
 800184a:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <HAL_GPIO_EXTI_Rising_Callback+0x98>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	0019      	movs	r1, r3
 8001854:	2001      	movs	r0, #1
 8001856:	f7fe fd45 	bl	80002e4 <HandleButtonAction>
            button1_press_time = 0;
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <HAL_GPIO_EXTI_Rising_Callback+0x98>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
            button1_debounce_time = current_time; // Обновляем время для обработки дребезга
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	601a      	str	r2, [r3, #0]
        }
    }

    if (GPIO_Pin == FP_MB2_PWR_SW_Pin)
 8001866:	1dbb      	adds	r3, r7, #6
 8001868:	881a      	ldrh	r2, [r3, #0]
 800186a:	2380      	movs	r3, #128	@ 0x80
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	429a      	cmp	r2, r3
 8001870:	d116      	bne.n	80018a0 <HAL_GPIO_EXTI_Rising_Callback+0x88>
    {
        if (current_time - button2_debounce_time >= DEBOUNCE_DELAY)
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <HAL_GPIO_EXTI_Rising_Callback+0x9c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b31      	cmp	r3, #49	@ 0x31
 800187c:	d910      	bls.n	80018a0 <HAL_GPIO_EXTI_Rising_Callback+0x88>
        {
            button2_pressed = 0; // Кнопка отпущена
 800187e:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
            HandleButtonAction(2, current_time - button2_press_time);
 8001884:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	0019      	movs	r1, r3
 800188e:	2002      	movs	r0, #2
 8001890:	f7fe fd28 	bl	80002e4 <HandleButtonAction>
            button2_press_time = 0;
 8001894:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
            button2_debounce_time = current_time; // Обновляем время для обработки дребезга
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_GPIO_EXTI_Rising_Callback+0x9c>)
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	601a      	str	r2, [r3, #0]
        }
    }
}
 80018a0:	46c0      	nop			@ (mov r8, r8)
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b004      	add	sp, #16
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	200002e8 	.word	0x200002e8
 80018ac:	200002db 	.word	0x200002db
 80018b0:	200002e0 	.word	0x200002e0
 80018b4:	200002ec 	.word	0x200002ec
 80018b8:	200002dc 	.word	0x200002dc
 80018bc:	200002e4 	.word	0x200002e4

080018c0 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	0002      	movs	r2, r0
 80018c8:	1dbb      	adds	r3, r7, #6
 80018ca:	801a      	strh	r2, [r3, #0]
    uint32_t current_time = HAL_GetTick();
 80018cc:	f000 faaa 	bl	8001e24 <HAL_GetTick>
 80018d0:	0003      	movs	r3, r0
 80018d2:	60fb      	str	r3, [r7, #12]

    if (GPIO_Pin == FP_MB1_PWR_SW_Pin)
 80018d4:	1dbb      	adds	r3, r7, #6
 80018d6:	881a      	ldrh	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	429a      	cmp	r2, r3
 80018de:	d10e      	bne.n	80018fe <HAL_GPIO_EXTI_Falling_Callback+0x3e>
    {
        if (current_time - button1_debounce_time >= DEBOUNCE_DELAY)
 80018e0:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b31      	cmp	r3, #49	@ 0x31
 80018ea:	d908      	bls.n	80018fe <HAL_GPIO_EXTI_Falling_Callback+0x3e>
        {
            button1_pressed = 1; // Кнопка нажата
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <HAL_GPIO_EXTI_Falling_Callback+0x74>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
            button1_press_time = current_time;
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <HAL_GPIO_EXTI_Falling_Callback+0x78>)
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	601a      	str	r2, [r3, #0]
            button1_debounce_time = current_time; // Обновляем время для обработки дребезга
 80018f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	601a      	str	r2, [r3, #0]
        }
    }

    if (GPIO_Pin == FP_MB2_PWR_SW_Pin)
 80018fe:	1dbb      	adds	r3, r7, #6
 8001900:	881a      	ldrh	r2, [r3, #0]
 8001902:	2380      	movs	r3, #128	@ 0x80
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	429a      	cmp	r2, r3
 8001908:	d10e      	bne.n	8001928 <HAL_GPIO_EXTI_Falling_Callback+0x68>
    {
        if (current_time - button2_debounce_time >= DEBOUNCE_DELAY)
 800190a:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <HAL_GPIO_EXTI_Falling_Callback+0x7c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b31      	cmp	r3, #49	@ 0x31
 8001914:	d908      	bls.n	8001928 <HAL_GPIO_EXTI_Falling_Callback+0x68>
        {
            button2_pressed = 1; // Кнопка нажата
 8001916:	4b0a      	ldr	r3, [pc, #40]	@ (8001940 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
            button2_press_time = current_time;
 800191c:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	601a      	str	r2, [r3, #0]
            button2_debounce_time = current_time; // Обновляем время для обработки дребезга
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <HAL_GPIO_EXTI_Falling_Callback+0x7c>)
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	601a      	str	r2, [r3, #0]
        }
    }
}
 8001928:	46c0      	nop			@ (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	b004      	add	sp, #16
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200002e8 	.word	0x200002e8
 8001934:	200002db 	.word	0x200002db
 8001938:	200002e0 	.word	0x200002e0
 800193c:	200002ec 	.word	0x200002ec
 8001940:	200002dc 	.word	0x200002dc
 8001944:	200002e4 	.word	0x200002e4

08001948 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800194c:	b672      	cpsid	i
}
 800194e:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	flag_error = 1;
 8001950:	4b02      	ldr	r3, [pc, #8]	@ (800195c <Error_Handler+0x14>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
	while (1)
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	e7fd      	b.n	8001956 <Error_Handler+0xe>
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	20000270 	.word	0x20000270

08001960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <HAL_MspInit+0x54>)
 8001968:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800196a:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <HAL_MspInit+0x54>)
 800196c:	2101      	movs	r1, #1
 800196e:	430a      	orrs	r2, r1
 8001970:	641a      	str	r2, [r3, #64]	@ 0x40
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <HAL_MspInit+0x54>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	2201      	movs	r2, #1
 8001978:	4013      	ands	r3, r2
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	4b0d      	ldr	r3, [pc, #52]	@ (80019b4 <HAL_MspInit+0x54>)
 8001980:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001982:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <HAL_MspInit+0x54>)
 8001984:	2180      	movs	r1, #128	@ 0x80
 8001986:	0549      	lsls	r1, r1, #21
 8001988:	430a      	orrs	r2, r1
 800198a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800198c:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <HAL_MspInit+0x54>)
 800198e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001990:	2380      	movs	r3, #128	@ 0x80
 8001992:	055b      	lsls	r3, r3, #21
 8001994:	4013      	ands	r3, r2
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	2004      	movs	r0, #4
 80019a0:	f000 fb1a 	bl	8001fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80019a4:	2004      	movs	r0, #4
 80019a6:	f000 fb2c 	bl	8002002 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019aa:	46c0      	nop			@ (mov r8, r8)
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b002      	add	sp, #8
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	40021000 	.word	0x40021000

080019b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b08b      	sub	sp, #44	@ 0x2c
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	2414      	movs	r4, #20
 80019c2:	193b      	adds	r3, r7, r4
 80019c4:	0018      	movs	r0, r3
 80019c6:	2314      	movs	r3, #20
 80019c8:	001a      	movs	r2, r3
 80019ca:	2100      	movs	r1, #0
 80019cc:	f004 ffa4 	bl	8006918 <memset>
  if(hi2c->Instance==I2C2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a45      	ldr	r2, [pc, #276]	@ (8001aec <HAL_I2C_MspInit+0x134>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d000      	beq.n	80019dc <HAL_I2C_MspInit+0x24>
 80019da:	e082      	b.n	8001ae2 <HAL_I2C_MspInit+0x12a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019dc:	4b44      	ldr	r3, [pc, #272]	@ (8001af0 <HAL_I2C_MspInit+0x138>)
 80019de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019e0:	4b43      	ldr	r3, [pc, #268]	@ (8001af0 <HAL_I2C_MspInit+0x138>)
 80019e2:	2102      	movs	r1, #2
 80019e4:	430a      	orrs	r2, r1
 80019e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80019e8:	4b41      	ldr	r3, [pc, #260]	@ (8001af0 <HAL_I2C_MspInit+0x138>)
 80019ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ec:	2202      	movs	r2, #2
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = TEMP_I2C1_SCL_Pin|TEMP_I2C1_SDA_Pin;
 80019f4:	193b      	adds	r3, r7, r4
 80019f6:	22c0      	movs	r2, #192	@ 0xc0
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019fc:	0021      	movs	r1, r4
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	2212      	movs	r2, #18
 8001a02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	187b      	adds	r3, r7, r1
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	2206      	movs	r2, #6
 8001a14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	4a36      	ldr	r2, [pc, #216]	@ (8001af4 <HAL_I2C_MspInit+0x13c>)
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	0010      	movs	r0, r2
 8001a1e:	f000 fdd5 	bl	80025cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a22:	4b33      	ldr	r3, [pc, #204]	@ (8001af0 <HAL_I2C_MspInit+0x138>)
 8001a24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a26:	4b32      	ldr	r3, [pc, #200]	@ (8001af0 <HAL_I2C_MspInit+0x138>)
 8001a28:	2180      	movs	r1, #128	@ 0x80
 8001a2a:	03c9      	lsls	r1, r1, #15
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a30:	4b2f      	ldr	r3, [pc, #188]	@ (8001af0 <HAL_I2C_MspInit+0x138>)
 8001a32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a34:	2380      	movs	r3, #128	@ 0x80
 8001a36:	03db      	lsls	r3, r3, #15
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel1;
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <HAL_I2C_MspInit+0x140>)
 8001a40:	4a2e      	ldr	r2, [pc, #184]	@ (8001afc <HAL_I2C_MspInit+0x144>)
 8001a42:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8001a44:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <HAL_I2C_MspInit+0x140>)
 8001a46:	220c      	movs	r2, #12
 8001a48:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001af8 <HAL_I2C_MspInit+0x140>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a50:	4b29      	ldr	r3, [pc, #164]	@ (8001af8 <HAL_I2C_MspInit+0x140>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a56:	4b28      	ldr	r3, [pc, #160]	@ (8001af8 <HAL_I2C_MspInit+0x140>)
 8001a58:	2280      	movs	r2, #128	@ 0x80
 8001a5a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a5c:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <HAL_I2C_MspInit+0x140>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a62:	4b25      	ldr	r3, [pc, #148]	@ (8001af8 <HAL_I2C_MspInit+0x140>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001a68:	4b23      	ldr	r3, [pc, #140]	@ (8001af8 <HAL_I2C_MspInit+0x140>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a6e:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <HAL_I2C_MspInit+0x140>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001a74:	4b20      	ldr	r3, [pc, #128]	@ (8001af8 <HAL_I2C_MspInit+0x140>)
 8001a76:	0018      	movs	r0, r3
 8001a78:	f000 fae0 	bl	800203c <HAL_DMA_Init>
 8001a7c:	1e03      	subs	r3, r0, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001a80:	f7ff ff62 	bl	8001948 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a1c      	ldr	r2, [pc, #112]	@ (8001af8 <HAL_I2C_MspInit+0x140>)
 8001a88:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <HAL_I2C_MspInit+0x140>)
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel2;
 8001a90:	4b1b      	ldr	r3, [pc, #108]	@ (8001b00 <HAL_I2C_MspInit+0x148>)
 8001a92:	4a1c      	ldr	r2, [pc, #112]	@ (8001b04 <HAL_I2C_MspInit+0x14c>)
 8001a94:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <HAL_I2C_MspInit+0x148>)
 8001a98:	220d      	movs	r2, #13
 8001a9a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <HAL_I2C_MspInit+0x148>)
 8001a9e:	2210      	movs	r2, #16
 8001aa0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <HAL_I2C_MspInit+0x148>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <HAL_I2C_MspInit+0x148>)
 8001aaa:	2280      	movs	r2, #128	@ 0x80
 8001aac:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aae:	4b14      	ldr	r3, [pc, #80]	@ (8001b00 <HAL_I2C_MspInit+0x148>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ab4:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <HAL_I2C_MspInit+0x148>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001aba:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <HAL_I2C_MspInit+0x148>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b00 <HAL_I2C_MspInit+0x148>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <HAL_I2C_MspInit+0x148>)
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f000 fab7 	bl	800203c <HAL_DMA_Init>
 8001ace:	1e03      	subs	r3, r0, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 8001ad2:	f7ff ff39 	bl	8001948 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a09      	ldr	r2, [pc, #36]	@ (8001b00 <HAL_I2C_MspInit+0x148>)
 8001ada:	639a      	str	r2, [r3, #56]	@ 0x38
 8001adc:	4b08      	ldr	r3, [pc, #32]	@ (8001b00 <HAL_I2C_MspInit+0x148>)
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b00b      	add	sp, #44	@ 0x2c
 8001ae8:	bd90      	pop	{r4, r7, pc}
 8001aea:	46c0      	nop			@ (mov r8, r8)
 8001aec:	40005800 	.word	0x40005800
 8001af0:	40021000 	.word	0x40021000
 8001af4:	50000400 	.word	0x50000400
 8001af8:	200000d4 	.word	0x200000d4
 8001afc:	40020008 	.word	0x40020008
 8001b00:	20000130 	.word	0x20000130
 8001b04:	4002001c 	.word	0x4002001c

08001b08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b093      	sub	sp, #76	@ 0x4c
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b10:	2414      	movs	r4, #20
 8001b12:	193b      	adds	r3, r7, r4
 8001b14:	0018      	movs	r0, r3
 8001b16:	2334      	movs	r3, #52	@ 0x34
 8001b18:	001a      	movs	r2, r3
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	f004 fefc 	bl	8006918 <memset>
  if(htim_base->Instance==TIM1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a24      	ldr	r2, [pc, #144]	@ (8001bb8 <HAL_TIM_Base_MspInit+0xb0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d11d      	bne.n	8001b66 <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001b2a:	193b      	adds	r3, r7, r4
 8001b2c:	2280      	movs	r2, #128	@ 0x80
 8001b2e:	0392      	lsls	r2, r2, #14
 8001b30:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001b32:	193b      	adds	r3, r7, r4
 8001b34:	2200      	movs	r2, #0
 8001b36:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b38:	193b      	adds	r3, r7, r4
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f004 f8d2 	bl	8005ce4 <HAL_RCCEx_PeriphCLKConfig>
 8001b40:	1e03      	subs	r3, r0, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8001b44:	f7ff ff00 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b48:	4b1c      	ldr	r3, [pc, #112]	@ (8001bbc <HAL_TIM_Base_MspInit+0xb4>)
 8001b4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <HAL_TIM_Base_MspInit+0xb4>)
 8001b4e:	2180      	movs	r1, #128	@ 0x80
 8001b50:	0109      	lsls	r1, r1, #4
 8001b52:	430a      	orrs	r2, r1
 8001b54:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b56:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <HAL_TIM_Base_MspInit+0xb4>)
 8001b58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b5a:	2380      	movs	r3, #128	@ 0x80
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b64:	e023      	b.n	8001bae <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	2380      	movs	r3, #128	@ 0x80
 8001b6c:	05db      	lsls	r3, r3, #23
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d10c      	bne.n	8001b8c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b72:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_TIM_Base_MspInit+0xb4>)
 8001b74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_TIM_Base_MspInit+0xb4>)
 8001b78:	2101      	movs	r1, #1
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <HAL_TIM_Base_MspInit+0xb4>)
 8001b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b82:	2201      	movs	r2, #1
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
}
 8001b8a:	e010      	b.n	8001bae <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc0 <HAL_TIM_Base_MspInit+0xb8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d10b      	bne.n	8001bae <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <HAL_TIM_Base_MspInit+0xb4>)
 8001b98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b9a:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <HAL_TIM_Base_MspInit+0xb4>)
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_TIM_Base_MspInit+0xb4>)
 8001ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
}
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b013      	add	sp, #76	@ 0x4c
 8001bb4:	bd90      	pop	{r4, r7, pc}
 8001bb6:	46c0      	nop			@ (mov r8, r8)
 8001bb8:	40012c00 	.word	0x40012c00
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40000400 	.word	0x40000400

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001bc8:	f004 f862 	bl	8005c90 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bcc:	46c0      	nop			@ (mov r8, r8)
 8001bce:	e7fd      	b.n	8001bcc <NMI_Handler+0x8>

08001bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd4:	46c0      	nop			@ (mov r8, r8)
 8001bd6:	e7fd      	b.n	8001bd4 <HardFault_Handler+0x4>

08001bd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001bdc:	46c0      	nop			@ (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf0:	f000 f906 	bl	8001e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf4:	46c0      	nop			@ (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001bfe:	46c0      	nop			@ (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FP_MB2_PWR_SW_Pin);
 8001c08:	2380      	movs	r3, #128	@ 0x80
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f000 fe5f 	bl	80028d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FP_MB1_PWR_SW_Pin);
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	0018      	movs	r0, r3
 8001c18:	f000 fe5a 	bl	80028d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001c1c:	46c0      	nop			@ (mov r8, r8)
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001c28:	4b03      	ldr	r3, [pc, #12]	@ (8001c38 <DMA1_Channel1_IRQHandler+0x14>)
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f000 fb80 	bl	8002330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c30:	46c0      	nop			@ (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	200000d4 	.word	0x200000d4

08001c3c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001c40:	4b03      	ldr	r3, [pc, #12]	@ (8001c50 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001c42:	0018      	movs	r0, r3
 8001c44:	f000 fb74 	bl	8002330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001c48:	46c0      	nop			@ (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			@ (mov r8, r8)
 8001c50:	20000130 	.word	0x20000130

08001c54 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c58:	4b03      	ldr	r3, [pc, #12]	@ (8001c68 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f004 faae 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001c60:	46c0      	nop			@ (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	2000018c 	.word	0x2000018c

08001c6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c70:	4b03      	ldr	r3, [pc, #12]	@ (8001c80 <TIM2_IRQHandler+0x14>)
 8001c72:	0018      	movs	r0, r3
 8001c74:	f004 faa2 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c78:	46c0      	nop			@ (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	200001d8 	.word	0x200001d8

08001c84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c88:	4b03      	ldr	r3, [pc, #12]	@ (8001c98 <TIM3_IRQHandler+0x14>)
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f004 fa96 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c90:	46c0      	nop			@ (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			@ (mov r8, r8)
 8001c98:	20000224 	.word	0x20000224

08001c9c <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001ca0:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <I2C2_IRQHandler+0x2c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699a      	ldr	r2, [r3, #24]
 8001ca6:	23e0      	movs	r3, #224	@ 0xe0
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4013      	ands	r3, r2
 8001cac:	d004      	beq.n	8001cb8 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8001cae:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <I2C2_IRQHandler+0x2c>)
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f001 fb4d 	bl	8003350 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8001cb6:	e003      	b.n	8001cc0 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8001cb8:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <I2C2_IRQHandler+0x2c>)
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f001 fb2e 	bl	800331c <HAL_I2C_EV_IRQHandler>
}
 8001cc0:	46c0      	nop			@ (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			@ (mov r8, r8)
 8001cc8:	20000080 	.word	0x20000080

08001ccc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd0:	46c0      	nop			@ (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cd8:	480d      	ldr	r0, [pc, #52]	@ (8001d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cdc:	f7ff fff6 	bl	8001ccc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce0:	480c      	ldr	r0, [pc, #48]	@ (8001d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ce2:	490d      	ldr	r1, [pc, #52]	@ (8001d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d1c <LoopForever+0xe>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce8:	e002      	b.n	8001cf0 <LoopCopyDataInit>

08001cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cee:	3304      	adds	r3, #4

08001cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf4:	d3f9      	bcc.n	8001cea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cf8:	4c0a      	ldr	r4, [pc, #40]	@ (8001d24 <LoopForever+0x16>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cfc:	e001      	b.n	8001d02 <LoopFillZerobss>

08001cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d00:	3204      	adds	r2, #4

08001d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d04:	d3fb      	bcc.n	8001cfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d06:	f004 fe0f 	bl	8006928 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d0a:	f7fe fb65 	bl	80003d8 <main>

08001d0e <LoopForever>:

LoopForever:
  b LoopForever
 8001d0e:	e7fe      	b.n	8001d0e <LoopForever>
  ldr   r0, =_estack
 8001d10:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d18:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001d1c:	080069d0 	.word	0x080069d0
  ldr r2, =_sbss
 8001d20:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001d24:	200002f8 	.word	0x200002f8

08001d28 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d28:	e7fe      	b.n	8001d28 <ADC1_COMP_IRQHandler>
	...

08001d2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d32:	1dfb      	adds	r3, r7, #7
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <HAL_Init+0x3c>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <HAL_Init+0x3c>)
 8001d3e:	2180      	movs	r1, #128	@ 0x80
 8001d40:	0049      	lsls	r1, r1, #1
 8001d42:	430a      	orrs	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d46:	2000      	movs	r0, #0
 8001d48:	f000 f810 	bl	8001d6c <HAL_InitTick>
 8001d4c:	1e03      	subs	r3, r0, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d50:	1dfb      	adds	r3, r7, #7
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	e001      	b.n	8001d5c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001d58:	f7ff fe02 	bl	8001960 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d5c:	1dfb      	adds	r3, r7, #7
 8001d5e:	781b      	ldrb	r3, [r3, #0]
}
 8001d60:	0018      	movs	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b002      	add	sp, #8
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40022000 	.word	0x40022000

08001d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d74:	230f      	movs	r3, #15
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001df4 <HAL_InitTick+0x88>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d02b      	beq.n	8001ddc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001d84:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <HAL_InitTick+0x8c>)
 8001d86:	681c      	ldr	r4, [r3, #0]
 8001d88:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <HAL_InitTick+0x88>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	23fa      	movs	r3, #250	@ 0xfa
 8001d90:	0098      	lsls	r0, r3, #2
 8001d92:	f7fe f9b7 	bl	8000104 <__udivsi3>
 8001d96:	0003      	movs	r3, r0
 8001d98:	0019      	movs	r1, r3
 8001d9a:	0020      	movs	r0, r4
 8001d9c:	f7fe f9b2 	bl	8000104 <__udivsi3>
 8001da0:	0003      	movs	r3, r0
 8001da2:	0018      	movs	r0, r3
 8001da4:	f000 f93d 	bl	8002022 <HAL_SYSTICK_Config>
 8001da8:	1e03      	subs	r3, r0, #0
 8001daa:	d112      	bne.n	8001dd2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d80a      	bhi.n	8001dc8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	2301      	movs	r3, #1
 8001db6:	425b      	negs	r3, r3
 8001db8:	2200      	movs	r2, #0
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f000 f90c 	bl	8001fd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <HAL_InitTick+0x90>)
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	e00d      	b.n	8001de4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001dc8:	230f      	movs	r3, #15
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	2201      	movs	r2, #1
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	e008      	b.n	8001de4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dd2:	230f      	movs	r3, #15
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	e003      	b.n	8001de4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ddc:	230f      	movs	r3, #15
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001de4:	230f      	movs	r3, #15
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	781b      	ldrb	r3, [r3, #0]
}
 8001dea:	0018      	movs	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b005      	add	sp, #20
 8001df0:	bd90      	pop	{r4, r7, pc}
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	20000060 	.word	0x20000060
 8001df8:	20000058 	.word	0x20000058
 8001dfc:	2000005c 	.word	0x2000005c

08001e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <HAL_IncTick+0x1c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	001a      	movs	r2, r3
 8001e0a:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <HAL_IncTick+0x20>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	18d2      	adds	r2, r2, r3
 8001e10:	4b03      	ldr	r3, [pc, #12]	@ (8001e20 <HAL_IncTick+0x20>)
 8001e12:	601a      	str	r2, [r3, #0]
}
 8001e14:	46c0      	nop			@ (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			@ (mov r8, r8)
 8001e1c:	20000060 	.word	0x20000060
 8001e20:	200002f4 	.word	0x200002f4

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b02      	ldr	r3, [pc, #8]	@ (8001e34 <HAL_GetTick+0x10>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	200002f4 	.word	0x200002f4

08001e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff fff0 	bl	8001e24 <HAL_GetTick>
 8001e44:	0003      	movs	r3, r0
 8001e46:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	d005      	beq.n	8001e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e52:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <HAL_Delay+0x44>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	001a      	movs	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	189b      	adds	r3, r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e5e:	46c0      	nop			@ (mov r8, r8)
 8001e60:	f7ff ffe0 	bl	8001e24 <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8f7      	bhi.n	8001e60 <HAL_Delay+0x28>
  {
  }
}
 8001e70:	46c0      	nop			@ (mov r8, r8)
 8001e72:	46c0      	nop			@ (mov r8, r8)
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b004      	add	sp, #16
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	20000060 	.word	0x20000060

08001e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	0002      	movs	r2, r0
 8001e88:	1dfb      	adds	r3, r7, #7
 8001e8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e8c:	1dfb      	adds	r3, r7, #7
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e92:	d809      	bhi.n	8001ea8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e94:	1dfb      	adds	r3, r7, #7
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	001a      	movs	r2, r3
 8001e9a:	231f      	movs	r3, #31
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	4b04      	ldr	r3, [pc, #16]	@ (8001eb0 <__NVIC_EnableIRQ+0x30>)
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	4091      	lsls	r1, r2
 8001ea4:	000a      	movs	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001ea8:	46c0      	nop			@ (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b002      	add	sp, #8
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	e000e100 	.word	0xe000e100

08001eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	0002      	movs	r2, r0
 8001ebc:	6039      	str	r1, [r7, #0]
 8001ebe:	1dfb      	adds	r3, r7, #7
 8001ec0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	1dfb      	adds	r3, r7, #7
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ec8:	d828      	bhi.n	8001f1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eca:	4a2f      	ldr	r2, [pc, #188]	@ (8001f88 <__NVIC_SetPriority+0xd4>)
 8001ecc:	1dfb      	adds	r3, r7, #7
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	b25b      	sxtb	r3, r3
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	33c0      	adds	r3, #192	@ 0xc0
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	589b      	ldr	r3, [r3, r2]
 8001eda:	1dfa      	adds	r2, r7, #7
 8001edc:	7812      	ldrb	r2, [r2, #0]
 8001ede:	0011      	movs	r1, r2
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	00d2      	lsls	r2, r2, #3
 8001ee6:	21ff      	movs	r1, #255	@ 0xff
 8001ee8:	4091      	lsls	r1, r2
 8001eea:	000a      	movs	r2, r1
 8001eec:	43d2      	mvns	r2, r2
 8001eee:	401a      	ands	r2, r3
 8001ef0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	019b      	lsls	r3, r3, #6
 8001ef6:	22ff      	movs	r2, #255	@ 0xff
 8001ef8:	401a      	ands	r2, r3
 8001efa:	1dfb      	adds	r3, r7, #7
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	0018      	movs	r0, r3
 8001f00:	2303      	movs	r3, #3
 8001f02:	4003      	ands	r3, r0
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f08:	481f      	ldr	r0, [pc, #124]	@ (8001f88 <__NVIC_SetPriority+0xd4>)
 8001f0a:	1dfb      	adds	r3, r7, #7
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b25b      	sxtb	r3, r3
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	430a      	orrs	r2, r1
 8001f14:	33c0      	adds	r3, #192	@ 0xc0
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f1a:	e031      	b.n	8001f80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f8c <__NVIC_SetPriority+0xd8>)
 8001f1e:	1dfb      	adds	r3, r7, #7
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	0019      	movs	r1, r3
 8001f24:	230f      	movs	r3, #15
 8001f26:	400b      	ands	r3, r1
 8001f28:	3b08      	subs	r3, #8
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	3306      	adds	r3, #6
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	18d3      	adds	r3, r2, r3
 8001f32:	3304      	adds	r3, #4
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	1dfa      	adds	r2, r7, #7
 8001f38:	7812      	ldrb	r2, [r2, #0]
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	400a      	ands	r2, r1
 8001f40:	00d2      	lsls	r2, r2, #3
 8001f42:	21ff      	movs	r1, #255	@ 0xff
 8001f44:	4091      	lsls	r1, r2
 8001f46:	000a      	movs	r2, r1
 8001f48:	43d2      	mvns	r2, r2
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	019b      	lsls	r3, r3, #6
 8001f52:	22ff      	movs	r2, #255	@ 0xff
 8001f54:	401a      	ands	r2, r3
 8001f56:	1dfb      	adds	r3, r7, #7
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	4003      	ands	r3, r0
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f64:	4809      	ldr	r0, [pc, #36]	@ (8001f8c <__NVIC_SetPriority+0xd8>)
 8001f66:	1dfb      	adds	r3, r7, #7
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	001c      	movs	r4, r3
 8001f6c:	230f      	movs	r3, #15
 8001f6e:	4023      	ands	r3, r4
 8001f70:	3b08      	subs	r3, #8
 8001f72:	089b      	lsrs	r3, r3, #2
 8001f74:	430a      	orrs	r2, r1
 8001f76:	3306      	adds	r3, #6
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	18c3      	adds	r3, r0, r3
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	601a      	str	r2, [r3, #0]
}
 8001f80:	46c0      	nop			@ (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b003      	add	sp, #12
 8001f86:	bd90      	pop	{r4, r7, pc}
 8001f88:	e000e100 	.word	0xe000e100
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	1e5a      	subs	r2, r3, #1
 8001f9c:	2380      	movs	r3, #128	@ 0x80
 8001f9e:	045b      	lsls	r3, r3, #17
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d301      	bcc.n	8001fa8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e010      	b.n	8001fca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <SysTick_Config+0x44>)
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	3a01      	subs	r2, #1
 8001fae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	425b      	negs	r3, r3
 8001fb4:	2103      	movs	r1, #3
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f7ff ff7c 	bl	8001eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <SysTick_Config+0x44>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc2:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <SysTick_Config+0x44>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	0018      	movs	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b002      	add	sp, #8
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	210f      	movs	r1, #15
 8001fe4:	187b      	adds	r3, r7, r1
 8001fe6:	1c02      	adds	r2, r0, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	187b      	adds	r3, r7, r1
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	b25b      	sxtb	r3, r3
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f7ff ff5d 	bl	8001eb4 <__NVIC_SetPriority>
}
 8001ffa:	46c0      	nop			@ (mov r8, r8)
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b004      	add	sp, #16
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	0002      	movs	r2, r0
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800200e:	1dfb      	adds	r3, r7, #7
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b25b      	sxtb	r3, r3
 8002014:	0018      	movs	r0, r3
 8002016:	f7ff ff33 	bl	8001e80 <__NVIC_EnableIRQ>
}
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	46bd      	mov	sp, r7
 800201e:	b002      	add	sp, #8
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	0018      	movs	r0, r3
 800202e:	f7ff ffaf 	bl	8001f90 <SysTick_Config>
 8002032:	0003      	movs	r3, r0
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b002      	add	sp, #8
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e077      	b.n	800213e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a3d      	ldr	r2, [pc, #244]	@ (8002148 <HAL_DMA_Init+0x10c>)
 8002054:	4694      	mov	ip, r2
 8002056:	4463      	add	r3, ip
 8002058:	2114      	movs	r1, #20
 800205a:	0018      	movs	r0, r3
 800205c:	f7fe f852 	bl	8000104 <__udivsi3>
 8002060:	0003      	movs	r3, r0
 8002062:	009a      	lsls	r2, r3, #2
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2225      	movs	r2, #37	@ 0x25
 800206c:	2102      	movs	r1, #2
 800206e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4934      	ldr	r1, [pc, #208]	@ (800214c <HAL_DMA_Init+0x110>)
 800207c:	400a      	ands	r2, r1
 800207e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6819      	ldr	r1, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f000 fa37 	bl	800252c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	2380      	movs	r3, #128	@ 0x80
 80020c4:	01db      	lsls	r3, r3, #7
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d102      	bne.n	80020d0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d8:	213f      	movs	r1, #63	@ 0x3f
 80020da:	400a      	ands	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80020e6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d011      	beq.n	8002114 <HAL_DMA_Init+0xd8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d80d      	bhi.n	8002114 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	0018      	movs	r0, r3
 80020fc:	f000 fa42 	bl	8002584 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	e008      	b.n	8002126 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2225      	movs	r2, #37	@ 0x25
 8002130:	2101      	movs	r1, #1
 8002132:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2224      	movs	r2, #36	@ 0x24
 8002138:	2100      	movs	r1, #0
 800213a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b002      	add	sp, #8
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	bffdfff8 	.word	0xbffdfff8
 800214c:	ffff800f 	.word	0xffff800f

08002150 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800215e:	2317      	movs	r3, #23
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2224      	movs	r2, #36	@ 0x24
 800216a:	5c9b      	ldrb	r3, [r3, r2]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_DMA_Start_IT+0x24>
 8002170:	2302      	movs	r3, #2
 8002172:	e06f      	b.n	8002254 <HAL_DMA_Start_IT+0x104>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2224      	movs	r2, #36	@ 0x24
 8002178:	2101      	movs	r1, #1
 800217a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2225      	movs	r2, #37	@ 0x25
 8002180:	5c9b      	ldrb	r3, [r3, r2]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b01      	cmp	r3, #1
 8002186:	d157      	bne.n	8002238 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2225      	movs	r2, #37	@ 0x25
 800218c:	2102      	movs	r1, #2
 800218e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	438a      	bics	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f97d 	bl	80024ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	210e      	movs	r1, #14
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e00f      	b.n	80021ec <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2104      	movs	r1, #4
 80021d8:	438a      	bics	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	210a      	movs	r1, #10
 80021e8:	430a      	orrs	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	2380      	movs	r3, #128	@ 0x80
 80021f4:	025b      	lsls	r3, r3, #9
 80021f6:	4013      	ands	r3, r2
 80021f8:	d008      	beq.n	800220c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002204:	2180      	movs	r1, #128	@ 0x80
 8002206:	0049      	lsls	r1, r1, #1
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800221e:	2180      	movs	r1, #128	@ 0x80
 8002220:	0049      	lsls	r1, r1, #1
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2101      	movs	r1, #1
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	e00a      	b.n	800224e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2280      	movs	r2, #128	@ 0x80
 800223c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2224      	movs	r2, #36	@ 0x24
 8002242:	2100      	movs	r1, #0
 8002244:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002246:	2317      	movs	r3, #23
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800224e:	2317      	movs	r3, #23
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	781b      	ldrb	r3, [r3, #0]
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	b006      	add	sp, #24
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002264:	210f      	movs	r1, #15
 8002266:	187b      	adds	r3, r7, r1
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2225      	movs	r2, #37	@ 0x25
 8002270:	5c9b      	ldrb	r3, [r3, r2]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d006      	beq.n	8002286 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2204      	movs	r2, #4
 800227c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800227e:	187b      	adds	r3, r7, r1
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
 8002284:	e049      	b.n	800231a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	210e      	movs	r1, #14
 8002292:	438a      	bics	r2, r1
 8002294:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2101      	movs	r1, #1
 80022a2:	438a      	bics	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b0:	491d      	ldr	r1, [pc, #116]	@ (8002328 <HAL_DMA_Abort_IT+0xcc>)
 80022b2:	400a      	ands	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80022b6:	4b1d      	ldr	r3, [pc, #116]	@ (800232c <HAL_DMA_Abort_IT+0xd0>)
 80022b8:	6859      	ldr	r1, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	221c      	movs	r2, #28
 80022c0:	4013      	ands	r3, r2
 80022c2:	2201      	movs	r2, #1
 80022c4:	409a      	lsls	r2, r3
 80022c6:	4b19      	ldr	r3, [pc, #100]	@ (800232c <HAL_DMA_Abort_IT+0xd0>)
 80022c8:	430a      	orrs	r2, r1
 80022ca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80022d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00c      	beq.n	80022f8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022e8:	490f      	ldr	r1, [pc, #60]	@ (8002328 <HAL_DMA_Abort_IT+0xcc>)
 80022ea:	400a      	ands	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80022f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2225      	movs	r2, #37	@ 0x25
 80022fc:	2101      	movs	r1, #1
 80022fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2224      	movs	r2, #36	@ 0x24
 8002304:	2100      	movs	r1, #0
 8002306:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800230c:	2b00      	cmp	r3, #0
 800230e:	d004      	beq.n	800231a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	0010      	movs	r0, r2
 8002318:	4798      	blx	r3
    }
  }
  return status;
 800231a:	230f      	movs	r3, #15
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	781b      	ldrb	r3, [r3, #0]
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b004      	add	sp, #16
 8002326:	bd80      	pop	{r7, pc}
 8002328:	fffffeff 	.word	0xfffffeff
 800232c:	40020000 	.word	0x40020000

08002330 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002338:	4b55      	ldr	r3, [pc, #340]	@ (8002490 <HAL_DMA_IRQHandler+0x160>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	221c      	movs	r2, #28
 800234c:	4013      	ands	r3, r2
 800234e:	2204      	movs	r2, #4
 8002350:	409a      	lsls	r2, r3
 8002352:	0013      	movs	r3, r2
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4013      	ands	r3, r2
 8002358:	d027      	beq.n	80023aa <HAL_DMA_IRQHandler+0x7a>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2204      	movs	r2, #4
 800235e:	4013      	ands	r3, r2
 8002360:	d023      	beq.n	80023aa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2220      	movs	r2, #32
 800236a:	4013      	ands	r3, r2
 800236c:	d107      	bne.n	800237e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2104      	movs	r1, #4
 800237a:	438a      	bics	r2, r1
 800237c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800237e:	4b44      	ldr	r3, [pc, #272]	@ (8002490 <HAL_DMA_IRQHandler+0x160>)
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	221c      	movs	r2, #28
 8002388:	4013      	ands	r3, r2
 800238a:	2204      	movs	r2, #4
 800238c:	409a      	lsls	r2, r3
 800238e:	4b40      	ldr	r3, [pc, #256]	@ (8002490 <HAL_DMA_IRQHandler+0x160>)
 8002390:	430a      	orrs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002398:	2b00      	cmp	r3, #0
 800239a:	d100      	bne.n	800239e <HAL_DMA_IRQHandler+0x6e>
 800239c:	e073      	b.n	8002486 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	0010      	movs	r0, r2
 80023a6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80023a8:	e06d      	b.n	8002486 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	221c      	movs	r2, #28
 80023b0:	4013      	ands	r3, r2
 80023b2:	2202      	movs	r2, #2
 80023b4:	409a      	lsls	r2, r3
 80023b6:	0013      	movs	r3, r2
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4013      	ands	r3, r2
 80023bc:	d02e      	beq.n	800241c <HAL_DMA_IRQHandler+0xec>
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2202      	movs	r2, #2
 80023c2:	4013      	ands	r3, r2
 80023c4:	d02a      	beq.n	800241c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2220      	movs	r2, #32
 80023ce:	4013      	ands	r3, r2
 80023d0:	d10b      	bne.n	80023ea <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	210a      	movs	r1, #10
 80023de:	438a      	bics	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2225      	movs	r2, #37	@ 0x25
 80023e6:	2101      	movs	r1, #1
 80023e8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80023ea:	4b29      	ldr	r3, [pc, #164]	@ (8002490 <HAL_DMA_IRQHandler+0x160>)
 80023ec:	6859      	ldr	r1, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	221c      	movs	r2, #28
 80023f4:	4013      	ands	r3, r2
 80023f6:	2202      	movs	r2, #2
 80023f8:	409a      	lsls	r2, r3
 80023fa:	4b25      	ldr	r3, [pc, #148]	@ (8002490 <HAL_DMA_IRQHandler+0x160>)
 80023fc:	430a      	orrs	r2, r1
 80023fe:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2224      	movs	r2, #36	@ 0x24
 8002404:	2100      	movs	r1, #0
 8002406:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240c:	2b00      	cmp	r3, #0
 800240e:	d03a      	beq.n	8002486 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	0010      	movs	r0, r2
 8002418:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800241a:	e034      	b.n	8002486 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	221c      	movs	r2, #28
 8002422:	4013      	ands	r3, r2
 8002424:	2208      	movs	r2, #8
 8002426:	409a      	lsls	r2, r3
 8002428:	0013      	movs	r3, r2
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4013      	ands	r3, r2
 800242e:	d02b      	beq.n	8002488 <HAL_DMA_IRQHandler+0x158>
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2208      	movs	r2, #8
 8002434:	4013      	ands	r3, r2
 8002436:	d027      	beq.n	8002488 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	210e      	movs	r1, #14
 8002444:	438a      	bics	r2, r1
 8002446:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002448:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <HAL_DMA_IRQHandler+0x160>)
 800244a:	6859      	ldr	r1, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	221c      	movs	r2, #28
 8002452:	4013      	ands	r3, r2
 8002454:	2201      	movs	r2, #1
 8002456:	409a      	lsls	r2, r3
 8002458:	4b0d      	ldr	r3, [pc, #52]	@ (8002490 <HAL_DMA_IRQHandler+0x160>)
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2225      	movs	r2, #37	@ 0x25
 8002468:	2101      	movs	r1, #1
 800246a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2224      	movs	r2, #36	@ 0x24
 8002470:	2100      	movs	r1, #0
 8002472:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	0010      	movs	r0, r2
 8002484:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002486:	46c0      	nop			@ (mov r8, r8)
 8002488:	46c0      	nop			@ (mov r8, r8)
}
 800248a:	46bd      	mov	sp, r7
 800248c:	b004      	add	sp, #16
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40020000 	.word	0x40020000

08002494 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2225      	movs	r2, #37	@ 0x25
 80024a0:	5c9b      	ldrb	r3, [r3, r2]
 80024a2:	b2db      	uxtb	r3, r3
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}

080024ac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80024c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d004      	beq.n	80024d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80024d4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80024d6:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <DMA_SetConfig+0x7c>)
 80024d8:	6859      	ldr	r1, [r3, #4]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	221c      	movs	r2, #28
 80024e0:	4013      	ands	r3, r2
 80024e2:	2201      	movs	r2, #1
 80024e4:	409a      	lsls	r2, r3
 80024e6:	4b10      	ldr	r3, [pc, #64]	@ (8002528 <DMA_SetConfig+0x7c>)
 80024e8:	430a      	orrs	r2, r1
 80024ea:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b10      	cmp	r3, #16
 80024fa:	d108      	bne.n	800250e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800250c:	e007      	b.n	800251e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	60da      	str	r2, [r3, #12]
}
 800251e:	46c0      	nop			@ (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	b004      	add	sp, #16
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			@ (mov r8, r8)
 8002528:	40020000 	.word	0x40020000

0800252c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	4a10      	ldr	r2, [pc, #64]	@ (800257c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800253c:	4694      	mov	ip, r2
 800253e:	4463      	add	r3, ip
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	001a      	movs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	001a      	movs	r2, r3
 800254e:	23ff      	movs	r3, #255	@ 0xff
 8002550:	4013      	ands	r3, r2
 8002552:	3b08      	subs	r3, #8
 8002554:	2114      	movs	r1, #20
 8002556:	0018      	movs	r0, r3
 8002558:	f7fd fdd4 	bl	8000104 <__udivsi3>
 800255c:	0003      	movs	r3, r0
 800255e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a07      	ldr	r2, [pc, #28]	@ (8002580 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002564:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	221f      	movs	r2, #31
 800256a:	4013      	ands	r3, r2
 800256c:	2201      	movs	r2, #1
 800256e:	409a      	lsls	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002574:	46c0      	nop			@ (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b004      	add	sp, #16
 800257a:	bd80      	pop	{r7, pc}
 800257c:	10008200 	.word	0x10008200
 8002580:	40020880 	.word	0x40020880

08002584 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	223f      	movs	r2, #63	@ 0x3f
 8002592:	4013      	ands	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800259a:	4694      	mov	ip, r2
 800259c:	4463      	add	r3, ip
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	001a      	movs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a07      	ldr	r2, [pc, #28]	@ (80025c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80025aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	4013      	ands	r3, r2
 80025b4:	2201      	movs	r2, #1
 80025b6:	409a      	lsls	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80025bc:	46c0      	nop			@ (mov r8, r8)
 80025be:	46bd      	mov	sp, r7
 80025c0:	b004      	add	sp, #16
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	1000823f 	.word	0x1000823f
 80025c8:	40020940 	.word	0x40020940

080025cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025da:	e147      	b.n	800286c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2101      	movs	r1, #1
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4091      	lsls	r1, r2
 80025e6:	000a      	movs	r2, r1
 80025e8:	4013      	ands	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d100      	bne.n	80025f4 <HAL_GPIO_Init+0x28>
 80025f2:	e138      	b.n	8002866 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2203      	movs	r2, #3
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d005      	beq.n	800260c <HAL_GPIO_Init+0x40>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2203      	movs	r2, #3
 8002606:	4013      	ands	r3, r2
 8002608:	2b02      	cmp	r3, #2
 800260a:	d130      	bne.n	800266e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	409a      	lsls	r2, r3
 800261a:	0013      	movs	r3, r2
 800261c:	43da      	mvns	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	409a      	lsls	r2, r3
 800262e:	0013      	movs	r3, r2
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002642:	2201      	movs	r2, #1
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	409a      	lsls	r2, r3
 8002648:	0013      	movs	r3, r2
 800264a:	43da      	mvns	r2, r3
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	2201      	movs	r2, #1
 800265a:	401a      	ands	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	409a      	lsls	r2, r3
 8002660:	0013      	movs	r3, r2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2203      	movs	r2, #3
 8002674:	4013      	ands	r3, r2
 8002676:	2b03      	cmp	r3, #3
 8002678:	d017      	beq.n	80026aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	409a      	lsls	r2, r3
 8002688:	0013      	movs	r3, r2
 800268a:	43da      	mvns	r2, r3
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	409a      	lsls	r2, r3
 800269c:	0013      	movs	r3, r2
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2203      	movs	r2, #3
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d123      	bne.n	80026fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	08da      	lsrs	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3208      	adds	r2, #8
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	58d3      	ldr	r3, [r2, r3]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2207      	movs	r2, #7
 80026c8:	4013      	ands	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	220f      	movs	r2, #15
 80026ce:	409a      	lsls	r2, r3
 80026d0:	0013      	movs	r3, r2
 80026d2:	43da      	mvns	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2107      	movs	r1, #7
 80026e2:	400b      	ands	r3, r1
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	409a      	lsls	r2, r3
 80026e8:	0013      	movs	r3, r2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	08da      	lsrs	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3208      	adds	r2, #8
 80026f8:	0092      	lsls	r2, r2, #2
 80026fa:	6939      	ldr	r1, [r7, #16]
 80026fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	409a      	lsls	r2, r3
 800270c:	0013      	movs	r3, r2
 800270e:	43da      	mvns	r2, r3
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2203      	movs	r2, #3
 800271c:	401a      	ands	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	409a      	lsls	r2, r3
 8002724:	0013      	movs	r3, r2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	23c0      	movs	r3, #192	@ 0xc0
 8002738:	029b      	lsls	r3, r3, #10
 800273a:	4013      	ands	r3, r2
 800273c:	d100      	bne.n	8002740 <HAL_GPIO_Init+0x174>
 800273e:	e092      	b.n	8002866 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002740:	4a50      	ldr	r2, [pc, #320]	@ (8002884 <HAL_GPIO_Init+0x2b8>)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	089b      	lsrs	r3, r3, #2
 8002746:	3318      	adds	r3, #24
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	589b      	ldr	r3, [r3, r2]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2203      	movs	r2, #3
 8002752:	4013      	ands	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	220f      	movs	r2, #15
 8002758:	409a      	lsls	r2, r3
 800275a:	0013      	movs	r3, r2
 800275c:	43da      	mvns	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	23a0      	movs	r3, #160	@ 0xa0
 8002768:	05db      	lsls	r3, r3, #23
 800276a:	429a      	cmp	r2, r3
 800276c:	d013      	beq.n	8002796 <HAL_GPIO_Init+0x1ca>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a45      	ldr	r2, [pc, #276]	@ (8002888 <HAL_GPIO_Init+0x2bc>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00d      	beq.n	8002792 <HAL_GPIO_Init+0x1c6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a44      	ldr	r2, [pc, #272]	@ (800288c <HAL_GPIO_Init+0x2c0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d007      	beq.n	800278e <HAL_GPIO_Init+0x1c2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a43      	ldr	r2, [pc, #268]	@ (8002890 <HAL_GPIO_Init+0x2c4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d101      	bne.n	800278a <HAL_GPIO_Init+0x1be>
 8002786:	2303      	movs	r3, #3
 8002788:	e006      	b.n	8002798 <HAL_GPIO_Init+0x1cc>
 800278a:	2305      	movs	r3, #5
 800278c:	e004      	b.n	8002798 <HAL_GPIO_Init+0x1cc>
 800278e:	2302      	movs	r3, #2
 8002790:	e002      	b.n	8002798 <HAL_GPIO_Init+0x1cc>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_GPIO_Init+0x1cc>
 8002796:	2300      	movs	r3, #0
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	2103      	movs	r1, #3
 800279c:	400a      	ands	r2, r1
 800279e:	00d2      	lsls	r2, r2, #3
 80027a0:	4093      	lsls	r3, r2
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80027a8:	4936      	ldr	r1, [pc, #216]	@ (8002884 <HAL_GPIO_Init+0x2b8>)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	3318      	adds	r3, #24
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027b6:	4b33      	ldr	r3, [pc, #204]	@ (8002884 <HAL_GPIO_Init+0x2b8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	43da      	mvns	r2, r3
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	2380      	movs	r3, #128	@ 0x80
 80027cc:	035b      	lsls	r3, r3, #13
 80027ce:	4013      	ands	r3, r2
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027da:	4b2a      	ldr	r3, [pc, #168]	@ (8002884 <HAL_GPIO_Init+0x2b8>)
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80027e0:	4b28      	ldr	r3, [pc, #160]	@ (8002884 <HAL_GPIO_Init+0x2b8>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	43da      	mvns	r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	2380      	movs	r3, #128	@ 0x80
 80027f6:	039b      	lsls	r3, r3, #14
 80027f8:	4013      	ands	r3, r2
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002804:	4b1f      	ldr	r3, [pc, #124]	@ (8002884 <HAL_GPIO_Init+0x2b8>)
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800280a:	4a1e      	ldr	r2, [pc, #120]	@ (8002884 <HAL_GPIO_Init+0x2b8>)
 800280c:	2384      	movs	r3, #132	@ 0x84
 800280e:	58d3      	ldr	r3, [r2, r3]
 8002810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	43da      	mvns	r2, r3
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	2380      	movs	r3, #128	@ 0x80
 8002822:	029b      	lsls	r3, r3, #10
 8002824:	4013      	ands	r3, r2
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002830:	4914      	ldr	r1, [pc, #80]	@ (8002884 <HAL_GPIO_Init+0x2b8>)
 8002832:	2284      	movs	r2, #132	@ 0x84
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002838:	4a12      	ldr	r2, [pc, #72]	@ (8002884 <HAL_GPIO_Init+0x2b8>)
 800283a:	2380      	movs	r3, #128	@ 0x80
 800283c:	58d3      	ldr	r3, [r2, r3]
 800283e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	43da      	mvns	r2, r3
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4013      	ands	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	2380      	movs	r3, #128	@ 0x80
 8002850:	025b      	lsls	r3, r3, #9
 8002852:	4013      	ands	r3, r2
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800285e:	4909      	ldr	r1, [pc, #36]	@ (8002884 <HAL_GPIO_Init+0x2b8>)
 8002860:	2280      	movs	r2, #128	@ 0x80
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	3301      	adds	r3, #1
 800286a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	40da      	lsrs	r2, r3
 8002874:	1e13      	subs	r3, r2, #0
 8002876:	d000      	beq.n	800287a <HAL_GPIO_Init+0x2ae>
 8002878:	e6b0      	b.n	80025dc <HAL_GPIO_Init+0x10>
  }
}
 800287a:	46c0      	nop			@ (mov r8, r8)
 800287c:	46c0      	nop			@ (mov r8, r8)
 800287e:	46bd      	mov	sp, r7
 8002880:	b006      	add	sp, #24
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021800 	.word	0x40021800
 8002888:	50000400 	.word	0x50000400
 800288c:	50000800 	.word	0x50000800
 8002890:	50000c00 	.word	0x50000c00

08002894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	0008      	movs	r0, r1
 800289e:	0011      	movs	r1, r2
 80028a0:	1cbb      	adds	r3, r7, #2
 80028a2:	1c02      	adds	r2, r0, #0
 80028a4:	801a      	strh	r2, [r3, #0]
 80028a6:	1c7b      	adds	r3, r7, #1
 80028a8:	1c0a      	adds	r2, r1, #0
 80028aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028ac:	1c7b      	adds	r3, r7, #1
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d004      	beq.n	80028be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028b4:	1cbb      	adds	r3, r7, #2
 80028b6:	881a      	ldrh	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028bc:	e003      	b.n	80028c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028be:	1cbb      	adds	r3, r7, #2
 80028c0:	881a      	ldrh	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028c6:	46c0      	nop			@ (mov r8, r8)
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b002      	add	sp, #8
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	0002      	movs	r2, r0
 80028d8:	1dbb      	adds	r3, r7, #6
 80028da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80028dc:	4b10      	ldr	r3, [pc, #64]	@ (8002920 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	1dba      	adds	r2, r7, #6
 80028e2:	8812      	ldrh	r2, [r2, #0]
 80028e4:	4013      	ands	r3, r2
 80028e6:	d008      	beq.n	80028fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80028e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002920 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80028ea:	1dba      	adds	r2, r7, #6
 80028ec:	8812      	ldrh	r2, [r2, #0]
 80028ee:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80028f0:	1dbb      	adds	r3, r7, #6
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7fe ff8f 	bl	8001818 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80028fa:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	1dba      	adds	r2, r7, #6
 8002900:	8812      	ldrh	r2, [r2, #0]
 8002902:	4013      	ands	r3, r2
 8002904:	d008      	beq.n	8002918 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002906:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002908:	1dba      	adds	r2, r7, #6
 800290a:	8812      	ldrh	r2, [r2, #0]
 800290c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800290e:	1dbb      	adds	r3, r7, #6
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	0018      	movs	r0, r3
 8002914:	f7fe ffd4 	bl	80018c0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002918:	46c0      	nop			@ (mov r8, r8)
 800291a:	46bd      	mov	sp, r7
 800291c:	b002      	add	sp, #8
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021800 	.word	0x40021800

08002924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e08f      	b.n	8002a56 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2241      	movs	r2, #65	@ 0x41
 800293a:	5c9b      	ldrb	r3, [r3, r2]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d107      	bne.n	8002952 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2240      	movs	r2, #64	@ 0x40
 8002946:	2100      	movs	r1, #0
 8002948:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	0018      	movs	r0, r3
 800294e:	f7ff f833 	bl	80019b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2241      	movs	r2, #65	@ 0x41
 8002956:	2124      	movs	r1, #36	@ 0x24
 8002958:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2101      	movs	r1, #1
 8002966:	438a      	bics	r2, r1
 8002968:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	493b      	ldr	r1, [pc, #236]	@ (8002a60 <HAL_I2C_Init+0x13c>)
 8002974:	400a      	ands	r2, r1
 8002976:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4938      	ldr	r1, [pc, #224]	@ (8002a64 <HAL_I2C_Init+0x140>)
 8002984:	400a      	ands	r2, r1
 8002986:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d108      	bne.n	80029a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2180      	movs	r1, #128	@ 0x80
 800299a:	0209      	lsls	r1, r1, #8
 800299c:	430a      	orrs	r2, r1
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	e007      	b.n	80029b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2184      	movs	r1, #132	@ 0x84
 80029ac:	0209      	lsls	r1, r1, #8
 80029ae:	430a      	orrs	r2, r1
 80029b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d109      	bne.n	80029ce <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2180      	movs	r1, #128	@ 0x80
 80029c6:	0109      	lsls	r1, r1, #4
 80029c8:	430a      	orrs	r2, r1
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	e007      	b.n	80029de <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4923      	ldr	r1, [pc, #140]	@ (8002a68 <HAL_I2C_Init+0x144>)
 80029da:	400a      	ands	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4920      	ldr	r1, [pc, #128]	@ (8002a6c <HAL_I2C_Init+0x148>)
 80029ea:	430a      	orrs	r2, r1
 80029ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	491a      	ldr	r1, [pc, #104]	@ (8002a64 <HAL_I2C_Init+0x140>)
 80029fa:	400a      	ands	r2, r1
 80029fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69d9      	ldr	r1, [r3, #28]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1a      	ldr	r2, [r3, #32]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2241      	movs	r2, #65	@ 0x41
 8002a42:	2120      	movs	r1, #32
 8002a44:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2242      	movs	r2, #66	@ 0x42
 8002a50:	2100      	movs	r1, #0
 8002a52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	0018      	movs	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	f0ffffff 	.word	0xf0ffffff
 8002a64:	ffff7fff 	.word	0xffff7fff
 8002a68:	fffff7ff 	.word	0xfffff7ff
 8002a6c:	02008000 	.word	0x02008000

08002a70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b089      	sub	sp, #36	@ 0x24
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	0008      	movs	r0, r1
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	0019      	movs	r1, r3
 8002a7e:	230a      	movs	r3, #10
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	1c02      	adds	r2, r0, #0
 8002a84:	801a      	strh	r2, [r3, #0]
 8002a86:	2308      	movs	r3, #8
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	1c0a      	adds	r2, r1, #0
 8002a8c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2241      	movs	r2, #65	@ 0x41
 8002a92:	5c9b      	ldrb	r3, [r3, r2]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	d000      	beq.n	8002a9c <HAL_I2C_Master_Transmit+0x2c>
 8002a9a:	e10a      	b.n	8002cb2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2240      	movs	r2, #64	@ 0x40
 8002aa0:	5c9b      	ldrb	r3, [r3, r2]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_I2C_Master_Transmit+0x3a>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e104      	b.n	8002cb4 <HAL_I2C_Master_Transmit+0x244>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2240      	movs	r2, #64	@ 0x40
 8002aae:	2101      	movs	r1, #1
 8002ab0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ab2:	f7ff f9b7 	bl	8001e24 <HAL_GetTick>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	0219      	lsls	r1, r3, #8
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	2319      	movs	r3, #25
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f002 f856 	bl	8004b78 <I2C_WaitOnFlagUntilTimeout>
 8002acc:	1e03      	subs	r3, r0, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0ef      	b.n	8002cb4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2241      	movs	r2, #65	@ 0x41
 8002ad8:	2121      	movs	r1, #33	@ 0x21
 8002ada:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2242      	movs	r2, #66	@ 0x42
 8002ae0:	2110      	movs	r1, #16
 8002ae2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2208      	movs	r2, #8
 8002af4:	18ba      	adds	r2, r7, r2
 8002af6:	8812      	ldrh	r2, [r2, #0]
 8002af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2bff      	cmp	r3, #255	@ 0xff
 8002b08:	d906      	bls.n	8002b18 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	22ff      	movs	r2, #255	@ 0xff
 8002b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002b10:	2380      	movs	r3, #128	@ 0x80
 8002b12:	045b      	lsls	r3, r3, #17
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	e007      	b.n	8002b28 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002b22:	2380      	movs	r3, #128	@ 0x80
 8002b24:	049b      	lsls	r3, r3, #18
 8002b26:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d027      	beq.n	8002b80 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	3301      	adds	r3, #1
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	697c      	ldr	r4, [r7, #20]
 8002b6c:	230a      	movs	r3, #10
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	8819      	ldrh	r1, [r3, #0]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	4b51      	ldr	r3, [pc, #324]	@ (8002cbc <HAL_I2C_Master_Transmit+0x24c>)
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	0023      	movs	r3, r4
 8002b7a:	f002 f9d7 	bl	8004f2c <I2C_TransferConfig>
 8002b7e:	e06f      	b.n	8002c60 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	697c      	ldr	r4, [r7, #20]
 8002b88:	230a      	movs	r3, #10
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	8819      	ldrh	r1, [r3, #0]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	4b4a      	ldr	r3, [pc, #296]	@ (8002cbc <HAL_I2C_Master_Transmit+0x24c>)
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	0023      	movs	r3, r4
 8002b96:	f002 f9c9 	bl	8004f2c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002b9a:	e061      	b.n	8002c60 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f002 f840 	bl	8004c28 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ba8:	1e03      	subs	r3, r0, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e081      	b.n	8002cb4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d03a      	beq.n	8002c60 <HAL_I2C_Master_Transmit+0x1f0>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d136      	bne.n	8002c60 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	0013      	movs	r3, r2
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2180      	movs	r1, #128	@ 0x80
 8002c00:	f001 ffba 	bl	8004b78 <I2C_WaitOnFlagUntilTimeout>
 8002c04:	1e03      	subs	r3, r0, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e053      	b.n	8002cb4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2bff      	cmp	r3, #255	@ 0xff
 8002c14:	d911      	bls.n	8002c3a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	22ff      	movs	r2, #255	@ 0xff
 8002c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	2380      	movs	r3, #128	@ 0x80
 8002c24:	045c      	lsls	r4, r3, #17
 8002c26:	230a      	movs	r3, #10
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	8819      	ldrh	r1, [r3, #0]
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	0023      	movs	r3, r4
 8002c34:	f002 f97a 	bl	8004f2c <I2C_TransferConfig>
 8002c38:	e012      	b.n	8002c60 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	2380      	movs	r3, #128	@ 0x80
 8002c4c:	049c      	lsls	r4, r3, #18
 8002c4e:	230a      	movs	r3, #10
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	8819      	ldrh	r1, [r3, #0]
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	2300      	movs	r3, #0
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	0023      	movs	r3, r4
 8002c5c:	f002 f966 	bl	8004f2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d198      	bne.n	8002b9c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f002 f81f 	bl	8004cb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c76:	1e03      	subs	r3, r0, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e01a      	b.n	8002cb4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2220      	movs	r2, #32
 8002c84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	490b      	ldr	r1, [pc, #44]	@ (8002cc0 <HAL_I2C_Master_Transmit+0x250>)
 8002c92:	400a      	ands	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2241      	movs	r2, #65	@ 0x41
 8002c9a:	2120      	movs	r1, #32
 8002c9c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2242      	movs	r2, #66	@ 0x42
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2240      	movs	r2, #64	@ 0x40
 8002caa:	2100      	movs	r1, #0
 8002cac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
  }
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b007      	add	sp, #28
 8002cba:	bd90      	pop	{r4, r7, pc}
 8002cbc:	80002000 	.word	0x80002000
 8002cc0:	fe00e800 	.word	0xfe00e800

08002cc4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8002cc4:	b5b0      	push	{r4, r5, r7, lr}
 8002cc6:	b08a      	sub	sp, #40	@ 0x28
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	0008      	movs	r0, r1
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	0019      	movs	r1, r3
 8002cd2:	230a      	movs	r3, #10
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	1c02      	adds	r2, r0, #0
 8002cd8:	801a      	strh	r2, [r3, #0]
 8002cda:	2308      	movs	r3, #8
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	1c0a      	adds	r2, r1, #0
 8002ce0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2241      	movs	r2, #65	@ 0x41
 8002cea:	5c9b      	ldrb	r3, [r3, r2]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	d000      	beq.n	8002cf4 <HAL_I2C_Master_Transmit_DMA+0x30>
 8002cf2:	e0ff      	b.n	8002ef4 <HAL_I2C_Master_Transmit_DMA+0x230>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	2380      	movs	r3, #128	@ 0x80
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	401a      	ands	r2, r3
 8002d00:	2380      	movs	r3, #128	@ 0x80
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d101      	bne.n	8002d0c <HAL_I2C_Master_Transmit_DMA+0x48>
    {
      return HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e0f4      	b.n	8002ef6 <HAL_I2C_Master_Transmit_DMA+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2240      	movs	r2, #64	@ 0x40
 8002d10:	5c9b      	ldrb	r3, [r3, r2]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_I2C_Master_Transmit_DMA+0x56>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e0ed      	b.n	8002ef6 <HAL_I2C_Master_Transmit_DMA+0x232>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2240      	movs	r2, #64	@ 0x40
 8002d1e:	2101      	movs	r1, #1
 8002d20:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2241      	movs	r2, #65	@ 0x41
 8002d26:	2121      	movs	r1, #33	@ 0x21
 8002d28:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2242      	movs	r2, #66	@ 0x42
 8002d2e:	2110      	movs	r1, #16
 8002d30:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2208      	movs	r2, #8
 8002d42:	18ba      	adds	r2, r7, r2
 8002d44:	8812      	ldrh	r2, [r2, #0]
 8002d46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4a6d      	ldr	r2, [pc, #436]	@ (8002f00 <HAL_I2C_Master_Transmit_DMA+0x23c>)
 8002d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4a6c      	ldr	r2, [pc, #432]	@ (8002f04 <HAL_I2C_Master_Transmit_DMA+0x240>)
 8002d52:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2bff      	cmp	r3, #255	@ 0xff
 8002d5c:	d906      	bls.n	8002d6c <HAL_I2C_Master_Transmit_DMA+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	22ff      	movs	r2, #255	@ 0xff
 8002d62:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002d64:	2380      	movs	r3, #128	@ 0x80
 8002d66:	045b      	lsls	r3, r3, #17
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	e007      	b.n	8002d7c <HAL_I2C_Master_Transmit_DMA+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002d76:	2380      	movs	r3, #128	@ 0x80
 8002d78:	049b      	lsls	r3, r3, #18
 8002d7a:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01a      	beq.n	8002dba <HAL_I2C_Master_Transmit_DMA+0xf6>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9e:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d100      	bne.n	8002dc4 <HAL_I2C_Master_Transmit_DMA+0x100>
 8002dc2:	e07c      	b.n	8002ebe <HAL_I2C_Master_Transmit_DMA+0x1fa>
    {
      if (hi2c->hdmatx != NULL)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d025      	beq.n	8002e18 <HAL_I2C_Master_Transmit_DMA+0x154>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd0:	4a4d      	ldr	r2, [pc, #308]	@ (8002f08 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8002dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8002f0c <HAL_I2C_Master_Transmit_DMA+0x248>)
 8002dda:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de8:	2200      	movs	r2, #0
 8002dea:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	0019      	movs	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8002dfc:	001a      	movs	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8002e02:	2517      	movs	r5, #23
 8002e04:	197c      	adds	r4, r7, r5
 8002e06:	f7ff f9a3 	bl	8002150 <HAL_DMA_Start_IT>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002e0e:	197b      	adds	r3, r7, r5
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d13f      	bne.n	8002e96 <HAL_I2C_Master_Transmit_DMA+0x1d2>
 8002e16:	e013      	b.n	8002e40 <HAL_I2C_Master_Transmit_DMA+0x17c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2241      	movs	r2, #65	@ 0x41
 8002e1c:	2120      	movs	r1, #32
 8002e1e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2242      	movs	r2, #66	@ 0x42
 8002e24:	2100      	movs	r1, #0
 8002e26:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2c:	2280      	movs	r2, #128	@ 0x80
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2240      	movs	r2, #64	@ 0x40
 8002e38:	2100      	movs	r1, #0
 8002e3a:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e05a      	b.n	8002ef6 <HAL_I2C_Master_Transmit_DMA+0x232>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	69fc      	ldr	r4, [r7, #28]
 8002e4c:	230a      	movs	r3, #10
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	8819      	ldrh	r1, [r3, #0]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	4b2e      	ldr	r3, [pc, #184]	@ (8002f10 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	0023      	movs	r3, r4
 8002e5a:	f002 f867 	bl	8004f2c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2240      	movs	r2, #64	@ 0x40
 8002e74:	2100      	movs	r1, #0
 8002e76:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2110      	movs	r1, #16
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f002 f88f 	bl	8004fa0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2180      	movs	r1, #128	@ 0x80
 8002e8e:	01c9      	lsls	r1, r1, #7
 8002e90:	430a      	orrs	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	e02c      	b.n	8002ef0 <HAL_I2C_Master_Transmit_DMA+0x22c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2241      	movs	r2, #65	@ 0x41
 8002e9a:	2120      	movs	r1, #32
 8002e9c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2242      	movs	r2, #66	@ 0x42
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	2210      	movs	r2, #16
 8002eac:	431a      	orrs	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2240      	movs	r2, #64	@ 0x40
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e01b      	b.n	8002ef6 <HAL_I2C_Master_Transmit_DMA+0x232>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4a14      	ldr	r2, [pc, #80]	@ (8002f14 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8002ec2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	049c      	lsls	r4, r3, #18
 8002ecc:	230a      	movs	r3, #10
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	8819      	ldrh	r1, [r3, #0]
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f10 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	0023      	movs	r3, r4
 8002eda:	f002 f827 	bl	8004f2c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2240      	movs	r2, #64	@ 0x40
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2101      	movs	r1, #1
 8002eea:	0018      	movs	r0, r3
 8002eec:	f002 f858 	bl	8004fa0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e000      	b.n	8002ef6 <HAL_I2C_Master_Transmit_DMA+0x232>
  }
  else
  {
    return HAL_BUSY;
 8002ef4:	2302      	movs	r3, #2
  }
}
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b008      	add	sp, #32
 8002efc:	bdb0      	pop	{r4, r5, r7, pc}
 8002efe:	46c0      	nop			@ (mov r8, r8)
 8002f00:	ffff0000 	.word	0xffff0000
 8002f04:	0800391d 	.word	0x0800391d
 8002f08:	080049c9 	.word	0x080049c9
 8002f0c:	08004b09 	.word	0x08004b09
 8002f10:	80002000 	.word	0x80002000
 8002f14:	080034b5 	.word	0x080034b5

08002f18 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8002f18:	b5b0      	push	{r4, r5, r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	0008      	movs	r0, r1
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	0019      	movs	r1, r3
 8002f26:	230a      	movs	r3, #10
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	1c02      	adds	r2, r0, #0
 8002f2c:	801a      	strh	r2, [r3, #0]
 8002f2e:	2308      	movs	r3, #8
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	1c0a      	adds	r2, r1, #0
 8002f34:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2241      	movs	r2, #65	@ 0x41
 8002f3a:	5c9b      	ldrb	r3, [r3, r2]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d000      	beq.n	8002f44 <HAL_I2C_Master_Receive_DMA+0x2c>
 8002f42:	e0dd      	b.n	8003100 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	2380      	movs	r3, #128	@ 0x80
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	401a      	ands	r2, r3
 8002f50:	2380      	movs	r3, #128	@ 0x80
 8002f52:	021b      	lsls	r3, r3, #8
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d101      	bne.n	8002f5c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e0d2      	b.n	8003102 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2240      	movs	r2, #64	@ 0x40
 8002f60:	5c9b      	ldrb	r3, [r3, r2]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_I2C_Master_Receive_DMA+0x52>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e0cb      	b.n	8003102 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2240      	movs	r2, #64	@ 0x40
 8002f6e:	2101      	movs	r1, #1
 8002f70:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2241      	movs	r2, #65	@ 0x41
 8002f76:	2122      	movs	r1, #34	@ 0x22
 8002f78:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2242      	movs	r2, #66	@ 0x42
 8002f7e:	2110      	movs	r1, #16
 8002f80:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2208      	movs	r2, #8
 8002f92:	18ba      	adds	r2, r7, r2
 8002f94:	8812      	ldrh	r2, [r2, #0]
 8002f96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a5c      	ldr	r2, [pc, #368]	@ (800310c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8002f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4a5b      	ldr	r2, [pc, #364]	@ (8003110 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8002fa2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2bff      	cmp	r3, #255	@ 0xff
 8002fac:	d906      	bls.n	8002fbc <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	22ff      	movs	r2, #255	@ 0xff
 8002fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002fb4:	2380      	movs	r3, #128	@ 0x80
 8002fb6:	045b      	lsls	r3, r3, #17
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	e007      	b.n	8002fcc <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002fc6:	2380      	movs	r3, #128	@ 0x80
 8002fc8:	049b      	lsls	r3, r3, #18
 8002fca:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d100      	bne.n	8002fd6 <HAL_I2C_Master_Receive_DMA+0xbe>
 8002fd4:	e078      	b.n	80030c8 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d023      	beq.n	8003026 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe2:	4a4c      	ldr	r2, [pc, #304]	@ (8003114 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8002fe4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fea:	4a4b      	ldr	r2, [pc, #300]	@ (8003118 <HAL_I2C_Master_Receive_DMA+0x200>)
 8002fec:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3324      	adds	r3, #36	@ 0x24
 8003008:	0019      	movs	r1, r3
 800300a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003010:	2513      	movs	r5, #19
 8003012:	197c      	adds	r4, r7, r5
 8003014:	f7ff f89c 	bl	8002150 <HAL_DMA_Start_IT>
 8003018:	0003      	movs	r3, r0
 800301a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800301c:	197b      	adds	r3, r7, r5
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d13d      	bne.n	80030a0 <HAL_I2C_Master_Receive_DMA+0x188>
 8003024:	e013      	b.n	800304e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2241      	movs	r2, #65	@ 0x41
 800302a:	2120      	movs	r1, #32
 800302c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2242      	movs	r2, #66	@ 0x42
 8003032:	2100      	movs	r1, #0
 8003034:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303a:	2280      	movs	r2, #128	@ 0x80
 800303c:	431a      	orrs	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2240      	movs	r2, #64	@ 0x40
 8003046:	2100      	movs	r1, #0
 8003048:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e059      	b.n	8003102 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003052:	b2da      	uxtb	r2, r3
 8003054:	697c      	ldr	r4, [r7, #20]
 8003056:	230a      	movs	r3, #10
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	8819      	ldrh	r1, [r3, #0]
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	4b2f      	ldr	r3, [pc, #188]	@ (800311c <HAL_I2C_Master_Receive_DMA+0x204>)
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	0023      	movs	r3, r4
 8003064:	f001 ff62 	bl	8004f2c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2240      	movs	r2, #64	@ 0x40
 800307e:	2100      	movs	r1, #0
 8003080:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2110      	movs	r1, #16
 8003086:	0018      	movs	r0, r3
 8003088:	f001 ff8a 	bl	8004fa0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2180      	movs	r1, #128	@ 0x80
 8003098:	0209      	lsls	r1, r1, #8
 800309a:	430a      	orrs	r2, r1
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	e02d      	b.n	80030fc <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2241      	movs	r2, #65	@ 0x41
 80030a4:	2120      	movs	r1, #32
 80030a6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2242      	movs	r2, #66	@ 0x42
 80030ac:	2100      	movs	r1, #0
 80030ae:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b4:	2210      	movs	r2, #16
 80030b6:	431a      	orrs	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2240      	movs	r2, #64	@ 0x40
 80030c0:	2100      	movs	r1, #0
 80030c2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e01c      	b.n	8003102 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4a15      	ldr	r2, [pc, #84]	@ (8003120 <HAL_I2C_Master_Receive_DMA+0x208>)
 80030cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	2380      	movs	r3, #128	@ 0x80
 80030d6:	049c      	lsls	r4, r3, #18
 80030d8:	230a      	movs	r3, #10
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	8819      	ldrh	r1, [r3, #0]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	4b0e      	ldr	r3, [pc, #56]	@ (800311c <HAL_I2C_Master_Receive_DMA+0x204>)
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	0023      	movs	r3, r4
 80030e6:	f001 ff21 	bl	8004f2c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2240      	movs	r2, #64	@ 0x40
 80030ee:	2100      	movs	r1, #0
 80030f0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2102      	movs	r1, #2
 80030f6:	0018      	movs	r0, r3
 80030f8:	f001 ff52 	bl	8004fa0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	e000      	b.n	8003102 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003100:	2302      	movs	r3, #2
  }
}
 8003102:	0018      	movs	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	b006      	add	sp, #24
 8003108:	bdb0      	pop	{r4, r5, r7, pc}
 800310a:	46c0      	nop			@ (mov r8, r8)
 800310c:	ffff0000 	.word	0xffff0000
 8003110:	0800391d 	.word	0x0800391d
 8003114:	08004a69 	.word	0x08004a69
 8003118:	08004b09 	.word	0x08004b09
 800311c:	80002400 	.word	0x80002400
 8003120:	080034b5 	.word	0x080034b5

08003124 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	@ 0x28
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	230a      	movs	r3, #10
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	1c0a      	adds	r2, r1, #0
 8003136:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2241      	movs	r2, #65	@ 0x41
 8003140:	5c9b      	ldrb	r3, [r3, r2]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b20      	cmp	r3, #32
 8003146:	d000      	beq.n	800314a <HAL_I2C_IsDeviceReady+0x26>
 8003148:	e0df      	b.n	800330a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699a      	ldr	r2, [r3, #24]
 8003150:	2380      	movs	r3, #128	@ 0x80
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	401a      	ands	r2, r3
 8003156:	2380      	movs	r3, #128	@ 0x80
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	429a      	cmp	r2, r3
 800315c:	d101      	bne.n	8003162 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800315e:	2302      	movs	r3, #2
 8003160:	e0d4      	b.n	800330c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2240      	movs	r2, #64	@ 0x40
 8003166:	5c9b      	ldrb	r3, [r3, r2]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_I2C_IsDeviceReady+0x4c>
 800316c:	2302      	movs	r3, #2
 800316e:	e0cd      	b.n	800330c <HAL_I2C_IsDeviceReady+0x1e8>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2240      	movs	r2, #64	@ 0x40
 8003174:	2101      	movs	r1, #1
 8003176:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2241      	movs	r2, #65	@ 0x41
 800317c:	2124      	movs	r1, #36	@ 0x24
 800317e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <HAL_I2C_IsDeviceReady+0x7a>
 800318e:	230a      	movs	r3, #10
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	059b      	lsls	r3, r3, #22
 8003196:	0d9b      	lsrs	r3, r3, #22
 8003198:	4a5e      	ldr	r2, [pc, #376]	@ (8003314 <HAL_I2C_IsDeviceReady+0x1f0>)
 800319a:	431a      	orrs	r2, r3
 800319c:	e006      	b.n	80031ac <HAL_I2C_IsDeviceReady+0x88>
 800319e:	230a      	movs	r3, #10
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	059b      	lsls	r3, r3, #22
 80031a6:	0d9b      	lsrs	r3, r3, #22
 80031a8:	4a5b      	ldr	r2, [pc, #364]	@ (8003318 <HAL_I2C_IsDeviceReady+0x1f4>)
 80031aa:	431a      	orrs	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80031b2:	f7fe fe37 	bl	8001e24 <HAL_GetTick>
 80031b6:	0003      	movs	r3, r0
 80031b8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2220      	movs	r2, #32
 80031c2:	4013      	ands	r3, r2
 80031c4:	3b20      	subs	r3, #32
 80031c6:	425a      	negs	r2, r3
 80031c8:	4153      	adcs	r3, r2
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	231f      	movs	r3, #31
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2210      	movs	r2, #16
 80031da:	4013      	ands	r3, r2
 80031dc:	3b10      	subs	r3, #16
 80031de:	425a      	negs	r2, r3
 80031e0:	4153      	adcs	r3, r2
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	231e      	movs	r3, #30
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80031ea:	e035      	b.n	8003258 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	3301      	adds	r3, #1
 80031f0:	d01a      	beq.n	8003228 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031f2:	f7fe fe17 	bl	8001e24 <HAL_GetTick>
 80031f6:	0002      	movs	r2, r0
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d302      	bcc.n	8003208 <HAL_I2C_IsDeviceReady+0xe4>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10f      	bne.n	8003228 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2241      	movs	r2, #65	@ 0x41
 800320c:	2120      	movs	r1, #32
 800320e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003214:	2220      	movs	r2, #32
 8003216:	431a      	orrs	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2240      	movs	r2, #64	@ 0x40
 8003220:	2100      	movs	r1, #0
 8003222:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e071      	b.n	800330c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2220      	movs	r2, #32
 8003230:	4013      	ands	r3, r2
 8003232:	3b20      	subs	r3, #32
 8003234:	425a      	negs	r2, r3
 8003236:	4153      	adcs	r3, r2
 8003238:	b2da      	uxtb	r2, r3
 800323a:	231f      	movs	r3, #31
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2210      	movs	r2, #16
 8003248:	4013      	ands	r3, r2
 800324a:	3b10      	subs	r3, #16
 800324c:	425a      	negs	r2, r3
 800324e:	4153      	adcs	r3, r2
 8003250:	b2da      	uxtb	r2, r3
 8003252:	231e      	movs	r3, #30
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003258:	231f      	movs	r3, #31
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d104      	bne.n	800326c <HAL_I2C_IsDeviceReady+0x148>
 8003262:	231e      	movs	r3, #30
 8003264:	18fb      	adds	r3, r7, r3
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0bf      	beq.n	80031ec <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2210      	movs	r2, #16
 8003274:	4013      	ands	r3, r2
 8003276:	2b10      	cmp	r3, #16
 8003278:	d01a      	beq.n	80032b0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	0013      	movs	r3, r2
 8003284:	2200      	movs	r2, #0
 8003286:	2120      	movs	r1, #32
 8003288:	f001 fc76 	bl	8004b78 <I2C_WaitOnFlagUntilTimeout>
 800328c:	1e03      	subs	r3, r0, #0
 800328e:	d001      	beq.n	8003294 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e03b      	b.n	800330c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2220      	movs	r2, #32
 800329a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2241      	movs	r2, #65	@ 0x41
 80032a0:	2120      	movs	r1, #32
 80032a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2240      	movs	r2, #64	@ 0x40
 80032a8:	2100      	movs	r1, #0
 80032aa:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e02d      	b.n	800330c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	0013      	movs	r3, r2
 80032ba:	2200      	movs	r2, #0
 80032bc:	2120      	movs	r1, #32
 80032be:	f001 fc5b 	bl	8004b78 <I2C_WaitOnFlagUntilTimeout>
 80032c2:	1e03      	subs	r3, r0, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e020      	b.n	800330c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2210      	movs	r2, #16
 80032d0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2220      	movs	r2, #32
 80032d8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	3301      	adds	r3, #1
 80032de:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d900      	bls.n	80032ea <HAL_I2C_IsDeviceReady+0x1c6>
 80032e8:	e74d      	b.n	8003186 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2241      	movs	r2, #65	@ 0x41
 80032ee:	2120      	movs	r1, #32
 80032f0:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f6:	2220      	movs	r2, #32
 80032f8:	431a      	orrs	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2240      	movs	r2, #64	@ 0x40
 8003302:	2100      	movs	r1, #0
 8003304:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800330a:	2302      	movs	r3, #2
  }
}
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	b008      	add	sp, #32
 8003312:	bd80      	pop	{r7, pc}
 8003314:	02002000 	.word	0x02002000
 8003318:	02002800 	.word	0x02002800

0800331c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	68f9      	ldr	r1, [r7, #12]
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	4798      	blx	r3
  }
}
 8003348:	46c0      	nop			@ (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b004      	add	sp, #16
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	2380      	movs	r3, #128	@ 0x80
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4013      	ands	r3, r2
 8003370:	d00e      	beq.n	8003390 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2280      	movs	r2, #128	@ 0x80
 8003376:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003378:	d00a      	beq.n	8003390 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337e:	2201      	movs	r2, #1
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2280      	movs	r2, #128	@ 0x80
 800338c:	0052      	lsls	r2, r2, #1
 800338e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	2380      	movs	r3, #128	@ 0x80
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4013      	ands	r3, r2
 8003398:	d00e      	beq.n	80033b8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2280      	movs	r2, #128	@ 0x80
 800339e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80033a0:	d00a      	beq.n	80033b8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a6:	2208      	movs	r2, #8
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2280      	movs	r2, #128	@ 0x80
 80033b4:	00d2      	lsls	r2, r2, #3
 80033b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	2380      	movs	r3, #128	@ 0x80
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4013      	ands	r3, r2
 80033c0:	d00e      	beq.n	80033e0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2280      	movs	r2, #128	@ 0x80
 80033c6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80033c8:	d00a      	beq.n	80033e0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ce:	2202      	movs	r2, #2
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2280      	movs	r2, #128	@ 0x80
 80033dc:	0092      	lsls	r2, r2, #2
 80033de:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	220b      	movs	r2, #11
 80033ea:	4013      	ands	r3, r2
 80033ec:	d005      	beq.n	80033fa <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	0011      	movs	r1, r2
 80033f4:	0018      	movs	r0, r3
 80033f6:	f001 f999 	bl	800472c <I2C_ITError>
  }
}
 80033fa:	46c0      	nop			@ (mov r8, r8)
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b006      	add	sp, #24
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	b002      	add	sp, #8
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800341a:	46c0      	nop			@ (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b002      	add	sp, #8
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b002      	add	sp, #8
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800343a:	46c0      	nop			@ (mov r8, r8)
 800343c:	46bd      	mov	sp, r7
 800343e:	b002      	add	sp, #8
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	0008      	movs	r0, r1
 800344c:	0011      	movs	r1, r2
 800344e:	1cfb      	adds	r3, r7, #3
 8003450:	1c02      	adds	r2, r0, #0
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	003b      	movs	r3, r7
 8003456:	1c0a      	adds	r2, r1, #0
 8003458:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800345a:	46c0      	nop			@ (mov r8, r8)
 800345c:	46bd      	mov	sp, r7
 800345e:	b002      	add	sp, #8
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800346a:	46c0      	nop			@ (mov r8, r8)
 800346c:	46bd      	mov	sp, r7
 800346e:	b002      	add	sp, #8
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	46bd      	mov	sp, r7
 800347e:	b002      	add	sp, #8
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	46bd      	mov	sp, r7
 800348e:	b002      	add	sp, #8
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800349a:	46c0      	nop			@ (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b002      	add	sp, #8
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b002      	add	sp, #8
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80034b4:	b590      	push	{r4, r7, lr}
 80034b6:	b089      	sub	sp, #36	@ 0x24
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2240      	movs	r2, #64	@ 0x40
 80034c8:	5c9b      	ldrb	r3, [r3, r2]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <I2C_Master_ISR_IT+0x1e>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e11d      	b.n	800370e <I2C_Master_ISR_IT+0x25a>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2240      	movs	r2, #64	@ 0x40
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2210      	movs	r2, #16
 80034de:	4013      	ands	r3, r2
 80034e0:	d012      	beq.n	8003508 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2210      	movs	r2, #16
 80034e6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034e8:	d00e      	beq.n	8003508 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2210      	movs	r2, #16
 80034f0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f6:	2204      	movs	r2, #4
 80034f8:	431a      	orrs	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	0018      	movs	r0, r3
 8003502:	f001 fa3e 	bl	8004982 <I2C_Flush_TXDR>
 8003506:	e0ef      	b.n	80036e8 <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2204      	movs	r2, #4
 800350c:	4013      	ands	r3, r2
 800350e:	d021      	beq.n	8003554 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2204      	movs	r2, #4
 8003514:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003516:	d01d      	beq.n	8003554 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2204      	movs	r2, #4
 800351c:	4393      	bics	r3, r2
 800351e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003552:	e0c9      	b.n	80036e8 <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2240      	movs	r2, #64	@ 0x40
 8003558:	4013      	ands	r3, r2
 800355a:	d126      	bne.n	80035aa <I2C_Master_ISR_IT+0xf6>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2202      	movs	r2, #2
 8003560:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8003562:	d022      	beq.n	80035aa <I2C_Master_ISR_IT+0xf6>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	4013      	ands	r3, r2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800356a:	d01e      	beq.n	80035aa <I2C_Master_ISR_IT+0xf6>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d100      	bne.n	8003578 <I2C_Master_ISR_IT+0xc4>
 8003576:	e0b7      	b.n	80036e8 <I2C_Master_ISR_IT+0x234>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	781a      	ldrb	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80035a8:	e09e      	b.n	80036e8 <I2C_Master_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2280      	movs	r2, #128	@ 0x80
 80035ae:	4013      	ands	r3, r2
 80035b0:	d100      	bne.n	80035b4 <I2C_Master_ISR_IT+0x100>
 80035b2:	e069      	b.n	8003688 <I2C_Master_ISR_IT+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2240      	movs	r2, #64	@ 0x40
 80035b8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80035ba:	d065      	beq.n	8003688 <I2C_Master_ISR_IT+0x1d4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d04a      	beq.n	800365c <I2C_Master_ISR_IT+0x1a8>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d146      	bne.n	800365c <I2C_Master_ISR_IT+0x1a8>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	2112      	movs	r1, #18
 80035d8:	187b      	adds	r3, r7, r1
 80035da:	0592      	lsls	r2, r2, #22
 80035dc:	0d92      	lsrs	r2, r2, #22
 80035de:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2bff      	cmp	r3, #255	@ 0xff
 80035e8:	d910      	bls.n	800360c <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	22ff      	movs	r2, #255	@ 0xff
 80035ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	2380      	movs	r3, #128	@ 0x80
 80035f8:	045c      	lsls	r4, r3, #17
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	8819      	ldrh	r1, [r3, #0]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	2300      	movs	r3, #0
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	0023      	movs	r3, r4
 8003606:	f001 fc91 	bl	8004f2c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800360a:	e03c      	b.n	8003686 <I2C_Master_ISR_IT+0x1d2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361a:	4a3f      	ldr	r2, [pc, #252]	@ (8003718 <I2C_Master_ISR_IT+0x264>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003624:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800362a:	2312      	movs	r3, #18
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	8819      	ldrh	r1, [r3, #0]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	2300      	movs	r3, #0
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	0023      	movs	r3, r4
 8003638:	f001 fc78 	bl	8004f2c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800363c:	e023      	b.n	8003686 <I2C_Master_ISR_IT+0x1d2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003642:	b2da      	uxtb	r2, r3
 8003644:	2380      	movs	r3, #128	@ 0x80
 8003646:	049c      	lsls	r4, r3, #18
 8003648:	2312      	movs	r3, #18
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	8819      	ldrh	r1, [r3, #0]
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	2300      	movs	r3, #0
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	0023      	movs	r3, r4
 8003656:	f001 fc69 	bl	8004f2c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800365a:	e014      	b.n	8003686 <I2C_Master_ISR_IT+0x1d2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	2380      	movs	r3, #128	@ 0x80
 8003664:	049b      	lsls	r3, r3, #18
 8003666:	401a      	ands	r2, r3
 8003668:	2380      	movs	r3, #128	@ 0x80
 800366a:	049b      	lsls	r3, r3, #18
 800366c:	429a      	cmp	r2, r3
 800366e:	d004      	beq.n	800367a <I2C_Master_ISR_IT+0x1c6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	0018      	movs	r0, r3
 8003674:	f000 fd06 	bl	8004084 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003678:	e036      	b.n	80036e8 <I2C_Master_ISR_IT+0x234>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2140      	movs	r1, #64	@ 0x40
 800367e:	0018      	movs	r0, r3
 8003680:	f001 f854 	bl	800472c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003684:	e030      	b.n	80036e8 <I2C_Master_ISR_IT+0x234>
 8003686:	e02f      	b.n	80036e8 <I2C_Master_ISR_IT+0x234>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2240      	movs	r2, #64	@ 0x40
 800368c:	4013      	ands	r3, r2
 800368e:	d02b      	beq.n	80036e8 <I2C_Master_ISR_IT+0x234>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2240      	movs	r2, #64	@ 0x40
 8003694:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003696:	d027      	beq.n	80036e8 <I2C_Master_ISR_IT+0x234>
  {
    if (hi2c->XferCount == 0U)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d11d      	bne.n	80036de <I2C_Master_ISR_IT+0x22a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	2380      	movs	r3, #128	@ 0x80
 80036aa:	049b      	lsls	r3, r3, #18
 80036ac:	401a      	ands	r2, r3
 80036ae:	2380      	movs	r3, #128	@ 0x80
 80036b0:	049b      	lsls	r3, r3, #18
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d018      	beq.n	80036e8 <I2C_Master_ISR_IT+0x234>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ba:	4a17      	ldr	r2, [pc, #92]	@ (8003718 <I2C_Master_ISR_IT+0x264>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d109      	bne.n	80036d4 <I2C_Master_ISR_IT+0x220>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2180      	movs	r1, #128	@ 0x80
 80036cc:	01c9      	lsls	r1, r1, #7
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	e009      	b.n	80036e8 <I2C_Master_ISR_IT+0x234>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	0018      	movs	r0, r3
 80036d8:	f000 fcd4 	bl	8004084 <I2C_ITMasterSeqCplt>
 80036dc:	e004      	b.n	80036e8 <I2C_Master_ISR_IT+0x234>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2140      	movs	r1, #64	@ 0x40
 80036e2:	0018      	movs	r0, r3
 80036e4:	f001 f822 	bl	800472c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2220      	movs	r2, #32
 80036ec:	4013      	ands	r3, r2
 80036ee:	d009      	beq.n	8003704 <I2C_Master_ISR_IT+0x250>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036f6:	d005      	beq.n	8003704 <I2C_Master_ISR_IT+0x250>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	0011      	movs	r1, r2
 80036fe:	0018      	movs	r0, r3
 8003700:	f000 fd66 	bl	80041d0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2240      	movs	r2, #64	@ 0x40
 8003708:	2100      	movs	r1, #0
 800370a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	0018      	movs	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	b007      	add	sp, #28
 8003714:	bd90      	pop	{r4, r7, pc}
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	ffff0000 	.word	0xffff0000

0800371c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2240      	movs	r2, #64	@ 0x40
 8003736:	5c9b      	ldrb	r3, [r3, r2]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <I2C_Slave_ISR_IT+0x24>
 800373c:	2302      	movs	r3, #2
 800373e:	e0e7      	b.n	8003910 <I2C_Slave_ISR_IT+0x1f4>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2240      	movs	r2, #64	@ 0x40
 8003744:	2101      	movs	r1, #1
 8003746:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2220      	movs	r2, #32
 800374c:	4013      	ands	r3, r2
 800374e:	d00a      	beq.n	8003766 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003756:	d006      	beq.n	8003766 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	0011      	movs	r1, r2
 800375e:	0018      	movs	r0, r3
 8003760:	f000 fe04 	bl	800436c <I2C_ITSlaveCplt>
 8003764:	e0cf      	b.n	8003906 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2210      	movs	r2, #16
 800376a:	4013      	ands	r3, r2
 800376c:	d052      	beq.n	8003814 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2210      	movs	r2, #16
 8003772:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003774:	d04e      	beq.n	8003814 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d12d      	bne.n	80037dc <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2241      	movs	r2, #65	@ 0x41
 8003784:	5c9b      	ldrb	r3, [r3, r2]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b28      	cmp	r3, #40	@ 0x28
 800378a:	d10b      	bne.n	80037a4 <I2C_Slave_ISR_IT+0x88>
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	2380      	movs	r3, #128	@ 0x80
 8003790:	049b      	lsls	r3, r3, #18
 8003792:	429a      	cmp	r2, r3
 8003794:	d106      	bne.n	80037a4 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	0011      	movs	r1, r2
 800379c:	0018      	movs	r0, r3
 800379e:	f000 ff6d 	bl	800467c <I2C_ITListenCplt>
 80037a2:	e036      	b.n	8003812 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2241      	movs	r2, #65	@ 0x41
 80037a8:	5c9b      	ldrb	r3, [r3, r2]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b29      	cmp	r3, #41	@ 0x29
 80037ae:	d110      	bne.n	80037d2 <I2C_Slave_ISR_IT+0xb6>
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	4a59      	ldr	r2, [pc, #356]	@ (8003918 <I2C_Slave_ISR_IT+0x1fc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00c      	beq.n	80037d2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2210      	movs	r2, #16
 80037be:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	0018      	movs	r0, r3
 80037c4:	f001 f8dd 	bl	8004982 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	0018      	movs	r0, r3
 80037cc:	f000 fc9c 	bl	8004108 <I2C_ITSlaveSeqCplt>
 80037d0:	e01f      	b.n	8003812 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2210      	movs	r2, #16
 80037d8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80037da:	e091      	b.n	8003900 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2210      	movs	r2, #16
 80037e2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e8:	2204      	movs	r2, #4
 80037ea:	431a      	orrs	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <I2C_Slave_ISR_IT+0xe6>
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	2380      	movs	r3, #128	@ 0x80
 80037fa:	045b      	lsls	r3, r3, #17
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d000      	beq.n	8003802 <I2C_Slave_ISR_IT+0xe6>
 8003800:	e07e      	b.n	8003900 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	0011      	movs	r1, r2
 800380a:	0018      	movs	r0, r3
 800380c:	f000 ff8e 	bl	800472c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003810:	e076      	b.n	8003900 <I2C_Slave_ISR_IT+0x1e4>
 8003812:	e075      	b.n	8003900 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2204      	movs	r2, #4
 8003818:	4013      	ands	r3, r2
 800381a:	d02f      	beq.n	800387c <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2204      	movs	r2, #4
 8003820:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003822:	d02b      	beq.n	800387c <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d018      	beq.n	8003860 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d14c      	bne.n	8003904 <I2C_Slave_ISR_IT+0x1e8>
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	4a2a      	ldr	r2, [pc, #168]	@ (8003918 <I2C_Slave_ISR_IT+0x1fc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d048      	beq.n	8003904 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	0018      	movs	r0, r3
 8003876:	f000 fc47 	bl	8004108 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800387a:	e043      	b.n	8003904 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	2208      	movs	r2, #8
 8003880:	4013      	ands	r3, r2
 8003882:	d00a      	beq.n	800389a <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2208      	movs	r2, #8
 8003888:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800388a:	d006      	beq.n	800389a <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	0011      	movs	r1, r2
 8003892:	0018      	movs	r0, r3
 8003894:	f000 fb52 	bl	8003f3c <I2C_ITAddrCplt>
 8003898:	e035      	b.n	8003906 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	2202      	movs	r2, #2
 800389e:	4013      	ands	r3, r2
 80038a0:	d031      	beq.n	8003906 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80038a8:	d02d      	beq.n	8003906 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d018      	beq.n	80038e6 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80038e4:	e00f      	b.n	8003906 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	2380      	movs	r3, #128	@ 0x80
 80038ea:	045b      	lsls	r3, r3, #17
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d002      	beq.n	80038f6 <I2C_Slave_ISR_IT+0x1da>
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d107      	bne.n	8003906 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	0018      	movs	r0, r3
 80038fa:	f000 fc05 	bl	8004108 <I2C_ITSlaveSeqCplt>
 80038fe:	e002      	b.n	8003906 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8003900:	46c0      	nop			@ (mov r8, r8)
 8003902:	e000      	b.n	8003906 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8003904:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2240      	movs	r2, #64	@ 0x40
 800390a:	2100      	movs	r1, #0
 800390c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	0018      	movs	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	b006      	add	sp, #24
 8003916:	bd80      	pop	{r7, pc}
 8003918:	ffff0000 	.word	0xffff0000

0800391c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b089      	sub	sp, #36	@ 0x24
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2240      	movs	r2, #64	@ 0x40
 800392c:	5c9b      	ldrb	r3, [r3, r2]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <I2C_Master_ISR_DMA+0x1a>
 8003932:	2302      	movs	r3, #2
 8003934:	e0e7      	b.n	8003b06 <I2C_Master_ISR_DMA+0x1ea>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2240      	movs	r2, #64	@ 0x40
 800393a:	2101      	movs	r1, #1
 800393c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2210      	movs	r2, #16
 8003942:	4013      	ands	r3, r2
 8003944:	d017      	beq.n	8003976 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2210      	movs	r2, #16
 800394a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800394c:	d013      	beq.n	8003976 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2210      	movs	r2, #16
 8003954:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395a:	2204      	movs	r2, #4
 800395c:	431a      	orrs	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2120      	movs	r1, #32
 8003966:	0018      	movs	r0, r3
 8003968:	f001 fb1a 	bl	8004fa0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	0018      	movs	r0, r3
 8003970:	f001 f807 	bl	8004982 <I2C_Flush_TXDR>
 8003974:	e0c2      	b.n	8003afc <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2280      	movs	r2, #128	@ 0x80
 800397a:	4013      	ands	r3, r2
 800397c:	d100      	bne.n	8003980 <I2C_Master_ISR_DMA+0x64>
 800397e:	e07c      	b.n	8003a7a <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2240      	movs	r2, #64	@ 0x40
 8003984:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003986:	d100      	bne.n	800398a <I2C_Master_ISR_DMA+0x6e>
 8003988:	e077      	b.n	8003a7a <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2140      	movs	r1, #64	@ 0x40
 8003996:	438a      	bics	r2, r1
 8003998:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d055      	beq.n	8003a50 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	2312      	movs	r3, #18
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	0592      	lsls	r2, r2, #22
 80039b2:	0d92      	lsrs	r2, r2, #22
 80039b4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2bff      	cmp	r3, #255	@ 0xff
 80039be:	d906      	bls.n	80039ce <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	22ff      	movs	r2, #255	@ 0xff
 80039c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80039c6:	2380      	movs	r3, #128	@ 0x80
 80039c8:	045b      	lsls	r3, r3, #17
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e010      	b.n	80039f0 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	4a4c      	ldr	r2, [pc, #304]	@ (8003b10 <I2C_Master_ISR_DMA+0x1f4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d003      	beq.n	80039ea <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e002      	b.n	80039f0 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80039ea:	2380      	movs	r3, #128	@ 0x80
 80039ec:	049b      	lsls	r3, r3, #18
 80039ee:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	697c      	ldr	r4, [r7, #20]
 80039f8:	2312      	movs	r3, #18
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	8819      	ldrh	r1, [r3, #0]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	2300      	movs	r3, #0
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	0023      	movs	r3, r4
 8003a06:	f001 fa91 	bl	8004f2c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2241      	movs	r2, #65	@ 0x41
 8003a20:	5c9b      	ldrb	r3, [r3, r2]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b22      	cmp	r3, #34	@ 0x22
 8003a26:	d109      	bne.n	8003a3c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2180      	movs	r1, #128	@ 0x80
 8003a34:	0209      	lsls	r1, r1, #8
 8003a36:	430a      	orrs	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003a3a:	e05f      	b.n	8003afc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2180      	movs	r1, #128	@ 0x80
 8003a48:	01c9      	lsls	r1, r1, #7
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003a4e:	e055      	b.n	8003afc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	2380      	movs	r3, #128	@ 0x80
 8003a58:	049b      	lsls	r3, r3, #18
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	2380      	movs	r3, #128	@ 0x80
 8003a5e:	049b      	lsls	r3, r3, #18
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d004      	beq.n	8003a6e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f000 fb0c 	bl	8004084 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003a6c:	e046      	b.n	8003afc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2140      	movs	r1, #64	@ 0x40
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 fe5a 	bl	800472c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003a78:	e040      	b.n	8003afc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2240      	movs	r2, #64	@ 0x40
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d02c      	beq.n	8003adc <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2240      	movs	r2, #64	@ 0x40
 8003a86:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003a88:	d028      	beq.n	8003adc <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d11d      	bne.n	8003ad0 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	2380      	movs	r3, #128	@ 0x80
 8003a9c:	049b      	lsls	r3, r3, #18
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	2380      	movs	r3, #128	@ 0x80
 8003aa2:	049b      	lsls	r3, r3, #18
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d028      	beq.n	8003afa <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aac:	4a18      	ldr	r2, [pc, #96]	@ (8003b10 <I2C_Master_ISR_DMA+0x1f4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d109      	bne.n	8003ac6 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2180      	movs	r1, #128	@ 0x80
 8003abe:	01c9      	lsls	r1, r1, #7
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003ac4:	e019      	b.n	8003afa <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f000 fadb 	bl	8004084 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003ace:	e014      	b.n	8003afa <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2140      	movs	r1, #64	@ 0x40
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f000 fe29 	bl	800472c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003ada:	e00e      	b.n	8003afa <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d00b      	beq.n	8003afc <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003aea:	d007      	beq.n	8003afc <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	0011      	movs	r1, r2
 8003af2:	0018      	movs	r0, r3
 8003af4:	f000 fb6c 	bl	80041d0 <I2C_ITMasterCplt>
 8003af8:	e000      	b.n	8003afc <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8003afa:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2240      	movs	r2, #64	@ 0x40
 8003b00:	2100      	movs	r1, #0
 8003b02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	0018      	movs	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b007      	add	sp, #28
 8003b0c:	bd90      	pop	{r4, r7, pc}
 8003b0e:	46c0      	nop			@ (mov r8, r8)
 8003b10:	ffff0000 	.word	0xffff0000

08003b14 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003b14:	b590      	push	{r4, r7, lr}
 8003b16:	b089      	sub	sp, #36	@ 0x24
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003b20:	4b90      	ldr	r3, [pc, #576]	@ (8003d64 <I2C_Mem_ISR_DMA+0x250>)
 8003b22:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2240      	movs	r2, #64	@ 0x40
 8003b28:	5c9b      	ldrb	r3, [r3, r2]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <I2C_Mem_ISR_DMA+0x1e>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e113      	b.n	8003d5a <I2C_Mem_ISR_DMA+0x246>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2240      	movs	r2, #64	@ 0x40
 8003b36:	2101      	movs	r1, #1
 8003b38:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d017      	beq.n	8003b72 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2210      	movs	r2, #16
 8003b46:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003b48:	d013      	beq.n	8003b72 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2210      	movs	r2, #16
 8003b50:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b56:	2204      	movs	r2, #4
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2120      	movs	r1, #32
 8003b62:	0018      	movs	r0, r3
 8003b64:	f001 fa1c 	bl	8004fa0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f000 ff09 	bl	8004982 <I2C_Flush_TXDR>
 8003b70:	e0ee      	b.n	8003d50 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2202      	movs	r2, #2
 8003b76:	4013      	ands	r3, r2
 8003b78:	d00d      	beq.n	8003b96 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003b80:	d009      	beq.n	8003b96 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b8a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	4252      	negs	r2, r2
 8003b92:	651a      	str	r2, [r3, #80]	@ 0x50
 8003b94:	e0dc      	b.n	8003d50 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2280      	movs	r2, #128	@ 0x80
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d063      	beq.n	8003c66 <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2240      	movs	r2, #64	@ 0x40
 8003ba2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003ba4:	d05f      	beq.n	8003c66 <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2101      	movs	r1, #1
 8003baa:	0018      	movs	r0, r3
 8003bac:	f001 fa82 	bl	80050b4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2110      	movs	r1, #16
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f001 f9f3 	bl	8004fa0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d04a      	beq.n	8003c5a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2bff      	cmp	r3, #255	@ 0xff
 8003bcc:	d910      	bls.n	8003bf0 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	22ff      	movs	r2, #255	@ 0xff
 8003bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd8:	b299      	uxth	r1, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	2380      	movs	r3, #128	@ 0x80
 8003be2:	045b      	lsls	r3, r3, #17
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	2400      	movs	r4, #0
 8003be8:	9400      	str	r4, [sp, #0]
 8003bea:	f001 f99f 	bl	8004f2c <I2C_TransferConfig>
 8003bee:	e011      	b.n	8003c14 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfe:	b299      	uxth	r1, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	2380      	movs	r3, #128	@ 0x80
 8003c08:	049b      	lsls	r3, r3, #18
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	2400      	movs	r4, #0
 8003c0e:	9400      	str	r4, [sp, #0]
 8003c10:	f001 f98c 	bl	8004f2c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2241      	movs	r2, #65	@ 0x41
 8003c2a:	5c9b      	ldrb	r3, [r3, r2]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b22      	cmp	r3, #34	@ 0x22
 8003c30:	d109      	bne.n	8003c46 <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2180      	movs	r1, #128	@ 0x80
 8003c3e:	0209      	lsls	r1, r1, #8
 8003c40:	430a      	orrs	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003c44:	e084      	b.n	8003d50 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2180      	movs	r1, #128	@ 0x80
 8003c52:	01c9      	lsls	r1, r1, #7
 8003c54:	430a      	orrs	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003c58:	e07a      	b.n	8003d50 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2140      	movs	r1, #64	@ 0x40
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f000 fd64 	bl	800472c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003c64:	e074      	b.n	8003d50 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2240      	movs	r2, #64	@ 0x40
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d062      	beq.n	8003d34 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2240      	movs	r2, #64	@ 0x40
 8003c72:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003c74:	d05e      	beq.n	8003d34 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2101      	movs	r1, #1
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f001 fa1a 	bl	80050b4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2110      	movs	r1, #16
 8003c84:	0018      	movs	r0, r3
 8003c86:	f001 f98b 	bl	8004fa0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2241      	movs	r2, #65	@ 0x41
 8003c8e:	5c9b      	ldrb	r3, [r3, r2]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b22      	cmp	r3, #34	@ 0x22
 8003c94:	d101      	bne.n	8003c9a <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 8003c96:	4b34      	ldr	r3, [pc, #208]	@ (8003d68 <I2C_Mem_ISR_DMA+0x254>)
 8003c98:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2bff      	cmp	r3, #255	@ 0xff
 8003ca2:	d911      	bls.n	8003cc8 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	22ff      	movs	r2, #255	@ 0xff
 8003ca8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cae:	b299      	uxth	r1, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	2380      	movs	r3, #128	@ 0x80
 8003cb8:	045c      	lsls	r4, r3, #17
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	0023      	movs	r3, r4
 8003cc2:	f001 f933 	bl	8004f2c <I2C_TransferConfig>
 8003cc6:	e012      	b.n	8003cee <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd6:	b299      	uxth	r1, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	2380      	movs	r3, #128	@ 0x80
 8003ce0:	049c      	lsls	r4, r3, #18
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	0023      	movs	r3, r4
 8003cea:	f001 f91f 	bl	8004f2c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2241      	movs	r2, #65	@ 0x41
 8003d04:	5c9b      	ldrb	r3, [r3, r2]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b22      	cmp	r3, #34	@ 0x22
 8003d0a:	d109      	bne.n	8003d20 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2180      	movs	r1, #128	@ 0x80
 8003d18:	0209      	lsls	r1, r1, #8
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d1e:	e017      	b.n	8003d50 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2180      	movs	r1, #128	@ 0x80
 8003d2c:	01c9      	lsls	r1, r1, #7
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d32:	e00d      	b.n	8003d50 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2220      	movs	r2, #32
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d009      	beq.n	8003d50 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d42:	d005      	beq.n	8003d50 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	0011      	movs	r1, r2
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f000 fa40 	bl	80041d0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2240      	movs	r2, #64	@ 0x40
 8003d54:	2100      	movs	r1, #0
 8003d56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b007      	add	sp, #28
 8003d60:	bd90      	pop	{r4, r7, pc}
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	80002000 	.word	0x80002000
 8003d68:	80002400 	.word	0x80002400

08003d6c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2240      	movs	r2, #64	@ 0x40
 8003d86:	5c9b      	ldrb	r3, [r3, r2]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <I2C_Slave_ISR_DMA+0x24>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e0ce      	b.n	8003f2e <I2C_Slave_ISR_DMA+0x1c2>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2240      	movs	r2, #64	@ 0x40
 8003d94:	2101      	movs	r1, #1
 8003d96:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d00a      	beq.n	8003db6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003da6:	d006      	beq.n	8003db6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	0011      	movs	r1, r2
 8003dae:	0018      	movs	r0, r3
 8003db0:	f000 fadc 	bl	800436c <I2C_ITSlaveCplt>
 8003db4:	e0b6      	b.n	8003f24 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2210      	movs	r2, #16
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d100      	bne.n	8003dc0 <I2C_Slave_ISR_DMA+0x54>
 8003dbe:	e0a3      	b.n	8003f08 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2210      	movs	r2, #16
 8003dc4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003dc6:	d100      	bne.n	8003dca <I2C_Slave_ISR_DMA+0x5e>
 8003dc8:	e09e      	b.n	8003f08 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	2380      	movs	r3, #128	@ 0x80
 8003dce:	01db      	lsls	r3, r3, #7
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d105      	bne.n	8003de0 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	2380      	movs	r3, #128	@ 0x80
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003ddc:	d100      	bne.n	8003de0 <I2C_Slave_ISR_DMA+0x74>
 8003dde:	e08c      	b.n	8003efa <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00c      	beq.n	8003e02 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	2380      	movs	r3, #128	@ 0x80
 8003dec:	021b      	lsls	r3, r3, #8
 8003dee:	4013      	ands	r3, r2
 8003df0:	d007      	beq.n	8003e02 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00c      	beq.n	8003e24 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	2380      	movs	r3, #128	@ 0x80
 8003e0e:	01db      	lsls	r3, r3, #7
 8003e10:	4013      	ands	r3, r2
 8003e12:	d007      	beq.n	8003e24 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8003e20:	2301      	movs	r3, #1
 8003e22:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d12d      	bne.n	8003e86 <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2241      	movs	r2, #65	@ 0x41
 8003e2e:	5c9b      	ldrb	r3, [r3, r2]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b28      	cmp	r3, #40	@ 0x28
 8003e34:	d10b      	bne.n	8003e4e <I2C_Slave_ISR_DMA+0xe2>
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	2380      	movs	r3, #128	@ 0x80
 8003e3a:	049b      	lsls	r3, r3, #18
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d106      	bne.n	8003e4e <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	0011      	movs	r1, r2
 8003e46:	0018      	movs	r0, r3
 8003e48:	f000 fc18 	bl	800467c <I2C_ITListenCplt>
 8003e4c:	e054      	b.n	8003ef8 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2241      	movs	r2, #65	@ 0x41
 8003e52:	5c9b      	ldrb	r3, [r3, r2]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b29      	cmp	r3, #41	@ 0x29
 8003e58:	d110      	bne.n	8003e7c <I2C_Slave_ISR_DMA+0x110>
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	4a36      	ldr	r2, [pc, #216]	@ (8003f38 <I2C_Slave_ISR_DMA+0x1cc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00c      	beq.n	8003e7c <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2210      	movs	r2, #16
 8003e68:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f000 fd88 	bl	8004982 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f000 f947 	bl	8004108 <I2C_ITSlaveSeqCplt>
 8003e7a:	e03d      	b.n	8003ef8 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2210      	movs	r2, #16
 8003e82:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003e84:	e03e      	b.n	8003f04 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2210      	movs	r2, #16
 8003e8c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	2204      	movs	r2, #4
 8003e94:	431a      	orrs	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003e9a:	2317      	movs	r3, #23
 8003e9c:	18fb      	adds	r3, r7, r3
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	2141      	movs	r1, #65	@ 0x41
 8003ea2:	5c52      	ldrb	r2, [r2, r1]
 8003ea4:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d004      	beq.n	8003eb6 <I2C_Slave_ISR_DMA+0x14a>
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	2380      	movs	r3, #128	@ 0x80
 8003eb0:	045b      	lsls	r3, r3, #17
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d126      	bne.n	8003f04 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003eb6:	2217      	movs	r2, #23
 8003eb8:	18bb      	adds	r3, r7, r2
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b21      	cmp	r3, #33	@ 0x21
 8003ebe:	d003      	beq.n	8003ec8 <I2C_Slave_ISR_DMA+0x15c>
 8003ec0:	18bb      	adds	r3, r7, r2
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b29      	cmp	r3, #41	@ 0x29
 8003ec6:	d103      	bne.n	8003ed0 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2221      	movs	r2, #33	@ 0x21
 8003ecc:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ece:	e00b      	b.n	8003ee8 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ed0:	2217      	movs	r2, #23
 8003ed2:	18bb      	adds	r3, r7, r2
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b22      	cmp	r3, #34	@ 0x22
 8003ed8:	d003      	beq.n	8003ee2 <I2C_Slave_ISR_DMA+0x176>
 8003eda:	18bb      	adds	r3, r7, r2
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ee0:	d102      	bne.n	8003ee8 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2222      	movs	r2, #34	@ 0x22
 8003ee6:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	0011      	movs	r1, r2
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f000 fc1b 	bl	800472c <I2C_ITError>
      if (treatdmanack == 1U)
 8003ef6:	e005      	b.n	8003f04 <I2C_Slave_ISR_DMA+0x198>
 8003ef8:	e004      	b.n	8003f04 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2210      	movs	r2, #16
 8003f00:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003f02:	e00f      	b.n	8003f24 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8003f04:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003f06:	e00d      	b.n	8003f24 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2208      	movs	r2, #8
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d009      	beq.n	8003f24 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2208      	movs	r2, #8
 8003f14:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003f16:	d005      	beq.n	8003f24 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	0011      	movs	r1, r2
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f000 f80c 	bl	8003f3c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2240      	movs	r2, #64	@ 0x40
 8003f28:	2100      	movs	r1, #0
 8003f2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	0018      	movs	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b008      	add	sp, #32
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	ffff0000 	.word	0xffff0000

08003f3c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f3c:	b5b0      	push	{r4, r5, r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2241      	movs	r2, #65	@ 0x41
 8003f4a:	5c9b      	ldrb	r3, [r3, r2]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	001a      	movs	r2, r3
 8003f50:	2328      	movs	r3, #40	@ 0x28
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b28      	cmp	r3, #40	@ 0x28
 8003f56:	d000      	beq.n	8003f5a <I2C_ITAddrCplt+0x1e>
 8003f58:	e088      	b.n	800406c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	250f      	movs	r5, #15
 8003f66:	197b      	adds	r3, r7, r5
 8003f68:	2101      	movs	r1, #1
 8003f6a:	400a      	ands	r2, r1
 8003f6c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	200c      	movs	r0, #12
 8003f7a:	183b      	adds	r3, r7, r0
 8003f7c:	21fe      	movs	r1, #254	@ 0xfe
 8003f7e:	400a      	ands	r2, r1
 8003f80:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	240a      	movs	r4, #10
 8003f8c:	193b      	adds	r3, r7, r4
 8003f8e:	0592      	lsls	r2, r2, #22
 8003f90:	0d92      	lsrs	r2, r2, #22
 8003f92:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	2308      	movs	r3, #8
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	21fe      	movs	r1, #254	@ 0xfe
 8003fa2:	400a      	ands	r2, r1
 8003fa4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d148      	bne.n	8004040 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003fae:	0021      	movs	r1, r4
 8003fb0:	187b      	adds	r3, r7, r1
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	09db      	lsrs	r3, r3, #7
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	183b      	adds	r3, r7, r0
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	4053      	eors	r3, r2
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	001a      	movs	r2, r3
 8003fc2:	2306      	movs	r3, #6
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d120      	bne.n	800400a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003fc8:	183b      	adds	r3, r7, r0
 8003fca:	187a      	adds	r2, r7, r1
 8003fcc:	8812      	ldrh	r2, [r2, #0]
 8003fce:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d14c      	bne.n	800407c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2208      	movs	r2, #8
 8003fee:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2240      	movs	r2, #64	@ 0x40
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003ff8:	183b      	adds	r3, r7, r0
 8003ffa:	881a      	ldrh	r2, [r3, #0]
 8003ffc:	197b      	adds	r3, r7, r5
 8003ffe:	7819      	ldrb	r1, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	0018      	movs	r0, r3
 8004004:	f7ff fa1d 	bl	8003442 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004008:	e038      	b.n	800407c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800400a:	240c      	movs	r4, #12
 800400c:	193b      	adds	r3, r7, r4
 800400e:	2208      	movs	r2, #8
 8004010:	18ba      	adds	r2, r7, r2
 8004012:	8812      	ldrh	r2, [r2, #0]
 8004014:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004016:	2380      	movs	r3, #128	@ 0x80
 8004018:	021a      	lsls	r2, r3, #8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0011      	movs	r1, r2
 800401e:	0018      	movs	r0, r3
 8004020:	f001 f848 	bl	80050b4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2240      	movs	r2, #64	@ 0x40
 8004028:	2100      	movs	r1, #0
 800402a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800402c:	193b      	adds	r3, r7, r4
 800402e:	881a      	ldrh	r2, [r3, #0]
 8004030:	230f      	movs	r3, #15
 8004032:	18fb      	adds	r3, r7, r3
 8004034:	7819      	ldrb	r1, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	0018      	movs	r0, r3
 800403a:	f7ff fa02 	bl	8003442 <HAL_I2C_AddrCallback>
}
 800403e:	e01d      	b.n	800407c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004040:	2380      	movs	r3, #128	@ 0x80
 8004042:	021a      	lsls	r2, r3, #8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	0011      	movs	r1, r2
 8004048:	0018      	movs	r0, r3
 800404a:	f001 f833 	bl	80050b4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2240      	movs	r2, #64	@ 0x40
 8004052:	2100      	movs	r1, #0
 8004054:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004056:	230c      	movs	r3, #12
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	881a      	ldrh	r2, [r3, #0]
 800405c:	230f      	movs	r3, #15
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	7819      	ldrb	r1, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	0018      	movs	r0, r3
 8004066:	f7ff f9ec 	bl	8003442 <HAL_I2C_AddrCallback>
}
 800406a:	e007      	b.n	800407c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2208      	movs	r2, #8
 8004072:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2240      	movs	r2, #64	@ 0x40
 8004078:	2100      	movs	r1, #0
 800407a:	5499      	strb	r1, [r3, r2]
}
 800407c:	46c0      	nop			@ (mov r8, r8)
 800407e:	46bd      	mov	sp, r7
 8004080:	b004      	add	sp, #16
 8004082:	bdb0      	pop	{r4, r5, r7, pc}

08004084 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2242      	movs	r2, #66	@ 0x42
 8004090:	2100      	movs	r1, #0
 8004092:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2241      	movs	r2, #65	@ 0x41
 8004098:	5c9b      	ldrb	r3, [r3, r2]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b21      	cmp	r3, #33	@ 0x21
 800409e:	d117      	bne.n	80040d0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2241      	movs	r2, #65	@ 0x41
 80040a4:	2120      	movs	r1, #32
 80040a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2211      	movs	r2, #17
 80040ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2101      	movs	r1, #1
 80040b8:	0018      	movs	r0, r3
 80040ba:	f000 fffb 	bl	80050b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2240      	movs	r2, #64	@ 0x40
 80040c2:	2100      	movs	r1, #0
 80040c4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	0018      	movs	r0, r3
 80040ca:	f7ff f99a 	bl	8003402 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040ce:	e016      	b.n	80040fe <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2241      	movs	r2, #65	@ 0x41
 80040d4:	2120      	movs	r1, #32
 80040d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2212      	movs	r2, #18
 80040dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2102      	movs	r1, #2
 80040e8:	0018      	movs	r0, r3
 80040ea:	f000 ffe3 	bl	80050b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2240      	movs	r2, #64	@ 0x40
 80040f2:	2100      	movs	r1, #0
 80040f4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	0018      	movs	r0, r3
 80040fa:	f7ff f98a 	bl	8003412 <HAL_I2C_MasterRxCpltCallback>
}
 80040fe:	46c0      	nop			@ (mov r8, r8)
 8004100:	46bd      	mov	sp, r7
 8004102:	b002      	add	sp, #8
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2242      	movs	r2, #66	@ 0x42
 800411c:	2100      	movs	r1, #0
 800411e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	2380      	movs	r3, #128	@ 0x80
 8004124:	01db      	lsls	r3, r3, #7
 8004126:	4013      	ands	r3, r2
 8004128:	d008      	beq.n	800413c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4924      	ldr	r1, [pc, #144]	@ (80041c8 <I2C_ITSlaveSeqCplt+0xc0>)
 8004136:	400a      	ands	r2, r1
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e00c      	b.n	8004156 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	2380      	movs	r3, #128	@ 0x80
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	4013      	ands	r3, r2
 8004144:	d007      	beq.n	8004156 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	491e      	ldr	r1, [pc, #120]	@ (80041cc <I2C_ITSlaveSeqCplt+0xc4>)
 8004152:	400a      	ands	r2, r1
 8004154:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2241      	movs	r2, #65	@ 0x41
 800415a:	5c9b      	ldrb	r3, [r3, r2]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b29      	cmp	r3, #41	@ 0x29
 8004160:	d114      	bne.n	800418c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2241      	movs	r2, #65	@ 0x41
 8004166:	2128      	movs	r1, #40	@ 0x28
 8004168:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2221      	movs	r2, #33	@ 0x21
 800416e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2101      	movs	r1, #1
 8004174:	0018      	movs	r0, r3
 8004176:	f000 ff9d 	bl	80050b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2240      	movs	r2, #64	@ 0x40
 800417e:	2100      	movs	r1, #0
 8004180:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	0018      	movs	r0, r3
 8004186:	f7ff f94c 	bl	8003422 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800418a:	e019      	b.n	80041c0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2241      	movs	r2, #65	@ 0x41
 8004190:	5c9b      	ldrb	r3, [r3, r2]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b2a      	cmp	r3, #42	@ 0x2a
 8004196:	d113      	bne.n	80041c0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2241      	movs	r2, #65	@ 0x41
 800419c:	2128      	movs	r1, #40	@ 0x28
 800419e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2222      	movs	r2, #34	@ 0x22
 80041a4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2102      	movs	r1, #2
 80041aa:	0018      	movs	r0, r3
 80041ac:	f000 ff82 	bl	80050b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2240      	movs	r2, #64	@ 0x40
 80041b4:	2100      	movs	r1, #0
 80041b6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	0018      	movs	r0, r3
 80041bc:	f7ff f939 	bl	8003432 <HAL_I2C_SlaveRxCpltCallback>
}
 80041c0:	46c0      	nop			@ (mov r8, r8)
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b004      	add	sp, #16
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	ffffbfff 	.word	0xffffbfff
 80041cc:	ffff7fff 	.word	0xffff7fff

080041d0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2220      	movs	r2, #32
 80041e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2241      	movs	r2, #65	@ 0x41
 80041ea:	5c9b      	ldrb	r3, [r3, r2]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b21      	cmp	r3, #33	@ 0x21
 80041f0:	d108      	bne.n	8004204 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2101      	movs	r1, #1
 80041f6:	0018      	movs	r0, r3
 80041f8:	f000 ff5c 	bl	80050b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2211      	movs	r2, #17
 8004200:	631a      	str	r2, [r3, #48]	@ 0x30
 8004202:	e00d      	b.n	8004220 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2241      	movs	r2, #65	@ 0x41
 8004208:	5c9b      	ldrb	r3, [r3, r2]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b22      	cmp	r3, #34	@ 0x22
 800420e:	d107      	bne.n	8004220 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2102      	movs	r1, #2
 8004214:	0018      	movs	r0, r3
 8004216:	f000 ff4d 	bl	80050b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2212      	movs	r2, #18
 800421e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	494e      	ldr	r1, [pc, #312]	@ (8004364 <I2C_ITMasterCplt+0x194>)
 800422c:	400a      	ands	r2, r1
 800422e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a4b      	ldr	r2, [pc, #300]	@ (8004368 <I2C_ITMasterCplt+0x198>)
 800423a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2210      	movs	r2, #16
 8004240:	4013      	ands	r3, r2
 8004242:	d009      	beq.n	8004258 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2210      	movs	r2, #16
 800424a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004250:	2204      	movs	r2, #4
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2241      	movs	r2, #65	@ 0x41
 800425c:	5c9b      	ldrb	r3, [r3, r2]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b60      	cmp	r3, #96	@ 0x60
 8004262:	d109      	bne.n	8004278 <I2C_ITMasterCplt+0xa8>
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2204      	movs	r2, #4
 8004268:	4013      	ands	r3, r2
 800426a:	d005      	beq.n	8004278 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	b2db      	uxtb	r3, r3
 8004274:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004276:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	0018      	movs	r0, r3
 800427c:	f000 fb81 	bl	8004982 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004284:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2241      	movs	r2, #65	@ 0x41
 800428a:	5c9b      	ldrb	r3, [r3, r2]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b60      	cmp	r3, #96	@ 0x60
 8004290:	d002      	beq.n	8004298 <I2C_ITMasterCplt+0xc8>
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	0011      	movs	r1, r2
 80042a0:	0018      	movs	r0, r3
 80042a2:	f000 fa43 	bl	800472c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80042a6:	e058      	b.n	800435a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2241      	movs	r2, #65	@ 0x41
 80042ac:	5c9b      	ldrb	r3, [r3, r2]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b21      	cmp	r3, #33	@ 0x21
 80042b2:	d126      	bne.n	8004302 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2241      	movs	r2, #65	@ 0x41
 80042b8:	2120      	movs	r1, #32
 80042ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2242      	movs	r2, #66	@ 0x42
 80042c6:	5c9b      	ldrb	r3, [r3, r2]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b40      	cmp	r3, #64	@ 0x40
 80042cc:	d10c      	bne.n	80042e8 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2242      	movs	r2, #66	@ 0x42
 80042d2:	2100      	movs	r1, #0
 80042d4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2240      	movs	r2, #64	@ 0x40
 80042da:	2100      	movs	r1, #0
 80042dc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	0018      	movs	r0, r3
 80042e2:	f7ff f8c6 	bl	8003472 <HAL_I2C_MemTxCpltCallback>
}
 80042e6:	e038      	b.n	800435a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2242      	movs	r2, #66	@ 0x42
 80042ec:	2100      	movs	r1, #0
 80042ee:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2240      	movs	r2, #64	@ 0x40
 80042f4:	2100      	movs	r1, #0
 80042f6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	0018      	movs	r0, r3
 80042fc:	f7ff f881 	bl	8003402 <HAL_I2C_MasterTxCpltCallback>
}
 8004300:	e02b      	b.n	800435a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2241      	movs	r2, #65	@ 0x41
 8004306:	5c9b      	ldrb	r3, [r3, r2]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b22      	cmp	r3, #34	@ 0x22
 800430c:	d125      	bne.n	800435a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2241      	movs	r2, #65	@ 0x41
 8004312:	2120      	movs	r1, #32
 8004314:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2242      	movs	r2, #66	@ 0x42
 8004320:	5c9b      	ldrb	r3, [r3, r2]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b40      	cmp	r3, #64	@ 0x40
 8004326:	d10c      	bne.n	8004342 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2242      	movs	r2, #66	@ 0x42
 800432c:	2100      	movs	r1, #0
 800432e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2240      	movs	r2, #64	@ 0x40
 8004334:	2100      	movs	r1, #0
 8004336:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	0018      	movs	r0, r3
 800433c:	f7ff f8a1 	bl	8003482 <HAL_I2C_MemRxCpltCallback>
}
 8004340:	e00b      	b.n	800435a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2242      	movs	r2, #66	@ 0x42
 8004346:	2100      	movs	r1, #0
 8004348:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2240      	movs	r2, #64	@ 0x40
 800434e:	2100      	movs	r1, #0
 8004350:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	0018      	movs	r0, r3
 8004356:	f7ff f85c 	bl	8003412 <HAL_I2C_MasterRxCpltCallback>
}
 800435a:	46c0      	nop			@ (mov r8, r8)
 800435c:	46bd      	mov	sp, r7
 800435e:	b006      	add	sp, #24
 8004360:	bd80      	pop	{r7, pc}
 8004362:	46c0      	nop			@ (mov r8, r8)
 8004364:	fe00e800 	.word	0xfe00e800
 8004368:	ffff0000 	.word	0xffff0000

0800436c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004386:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004388:	200b      	movs	r0, #11
 800438a:	183b      	adds	r3, r7, r0
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	2141      	movs	r1, #65	@ 0x41
 8004390:	5c52      	ldrb	r2, [r2, r1]
 8004392:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2220      	movs	r2, #32
 800439a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800439c:	183b      	adds	r3, r7, r0
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b21      	cmp	r3, #33	@ 0x21
 80043a2:	d003      	beq.n	80043ac <I2C_ITSlaveCplt+0x40>
 80043a4:	183b      	adds	r3, r7, r0
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b29      	cmp	r3, #41	@ 0x29
 80043aa:	d109      	bne.n	80043c0 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80043ac:	4aac      	ldr	r2, [pc, #688]	@ (8004660 <I2C_ITSlaveCplt+0x2f4>)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	0011      	movs	r1, r2
 80043b2:	0018      	movs	r0, r3
 80043b4:	f000 fe7e 	bl	80050b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2221      	movs	r2, #33	@ 0x21
 80043bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80043be:	e020      	b.n	8004402 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043c0:	220b      	movs	r2, #11
 80043c2:	18bb      	adds	r3, r7, r2
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b22      	cmp	r3, #34	@ 0x22
 80043c8:	d003      	beq.n	80043d2 <I2C_ITSlaveCplt+0x66>
 80043ca:	18bb      	adds	r3, r7, r2
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80043d0:	d109      	bne.n	80043e6 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80043d2:	4aa4      	ldr	r2, [pc, #656]	@ (8004664 <I2C_ITSlaveCplt+0x2f8>)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	0011      	movs	r1, r2
 80043d8:	0018      	movs	r0, r3
 80043da:	f000 fe6b 	bl	80050b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2222      	movs	r2, #34	@ 0x22
 80043e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80043e4:	e00d      	b.n	8004402 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80043e6:	230b      	movs	r3, #11
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b28      	cmp	r3, #40	@ 0x28
 80043ee:	d108      	bne.n	8004402 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80043f0:	4a9d      	ldr	r2, [pc, #628]	@ (8004668 <I2C_ITSlaveCplt+0x2fc>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	0011      	movs	r1, r2
 80043f6:	0018      	movs	r0, r3
 80043f8:	f000 fe5c 	bl	80050b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2180      	movs	r1, #128	@ 0x80
 800440e:	0209      	lsls	r1, r1, #8
 8004410:	430a      	orrs	r2, r1
 8004412:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4993      	ldr	r1, [pc, #588]	@ (800466c <I2C_ITSlaveCplt+0x300>)
 8004420:	400a      	ands	r2, r1
 8004422:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	0018      	movs	r0, r3
 8004428:	f000 faab 	bl	8004982 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	2380      	movs	r3, #128	@ 0x80
 8004430:	01db      	lsls	r3, r3, #7
 8004432:	4013      	ands	r3, r2
 8004434:	d013      	beq.n	800445e <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	498b      	ldr	r1, [pc, #556]	@ (8004670 <I2C_ITSlaveCplt+0x304>)
 8004442:	400a      	ands	r2, r1
 8004444:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444a:	2b00      	cmp	r3, #0
 800444c:	d01f      	beq.n	800448e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	b29a      	uxth	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800445c:	e017      	b.n	800448e <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	2380      	movs	r3, #128	@ 0x80
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	4013      	ands	r3, r2
 8004466:	d012      	beq.n	800448e <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4980      	ldr	r1, [pc, #512]	@ (8004674 <I2C_ITSlaveCplt+0x308>)
 8004474:	400a      	ands	r2, r1
 8004476:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447c:	2b00      	cmp	r3, #0
 800447e:	d006      	beq.n	800448e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	b29a      	uxth	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2204      	movs	r2, #4
 8004492:	4013      	ands	r3, r2
 8004494:	d020      	beq.n	80044d8 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2204      	movs	r2, #4
 800449a:	4393      	bics	r3, r2
 800449c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00c      	beq.n	80044d8 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e6:	2204      	movs	r2, #4
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2210      	movs	r2, #16
 80044f2:	4013      	ands	r3, r2
 80044f4:	d04f      	beq.n	8004596 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2210      	movs	r2, #16
 80044fa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80044fc:	d04b      	beq.n	8004596 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d12d      	bne.n	8004564 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2241      	movs	r2, #65	@ 0x41
 800450c:	5c9b      	ldrb	r3, [r3, r2]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b28      	cmp	r3, #40	@ 0x28
 8004512:	d10b      	bne.n	800452c <I2C_ITSlaveCplt+0x1c0>
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	2380      	movs	r3, #128	@ 0x80
 8004518:	049b      	lsls	r3, r3, #18
 800451a:	429a      	cmp	r2, r3
 800451c:	d106      	bne.n	800452c <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	0011      	movs	r1, r2
 8004524:	0018      	movs	r0, r3
 8004526:	f000 f8a9 	bl	800467c <I2C_ITListenCplt>
 800452a:	e034      	b.n	8004596 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2241      	movs	r2, #65	@ 0x41
 8004530:	5c9b      	ldrb	r3, [r3, r2]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b29      	cmp	r3, #41	@ 0x29
 8004536:	d110      	bne.n	800455a <I2C_ITSlaveCplt+0x1ee>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4a4f      	ldr	r2, [pc, #316]	@ (8004678 <I2C_ITSlaveCplt+0x30c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00c      	beq.n	800455a <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2210      	movs	r2, #16
 8004546:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	0018      	movs	r0, r3
 800454c:	f000 fa19 	bl	8004982 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	0018      	movs	r0, r3
 8004554:	f7ff fdd8 	bl	8004108 <I2C_ITSlaveSeqCplt>
 8004558:	e01d      	b.n	8004596 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2210      	movs	r2, #16
 8004560:	61da      	str	r2, [r3, #28]
 8004562:	e018      	b.n	8004596 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2210      	movs	r2, #16
 800456a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004570:	2204      	movs	r2, #4
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d004      	beq.n	8004588 <I2C_ITSlaveCplt+0x21c>
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	2380      	movs	r3, #128	@ 0x80
 8004582:	045b      	lsls	r3, r3, #17
 8004584:	429a      	cmp	r2, r3
 8004586:	d106      	bne.n	8004596 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	0011      	movs	r1, r2
 8004590:	0018      	movs	r0, r3
 8004592:	f000 f8cb 	bl	800472c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2242      	movs	r2, #66	@ 0x42
 800459a:	2100      	movs	r1, #0
 800459c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d013      	beq.n	80045d4 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	0011      	movs	r1, r2
 80045b4:	0018      	movs	r0, r3
 80045b6:	f000 f8b9 	bl	800472c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2241      	movs	r2, #65	@ 0x41
 80045be:	5c9b      	ldrb	r3, [r3, r2]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b28      	cmp	r3, #40	@ 0x28
 80045c4:	d147      	bne.n	8004656 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	0011      	movs	r1, r2
 80045cc:	0018      	movs	r0, r3
 80045ce:	f000 f855 	bl	800467c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045d2:	e040      	b.n	8004656 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d8:	4a27      	ldr	r2, [pc, #156]	@ (8004678 <I2C_ITSlaveCplt+0x30c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d016      	beq.n	800460c <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	0018      	movs	r0, r3
 80045e2:	f7ff fd91 	bl	8004108 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a23      	ldr	r2, [pc, #140]	@ (8004678 <I2C_ITSlaveCplt+0x30c>)
 80045ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2241      	movs	r2, #65	@ 0x41
 80045f0:	2120      	movs	r1, #32
 80045f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2240      	movs	r2, #64	@ 0x40
 80045fe:	2100      	movs	r1, #0
 8004600:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0018      	movs	r0, r3
 8004606:	f7fe ff2c 	bl	8003462 <HAL_I2C_ListenCpltCallback>
}
 800460a:	e024      	b.n	8004656 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2241      	movs	r2, #65	@ 0x41
 8004610:	5c9b      	ldrb	r3, [r3, r2]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b22      	cmp	r3, #34	@ 0x22
 8004616:	d10f      	bne.n	8004638 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2241      	movs	r2, #65	@ 0x41
 800461c:	2120      	movs	r1, #32
 800461e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2240      	movs	r2, #64	@ 0x40
 800462a:	2100      	movs	r1, #0
 800462c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	0018      	movs	r0, r3
 8004632:	f7fe fefe 	bl	8003432 <HAL_I2C_SlaveRxCpltCallback>
}
 8004636:	e00e      	b.n	8004656 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2241      	movs	r2, #65	@ 0x41
 800463c:	2120      	movs	r1, #32
 800463e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2240      	movs	r2, #64	@ 0x40
 800464a:	2100      	movs	r1, #0
 800464c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	0018      	movs	r0, r3
 8004652:	f7fe fee6 	bl	8003422 <HAL_I2C_SlaveTxCpltCallback>
}
 8004656:	46c0      	nop			@ (mov r8, r8)
 8004658:	46bd      	mov	sp, r7
 800465a:	b006      	add	sp, #24
 800465c:	bd80      	pop	{r7, pc}
 800465e:	46c0      	nop			@ (mov r8, r8)
 8004660:	00008001 	.word	0x00008001
 8004664:	00008002 	.word	0x00008002
 8004668:	00008003 	.word	0x00008003
 800466c:	fe00e800 	.word	0xfe00e800
 8004670:	ffffbfff 	.word	0xffffbfff
 8004674:	ffff7fff 	.word	0xffff7fff
 8004678:	ffff0000 	.word	0xffff0000

0800467c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a26      	ldr	r2, [pc, #152]	@ (8004724 <I2C_ITListenCplt+0xa8>)
 800468a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2241      	movs	r2, #65	@ 0x41
 8004696:	2120      	movs	r1, #32
 8004698:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2242      	movs	r2, #66	@ 0x42
 800469e:	2100      	movs	r1, #0
 80046a0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2204      	movs	r2, #4
 80046ac:	4013      	ands	r3, r2
 80046ae:	d022      	beq.n	80046f6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d012      	beq.n	80046f6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ee:	2204      	movs	r2, #4
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80046f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004728 <I2C_ITListenCplt+0xac>)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	0011      	movs	r1, r2
 80046fc:	0018      	movs	r0, r3
 80046fe:	f000 fcd9 	bl	80050b4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2210      	movs	r2, #16
 8004708:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2240      	movs	r2, #64	@ 0x40
 800470e:	2100      	movs	r1, #0
 8004710:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0018      	movs	r0, r3
 8004716:	f7fe fea4 	bl	8003462 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800471a:	46c0      	nop			@ (mov r8, r8)
 800471c:	46bd      	mov	sp, r7
 800471e:	b002      	add	sp, #8
 8004720:	bd80      	pop	{r7, pc}
 8004722:	46c0      	nop			@ (mov r8, r8)
 8004724:	ffff0000 	.word	0xffff0000
 8004728:	00008003 	.word	0x00008003

0800472c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004736:	200f      	movs	r0, #15
 8004738:	183b      	adds	r3, r7, r0
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	2141      	movs	r1, #65	@ 0x41
 800473e:	5c52      	ldrb	r2, [r2, r1]
 8004740:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2242      	movs	r2, #66	@ 0x42
 8004746:	2100      	movs	r1, #0
 8004748:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a72      	ldr	r2, [pc, #456]	@ (8004918 <I2C_ITError+0x1ec>)
 800474e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004762:	183b      	adds	r3, r7, r0
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b28      	cmp	r3, #40	@ 0x28
 8004768:	d007      	beq.n	800477a <I2C_ITError+0x4e>
 800476a:	183b      	adds	r3, r7, r0
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b29      	cmp	r3, #41	@ 0x29
 8004770:	d003      	beq.n	800477a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004772:	183b      	adds	r3, r7, r0
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b2a      	cmp	r3, #42	@ 0x2a
 8004778:	d10c      	bne.n	8004794 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2103      	movs	r1, #3
 800477e:	0018      	movs	r0, r3
 8004780:	f000 fc98 	bl	80050b4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2241      	movs	r2, #65	@ 0x41
 8004788:	2128      	movs	r1, #40	@ 0x28
 800478a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a63      	ldr	r2, [pc, #396]	@ (800491c <I2C_ITError+0x1f0>)
 8004790:	635a      	str	r2, [r3, #52]	@ 0x34
 8004792:	e032      	b.n	80047fa <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004794:	4a62      	ldr	r2, [pc, #392]	@ (8004920 <I2C_ITError+0x1f4>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	0011      	movs	r1, r2
 800479a:	0018      	movs	r0, r3
 800479c:	f000 fc8a 	bl	80050b4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	0018      	movs	r0, r3
 80047a4:	f000 f8ed 	bl	8004982 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2241      	movs	r2, #65	@ 0x41
 80047ac:	5c9b      	ldrb	r3, [r3, r2]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b60      	cmp	r3, #96	@ 0x60
 80047b2:	d01f      	beq.n	80047f4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2241      	movs	r2, #65	@ 0x41
 80047b8:	2120      	movs	r1, #32
 80047ba:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2220      	movs	r2, #32
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d114      	bne.n	80047f4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	2210      	movs	r2, #16
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d109      	bne.n	80047ec <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2210      	movs	r2, #16
 80047de:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e4:	2204      	movs	r2, #4
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2220      	movs	r2, #32
 80047f2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004804:	2b00      	cmp	r3, #0
 8004806:	d03b      	beq.n	8004880 <I2C_ITError+0x154>
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b11      	cmp	r3, #17
 800480c:	d002      	beq.n	8004814 <I2C_ITError+0xe8>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b21      	cmp	r3, #33	@ 0x21
 8004812:	d135      	bne.n	8004880 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	2380      	movs	r3, #128	@ 0x80
 800481c:	01db      	lsls	r3, r3, #7
 800481e:	401a      	ands	r2, r3
 8004820:	2380      	movs	r3, #128	@ 0x80
 8004822:	01db      	lsls	r3, r3, #7
 8004824:	429a      	cmp	r2, r3
 8004826:	d107      	bne.n	8004838 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	493c      	ldr	r1, [pc, #240]	@ (8004924 <I2C_ITError+0x1f8>)
 8004834:	400a      	ands	r2, r1
 8004836:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483c:	0018      	movs	r0, r3
 800483e:	f7fd fe29 	bl	8002494 <HAL_DMA_GetState>
 8004842:	0003      	movs	r3, r0
 8004844:	2b01      	cmp	r3, #1
 8004846:	d016      	beq.n	8004876 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484c:	4a36      	ldr	r2, [pc, #216]	@ (8004928 <I2C_ITError+0x1fc>)
 800484e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2240      	movs	r2, #64	@ 0x40
 8004854:	2100      	movs	r1, #0
 8004856:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485c:	0018      	movs	r0, r3
 800485e:	f7fd fcfd 	bl	800225c <HAL_DMA_Abort_IT>
 8004862:	1e03      	subs	r3, r0, #0
 8004864:	d051      	beq.n	800490a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004870:	0018      	movs	r0, r3
 8004872:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004874:	e049      	b.n	800490a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	0018      	movs	r0, r3
 800487a:	f000 f859 	bl	8004930 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800487e:	e044      	b.n	800490a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d03b      	beq.n	8004900 <I2C_ITError+0x1d4>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b12      	cmp	r3, #18
 800488c:	d002      	beq.n	8004894 <I2C_ITError+0x168>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b22      	cmp	r3, #34	@ 0x22
 8004892:	d135      	bne.n	8004900 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	2380      	movs	r3, #128	@ 0x80
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	401a      	ands	r2, r3
 80048a0:	2380      	movs	r3, #128	@ 0x80
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d107      	bne.n	80048b8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	491e      	ldr	r1, [pc, #120]	@ (800492c <I2C_ITError+0x200>)
 80048b4:	400a      	ands	r2, r1
 80048b6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048bc:	0018      	movs	r0, r3
 80048be:	f7fd fde9 	bl	8002494 <HAL_DMA_GetState>
 80048c2:	0003      	movs	r3, r0
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d016      	beq.n	80048f6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048cc:	4a16      	ldr	r2, [pc, #88]	@ (8004928 <I2C_ITError+0x1fc>)
 80048ce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2240      	movs	r2, #64	@ 0x40
 80048d4:	2100      	movs	r1, #0
 80048d6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048dc:	0018      	movs	r0, r3
 80048de:	f7fd fcbd 	bl	800225c <HAL_DMA_Abort_IT>
 80048e2:	1e03      	subs	r3, r0, #0
 80048e4:	d013      	beq.n	800490e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f0:	0018      	movs	r0, r3
 80048f2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048f4:	e00b      	b.n	800490e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f000 f819 	bl	8004930 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048fe:	e006      	b.n	800490e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	0018      	movs	r0, r3
 8004904:	f000 f814 	bl	8004930 <I2C_TreatErrorCallback>
  }
}
 8004908:	e002      	b.n	8004910 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800490a:	46c0      	nop			@ (mov r8, r8)
 800490c:	e000      	b.n	8004910 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800490e:	46c0      	nop			@ (mov r8, r8)
}
 8004910:	46c0      	nop			@ (mov r8, r8)
 8004912:	46bd      	mov	sp, r7
 8004914:	b004      	add	sp, #16
 8004916:	bd80      	pop	{r7, pc}
 8004918:	ffff0000 	.word	0xffff0000
 800491c:	0800371d 	.word	0x0800371d
 8004920:	00008003 	.word	0x00008003
 8004924:	ffffbfff 	.word	0xffffbfff
 8004928:	08004b3b 	.word	0x08004b3b
 800492c:	ffff7fff 	.word	0xffff7fff

08004930 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2241      	movs	r2, #65	@ 0x41
 800493c:	5c9b      	ldrb	r3, [r3, r2]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b60      	cmp	r3, #96	@ 0x60
 8004942:	d10f      	bne.n	8004964 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2241      	movs	r2, #65	@ 0x41
 8004948:	2120      	movs	r1, #32
 800494a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2240      	movs	r2, #64	@ 0x40
 8004956:	2100      	movs	r1, #0
 8004958:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	0018      	movs	r0, r3
 800495e:	f7fe fda0 	bl	80034a2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004962:	e00a      	b.n	800497a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2240      	movs	r2, #64	@ 0x40
 800496e:	2100      	movs	r1, #0
 8004970:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0018      	movs	r0, r3
 8004976:	f7fe fd8c 	bl	8003492 <HAL_I2C_ErrorCallback>
}
 800497a:	46c0      	nop			@ (mov r8, r8)
 800497c:	46bd      	mov	sp, r7
 800497e:	b002      	add	sp, #8
 8004980:	bd80      	pop	{r7, pc}

08004982 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2202      	movs	r2, #2
 8004992:	4013      	ands	r3, r2
 8004994:	2b02      	cmp	r3, #2
 8004996:	d103      	bne.n	80049a0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2200      	movs	r2, #0
 800499e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	2201      	movs	r2, #1
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d007      	beq.n	80049be <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699a      	ldr	r2, [r3, #24]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2101      	movs	r1, #1
 80049ba:	430a      	orrs	r2, r1
 80049bc:	619a      	str	r2, [r3, #24]
  }
}
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b002      	add	sp, #8
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4920      	ldr	r1, [pc, #128]	@ (8004a64 <I2C_DMAMasterTransmitCplt+0x9c>)
 80049e2:	400a      	ands	r2, r1
 80049e4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d105      	bne.n	80049fc <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2120      	movs	r1, #32
 80049f4:	0018      	movs	r0, r3
 80049f6:	f000 fad3 	bl	8004fa0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80049fa:	e02e      	b.n	8004a5a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004a04:	189a      	adds	r2, r3, r2
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	2bff      	cmp	r3, #255	@ 0xff
 8004a12:	d903      	bls.n	8004a1c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	22ff      	movs	r2, #255	@ 0xff
 8004a18:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004a1a:	e004      	b.n	8004a26 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2e:	0019      	movs	r1, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3328      	adds	r3, #40	@ 0x28
 8004a36:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004a3c:	f7fd fb88 	bl	8002150 <HAL_DMA_Start_IT>
 8004a40:	1e03      	subs	r3, r0, #0
 8004a42:	d005      	beq.n	8004a50 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2110      	movs	r1, #16
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f7ff fe6f 	bl	800472c <I2C_ITError>
}
 8004a4e:	e004      	b.n	8004a5a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2140      	movs	r1, #64	@ 0x40
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 faa3 	bl	8004fa0 <I2C_Enable_IRQ>
}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b004      	add	sp, #16
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	46c0      	nop			@ (mov r8, r8)
 8004a64:	ffffbfff 	.word	0xffffbfff

08004a68 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4920      	ldr	r1, [pc, #128]	@ (8004b04 <I2C_DMAMasterReceiveCplt+0x9c>)
 8004a82:	400a      	ands	r2, r1
 8004a84:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d105      	bne.n	8004a9c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2120      	movs	r1, #32
 8004a94:	0018      	movs	r0, r3
 8004a96:	f000 fa83 	bl	8004fa0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004a9a:	e02e      	b.n	8004afa <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004aa4:	189a      	adds	r2, r3, r2
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2bff      	cmp	r3, #255	@ 0xff
 8004ab2:	d903      	bls.n	8004abc <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	22ff      	movs	r2, #255	@ 0xff
 8004ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004aba:	e004      	b.n	8004ac6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3324      	adds	r3, #36	@ 0x24
 8004ad0:	0019      	movs	r1, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004adc:	f7fd fb38 	bl	8002150 <HAL_DMA_Start_IT>
 8004ae0:	1e03      	subs	r3, r0, #0
 8004ae2:	d005      	beq.n	8004af0 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2110      	movs	r1, #16
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7ff fe1f 	bl	800472c <I2C_ITError>
}
 8004aee:	e004      	b.n	8004afa <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2140      	movs	r1, #64	@ 0x40
 8004af4:	0018      	movs	r0, r3
 8004af6:	f000 fa53 	bl	8004fa0 <I2C_Enable_IRQ>
}
 8004afa:	46c0      	nop			@ (mov r8, r8)
 8004afc:	46bd      	mov	sp, r7
 8004afe:	b004      	add	sp, #16
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	46c0      	nop			@ (mov r8, r8)
 8004b04:	ffff7fff 	.word	0xffff7fff

08004b08 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b14:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2180      	movs	r1, #128	@ 0x80
 8004b22:	0209      	lsls	r1, r1, #8
 8004b24:	430a      	orrs	r2, r1
 8004b26:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2110      	movs	r1, #16
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7ff fdfd 	bl	800472c <I2C_ITError>
}
 8004b32:	46c0      	nop			@ (mov r8, r8)
 8004b34:	46bd      	mov	sp, r7
 8004b36:	b004      	add	sp, #16
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b54:	2200      	movs	r2, #0
 8004b56:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b64:	2200      	movs	r2, #0
 8004b66:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f7ff fee0 	bl	8004930 <I2C_TreatErrorCallback>
}
 8004b70:	46c0      	nop			@ (mov r8, r8)
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b004      	add	sp, #16
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	1dfb      	adds	r3, r7, #7
 8004b86:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b88:	e03a      	b.n	8004c00 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	6839      	ldr	r1, [r7, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	0018      	movs	r0, r3
 8004b92:	f000 f8d3 	bl	8004d3c <I2C_IsErrorOccurred>
 8004b96:	1e03      	subs	r3, r0, #0
 8004b98:	d001      	beq.n	8004b9e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e040      	b.n	8004c20 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	d02d      	beq.n	8004c00 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba4:	f7fd f93e 	bl	8001e24 <HAL_GetTick>
 8004ba8:	0002      	movs	r2, r0
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d302      	bcc.n	8004bba <I2C_WaitOnFlagUntilTimeout+0x42>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d122      	bne.n	8004c00 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	425a      	negs	r2, r3
 8004bca:	4153      	adcs	r3, r2
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	001a      	movs	r2, r3
 8004bd0:	1dfb      	adds	r3, r7, #7
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d113      	bne.n	8004c00 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bdc:	2220      	movs	r2, #32
 8004bde:	431a      	orrs	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2241      	movs	r2, #65	@ 0x41
 8004be8:	2120      	movs	r1, #32
 8004bea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2242      	movs	r2, #66	@ 0x42
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2240      	movs	r2, #64	@ 0x40
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e00f      	b.n	8004c20 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	425a      	negs	r2, r3
 8004c10:	4153      	adcs	r3, r2
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	001a      	movs	r2, r3
 8004c16:	1dfb      	adds	r3, r7, #7
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d0b5      	beq.n	8004b8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	0018      	movs	r0, r3
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b004      	add	sp, #16
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c34:	e032      	b.n	8004c9c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f000 f87d 	bl	8004d3c <I2C_IsErrorOccurred>
 8004c42:	1e03      	subs	r3, r0, #0
 8004c44:	d001      	beq.n	8004c4a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e030      	b.n	8004cac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	d025      	beq.n	8004c9c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c50:	f7fd f8e8 	bl	8001e24 <HAL_GetTick>
 8004c54:	0002      	movs	r2, r0
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d302      	bcc.n	8004c66 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d11a      	bne.n	8004c9c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d013      	beq.n	8004c9c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c78:	2220      	movs	r2, #32
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2241      	movs	r2, #65	@ 0x41
 8004c84:	2120      	movs	r1, #32
 8004c86:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2242      	movs	r2, #66	@ 0x42
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2240      	movs	r2, #64	@ 0x40
 8004c94:	2100      	movs	r1, #0
 8004c96:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e007      	b.n	8004cac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d1c5      	bne.n	8004c36 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	0018      	movs	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b004      	add	sp, #16
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cc0:	e02f      	b.n	8004d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f000 f837 	bl	8004d3c <I2C_IsErrorOccurred>
 8004cce:	1e03      	subs	r3, r0, #0
 8004cd0:	d001      	beq.n	8004cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e02d      	b.n	8004d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd6:	f7fd f8a5 	bl	8001e24 <HAL_GetTick>
 8004cda:	0002      	movs	r2, r0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d302      	bcc.n	8004cec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d11a      	bne.n	8004d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d013      	beq.n	8004d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfe:	2220      	movs	r2, #32
 8004d00:	431a      	orrs	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2241      	movs	r2, #65	@ 0x41
 8004d0a:	2120      	movs	r1, #32
 8004d0c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2242      	movs	r2, #66	@ 0x42
 8004d12:	2100      	movs	r1, #0
 8004d14:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2240      	movs	r2, #64	@ 0x40
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e007      	b.n	8004d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d1c8      	bne.n	8004cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	0018      	movs	r0, r3
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b004      	add	sp, #16
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08a      	sub	sp, #40	@ 0x28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d48:	2327      	movs	r3, #39	@ 0x27
 8004d4a:	18fb      	adds	r3, r7, r3
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2210      	movs	r2, #16
 8004d64:	4013      	ands	r3, r2
 8004d66:	d100      	bne.n	8004d6a <I2C_IsErrorOccurred+0x2e>
 8004d68:	e079      	b.n	8004e5e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2210      	movs	r2, #16
 8004d70:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d72:	e057      	b.n	8004e24 <I2C_IsErrorOccurred+0xe8>
 8004d74:	2227      	movs	r2, #39	@ 0x27
 8004d76:	18bb      	adds	r3, r7, r2
 8004d78:	18ba      	adds	r2, r7, r2
 8004d7a:	7812      	ldrb	r2, [r2, #0]
 8004d7c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	3301      	adds	r3, #1
 8004d82:	d04f      	beq.n	8004e24 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d84:	f7fd f84e 	bl	8001e24 <HAL_GetTick>
 8004d88:	0002      	movs	r2, r0
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d302      	bcc.n	8004d9a <I2C_IsErrorOccurred+0x5e>
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d144      	bne.n	8004e24 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	2380      	movs	r3, #128	@ 0x80
 8004da2:	01db      	lsls	r3, r3, #7
 8004da4:	4013      	ands	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004da8:	2013      	movs	r0, #19
 8004daa:	183b      	adds	r3, r7, r0
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	2142      	movs	r1, #66	@ 0x42
 8004db0:	5c52      	ldrb	r2, [r2, r1]
 8004db2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	2380      	movs	r3, #128	@ 0x80
 8004dbc:	021b      	lsls	r3, r3, #8
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	2380      	movs	r3, #128	@ 0x80
 8004dc2:	021b      	lsls	r3, r3, #8
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d126      	bne.n	8004e16 <I2C_IsErrorOccurred+0xda>
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	2380      	movs	r3, #128	@ 0x80
 8004dcc:	01db      	lsls	r3, r3, #7
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d021      	beq.n	8004e16 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004dd2:	183b      	adds	r3, r7, r0
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d01d      	beq.n	8004e16 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2180      	movs	r1, #128	@ 0x80
 8004de6:	01c9      	lsls	r1, r1, #7
 8004de8:	430a      	orrs	r2, r1
 8004dea:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004dec:	f7fd f81a 	bl	8001e24 <HAL_GetTick>
 8004df0:	0003      	movs	r3, r0
 8004df2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004df4:	e00f      	b.n	8004e16 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004df6:	f7fd f815 	bl	8001e24 <HAL_GetTick>
 8004dfa:	0002      	movs	r2, r0
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b19      	cmp	r3, #25
 8004e02:	d908      	bls.n	8004e16 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	2220      	movs	r2, #32
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e0c:	2327      	movs	r3, #39	@ 0x27
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	2201      	movs	r2, #1
 8004e12:	701a      	strb	r2, [r3, #0]

              break;
 8004e14:	e006      	b.n	8004e24 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	4013      	ands	r3, r2
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d1e8      	bne.n	8004df6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d004      	beq.n	8004e3c <I2C_IsErrorOccurred+0x100>
 8004e32:	2327      	movs	r3, #39	@ 0x27
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d09b      	beq.n	8004d74 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e3c:	2327      	movs	r3, #39	@ 0x27
 8004e3e:	18fb      	adds	r3, r7, r3
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d103      	bne.n	8004e4e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	2204      	movs	r2, #4
 8004e52:	4313      	orrs	r3, r2
 8004e54:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e56:	2327      	movs	r3, #39	@ 0x27
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	2380      	movs	r3, #128	@ 0x80
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d00c      	beq.n	8004e8a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	2201      	movs	r2, #1
 8004e74:	4313      	orrs	r3, r2
 8004e76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2280      	movs	r2, #128	@ 0x80
 8004e7e:	0052      	lsls	r2, r2, #1
 8004e80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e82:	2327      	movs	r3, #39	@ 0x27
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	2380      	movs	r3, #128	@ 0x80
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	4013      	ands	r3, r2
 8004e92:	d00c      	beq.n	8004eae <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	2208      	movs	r2, #8
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2280      	movs	r2, #128	@ 0x80
 8004ea2:	00d2      	lsls	r2, r2, #3
 8004ea4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ea6:	2327      	movs	r3, #39	@ 0x27
 8004ea8:	18fb      	adds	r3, r7, r3
 8004eaa:	2201      	movs	r2, #1
 8004eac:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	2380      	movs	r3, #128	@ 0x80
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d00c      	beq.n	8004ed2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2280      	movs	r2, #128	@ 0x80
 8004ec6:	0092      	lsls	r2, r2, #2
 8004ec8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004eca:	2327      	movs	r3, #39	@ 0x27
 8004ecc:	18fb      	adds	r3, r7, r3
 8004ece:	2201      	movs	r2, #1
 8004ed0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004ed2:	2327      	movs	r3, #39	@ 0x27
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01d      	beq.n	8004f18 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f7ff fd4f 	bl	8004982 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	490e      	ldr	r1, [pc, #56]	@ (8004f28 <I2C_IsErrorOccurred+0x1ec>)
 8004ef0:	400a      	ands	r2, r1
 8004ef2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2241      	movs	r2, #65	@ 0x41
 8004f04:	2120      	movs	r1, #32
 8004f06:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2242      	movs	r2, #66	@ 0x42
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2240      	movs	r2, #64	@ 0x40
 8004f14:	2100      	movs	r1, #0
 8004f16:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004f18:	2327      	movs	r3, #39	@ 0x27
 8004f1a:	18fb      	adds	r3, r7, r3
 8004f1c:	781b      	ldrb	r3, [r3, #0]
}
 8004f1e:	0018      	movs	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	b00a      	add	sp, #40	@ 0x28
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	46c0      	nop			@ (mov r8, r8)
 8004f28:	fe00e800 	.word	0xfe00e800

08004f2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f2c:	b590      	push	{r4, r7, lr}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	0008      	movs	r0, r1
 8004f36:	0011      	movs	r1, r2
 8004f38:	607b      	str	r3, [r7, #4]
 8004f3a:	240a      	movs	r4, #10
 8004f3c:	193b      	adds	r3, r7, r4
 8004f3e:	1c02      	adds	r2, r0, #0
 8004f40:	801a      	strh	r2, [r3, #0]
 8004f42:	2009      	movs	r0, #9
 8004f44:	183b      	adds	r3, r7, r0
 8004f46:	1c0a      	adds	r2, r1, #0
 8004f48:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f4a:	193b      	adds	r3, r7, r4
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	059b      	lsls	r3, r3, #22
 8004f50:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f52:	183b      	adds	r3, r7, r0
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	0419      	lsls	r1, r3, #16
 8004f58:	23ff      	movs	r3, #255	@ 0xff
 8004f5a:	041b      	lsls	r3, r3, #16
 8004f5c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f5e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f66:	4313      	orrs	r3, r2
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	085b      	lsrs	r3, r3, #1
 8004f6c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f76:	0d51      	lsrs	r1, r2, #21
 8004f78:	2280      	movs	r2, #128	@ 0x80
 8004f7a:	00d2      	lsls	r2, r2, #3
 8004f7c:	400a      	ands	r2, r1
 8004f7e:	4907      	ldr	r1, [pc, #28]	@ (8004f9c <I2C_TransferConfig+0x70>)
 8004f80:	430a      	orrs	r2, r1
 8004f82:	43d2      	mvns	r2, r2
 8004f84:	401a      	ands	r2, r3
 8004f86:	0011      	movs	r1, r2
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f92:	46c0      	nop			@ (mov r8, r8)
 8004f94:	46bd      	mov	sp, r7
 8004f96:	b007      	add	sp, #28
 8004f98:	bd90      	pop	{r4, r7, pc}
 8004f9a:	46c0      	nop			@ (mov r8, r8)
 8004f9c:	03ff63ff 	.word	0x03ff63ff

08004fa0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	000a      	movs	r2, r1
 8004faa:	1cbb      	adds	r3, r7, #2
 8004fac:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fb6:	4b3c      	ldr	r3, [pc, #240]	@ (80050a8 <I2C_Enable_IRQ+0x108>)
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d035      	beq.n	8005028 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004fc0:	4b3a      	ldr	r3, [pc, #232]	@ (80050ac <I2C_Enable_IRQ+0x10c>)
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d030      	beq.n	8005028 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004fca:	4b39      	ldr	r3, [pc, #228]	@ (80050b0 <I2C_Enable_IRQ+0x110>)
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d02b      	beq.n	8005028 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004fd0:	1cbb      	adds	r3, r7, #2
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	5e9b      	ldrsh	r3, [r3, r2]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	da03      	bge.n	8004fe2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	22b8      	movs	r2, #184	@ 0xb8
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004fe2:	1cbb      	adds	r3, r7, #2
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	4013      	ands	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	22f2      	movs	r2, #242	@ 0xf2
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004ff4:	1cbb      	adds	r3, r7, #2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d003      	beq.n	8005006 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	22f4      	movs	r2, #244	@ 0xf4
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005006:	1cbb      	adds	r3, r7, #2
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	2b10      	cmp	r3, #16
 800500c:	d103      	bne.n	8005016 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2290      	movs	r2, #144	@ 0x90
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005016:	1cbb      	adds	r3, r7, #2
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	2b20      	cmp	r3, #32
 800501c:	d137      	bne.n	800508e <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005026:	e032      	b.n	800508e <I2C_Enable_IRQ+0xee>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005028:	1cbb      	adds	r3, r7, #2
 800502a:	2200      	movs	r2, #0
 800502c:	5e9b      	ldrsh	r3, [r3, r2]
 800502e:	2b00      	cmp	r3, #0
 8005030:	da03      	bge.n	800503a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	22b8      	movs	r2, #184	@ 0xb8
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800503a:	1cbb      	adds	r3, r7, #2
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	2201      	movs	r2, #1
 8005040:	4013      	ands	r3, r2
 8005042:	d003      	beq.n	800504c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	22f2      	movs	r2, #242	@ 0xf2
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800504c:	1cbb      	adds	r3, r7, #2
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	2202      	movs	r2, #2
 8005052:	4013      	ands	r3, r2
 8005054:	d003      	beq.n	800505e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	22f4      	movs	r2, #244	@ 0xf4
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800505e:	1cbb      	adds	r3, r7, #2
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	2b10      	cmp	r3, #16
 8005064:	d103      	bne.n	800506e <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2290      	movs	r2, #144	@ 0x90
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800506e:	1cbb      	adds	r3, r7, #2
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	2b20      	cmp	r3, #32
 8005074:	d103      	bne.n	800507e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2260      	movs	r2, #96	@ 0x60
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800507e:	1cbb      	adds	r3, r7, #2
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	2b40      	cmp	r3, #64	@ 0x40
 8005084:	d103      	bne.n	800508e <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2240      	movs	r2, #64	@ 0x40
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6819      	ldr	r1, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	430a      	orrs	r2, r1
 800509c:	601a      	str	r2, [r3, #0]
}
 800509e:	46c0      	nop			@ (mov r8, r8)
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b004      	add	sp, #16
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	0800391d 	.word	0x0800391d
 80050ac:	08003d6d 	.word	0x08003d6d
 80050b0:	08003b15 	.word	0x08003b15

080050b4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	000a      	movs	r2, r1
 80050be:	1cbb      	adds	r3, r7, #2
 80050c0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80050c6:	1cbb      	adds	r3, r7, #2
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	2201      	movs	r2, #1
 80050cc:	4013      	ands	r3, r2
 80050ce:	d010      	beq.n	80050f2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2242      	movs	r2, #66	@ 0x42
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2241      	movs	r2, #65	@ 0x41
 80050dc:	5c9b      	ldrb	r3, [r3, r2]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	001a      	movs	r2, r3
 80050e2:	2328      	movs	r3, #40	@ 0x28
 80050e4:	4013      	ands	r3, r2
 80050e6:	2b28      	cmp	r3, #40	@ 0x28
 80050e8:	d003      	beq.n	80050f2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	22b0      	movs	r2, #176	@ 0xb0
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80050f2:	1cbb      	adds	r3, r7, #2
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	2202      	movs	r2, #2
 80050f8:	4013      	ands	r3, r2
 80050fa:	d010      	beq.n	800511e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2244      	movs	r2, #68	@ 0x44
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2241      	movs	r2, #65	@ 0x41
 8005108:	5c9b      	ldrb	r3, [r3, r2]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	001a      	movs	r2, r3
 800510e:	2328      	movs	r3, #40	@ 0x28
 8005110:	4013      	ands	r3, r2
 8005112:	2b28      	cmp	r3, #40	@ 0x28
 8005114:	d003      	beq.n	800511e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	22b0      	movs	r2, #176	@ 0xb0
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800511e:	1cbb      	adds	r3, r7, #2
 8005120:	2200      	movs	r2, #0
 8005122:	5e9b      	ldrsh	r3, [r3, r2]
 8005124:	2b00      	cmp	r3, #0
 8005126:	da03      	bge.n	8005130 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	22b8      	movs	r2, #184	@ 0xb8
 800512c:	4313      	orrs	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005130:	1cbb      	adds	r3, r7, #2
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	2b10      	cmp	r3, #16
 8005136:	d103      	bne.n	8005140 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2290      	movs	r2, #144	@ 0x90
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005140:	1cbb      	adds	r3, r7, #2
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	2b20      	cmp	r3, #32
 8005146:	d103      	bne.n	8005150 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	4313      	orrs	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005150:	1cbb      	adds	r3, r7, #2
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	2b40      	cmp	r3, #64	@ 0x40
 8005156:	d103      	bne.n	8005160 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2240      	movs	r2, #64	@ 0x40
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	43d9      	mvns	r1, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	400a      	ands	r2, r1
 8005170:	601a      	str	r2, [r3, #0]
}
 8005172:	46c0      	nop			@ (mov r8, r8)
 8005174:	46bd      	mov	sp, r7
 8005176:	b004      	add	sp, #16
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2241      	movs	r2, #65	@ 0x41
 800518a:	5c9b      	ldrb	r3, [r3, r2]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b20      	cmp	r3, #32
 8005190:	d138      	bne.n	8005204 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2240      	movs	r2, #64	@ 0x40
 8005196:	5c9b      	ldrb	r3, [r3, r2]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800519c:	2302      	movs	r3, #2
 800519e:	e032      	b.n	8005206 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2240      	movs	r2, #64	@ 0x40
 80051a4:	2101      	movs	r1, #1
 80051a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2241      	movs	r2, #65	@ 0x41
 80051ac:	2124      	movs	r1, #36	@ 0x24
 80051ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2101      	movs	r1, #1
 80051bc:	438a      	bics	r2, r1
 80051be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4911      	ldr	r1, [pc, #68]	@ (8005210 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80051cc:	400a      	ands	r2, r1
 80051ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6819      	ldr	r1, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2101      	movs	r1, #1
 80051ec:	430a      	orrs	r2, r1
 80051ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2241      	movs	r2, #65	@ 0x41
 80051f4:	2120      	movs	r1, #32
 80051f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2240      	movs	r2, #64	@ 0x40
 80051fc:	2100      	movs	r1, #0
 80051fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	e000      	b.n	8005206 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005204:	2302      	movs	r3, #2
  }
}
 8005206:	0018      	movs	r0, r3
 8005208:	46bd      	mov	sp, r7
 800520a:	b002      	add	sp, #8
 800520c:	bd80      	pop	{r7, pc}
 800520e:	46c0      	nop			@ (mov r8, r8)
 8005210:	ffffefff 	.word	0xffffefff

08005214 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2241      	movs	r2, #65	@ 0x41
 8005222:	5c9b      	ldrb	r3, [r3, r2]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b20      	cmp	r3, #32
 8005228:	d139      	bne.n	800529e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2240      	movs	r2, #64	@ 0x40
 800522e:	5c9b      	ldrb	r3, [r3, r2]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005234:	2302      	movs	r3, #2
 8005236:	e033      	b.n	80052a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2240      	movs	r2, #64	@ 0x40
 800523c:	2101      	movs	r1, #1
 800523e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2241      	movs	r2, #65	@ 0x41
 8005244:	2124      	movs	r1, #36	@ 0x24
 8005246:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2101      	movs	r1, #1
 8005254:	438a      	bics	r2, r1
 8005256:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4a11      	ldr	r2, [pc, #68]	@ (80052a8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005264:	4013      	ands	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2101      	movs	r1, #1
 8005286:	430a      	orrs	r2, r1
 8005288:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2241      	movs	r2, #65	@ 0x41
 800528e:	2120      	movs	r1, #32
 8005290:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2240      	movs	r2, #64	@ 0x40
 8005296:	2100      	movs	r1, #0
 8005298:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	e000      	b.n	80052a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800529e:	2302      	movs	r3, #2
  }
}
 80052a0:	0018      	movs	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b004      	add	sp, #16
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	fffff0ff 	.word	0xfffff0ff

080052ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80052b4:	4b19      	ldr	r3, [pc, #100]	@ (800531c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a19      	ldr	r2, [pc, #100]	@ (8005320 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	0019      	movs	r1, r3
 80052be:	4b17      	ldr	r3, [pc, #92]	@ (800531c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	2380      	movs	r3, #128	@ 0x80
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d11f      	bne.n	8005310 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80052d0:	4b14      	ldr	r3, [pc, #80]	@ (8005324 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	0013      	movs	r3, r2
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	189b      	adds	r3, r3, r2
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	4912      	ldr	r1, [pc, #72]	@ (8005328 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80052de:	0018      	movs	r0, r3
 80052e0:	f7fa ff10 	bl	8000104 <__udivsi3>
 80052e4:	0003      	movs	r3, r0
 80052e6:	3301      	adds	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052ea:	e008      	b.n	80052fe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e001      	b.n	80052fe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e009      	b.n	8005312 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052fe:	4b07      	ldr	r3, [pc, #28]	@ (800531c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	2380      	movs	r3, #128	@ 0x80
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	401a      	ands	r2, r3
 8005308:	2380      	movs	r3, #128	@ 0x80
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	429a      	cmp	r2, r3
 800530e:	d0ed      	beq.n	80052ec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	0018      	movs	r0, r3
 8005314:	46bd      	mov	sp, r7
 8005316:	b004      	add	sp, #16
 8005318:	bd80      	pop	{r7, pc}
 800531a:	46c0      	nop			@ (mov r8, r8)
 800531c:	40007000 	.word	0x40007000
 8005320:	fffff9ff 	.word	0xfffff9ff
 8005324:	20000058 	.word	0x20000058
 8005328:	000f4240 	.word	0x000f4240

0800532c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e2fe      	b.n	800593c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2201      	movs	r2, #1
 8005344:	4013      	ands	r3, r2
 8005346:	d100      	bne.n	800534a <HAL_RCC_OscConfig+0x1e>
 8005348:	e07c      	b.n	8005444 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800534a:	4bc3      	ldr	r3, [pc, #780]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	2238      	movs	r2, #56	@ 0x38
 8005350:	4013      	ands	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005354:	4bc0      	ldr	r3, [pc, #768]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	2203      	movs	r2, #3
 800535a:	4013      	ands	r3, r2
 800535c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	2b10      	cmp	r3, #16
 8005362:	d102      	bne.n	800536a <HAL_RCC_OscConfig+0x3e>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2b03      	cmp	r3, #3
 8005368:	d002      	beq.n	8005370 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d10b      	bne.n	8005388 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005370:	4bb9      	ldr	r3, [pc, #740]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	2380      	movs	r3, #128	@ 0x80
 8005376:	029b      	lsls	r3, r3, #10
 8005378:	4013      	ands	r3, r2
 800537a:	d062      	beq.n	8005442 <HAL_RCC_OscConfig+0x116>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d15e      	bne.n	8005442 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e2d9      	b.n	800593c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	2380      	movs	r3, #128	@ 0x80
 800538e:	025b      	lsls	r3, r3, #9
 8005390:	429a      	cmp	r2, r3
 8005392:	d107      	bne.n	80053a4 <HAL_RCC_OscConfig+0x78>
 8005394:	4bb0      	ldr	r3, [pc, #704]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	4baf      	ldr	r3, [pc, #700]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 800539a:	2180      	movs	r1, #128	@ 0x80
 800539c:	0249      	lsls	r1, r1, #9
 800539e:	430a      	orrs	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	e020      	b.n	80053e6 <HAL_RCC_OscConfig+0xba>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	23a0      	movs	r3, #160	@ 0xa0
 80053aa:	02db      	lsls	r3, r3, #11
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d10e      	bne.n	80053ce <HAL_RCC_OscConfig+0xa2>
 80053b0:	4ba9      	ldr	r3, [pc, #676]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	4ba8      	ldr	r3, [pc, #672]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80053b6:	2180      	movs	r1, #128	@ 0x80
 80053b8:	02c9      	lsls	r1, r1, #11
 80053ba:	430a      	orrs	r2, r1
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	4ba6      	ldr	r3, [pc, #664]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4ba5      	ldr	r3, [pc, #660]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80053c4:	2180      	movs	r1, #128	@ 0x80
 80053c6:	0249      	lsls	r1, r1, #9
 80053c8:	430a      	orrs	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	e00b      	b.n	80053e6 <HAL_RCC_OscConfig+0xba>
 80053ce:	4ba2      	ldr	r3, [pc, #648]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4ba1      	ldr	r3, [pc, #644]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80053d4:	49a1      	ldr	r1, [pc, #644]	@ (800565c <HAL_RCC_OscConfig+0x330>)
 80053d6:	400a      	ands	r2, r1
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	4b9f      	ldr	r3, [pc, #636]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4b9e      	ldr	r3, [pc, #632]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80053e0:	499f      	ldr	r1, [pc, #636]	@ (8005660 <HAL_RCC_OscConfig+0x334>)
 80053e2:	400a      	ands	r2, r1
 80053e4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d014      	beq.n	8005418 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ee:	f7fc fd19 	bl	8001e24 <HAL_GetTick>
 80053f2:	0003      	movs	r3, r0
 80053f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053f8:	f7fc fd14 	bl	8001e24 <HAL_GetTick>
 80053fc:	0002      	movs	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b64      	cmp	r3, #100	@ 0x64
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e298      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800540a:	4b93      	ldr	r3, [pc, #588]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	2380      	movs	r3, #128	@ 0x80
 8005410:	029b      	lsls	r3, r3, #10
 8005412:	4013      	ands	r3, r2
 8005414:	d0f0      	beq.n	80053f8 <HAL_RCC_OscConfig+0xcc>
 8005416:	e015      	b.n	8005444 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fc fd04 	bl	8001e24 <HAL_GetTick>
 800541c:	0003      	movs	r3, r0
 800541e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005422:	f7fc fcff 	bl	8001e24 <HAL_GetTick>
 8005426:	0002      	movs	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b64      	cmp	r3, #100	@ 0x64
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e283      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005434:	4b88      	ldr	r3, [pc, #544]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	2380      	movs	r3, #128	@ 0x80
 800543a:	029b      	lsls	r3, r3, #10
 800543c:	4013      	ands	r3, r2
 800543e:	d1f0      	bne.n	8005422 <HAL_RCC_OscConfig+0xf6>
 8005440:	e000      	b.n	8005444 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005442:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2202      	movs	r2, #2
 800544a:	4013      	ands	r3, r2
 800544c:	d100      	bne.n	8005450 <HAL_RCC_OscConfig+0x124>
 800544e:	e099      	b.n	8005584 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005450:	4b81      	ldr	r3, [pc, #516]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2238      	movs	r2, #56	@ 0x38
 8005456:	4013      	ands	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800545a:	4b7f      	ldr	r3, [pc, #508]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	2203      	movs	r2, #3
 8005460:	4013      	ands	r3, r2
 8005462:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	2b10      	cmp	r3, #16
 8005468:	d102      	bne.n	8005470 <HAL_RCC_OscConfig+0x144>
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d002      	beq.n	8005476 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d135      	bne.n	80054e2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005476:	4b78      	ldr	r3, [pc, #480]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	2380      	movs	r3, #128	@ 0x80
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	4013      	ands	r3, r2
 8005480:	d005      	beq.n	800548e <HAL_RCC_OscConfig+0x162>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e256      	b.n	800593c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548e:	4b72      	ldr	r3, [pc, #456]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	4a74      	ldr	r2, [pc, #464]	@ (8005664 <HAL_RCC_OscConfig+0x338>)
 8005494:	4013      	ands	r3, r2
 8005496:	0019      	movs	r1, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	021a      	lsls	r2, r3, #8
 800549e:	4b6e      	ldr	r3, [pc, #440]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80054a0:	430a      	orrs	r2, r1
 80054a2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d112      	bne.n	80054d0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80054aa:	4b6b      	ldr	r3, [pc, #428]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a6e      	ldr	r2, [pc, #440]	@ (8005668 <HAL_RCC_OscConfig+0x33c>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	0019      	movs	r1, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	4b67      	ldr	r3, [pc, #412]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80054ba:	430a      	orrs	r2, r1
 80054bc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80054be:	4b66      	ldr	r3, [pc, #408]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	0adb      	lsrs	r3, r3, #11
 80054c4:	2207      	movs	r2, #7
 80054c6:	4013      	ands	r3, r2
 80054c8:	4a68      	ldr	r2, [pc, #416]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 80054ca:	40da      	lsrs	r2, r3
 80054cc:	4b68      	ldr	r3, [pc, #416]	@ (8005670 <HAL_RCC_OscConfig+0x344>)
 80054ce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054d0:	4b68      	ldr	r3, [pc, #416]	@ (8005674 <HAL_RCC_OscConfig+0x348>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	0018      	movs	r0, r3
 80054d6:	f7fc fc49 	bl	8001d6c <HAL_InitTick>
 80054da:	1e03      	subs	r3, r0, #0
 80054dc:	d051      	beq.n	8005582 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e22c      	b.n	800593c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d030      	beq.n	800554c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80054ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a5e      	ldr	r2, [pc, #376]	@ (8005668 <HAL_RCC_OscConfig+0x33c>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	0019      	movs	r1, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	4b57      	ldr	r3, [pc, #348]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80054fa:	430a      	orrs	r2, r1
 80054fc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80054fe:	4b56      	ldr	r3, [pc, #344]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b55      	ldr	r3, [pc, #340]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 8005504:	2180      	movs	r1, #128	@ 0x80
 8005506:	0049      	lsls	r1, r1, #1
 8005508:	430a      	orrs	r2, r1
 800550a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7fc fc8a 	bl	8001e24 <HAL_GetTick>
 8005510:	0003      	movs	r3, r0
 8005512:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005516:	f7fc fc85 	bl	8001e24 <HAL_GetTick>
 800551a:	0002      	movs	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e209      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005528:	4b4b      	ldr	r3, [pc, #300]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	2380      	movs	r3, #128	@ 0x80
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	4013      	ands	r3, r2
 8005532:	d0f0      	beq.n	8005516 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005534:	4b48      	ldr	r3, [pc, #288]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	4a4a      	ldr	r2, [pc, #296]	@ (8005664 <HAL_RCC_OscConfig+0x338>)
 800553a:	4013      	ands	r3, r2
 800553c:	0019      	movs	r1, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	021a      	lsls	r2, r3, #8
 8005544:	4b44      	ldr	r3, [pc, #272]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 8005546:	430a      	orrs	r2, r1
 8005548:	605a      	str	r2, [r3, #4]
 800554a:	e01b      	b.n	8005584 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800554c:	4b42      	ldr	r3, [pc, #264]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	4b41      	ldr	r3, [pc, #260]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 8005552:	4949      	ldr	r1, [pc, #292]	@ (8005678 <HAL_RCC_OscConfig+0x34c>)
 8005554:	400a      	ands	r2, r1
 8005556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005558:	f7fc fc64 	bl	8001e24 <HAL_GetTick>
 800555c:	0003      	movs	r3, r0
 800555e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005562:	f7fc fc5f 	bl	8001e24 <HAL_GetTick>
 8005566:	0002      	movs	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e1e3      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005574:	4b38      	ldr	r3, [pc, #224]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	2380      	movs	r3, #128	@ 0x80
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4013      	ands	r3, r2
 800557e:	d1f0      	bne.n	8005562 <HAL_RCC_OscConfig+0x236>
 8005580:	e000      	b.n	8005584 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005582:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2208      	movs	r2, #8
 800558a:	4013      	ands	r3, r2
 800558c:	d047      	beq.n	800561e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800558e:	4b32      	ldr	r3, [pc, #200]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2238      	movs	r2, #56	@ 0x38
 8005594:	4013      	ands	r3, r2
 8005596:	2b18      	cmp	r3, #24
 8005598:	d10a      	bne.n	80055b0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800559a:	4b2f      	ldr	r3, [pc, #188]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 800559c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800559e:	2202      	movs	r2, #2
 80055a0:	4013      	ands	r3, r2
 80055a2:	d03c      	beq.n	800561e <HAL_RCC_OscConfig+0x2f2>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d138      	bne.n	800561e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e1c5      	b.n	800593c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d019      	beq.n	80055ec <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80055b8:	4b27      	ldr	r3, [pc, #156]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80055ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80055bc:	4b26      	ldr	r3, [pc, #152]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80055be:	2101      	movs	r1, #1
 80055c0:	430a      	orrs	r2, r1
 80055c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c4:	f7fc fc2e 	bl	8001e24 <HAL_GetTick>
 80055c8:	0003      	movs	r3, r0
 80055ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055cc:	e008      	b.n	80055e0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055ce:	f7fc fc29 	bl	8001e24 <HAL_GetTick>
 80055d2:	0002      	movs	r2, r0
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e1ad      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80055e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e4:	2202      	movs	r2, #2
 80055e6:	4013      	ands	r3, r2
 80055e8:	d0f1      	beq.n	80055ce <HAL_RCC_OscConfig+0x2a2>
 80055ea:	e018      	b.n	800561e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80055ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80055ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80055f0:	4b19      	ldr	r3, [pc, #100]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 80055f2:	2101      	movs	r1, #1
 80055f4:	438a      	bics	r2, r1
 80055f6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f8:	f7fc fc14 	bl	8001e24 <HAL_GetTick>
 80055fc:	0003      	movs	r3, r0
 80055fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005602:	f7fc fc0f 	bl	8001e24 <HAL_GetTick>
 8005606:	0002      	movs	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e193      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005614:	4b10      	ldr	r3, [pc, #64]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 8005616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005618:	2202      	movs	r2, #2
 800561a:	4013      	ands	r3, r2
 800561c:	d1f1      	bne.n	8005602 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2204      	movs	r2, #4
 8005624:	4013      	ands	r3, r2
 8005626:	d100      	bne.n	800562a <HAL_RCC_OscConfig+0x2fe>
 8005628:	e0c6      	b.n	80057b8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800562a:	231f      	movs	r3, #31
 800562c:	18fb      	adds	r3, r7, r3
 800562e:	2200      	movs	r2, #0
 8005630:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005632:	4b09      	ldr	r3, [pc, #36]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2238      	movs	r2, #56	@ 0x38
 8005638:	4013      	ands	r3, r2
 800563a:	2b20      	cmp	r3, #32
 800563c:	d11e      	bne.n	800567c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800563e:	4b06      	ldr	r3, [pc, #24]	@ (8005658 <HAL_RCC_OscConfig+0x32c>)
 8005640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005642:	2202      	movs	r2, #2
 8005644:	4013      	ands	r3, r2
 8005646:	d100      	bne.n	800564a <HAL_RCC_OscConfig+0x31e>
 8005648:	e0b6      	b.n	80057b8 <HAL_RCC_OscConfig+0x48c>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d000      	beq.n	8005654 <HAL_RCC_OscConfig+0x328>
 8005652:	e0b1      	b.n	80057b8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e171      	b.n	800593c <HAL_RCC_OscConfig+0x610>
 8005658:	40021000 	.word	0x40021000
 800565c:	fffeffff 	.word	0xfffeffff
 8005660:	fffbffff 	.word	0xfffbffff
 8005664:	ffff80ff 	.word	0xffff80ff
 8005668:	ffffc7ff 	.word	0xffffc7ff
 800566c:	00f42400 	.word	0x00f42400
 8005670:	20000058 	.word	0x20000058
 8005674:	2000005c 	.word	0x2000005c
 8005678:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800567c:	4bb1      	ldr	r3, [pc, #708]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 800567e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005680:	2380      	movs	r3, #128	@ 0x80
 8005682:	055b      	lsls	r3, r3, #21
 8005684:	4013      	ands	r3, r2
 8005686:	d101      	bne.n	800568c <HAL_RCC_OscConfig+0x360>
 8005688:	2301      	movs	r3, #1
 800568a:	e000      	b.n	800568e <HAL_RCC_OscConfig+0x362>
 800568c:	2300      	movs	r3, #0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d011      	beq.n	80056b6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005692:	4bac      	ldr	r3, [pc, #688]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 8005694:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005696:	4bab      	ldr	r3, [pc, #684]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 8005698:	2180      	movs	r1, #128	@ 0x80
 800569a:	0549      	lsls	r1, r1, #21
 800569c:	430a      	orrs	r2, r1
 800569e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80056a0:	4ba8      	ldr	r3, [pc, #672]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 80056a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056a4:	2380      	movs	r3, #128	@ 0x80
 80056a6:	055b      	lsls	r3, r3, #21
 80056a8:	4013      	ands	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80056ae:	231f      	movs	r3, #31
 80056b0:	18fb      	adds	r3, r7, r3
 80056b2:	2201      	movs	r2, #1
 80056b4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056b6:	4ba4      	ldr	r3, [pc, #656]	@ (8005948 <HAL_RCC_OscConfig+0x61c>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	2380      	movs	r3, #128	@ 0x80
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	4013      	ands	r3, r2
 80056c0:	d11a      	bne.n	80056f8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056c2:	4ba1      	ldr	r3, [pc, #644]	@ (8005948 <HAL_RCC_OscConfig+0x61c>)
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	4ba0      	ldr	r3, [pc, #640]	@ (8005948 <HAL_RCC_OscConfig+0x61c>)
 80056c8:	2180      	movs	r1, #128	@ 0x80
 80056ca:	0049      	lsls	r1, r1, #1
 80056cc:	430a      	orrs	r2, r1
 80056ce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80056d0:	f7fc fba8 	bl	8001e24 <HAL_GetTick>
 80056d4:	0003      	movs	r3, r0
 80056d6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056d8:	e008      	b.n	80056ec <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056da:	f7fc fba3 	bl	8001e24 <HAL_GetTick>
 80056de:	0002      	movs	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e127      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056ec:	4b96      	ldr	r3, [pc, #600]	@ (8005948 <HAL_RCC_OscConfig+0x61c>)
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	2380      	movs	r3, #128	@ 0x80
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	4013      	ands	r3, r2
 80056f6:	d0f0      	beq.n	80056da <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d106      	bne.n	800570e <HAL_RCC_OscConfig+0x3e2>
 8005700:	4b90      	ldr	r3, [pc, #576]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 8005702:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005704:	4b8f      	ldr	r3, [pc, #572]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 8005706:	2101      	movs	r1, #1
 8005708:	430a      	orrs	r2, r1
 800570a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800570c:	e01c      	b.n	8005748 <HAL_RCC_OscConfig+0x41c>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b05      	cmp	r3, #5
 8005714:	d10c      	bne.n	8005730 <HAL_RCC_OscConfig+0x404>
 8005716:	4b8b      	ldr	r3, [pc, #556]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 8005718:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800571a:	4b8a      	ldr	r3, [pc, #552]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 800571c:	2104      	movs	r1, #4
 800571e:	430a      	orrs	r2, r1
 8005720:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005722:	4b88      	ldr	r3, [pc, #544]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 8005724:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005726:	4b87      	ldr	r3, [pc, #540]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 8005728:	2101      	movs	r1, #1
 800572a:	430a      	orrs	r2, r1
 800572c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800572e:	e00b      	b.n	8005748 <HAL_RCC_OscConfig+0x41c>
 8005730:	4b84      	ldr	r3, [pc, #528]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 8005732:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005734:	4b83      	ldr	r3, [pc, #524]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 8005736:	2101      	movs	r1, #1
 8005738:	438a      	bics	r2, r1
 800573a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800573c:	4b81      	ldr	r3, [pc, #516]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 800573e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005740:	4b80      	ldr	r3, [pc, #512]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 8005742:	2104      	movs	r1, #4
 8005744:	438a      	bics	r2, r1
 8005746:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d014      	beq.n	800577a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005750:	f7fc fb68 	bl	8001e24 <HAL_GetTick>
 8005754:	0003      	movs	r3, r0
 8005756:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005758:	e009      	b.n	800576e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800575a:	f7fc fb63 	bl	8001e24 <HAL_GetTick>
 800575e:	0002      	movs	r2, r0
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	4a79      	ldr	r2, [pc, #484]	@ (800594c <HAL_RCC_OscConfig+0x620>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e0e6      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800576e:	4b75      	ldr	r3, [pc, #468]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 8005770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005772:	2202      	movs	r2, #2
 8005774:	4013      	ands	r3, r2
 8005776:	d0f0      	beq.n	800575a <HAL_RCC_OscConfig+0x42e>
 8005778:	e013      	b.n	80057a2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577a:	f7fc fb53 	bl	8001e24 <HAL_GetTick>
 800577e:	0003      	movs	r3, r0
 8005780:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005782:	e009      	b.n	8005798 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005784:	f7fc fb4e 	bl	8001e24 <HAL_GetTick>
 8005788:	0002      	movs	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	4a6f      	ldr	r2, [pc, #444]	@ (800594c <HAL_RCC_OscConfig+0x620>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e0d1      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005798:	4b6a      	ldr	r3, [pc, #424]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 800579a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579c:	2202      	movs	r2, #2
 800579e:	4013      	ands	r3, r2
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80057a2:	231f      	movs	r3, #31
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d105      	bne.n	80057b8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80057ac:	4b65      	ldr	r3, [pc, #404]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 80057ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057b0:	4b64      	ldr	r3, [pc, #400]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 80057b2:	4967      	ldr	r1, [pc, #412]	@ (8005950 <HAL_RCC_OscConfig+0x624>)
 80057b4:	400a      	ands	r2, r1
 80057b6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d100      	bne.n	80057c2 <HAL_RCC_OscConfig+0x496>
 80057c0:	e0bb      	b.n	800593a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057c2:	4b60      	ldr	r3, [pc, #384]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	2238      	movs	r2, #56	@ 0x38
 80057c8:	4013      	ands	r3, r2
 80057ca:	2b10      	cmp	r3, #16
 80057cc:	d100      	bne.n	80057d0 <HAL_RCC_OscConfig+0x4a4>
 80057ce:	e07b      	b.n	80058c8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d156      	bne.n	8005886 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	4b59      	ldr	r3, [pc, #356]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 80057de:	495d      	ldr	r1, [pc, #372]	@ (8005954 <HAL_RCC_OscConfig+0x628>)
 80057e0:	400a      	ands	r2, r1
 80057e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e4:	f7fc fb1e 	bl	8001e24 <HAL_GetTick>
 80057e8:	0003      	movs	r3, r0
 80057ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ee:	f7fc fb19 	bl	8001e24 <HAL_GetTick>
 80057f2:	0002      	movs	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e09d      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005800:	4b50      	ldr	r3, [pc, #320]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	2380      	movs	r3, #128	@ 0x80
 8005806:	049b      	lsls	r3, r3, #18
 8005808:	4013      	ands	r3, r2
 800580a:	d1f0      	bne.n	80057ee <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800580c:	4b4d      	ldr	r3, [pc, #308]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	4a51      	ldr	r2, [pc, #324]	@ (8005958 <HAL_RCC_OscConfig+0x62c>)
 8005812:	4013      	ands	r3, r2
 8005814:	0019      	movs	r1, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1a      	ldr	r2, [r3, #32]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	431a      	orrs	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005838:	431a      	orrs	r2, r3
 800583a:	4b42      	ldr	r3, [pc, #264]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 800583c:	430a      	orrs	r2, r1
 800583e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005840:	4b40      	ldr	r3, [pc, #256]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4b3f      	ldr	r3, [pc, #252]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 8005846:	2180      	movs	r1, #128	@ 0x80
 8005848:	0449      	lsls	r1, r1, #17
 800584a:	430a      	orrs	r2, r1
 800584c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800584e:	4b3d      	ldr	r3, [pc, #244]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	4b3c      	ldr	r3, [pc, #240]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 8005854:	2180      	movs	r1, #128	@ 0x80
 8005856:	0549      	lsls	r1, r1, #21
 8005858:	430a      	orrs	r2, r1
 800585a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585c:	f7fc fae2 	bl	8001e24 <HAL_GetTick>
 8005860:	0003      	movs	r3, r0
 8005862:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005864:	e008      	b.n	8005878 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005866:	f7fc fadd 	bl	8001e24 <HAL_GetTick>
 800586a:	0002      	movs	r2, r0
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e061      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005878:	4b32      	ldr	r3, [pc, #200]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	2380      	movs	r3, #128	@ 0x80
 800587e:	049b      	lsls	r3, r3, #18
 8005880:	4013      	ands	r3, r2
 8005882:	d0f0      	beq.n	8005866 <HAL_RCC_OscConfig+0x53a>
 8005884:	e059      	b.n	800593a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005886:	4b2f      	ldr	r3, [pc, #188]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	4b2e      	ldr	r3, [pc, #184]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 800588c:	4931      	ldr	r1, [pc, #196]	@ (8005954 <HAL_RCC_OscConfig+0x628>)
 800588e:	400a      	ands	r2, r1
 8005890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005892:	f7fc fac7 	bl	8001e24 <HAL_GetTick>
 8005896:	0003      	movs	r3, r0
 8005898:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800589c:	f7fc fac2 	bl	8001e24 <HAL_GetTick>
 80058a0:	0002      	movs	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e046      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058ae:	4b25      	ldr	r3, [pc, #148]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	2380      	movs	r3, #128	@ 0x80
 80058b4:	049b      	lsls	r3, r3, #18
 80058b6:	4013      	ands	r3, r2
 80058b8:	d1f0      	bne.n	800589c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80058ba:	4b22      	ldr	r3, [pc, #136]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	4b21      	ldr	r3, [pc, #132]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 80058c0:	4926      	ldr	r1, [pc, #152]	@ (800595c <HAL_RCC_OscConfig+0x630>)
 80058c2:	400a      	ands	r2, r1
 80058c4:	60da      	str	r2, [r3, #12]
 80058c6:	e038      	b.n	800593a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e033      	b.n	800593c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80058d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005944 <HAL_RCC_OscConfig+0x618>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2203      	movs	r2, #3
 80058de:	401a      	ands	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d126      	bne.n	8005936 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2270      	movs	r2, #112	@ 0x70
 80058ec:	401a      	ands	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d11f      	bne.n	8005936 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	23fe      	movs	r3, #254	@ 0xfe
 80058fa:	01db      	lsls	r3, r3, #7
 80058fc:	401a      	ands	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005902:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005904:	429a      	cmp	r2, r3
 8005906:	d116      	bne.n	8005936 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	23f8      	movs	r3, #248	@ 0xf8
 800590c:	039b      	lsls	r3, r3, #14
 800590e:	401a      	ands	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005914:	429a      	cmp	r2, r3
 8005916:	d10e      	bne.n	8005936 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	23e0      	movs	r3, #224	@ 0xe0
 800591c:	051b      	lsls	r3, r3, #20
 800591e:	401a      	ands	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005924:	429a      	cmp	r2, r3
 8005926:	d106      	bne.n	8005936 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	0f5b      	lsrs	r3, r3, #29
 800592c:	075a      	lsls	r2, r3, #29
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005932:	429a      	cmp	r2, r3
 8005934:	d001      	beq.n	800593a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	0018      	movs	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	b008      	add	sp, #32
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40021000 	.word	0x40021000
 8005948:	40007000 	.word	0x40007000
 800594c:	00001388 	.word	0x00001388
 8005950:	efffffff 	.word	0xefffffff
 8005954:	feffffff 	.word	0xfeffffff
 8005958:	11c1808c 	.word	0x11c1808c
 800595c:	eefefffc 	.word	0xeefefffc

08005960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e0e9      	b.n	8005b48 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005974:	4b76      	ldr	r3, [pc, #472]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f0>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2207      	movs	r2, #7
 800597a:	4013      	ands	r3, r2
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d91e      	bls.n	80059c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005982:	4b73      	ldr	r3, [pc, #460]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2207      	movs	r2, #7
 8005988:	4393      	bics	r3, r2
 800598a:	0019      	movs	r1, r3
 800598c:	4b70      	ldr	r3, [pc, #448]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f0>)
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005994:	f7fc fa46 	bl	8001e24 <HAL_GetTick>
 8005998:	0003      	movs	r3, r0
 800599a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800599c:	e009      	b.n	80059b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800599e:	f7fc fa41 	bl	8001e24 <HAL_GetTick>
 80059a2:	0002      	movs	r2, r0
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	4a6a      	ldr	r2, [pc, #424]	@ (8005b54 <HAL_RCC_ClockConfig+0x1f4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e0ca      	b.n	8005b48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80059b2:	4b67      	ldr	r3, [pc, #412]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2207      	movs	r2, #7
 80059b8:	4013      	ands	r3, r2
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d1ee      	bne.n	800599e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2202      	movs	r2, #2
 80059c6:	4013      	ands	r3, r2
 80059c8:	d015      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2204      	movs	r2, #4
 80059d0:	4013      	ands	r3, r2
 80059d2:	d006      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80059d4:	4b60      	ldr	r3, [pc, #384]	@ (8005b58 <HAL_RCC_ClockConfig+0x1f8>)
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	4b5f      	ldr	r3, [pc, #380]	@ (8005b58 <HAL_RCC_ClockConfig+0x1f8>)
 80059da:	21e0      	movs	r1, #224	@ 0xe0
 80059dc:	01c9      	lsls	r1, r1, #7
 80059de:	430a      	orrs	r2, r1
 80059e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059e2:	4b5d      	ldr	r3, [pc, #372]	@ (8005b58 <HAL_RCC_ClockConfig+0x1f8>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	4a5d      	ldr	r2, [pc, #372]	@ (8005b5c <HAL_RCC_ClockConfig+0x1fc>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	0019      	movs	r1, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	4b59      	ldr	r3, [pc, #356]	@ (8005b58 <HAL_RCC_ClockConfig+0x1f8>)
 80059f2:	430a      	orrs	r2, r1
 80059f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2201      	movs	r2, #1
 80059fc:	4013      	ands	r3, r2
 80059fe:	d057      	beq.n	8005ab0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d107      	bne.n	8005a18 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a08:	4b53      	ldr	r3, [pc, #332]	@ (8005b58 <HAL_RCC_ClockConfig+0x1f8>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	2380      	movs	r3, #128	@ 0x80
 8005a0e:	029b      	lsls	r3, r3, #10
 8005a10:	4013      	ands	r3, r2
 8005a12:	d12b      	bne.n	8005a6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e097      	b.n	8005b48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d107      	bne.n	8005a30 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a20:	4b4d      	ldr	r3, [pc, #308]	@ (8005b58 <HAL_RCC_ClockConfig+0x1f8>)
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	2380      	movs	r3, #128	@ 0x80
 8005a26:	049b      	lsls	r3, r3, #18
 8005a28:	4013      	ands	r3, r2
 8005a2a:	d11f      	bne.n	8005a6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e08b      	b.n	8005b48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d107      	bne.n	8005a48 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a38:	4b47      	ldr	r3, [pc, #284]	@ (8005b58 <HAL_RCC_ClockConfig+0x1f8>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	2380      	movs	r3, #128	@ 0x80
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	4013      	ands	r3, r2
 8005a42:	d113      	bne.n	8005a6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e07f      	b.n	8005b48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d106      	bne.n	8005a5e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a50:	4b41      	ldr	r3, [pc, #260]	@ (8005b58 <HAL_RCC_ClockConfig+0x1f8>)
 8005a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a54:	2202      	movs	r2, #2
 8005a56:	4013      	ands	r3, r2
 8005a58:	d108      	bne.n	8005a6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e074      	b.n	8005b48 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b58 <HAL_RCC_ClockConfig+0x1f8>)
 8005a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a62:	2202      	movs	r2, #2
 8005a64:	4013      	ands	r3, r2
 8005a66:	d101      	bne.n	8005a6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e06d      	b.n	8005b48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8005b58 <HAL_RCC_ClockConfig+0x1f8>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2207      	movs	r2, #7
 8005a72:	4393      	bics	r3, r2
 8005a74:	0019      	movs	r1, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	4b37      	ldr	r3, [pc, #220]	@ (8005b58 <HAL_RCC_ClockConfig+0x1f8>)
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a80:	f7fc f9d0 	bl	8001e24 <HAL_GetTick>
 8005a84:	0003      	movs	r3, r0
 8005a86:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a88:	e009      	b.n	8005a9e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a8a:	f7fc f9cb 	bl	8001e24 <HAL_GetTick>
 8005a8e:	0002      	movs	r2, r0
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	4a2f      	ldr	r2, [pc, #188]	@ (8005b54 <HAL_RCC_ClockConfig+0x1f4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e054      	b.n	8005b48 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8005b58 <HAL_RCC_ClockConfig+0x1f8>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2238      	movs	r2, #56	@ 0x38
 8005aa4:	401a      	ands	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d1ec      	bne.n	8005a8a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ab0:	4b27      	ldr	r3, [pc, #156]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f0>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2207      	movs	r2, #7
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d21e      	bcs.n	8005afc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005abe:	4b24      	ldr	r3, [pc, #144]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2207      	movs	r2, #7
 8005ac4:	4393      	bics	r3, r2
 8005ac6:	0019      	movs	r1, r3
 8005ac8:	4b21      	ldr	r3, [pc, #132]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f0>)
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ad0:	f7fc f9a8 	bl	8001e24 <HAL_GetTick>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ad8:	e009      	b.n	8005aee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ada:	f7fc f9a3 	bl	8001e24 <HAL_GetTick>
 8005ade:	0002      	movs	r2, r0
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b54 <HAL_RCC_ClockConfig+0x1f4>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e02c      	b.n	8005b48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005aee:	4b18      	ldr	r3, [pc, #96]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f0>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2207      	movs	r2, #7
 8005af4:	4013      	ands	r3, r2
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d1ee      	bne.n	8005ada <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2204      	movs	r2, #4
 8005b02:	4013      	ands	r3, r2
 8005b04:	d009      	beq.n	8005b1a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005b06:	4b14      	ldr	r3, [pc, #80]	@ (8005b58 <HAL_RCC_ClockConfig+0x1f8>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	4a15      	ldr	r2, [pc, #84]	@ (8005b60 <HAL_RCC_ClockConfig+0x200>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	0019      	movs	r1, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68da      	ldr	r2, [r3, #12]
 8005b14:	4b10      	ldr	r3, [pc, #64]	@ (8005b58 <HAL_RCC_ClockConfig+0x1f8>)
 8005b16:	430a      	orrs	r2, r1
 8005b18:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005b1a:	f000 f829 	bl	8005b70 <HAL_RCC_GetSysClockFreq>
 8005b1e:	0001      	movs	r1, r0
 8005b20:	4b0d      	ldr	r3, [pc, #52]	@ (8005b58 <HAL_RCC_ClockConfig+0x1f8>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	0a1b      	lsrs	r3, r3, #8
 8005b26:	220f      	movs	r2, #15
 8005b28:	401a      	ands	r2, r3
 8005b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8005b64 <HAL_RCC_ClockConfig+0x204>)
 8005b2c:	0092      	lsls	r2, r2, #2
 8005b2e:	58d3      	ldr	r3, [r2, r3]
 8005b30:	221f      	movs	r2, #31
 8005b32:	4013      	ands	r3, r2
 8005b34:	000a      	movs	r2, r1
 8005b36:	40da      	lsrs	r2, r3
 8005b38:	4b0b      	ldr	r3, [pc, #44]	@ (8005b68 <HAL_RCC_ClockConfig+0x208>)
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b6c <HAL_RCC_ClockConfig+0x20c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	0018      	movs	r0, r3
 8005b42:	f7fc f913 	bl	8001d6c <HAL_InitTick>
 8005b46:	0003      	movs	r3, r0
}
 8005b48:	0018      	movs	r0, r3
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	b004      	add	sp, #16
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	40022000 	.word	0x40022000
 8005b54:	00001388 	.word	0x00001388
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	fffff0ff 	.word	0xfffff0ff
 8005b60:	ffff8fff 	.word	0xffff8fff
 8005b64:	08006988 	.word	0x08006988
 8005b68:	20000058 	.word	0x20000058
 8005b6c:	2000005c 	.word	0x2000005c

08005b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b76:	4b3c      	ldr	r3, [pc, #240]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	2238      	movs	r2, #56	@ 0x38
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d10f      	bne.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005b80:	4b39      	ldr	r3, [pc, #228]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	0adb      	lsrs	r3, r3, #11
 8005b86:	2207      	movs	r2, #7
 8005b88:	4013      	ands	r3, r2
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	409a      	lsls	r2, r3
 8005b8e:	0013      	movs	r3, r2
 8005b90:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005b92:	6839      	ldr	r1, [r7, #0]
 8005b94:	4835      	ldr	r0, [pc, #212]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b96:	f7fa fab5 	bl	8000104 <__udivsi3>
 8005b9a:	0003      	movs	r3, r0
 8005b9c:	613b      	str	r3, [r7, #16]
 8005b9e:	e05d      	b.n	8005c5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ba0:	4b31      	ldr	r3, [pc, #196]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2238      	movs	r2, #56	@ 0x38
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d102      	bne.n	8005bb2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bac:	4b30      	ldr	r3, [pc, #192]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x100>)
 8005bae:	613b      	str	r3, [r7, #16]
 8005bb0:	e054      	b.n	8005c5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2238      	movs	r2, #56	@ 0x38
 8005bb8:	4013      	ands	r3, r2
 8005bba:	2b10      	cmp	r3, #16
 8005bbc:	d138      	bne.n	8005c30 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	2203      	movs	r2, #3
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bc8:	4b27      	ldr	r3, [pc, #156]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	091b      	lsrs	r3, r3, #4
 8005bce:	2207      	movs	r2, #7
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d10d      	bne.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	4824      	ldr	r0, [pc, #144]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x100>)
 8005be0:	f7fa fa90 	bl	8000104 <__udivsi3>
 8005be4:	0003      	movs	r3, r0
 8005be6:	0019      	movs	r1, r3
 8005be8:	4b1f      	ldr	r3, [pc, #124]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	0a1b      	lsrs	r3, r3, #8
 8005bee:	227f      	movs	r2, #127	@ 0x7f
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	434b      	muls	r3, r1
 8005bf4:	617b      	str	r3, [r7, #20]
        break;
 8005bf6:	e00d      	b.n	8005c14 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	481c      	ldr	r0, [pc, #112]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005bfc:	f7fa fa82 	bl	8000104 <__udivsi3>
 8005c00:	0003      	movs	r3, r0
 8005c02:	0019      	movs	r1, r3
 8005c04:	4b18      	ldr	r3, [pc, #96]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	0a1b      	lsrs	r3, r3, #8
 8005c0a:	227f      	movs	r2, #127	@ 0x7f
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	434b      	muls	r3, r1
 8005c10:	617b      	str	r3, [r7, #20]
        break;
 8005c12:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005c14:	4b14      	ldr	r3, [pc, #80]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	0f5b      	lsrs	r3, r3, #29
 8005c1a:	2207      	movs	r2, #7
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	3301      	adds	r3, #1
 8005c20:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	6978      	ldr	r0, [r7, #20]
 8005c26:	f7fa fa6d 	bl	8000104 <__udivsi3>
 8005c2a:	0003      	movs	r3, r0
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	e015      	b.n	8005c5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005c30:	4b0d      	ldr	r3, [pc, #52]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	2238      	movs	r2, #56	@ 0x38
 8005c36:	4013      	ands	r3, r2
 8005c38:	2b20      	cmp	r3, #32
 8005c3a:	d103      	bne.n	8005c44 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005c3c:	2380      	movs	r3, #128	@ 0x80
 8005c3e:	021b      	lsls	r3, r3, #8
 8005c40:	613b      	str	r3, [r7, #16]
 8005c42:	e00b      	b.n	8005c5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005c44:	4b08      	ldr	r3, [pc, #32]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	2238      	movs	r2, #56	@ 0x38
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b18      	cmp	r3, #24
 8005c4e:	d103      	bne.n	8005c58 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005c50:	23fa      	movs	r3, #250	@ 0xfa
 8005c52:	01db      	lsls	r3, r3, #7
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	e001      	b.n	8005c5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c5c:	693b      	ldr	r3, [r7, #16]
}
 8005c5e:	0018      	movs	r0, r3
 8005c60:	46bd      	mov	sp, r7
 8005c62:	b006      	add	sp, #24
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	46c0      	nop			@ (mov r8, r8)
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	00f42400 	.word	0x00f42400
 8005c70:	007a1200 	.word	0x007a1200

08005c74 <HAL_RCC_EnableCSS>:
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005c78:	4b04      	ldr	r3, [pc, #16]	@ (8005c8c <HAL_RCC_EnableCSS+0x18>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	4b03      	ldr	r3, [pc, #12]	@ (8005c8c <HAL_RCC_EnableCSS+0x18>)
 8005c7e:	2180      	movs	r1, #128	@ 0x80
 8005c80:	0309      	lsls	r1, r1, #12
 8005c82:	430a      	orrs	r2, r1
 8005c84:	601a      	str	r2, [r3, #0]
}
 8005c86:	46c0      	nop			@ (mov r8, r8)
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40021000 	.word	0x40021000

08005c90 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note  This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
  uint32_t itflag = RCC->CIFR;
 8005c96:	4b0d      	ldr	r3, [pc, #52]	@ (8005ccc <HAL_RCC_NMI_IRQHandler+0x3c>)
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	607b      	str	r3, [r7, #4]

  /* Clear interrupt flags related to CSS */
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005ccc <HAL_RCC_NMI_IRQHandler+0x3c>)
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	22c0      	movs	r2, #192	@ 0xc0
 8005ca2:	0092      	lsls	r2, r2, #2
 8005ca4:	400a      	ands	r2, r1
 8005ca6:	621a      	str	r2, [r3, #32]

  /* Check RCC CSSF interrupt flag  */
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	2380      	movs	r3, #128	@ 0x80
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	4013      	ands	r3, r2
 8005cb0:	d001      	beq.n	8005cb6 <HAL_RCC_NMI_IRQHandler+0x26>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005cb2:	f000 f80d 	bl	8005cd0 <HAL_RCC_CSSCallback>
  }

  /* Check RCC LSECSSF interrupt flag  */
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	2380      	movs	r3, #128	@ 0x80
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	d001      	beq.n	8005cc4 <HAL_RCC_NMI_IRQHandler+0x34>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_LSECSSCallback();
 8005cc0:	f000 f80b 	bl	8005cda <HAL_RCC_LSECSSCallback>
  }
}
 8005cc4:	46c0      	nop			@ (mov r8, r8)
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	b002      	add	sp, #8
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	40021000 	.word	0x40021000

08005cd0 <HAL_RCC_CSSCallback>:
/**
  * @brief Handle the RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8005cd4:	46c0      	nop			@ (mov r8, r8)
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <HAL_RCC_LSECSSCallback>:
/**
  * @brief  RCC LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_LSECSSCallback(void)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 8005cde:	46c0      	nop			@ (mov r8, r8)
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005cec:	2313      	movs	r3, #19
 8005cee:	18fb      	adds	r3, r7, r3
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cf4:	2312      	movs	r3, #18
 8005cf6:	18fb      	adds	r3, r7, r3
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	2380      	movs	r3, #128	@ 0x80
 8005d02:	029b      	lsls	r3, r3, #10
 8005d04:	4013      	ands	r3, r2
 8005d06:	d100      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005d08:	e0a3      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d0a:	2011      	movs	r0, #17
 8005d0c:	183b      	adds	r3, r7, r0
 8005d0e:	2200      	movs	r2, #0
 8005d10:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d12:	4bc3      	ldr	r3, [pc, #780]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d16:	2380      	movs	r3, #128	@ 0x80
 8005d18:	055b      	lsls	r3, r3, #21
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	d110      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d1e:	4bc0      	ldr	r3, [pc, #768]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d22:	4bbf      	ldr	r3, [pc, #764]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d24:	2180      	movs	r1, #128	@ 0x80
 8005d26:	0549      	lsls	r1, r1, #21
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d2c:	4bbc      	ldr	r3, [pc, #752]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d30:	2380      	movs	r3, #128	@ 0x80
 8005d32:	055b      	lsls	r3, r3, #21
 8005d34:	4013      	ands	r3, r2
 8005d36:	60bb      	str	r3, [r7, #8]
 8005d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d3a:	183b      	adds	r3, r7, r0
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d40:	4bb8      	ldr	r3, [pc, #736]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	4bb7      	ldr	r3, [pc, #732]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005d46:	2180      	movs	r1, #128	@ 0x80
 8005d48:	0049      	lsls	r1, r1, #1
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d4e:	f7fc f869 	bl	8001e24 <HAL_GetTick>
 8005d52:	0003      	movs	r3, r0
 8005d54:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d56:	e00b      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d58:	f7fc f864 	bl	8001e24 <HAL_GetTick>
 8005d5c:	0002      	movs	r2, r0
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d904      	bls.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005d66:	2313      	movs	r3, #19
 8005d68:	18fb      	adds	r3, r7, r3
 8005d6a:	2203      	movs	r2, #3
 8005d6c:	701a      	strb	r2, [r3, #0]
        break;
 8005d6e:	e005      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d70:	4bac      	ldr	r3, [pc, #688]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	2380      	movs	r3, #128	@ 0x80
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	4013      	ands	r3, r2
 8005d7a:	d0ed      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005d7c:	2313      	movs	r3, #19
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d154      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d86:	4ba6      	ldr	r3, [pc, #664]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d8a:	23c0      	movs	r3, #192	@ 0xc0
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4013      	ands	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d019      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d014      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005da2:	4b9f      	ldr	r3, [pc, #636]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da6:	4aa0      	ldr	r2, [pc, #640]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dac:	4b9c      	ldr	r3, [pc, #624]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005db0:	4b9b      	ldr	r3, [pc, #620]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005db2:	2180      	movs	r1, #128	@ 0x80
 8005db4:	0249      	lsls	r1, r1, #9
 8005db6:	430a      	orrs	r2, r1
 8005db8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dba:	4b99      	ldr	r3, [pc, #612]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dbc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005dbe:	4b98      	ldr	r3, [pc, #608]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dc0:	499a      	ldr	r1, [pc, #616]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005dc2:	400a      	ands	r2, r1
 8005dc4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005dc6:	4b96      	ldr	r3, [pc, #600]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	d016      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd4:	f7fc f826 	bl	8001e24 <HAL_GetTick>
 8005dd8:	0003      	movs	r3, r0
 8005dda:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ddc:	e00c      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dde:	f7fc f821 	bl	8001e24 <HAL_GetTick>
 8005de2:	0002      	movs	r2, r0
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	4a91      	ldr	r2, [pc, #580]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d904      	bls.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005dee:	2313      	movs	r3, #19
 8005df0:	18fb      	adds	r3, r7, r3
 8005df2:	2203      	movs	r2, #3
 8005df4:	701a      	strb	r2, [r3, #0]
            break;
 8005df6:	e004      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005df8:	4b89      	ldr	r3, [pc, #548]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	4013      	ands	r3, r2
 8005e00:	d0ed      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005e02:	2313      	movs	r3, #19
 8005e04:	18fb      	adds	r3, r7, r3
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10a      	bne.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e0c:	4b84      	ldr	r3, [pc, #528]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e10:	4a85      	ldr	r2, [pc, #532]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005e12:	4013      	ands	r3, r2
 8005e14:	0019      	movs	r1, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e1a:	4b81      	ldr	r3, [pc, #516]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e20:	e00c      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e22:	2312      	movs	r3, #18
 8005e24:	18fb      	adds	r3, r7, r3
 8005e26:	2213      	movs	r2, #19
 8005e28:	18ba      	adds	r2, r7, r2
 8005e2a:	7812      	ldrb	r2, [r2, #0]
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	e005      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e30:	2312      	movs	r3, #18
 8005e32:	18fb      	adds	r3, r7, r3
 8005e34:	2213      	movs	r2, #19
 8005e36:	18ba      	adds	r2, r7, r2
 8005e38:	7812      	ldrb	r2, [r2, #0]
 8005e3a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e3c:	2311      	movs	r3, #17
 8005e3e:	18fb      	adds	r3, r7, r3
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d105      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e46:	4b76      	ldr	r3, [pc, #472]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e4a:	4b75      	ldr	r3, [pc, #468]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e4c:	4979      	ldr	r1, [pc, #484]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005e4e:	400a      	ands	r2, r1
 8005e50:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2201      	movs	r2, #1
 8005e58:	4013      	ands	r3, r2
 8005e5a:	d009      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e5c:	4b70      	ldr	r3, [pc, #448]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e60:	2203      	movs	r2, #3
 8005e62:	4393      	bics	r3, r2
 8005e64:	0019      	movs	r1, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	4b6d      	ldr	r3, [pc, #436]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2202      	movs	r2, #2
 8005e76:	4013      	ands	r3, r2
 8005e78:	d009      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e7a:	4b69      	ldr	r3, [pc, #420]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7e:	220c      	movs	r2, #12
 8005e80:	4393      	bics	r3, r2
 8005e82:	0019      	movs	r1, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	4b65      	ldr	r3, [pc, #404]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2210      	movs	r2, #16
 8005e94:	4013      	ands	r3, r2
 8005e96:	d009      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e98:	4b61      	ldr	r3, [pc, #388]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9c:	4a66      	ldr	r2, [pc, #408]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	0019      	movs	r1, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	4b5e      	ldr	r3, [pc, #376]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	2380      	movs	r3, #128	@ 0x80
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eb8:	4b59      	ldr	r3, [pc, #356]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ebc:	4a5f      	ldr	r2, [pc, #380]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	0019      	movs	r1, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699a      	ldr	r2, [r3, #24]
 8005ec6:	4b56      	ldr	r3, [pc, #344]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	2380      	movs	r3, #128	@ 0x80
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	d009      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ed8:	4b51      	ldr	r3, [pc, #324]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005edc:	4a58      	ldr	r2, [pc, #352]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ede:	4013      	ands	r3, r2
 8005ee0:	0019      	movs	r1, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69da      	ldr	r2, [r3, #28]
 8005ee6:	4b4e      	ldr	r3, [pc, #312]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	d009      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efa:	4a52      	ldr	r2, [pc, #328]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	0019      	movs	r1, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	4b46      	ldr	r3, [pc, #280]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f06:	430a      	orrs	r2, r1
 8005f08:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	2380      	movs	r3, #128	@ 0x80
 8005f10:	01db      	lsls	r3, r3, #7
 8005f12:	4013      	ands	r3, r2
 8005f14:	d015      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f16:	4b42      	ldr	r3, [pc, #264]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	0899      	lsrs	r1, r3, #2
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1a      	ldr	r2, [r3, #32]
 8005f22:	4b3f      	ldr	r3, [pc, #252]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f24:	430a      	orrs	r2, r1
 8005f26:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1a      	ldr	r2, [r3, #32]
 8005f2c:	2380      	movs	r3, #128	@ 0x80
 8005f2e:	05db      	lsls	r3, r3, #23
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d106      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005f34:	4b3a      	ldr	r3, [pc, #232]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	4b39      	ldr	r3, [pc, #228]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f3a:	2180      	movs	r1, #128	@ 0x80
 8005f3c:	0249      	lsls	r1, r1, #9
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	2380      	movs	r3, #128	@ 0x80
 8005f48:	031b      	lsls	r3, r3, #12
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	d009      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f4e:	4b34      	ldr	r3, [pc, #208]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f52:	2240      	movs	r2, #64	@ 0x40
 8005f54:	4393      	bics	r3, r2
 8005f56:	0019      	movs	r1, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f5c:	4b30      	ldr	r3, [pc, #192]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	2380      	movs	r3, #128	@ 0x80
 8005f68:	039b      	lsls	r3, r3, #14
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	d016      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f72:	4a35      	ldr	r2, [pc, #212]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005f74:	4013      	ands	r3, r2
 8005f76:	0019      	movs	r1, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f7c:	4b28      	ldr	r3, [pc, #160]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f86:	2380      	movs	r3, #128	@ 0x80
 8005f88:	03db      	lsls	r3, r3, #15
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d106      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005f8e:	4b24      	ldr	r3, [pc, #144]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	4b23      	ldr	r3, [pc, #140]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f94:	2180      	movs	r1, #128	@ 0x80
 8005f96:	0449      	lsls	r1, r1, #17
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	2380      	movs	r3, #128	@ 0x80
 8005fa2:	03db      	lsls	r3, r3, #15
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	d016      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fac:	4a27      	ldr	r2, [pc, #156]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005fae:	4013      	ands	r3, r2
 8005fb0:	0019      	movs	r1, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc0:	2380      	movs	r3, #128	@ 0x80
 8005fc2:	045b      	lsls	r3, r3, #17
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d106      	bne.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005fc8:	4b15      	ldr	r3, [pc, #84]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	4b14      	ldr	r3, [pc, #80]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fce:	2180      	movs	r1, #128	@ 0x80
 8005fd0:	0449      	lsls	r1, r1, #17
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	2380      	movs	r3, #128	@ 0x80
 8005fdc:	011b      	lsls	r3, r3, #4
 8005fde:	4013      	ands	r3, r2
 8005fe0:	d016      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005fe8:	4013      	ands	r3, r2
 8005fea:	0019      	movs	r1, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	695a      	ldr	r2, [r3, #20]
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695a      	ldr	r2, [r3, #20]
 8005ffa:	2380      	movs	r3, #128	@ 0x80
 8005ffc:	01db      	lsls	r3, r3, #7
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d106      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006002:	4b07      	ldr	r3, [pc, #28]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	4b06      	ldr	r3, [pc, #24]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006008:	2180      	movs	r1, #128	@ 0x80
 800600a:	0249      	lsls	r1, r1, #9
 800600c:	430a      	orrs	r2, r1
 800600e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006010:	2312      	movs	r3, #18
 8006012:	18fb      	adds	r3, r7, r3
 8006014:	781b      	ldrb	r3, [r3, #0]
}
 8006016:	0018      	movs	r0, r3
 8006018:	46bd      	mov	sp, r7
 800601a:	b006      	add	sp, #24
 800601c:	bd80      	pop	{r7, pc}
 800601e:	46c0      	nop			@ (mov r8, r8)
 8006020:	40021000 	.word	0x40021000
 8006024:	40007000 	.word	0x40007000
 8006028:	fffffcff 	.word	0xfffffcff
 800602c:	fffeffff 	.word	0xfffeffff
 8006030:	00001388 	.word	0x00001388
 8006034:	efffffff 	.word	0xefffffff
 8006038:	fffff3ff 	.word	0xfffff3ff
 800603c:	fff3ffff 	.word	0xfff3ffff
 8006040:	ffcfffff 	.word	0xffcfffff
 8006044:	ffffcfff 	.word	0xffffcfff
 8006048:	ffbfffff 	.word	0xffbfffff
 800604c:	feffffff 	.word	0xfeffffff
 8006050:	ffff3fff 	.word	0xffff3fff

08006054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e04a      	b.n	80060fc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	223d      	movs	r2, #61	@ 0x3d
 800606a:	5c9b      	ldrb	r3, [r3, r2]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d107      	bne.n	8006082 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	223c      	movs	r2, #60	@ 0x3c
 8006076:	2100      	movs	r1, #0
 8006078:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	0018      	movs	r0, r3
 800607e:	f7fb fd43 	bl	8001b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	223d      	movs	r2, #61	@ 0x3d
 8006086:	2102      	movs	r1, #2
 8006088:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3304      	adds	r3, #4
 8006092:	0019      	movs	r1, r3
 8006094:	0010      	movs	r0, r2
 8006096:	f000 fa8f 	bl	80065b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2248      	movs	r2, #72	@ 0x48
 800609e:	2101      	movs	r1, #1
 80060a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	223e      	movs	r2, #62	@ 0x3e
 80060a6:	2101      	movs	r1, #1
 80060a8:	5499      	strb	r1, [r3, r2]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	223f      	movs	r2, #63	@ 0x3f
 80060ae:	2101      	movs	r1, #1
 80060b0:	5499      	strb	r1, [r3, r2]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2240      	movs	r2, #64	@ 0x40
 80060b6:	2101      	movs	r1, #1
 80060b8:	5499      	strb	r1, [r3, r2]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2241      	movs	r2, #65	@ 0x41
 80060be:	2101      	movs	r1, #1
 80060c0:	5499      	strb	r1, [r3, r2]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2242      	movs	r2, #66	@ 0x42
 80060c6:	2101      	movs	r1, #1
 80060c8:	5499      	strb	r1, [r3, r2]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2243      	movs	r2, #67	@ 0x43
 80060ce:	2101      	movs	r1, #1
 80060d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2244      	movs	r2, #68	@ 0x44
 80060d6:	2101      	movs	r1, #1
 80060d8:	5499      	strb	r1, [r3, r2]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2245      	movs	r2, #69	@ 0x45
 80060de:	2101      	movs	r1, #1
 80060e0:	5499      	strb	r1, [r3, r2]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2246      	movs	r2, #70	@ 0x46
 80060e6:	2101      	movs	r1, #1
 80060e8:	5499      	strb	r1, [r3, r2]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2247      	movs	r2, #71	@ 0x47
 80060ee:	2101      	movs	r1, #1
 80060f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	223d      	movs	r2, #61	@ 0x3d
 80060f6:	2101      	movs	r1, #1
 80060f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	0018      	movs	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	b002      	add	sp, #8
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	223d      	movs	r2, #61	@ 0x3d
 8006110:	5c9b      	ldrb	r3, [r3, r2]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b01      	cmp	r3, #1
 8006116:	d001      	beq.n	800611c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e042      	b.n	80061a2 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	223d      	movs	r2, #61	@ 0x3d
 8006120:	2102      	movs	r1, #2
 8006122:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2101      	movs	r1, #1
 8006130:	430a      	orrs	r2, r1
 8006132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a1c      	ldr	r2, [pc, #112]	@ (80061ac <HAL_TIM_Base_Start_IT+0xa8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00f      	beq.n	800615e <HAL_TIM_Base_Start_IT+0x5a>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	2380      	movs	r3, #128	@ 0x80
 8006144:	05db      	lsls	r3, r3, #23
 8006146:	429a      	cmp	r2, r3
 8006148:	d009      	beq.n	800615e <HAL_TIM_Base_Start_IT+0x5a>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a18      	ldr	r2, [pc, #96]	@ (80061b0 <HAL_TIM_Base_Start_IT+0xac>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d004      	beq.n	800615e <HAL_TIM_Base_Start_IT+0x5a>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a16      	ldr	r2, [pc, #88]	@ (80061b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d116      	bne.n	800618c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	4a14      	ldr	r2, [pc, #80]	@ (80061b8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006166:	4013      	ands	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b06      	cmp	r3, #6
 800616e:	d016      	beq.n	800619e <HAL_TIM_Base_Start_IT+0x9a>
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	2380      	movs	r3, #128	@ 0x80
 8006174:	025b      	lsls	r3, r3, #9
 8006176:	429a      	cmp	r2, r3
 8006178:	d011      	beq.n	800619e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2101      	movs	r1, #1
 8006186:	430a      	orrs	r2, r1
 8006188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800618a:	e008      	b.n	800619e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2101      	movs	r1, #1
 8006198:	430a      	orrs	r2, r1
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	e000      	b.n	80061a0 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800619e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	0018      	movs	r0, r3
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b004      	add	sp, #16
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	46c0      	nop			@ (mov r8, r8)
 80061ac:	40012c00 	.word	0x40012c00
 80061b0:	40000400 	.word	0x40000400
 80061b4:	40014000 	.word	0x40014000
 80061b8:	00010007 	.word	0x00010007

080061bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2202      	movs	r2, #2
 80061d8:	4013      	ands	r3, r2
 80061da:	d021      	beq.n	8006220 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2202      	movs	r2, #2
 80061e0:	4013      	ands	r3, r2
 80061e2:	d01d      	beq.n	8006220 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2203      	movs	r2, #3
 80061ea:	4252      	negs	r2, r2
 80061ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	2203      	movs	r2, #3
 80061fc:	4013      	ands	r3, r2
 80061fe:	d004      	beq.n	800620a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	0018      	movs	r0, r3
 8006204:	f000 f9c0 	bl	8006588 <HAL_TIM_IC_CaptureCallback>
 8006208:	e007      	b.n	800621a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	0018      	movs	r0, r3
 800620e:	f000 f9b3 	bl	8006578 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	0018      	movs	r0, r3
 8006216:	f000 f9bf 	bl	8006598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2204      	movs	r2, #4
 8006224:	4013      	ands	r3, r2
 8006226:	d022      	beq.n	800626e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2204      	movs	r2, #4
 800622c:	4013      	ands	r3, r2
 800622e:	d01e      	beq.n	800626e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2205      	movs	r2, #5
 8006236:	4252      	negs	r2, r2
 8006238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2202      	movs	r2, #2
 800623e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699a      	ldr	r2, [r3, #24]
 8006246:	23c0      	movs	r3, #192	@ 0xc0
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4013      	ands	r3, r2
 800624c:	d004      	beq.n	8006258 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	0018      	movs	r0, r3
 8006252:	f000 f999 	bl	8006588 <HAL_TIM_IC_CaptureCallback>
 8006256:	e007      	b.n	8006268 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	0018      	movs	r0, r3
 800625c:	f000 f98c 	bl	8006578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	0018      	movs	r0, r3
 8006264:	f000 f998 	bl	8006598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2208      	movs	r2, #8
 8006272:	4013      	ands	r3, r2
 8006274:	d021      	beq.n	80062ba <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2208      	movs	r2, #8
 800627a:	4013      	ands	r3, r2
 800627c:	d01d      	beq.n	80062ba <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2209      	movs	r2, #9
 8006284:	4252      	negs	r2, r2
 8006286:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2204      	movs	r2, #4
 800628c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	2203      	movs	r2, #3
 8006296:	4013      	ands	r3, r2
 8006298:	d004      	beq.n	80062a4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	0018      	movs	r0, r3
 800629e:	f000 f973 	bl	8006588 <HAL_TIM_IC_CaptureCallback>
 80062a2:	e007      	b.n	80062b4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	0018      	movs	r0, r3
 80062a8:	f000 f966 	bl	8006578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	0018      	movs	r0, r3
 80062b0:	f000 f972 	bl	8006598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2210      	movs	r2, #16
 80062be:	4013      	ands	r3, r2
 80062c0:	d022      	beq.n	8006308 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2210      	movs	r2, #16
 80062c6:	4013      	ands	r3, r2
 80062c8:	d01e      	beq.n	8006308 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2211      	movs	r2, #17
 80062d0:	4252      	negs	r2, r2
 80062d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2208      	movs	r2, #8
 80062d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69da      	ldr	r2, [r3, #28]
 80062e0:	23c0      	movs	r3, #192	@ 0xc0
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4013      	ands	r3, r2
 80062e6:	d004      	beq.n	80062f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	0018      	movs	r0, r3
 80062ec:	f000 f94c 	bl	8006588 <HAL_TIM_IC_CaptureCallback>
 80062f0:	e007      	b.n	8006302 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	0018      	movs	r0, r3
 80062f6:	f000 f93f 	bl	8006578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	0018      	movs	r0, r3
 80062fe:	f000 f94b 	bl	8006598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2201      	movs	r2, #1
 800630c:	4013      	ands	r3, r2
 800630e:	d00c      	beq.n	800632a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	4013      	ands	r3, r2
 8006316:	d008      	beq.n	800632a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2202      	movs	r2, #2
 800631e:	4252      	negs	r2, r2
 8006320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	0018      	movs	r0, r3
 8006326:	f7fb fa55 	bl	80017d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2280      	movs	r2, #128	@ 0x80
 800632e:	4013      	ands	r3, r2
 8006330:	d104      	bne.n	800633c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	2380      	movs	r3, #128	@ 0x80
 8006336:	019b      	lsls	r3, r3, #6
 8006338:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800633a:	d00b      	beq.n	8006354 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2280      	movs	r2, #128	@ 0x80
 8006340:	4013      	ands	r3, r2
 8006342:	d007      	beq.n	8006354 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1e      	ldr	r2, [pc, #120]	@ (80063c4 <HAL_TIM_IRQHandler+0x208>)
 800634a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	0018      	movs	r0, r3
 8006350:	f000 fad2 	bl	80068f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	2380      	movs	r3, #128	@ 0x80
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	4013      	ands	r3, r2
 800635c:	d00b      	beq.n	8006376 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2280      	movs	r2, #128	@ 0x80
 8006362:	4013      	ands	r3, r2
 8006364:	d007      	beq.n	8006376 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a17      	ldr	r2, [pc, #92]	@ (80063c8 <HAL_TIM_IRQHandler+0x20c>)
 800636c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	0018      	movs	r0, r3
 8006372:	f000 fac9 	bl	8006908 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2240      	movs	r2, #64	@ 0x40
 800637a:	4013      	ands	r3, r2
 800637c:	d00c      	beq.n	8006398 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2240      	movs	r2, #64	@ 0x40
 8006382:	4013      	ands	r3, r2
 8006384:	d008      	beq.n	8006398 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2241      	movs	r2, #65	@ 0x41
 800638c:	4252      	negs	r2, r2
 800638e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	0018      	movs	r0, r3
 8006394:	f000 f908 	bl	80065a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2220      	movs	r2, #32
 800639c:	4013      	ands	r3, r2
 800639e:	d00c      	beq.n	80063ba <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2220      	movs	r2, #32
 80063a4:	4013      	ands	r3, r2
 80063a6:	d008      	beq.n	80063ba <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2221      	movs	r2, #33	@ 0x21
 80063ae:	4252      	negs	r2, r2
 80063b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	0018      	movs	r0, r3
 80063b6:	f000 fa97 	bl	80068e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063ba:	46c0      	nop			@ (mov r8, r8)
 80063bc:	46bd      	mov	sp, r7
 80063be:	b004      	add	sp, #16
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	46c0      	nop			@ (mov r8, r8)
 80063c4:	ffffdf7f 	.word	0xffffdf7f
 80063c8:	fffffeff 	.word	0xfffffeff

080063cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063d6:	230f      	movs	r3, #15
 80063d8:	18fb      	adds	r3, r7, r3
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	223c      	movs	r2, #60	@ 0x3c
 80063e2:	5c9b      	ldrb	r3, [r3, r2]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_TIM_ConfigClockSource+0x20>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e0bc      	b.n	8006566 <HAL_TIM_ConfigClockSource+0x19a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	223c      	movs	r2, #60	@ 0x3c
 80063f0:	2101      	movs	r1, #1
 80063f2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	223d      	movs	r2, #61	@ 0x3d
 80063f8:	2102      	movs	r1, #2
 80063fa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	4a5a      	ldr	r2, [pc, #360]	@ (8006570 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006408:	4013      	ands	r3, r2
 800640a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4a59      	ldr	r2, [pc, #356]	@ (8006574 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006410:	4013      	ands	r3, r2
 8006412:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2280      	movs	r2, #128	@ 0x80
 8006422:	0192      	lsls	r2, r2, #6
 8006424:	4293      	cmp	r3, r2
 8006426:	d040      	beq.n	80064aa <HAL_TIM_ConfigClockSource+0xde>
 8006428:	2280      	movs	r2, #128	@ 0x80
 800642a:	0192      	lsls	r2, r2, #6
 800642c:	4293      	cmp	r3, r2
 800642e:	d900      	bls.n	8006432 <HAL_TIM_ConfigClockSource+0x66>
 8006430:	e088      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>
 8006432:	2280      	movs	r2, #128	@ 0x80
 8006434:	0152      	lsls	r2, r2, #5
 8006436:	4293      	cmp	r3, r2
 8006438:	d100      	bne.n	800643c <HAL_TIM_ConfigClockSource+0x70>
 800643a:	e088      	b.n	800654e <HAL_TIM_ConfigClockSource+0x182>
 800643c:	2280      	movs	r2, #128	@ 0x80
 800643e:	0152      	lsls	r2, r2, #5
 8006440:	4293      	cmp	r3, r2
 8006442:	d900      	bls.n	8006446 <HAL_TIM_ConfigClockSource+0x7a>
 8006444:	e07e      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>
 8006446:	2b70      	cmp	r3, #112	@ 0x70
 8006448:	d018      	beq.n	800647c <HAL_TIM_ConfigClockSource+0xb0>
 800644a:	d900      	bls.n	800644e <HAL_TIM_ConfigClockSource+0x82>
 800644c:	e07a      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>
 800644e:	2b60      	cmp	r3, #96	@ 0x60
 8006450:	d04f      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x126>
 8006452:	d900      	bls.n	8006456 <HAL_TIM_ConfigClockSource+0x8a>
 8006454:	e076      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>
 8006456:	2b50      	cmp	r3, #80	@ 0x50
 8006458:	d03b      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0x106>
 800645a:	d900      	bls.n	800645e <HAL_TIM_ConfigClockSource+0x92>
 800645c:	e072      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>
 800645e:	2b40      	cmp	r3, #64	@ 0x40
 8006460:	d057      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0x146>
 8006462:	d900      	bls.n	8006466 <HAL_TIM_ConfigClockSource+0x9a>
 8006464:	e06e      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>
 8006466:	2b30      	cmp	r3, #48	@ 0x30
 8006468:	d063      	beq.n	8006532 <HAL_TIM_ConfigClockSource+0x166>
 800646a:	d86b      	bhi.n	8006544 <HAL_TIM_ConfigClockSource+0x178>
 800646c:	2b20      	cmp	r3, #32
 800646e:	d060      	beq.n	8006532 <HAL_TIM_ConfigClockSource+0x166>
 8006470:	d868      	bhi.n	8006544 <HAL_TIM_ConfigClockSource+0x178>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d05d      	beq.n	8006532 <HAL_TIM_ConfigClockSource+0x166>
 8006476:	2b10      	cmp	r3, #16
 8006478:	d05b      	beq.n	8006532 <HAL_TIM_ConfigClockSource+0x166>
 800647a:	e063      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800648c:	f000 f99e 	bl	80067cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2277      	movs	r2, #119	@ 0x77
 800649c:	4313      	orrs	r3, r2
 800649e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	609a      	str	r2, [r3, #8]
      break;
 80064a8:	e052      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064ba:	f000 f987 	bl	80067cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2180      	movs	r1, #128	@ 0x80
 80064ca:	01c9      	lsls	r1, r1, #7
 80064cc:	430a      	orrs	r2, r1
 80064ce:	609a      	str	r2, [r3, #8]
      break;
 80064d0:	e03e      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064de:	001a      	movs	r2, r3
 80064e0:	f000 f8f8 	bl	80066d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2150      	movs	r1, #80	@ 0x50
 80064ea:	0018      	movs	r0, r3
 80064ec:	f000 f952 	bl	8006794 <TIM_ITRx_SetConfig>
      break;
 80064f0:	e02e      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064fe:	001a      	movs	r2, r3
 8006500:	f000 f916 	bl	8006730 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2160      	movs	r1, #96	@ 0x60
 800650a:	0018      	movs	r0, r3
 800650c:	f000 f942 	bl	8006794 <TIM_ITRx_SetConfig>
      break;
 8006510:	e01e      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800651e:	001a      	movs	r2, r3
 8006520:	f000 f8d8 	bl	80066d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2140      	movs	r1, #64	@ 0x40
 800652a:	0018      	movs	r0, r3
 800652c:	f000 f932 	bl	8006794 <TIM_ITRx_SetConfig>
      break;
 8006530:	e00e      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	0019      	movs	r1, r3
 800653c:	0010      	movs	r0, r2
 800653e:	f000 f929 	bl	8006794 <TIM_ITRx_SetConfig>
      break;
 8006542:	e005      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006544:	230f      	movs	r3, #15
 8006546:	18fb      	adds	r3, r7, r3
 8006548:	2201      	movs	r2, #1
 800654a:	701a      	strb	r2, [r3, #0]
      break;
 800654c:	e000      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800654e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	223d      	movs	r2, #61	@ 0x3d
 8006554:	2101      	movs	r1, #1
 8006556:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	223c      	movs	r2, #60	@ 0x3c
 800655c:	2100      	movs	r1, #0
 800655e:	5499      	strb	r1, [r3, r2]

  return status;
 8006560:	230f      	movs	r3, #15
 8006562:	18fb      	adds	r3, r7, r3
 8006564:	781b      	ldrb	r3, [r3, #0]
}
 8006566:	0018      	movs	r0, r3
 8006568:	46bd      	mov	sp, r7
 800656a:	b004      	add	sp, #16
 800656c:	bd80      	pop	{r7, pc}
 800656e:	46c0      	nop			@ (mov r8, r8)
 8006570:	ffceff88 	.word	0xffceff88
 8006574:	ffff00ff 	.word	0xffff00ff

08006578 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006580:	46c0      	nop			@ (mov r8, r8)
 8006582:	46bd      	mov	sp, r7
 8006584:	b002      	add	sp, #8
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006590:	46c0      	nop			@ (mov r8, r8)
 8006592:	46bd      	mov	sp, r7
 8006594:	b002      	add	sp, #8
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065a0:	46c0      	nop			@ (mov r8, r8)
 80065a2:	46bd      	mov	sp, r7
 80065a4:	b002      	add	sp, #8
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065b0:	46c0      	nop			@ (mov r8, r8)
 80065b2:	46bd      	mov	sp, r7
 80065b4:	b002      	add	sp, #8
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a3b      	ldr	r2, [pc, #236]	@ (80066b8 <TIM_Base_SetConfig+0x100>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d008      	beq.n	80065e2 <TIM_Base_SetConfig+0x2a>
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	2380      	movs	r3, #128	@ 0x80
 80065d4:	05db      	lsls	r3, r3, #23
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d003      	beq.n	80065e2 <TIM_Base_SetConfig+0x2a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a37      	ldr	r2, [pc, #220]	@ (80066bc <TIM_Base_SetConfig+0x104>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d108      	bne.n	80065f4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2270      	movs	r2, #112	@ 0x70
 80065e6:	4393      	bics	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a30      	ldr	r2, [pc, #192]	@ (80066b8 <TIM_Base_SetConfig+0x100>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d018      	beq.n	800662e <TIM_Base_SetConfig+0x76>
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	2380      	movs	r3, #128	@ 0x80
 8006600:	05db      	lsls	r3, r3, #23
 8006602:	429a      	cmp	r2, r3
 8006604:	d013      	beq.n	800662e <TIM_Base_SetConfig+0x76>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a2c      	ldr	r2, [pc, #176]	@ (80066bc <TIM_Base_SetConfig+0x104>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00f      	beq.n	800662e <TIM_Base_SetConfig+0x76>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a2b      	ldr	r2, [pc, #172]	@ (80066c0 <TIM_Base_SetConfig+0x108>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00b      	beq.n	800662e <TIM_Base_SetConfig+0x76>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a2a      	ldr	r2, [pc, #168]	@ (80066c4 <TIM_Base_SetConfig+0x10c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d007      	beq.n	800662e <TIM_Base_SetConfig+0x76>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a29      	ldr	r2, [pc, #164]	@ (80066c8 <TIM_Base_SetConfig+0x110>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d003      	beq.n	800662e <TIM_Base_SetConfig+0x76>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a28      	ldr	r2, [pc, #160]	@ (80066cc <TIM_Base_SetConfig+0x114>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d108      	bne.n	8006640 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4a27      	ldr	r2, [pc, #156]	@ (80066d0 <TIM_Base_SetConfig+0x118>)
 8006632:	4013      	ands	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	4313      	orrs	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2280      	movs	r2, #128	@ 0x80
 8006644:	4393      	bics	r3, r2
 8006646:	001a      	movs	r2, r3
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	689a      	ldr	r2, [r3, #8]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a13      	ldr	r2, [pc, #76]	@ (80066b8 <TIM_Base_SetConfig+0x100>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00b      	beq.n	8006686 <TIM_Base_SetConfig+0xce>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a14      	ldr	r2, [pc, #80]	@ (80066c4 <TIM_Base_SetConfig+0x10c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d007      	beq.n	8006686 <TIM_Base_SetConfig+0xce>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a13      	ldr	r2, [pc, #76]	@ (80066c8 <TIM_Base_SetConfig+0x110>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d003      	beq.n	8006686 <TIM_Base_SetConfig+0xce>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a12      	ldr	r2, [pc, #72]	@ (80066cc <TIM_Base_SetConfig+0x114>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d103      	bne.n	800668e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	691a      	ldr	r2, [r3, #16]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	2201      	movs	r2, #1
 800669a:	4013      	ands	r3, r2
 800669c:	2b01      	cmp	r3, #1
 800669e:	d106      	bne.n	80066ae <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	2201      	movs	r2, #1
 80066a6:	4393      	bics	r3, r2
 80066a8:	001a      	movs	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	611a      	str	r2, [r3, #16]
  }
}
 80066ae:	46c0      	nop			@ (mov r8, r8)
 80066b0:	46bd      	mov	sp, r7
 80066b2:	b004      	add	sp, #16
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	46c0      	nop			@ (mov r8, r8)
 80066b8:	40012c00 	.word	0x40012c00
 80066bc:	40000400 	.word	0x40000400
 80066c0:	40002000 	.word	0x40002000
 80066c4:	40014000 	.word	0x40014000
 80066c8:	40014400 	.word	0x40014400
 80066cc:	40014800 	.word	0x40014800
 80066d0:	fffffcff 	.word	0xfffffcff

080066d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	2201      	movs	r2, #1
 80066ec:	4393      	bics	r3, r2
 80066ee:	001a      	movs	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	22f0      	movs	r2, #240	@ 0xf0
 80066fe:	4393      	bics	r3, r2
 8006700:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	4313      	orrs	r3, r2
 800670a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	220a      	movs	r2, #10
 8006710:	4393      	bics	r3, r2
 8006712:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	4313      	orrs	r3, r2
 800671a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	621a      	str	r2, [r3, #32]
}
 8006728:	46c0      	nop			@ (mov r8, r8)
 800672a:	46bd      	mov	sp, r7
 800672c:	b006      	add	sp, #24
 800672e:	bd80      	pop	{r7, pc}

08006730 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	2210      	movs	r2, #16
 8006748:	4393      	bics	r3, r2
 800674a:	001a      	movs	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4a0d      	ldr	r2, [pc, #52]	@ (8006790 <TIM_TI2_ConfigInputStage+0x60>)
 800675a:	4013      	ands	r3, r2
 800675c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	031b      	lsls	r3, r3, #12
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	22a0      	movs	r2, #160	@ 0xa0
 800676c:	4393      	bics	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	4313      	orrs	r3, r2
 8006778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	621a      	str	r2, [r3, #32]
}
 8006786:	46c0      	nop			@ (mov r8, r8)
 8006788:	46bd      	mov	sp, r7
 800678a:	b006      	add	sp, #24
 800678c:	bd80      	pop	{r7, pc}
 800678e:	46c0      	nop			@ (mov r8, r8)
 8006790:	ffff0fff 	.word	0xffff0fff

08006794 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4a08      	ldr	r2, [pc, #32]	@ (80067c8 <TIM_ITRx_SetConfig+0x34>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	2207      	movs	r2, #7
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	609a      	str	r2, [r3, #8]
}
 80067be:	46c0      	nop			@ (mov r8, r8)
 80067c0:	46bd      	mov	sp, r7
 80067c2:	b004      	add	sp, #16
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	46c0      	nop			@ (mov r8, r8)
 80067c8:	ffcfff8f 	.word	0xffcfff8f

080067cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
 80067d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	4a09      	ldr	r2, [pc, #36]	@ (8006808 <TIM_ETR_SetConfig+0x3c>)
 80067e4:	4013      	ands	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	021a      	lsls	r2, r3, #8
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	431a      	orrs	r2, r3
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	609a      	str	r2, [r3, #8]
}
 8006800:	46c0      	nop			@ (mov r8, r8)
 8006802:	46bd      	mov	sp, r7
 8006804:	b006      	add	sp, #24
 8006806:	bd80      	pop	{r7, pc}
 8006808:	ffff00ff 	.word	0xffff00ff

0800680c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	223c      	movs	r2, #60	@ 0x3c
 800681a:	5c9b      	ldrb	r3, [r3, r2]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006820:	2302      	movs	r3, #2
 8006822:	e055      	b.n	80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	223c      	movs	r2, #60	@ 0x3c
 8006828:	2101      	movs	r1, #1
 800682a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	223d      	movs	r2, #61	@ 0x3d
 8006830:	2102      	movs	r1, #2
 8006832:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a23      	ldr	r2, [pc, #140]	@ (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d108      	bne.n	8006860 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4a22      	ldr	r2, [pc, #136]	@ (80068dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006852:	4013      	ands	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2270      	movs	r2, #112	@ 0x70
 8006864:	4393      	bics	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a16      	ldr	r2, [pc, #88]	@ (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00f      	beq.n	80068a4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	2380      	movs	r3, #128	@ 0x80
 800688a:	05db      	lsls	r3, r3, #23
 800688c:	429a      	cmp	r2, r3
 800688e:	d009      	beq.n	80068a4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a12      	ldr	r2, [pc, #72]	@ (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d004      	beq.n	80068a4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a11      	ldr	r2, [pc, #68]	@ (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d10c      	bne.n	80068be <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2280      	movs	r2, #128	@ 0x80
 80068a8:	4393      	bics	r3, r2
 80068aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	223d      	movs	r2, #61	@ 0x3d
 80068c2:	2101      	movs	r1, #1
 80068c4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	223c      	movs	r2, #60	@ 0x3c
 80068ca:	2100      	movs	r1, #0
 80068cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	0018      	movs	r0, r3
 80068d2:	46bd      	mov	sp, r7
 80068d4:	b004      	add	sp, #16
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	40012c00 	.word	0x40012c00
 80068dc:	ff0fffff 	.word	0xff0fffff
 80068e0:	40000400 	.word	0x40000400
 80068e4:	40014000 	.word	0x40014000

080068e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068f0:	46c0      	nop			@ (mov r8, r8)
 80068f2:	46bd      	mov	sp, r7
 80068f4:	b002      	add	sp, #8
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006900:	46c0      	nop			@ (mov r8, r8)
 8006902:	46bd      	mov	sp, r7
 8006904:	b002      	add	sp, #8
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006910:	46c0      	nop			@ (mov r8, r8)
 8006912:	46bd      	mov	sp, r7
 8006914:	b002      	add	sp, #8
 8006916:	bd80      	pop	{r7, pc}

08006918 <memset>:
 8006918:	0003      	movs	r3, r0
 800691a:	1882      	adds	r2, r0, r2
 800691c:	4293      	cmp	r3, r2
 800691e:	d100      	bne.n	8006922 <memset+0xa>
 8006920:	4770      	bx	lr
 8006922:	7019      	strb	r1, [r3, #0]
 8006924:	3301      	adds	r3, #1
 8006926:	e7f9      	b.n	800691c <memset+0x4>

08006928 <__libc_init_array>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	2600      	movs	r6, #0
 800692c:	4c0c      	ldr	r4, [pc, #48]	@ (8006960 <__libc_init_array+0x38>)
 800692e:	4d0d      	ldr	r5, [pc, #52]	@ (8006964 <__libc_init_array+0x3c>)
 8006930:	1b64      	subs	r4, r4, r5
 8006932:	10a4      	asrs	r4, r4, #2
 8006934:	42a6      	cmp	r6, r4
 8006936:	d109      	bne.n	800694c <__libc_init_array+0x24>
 8006938:	2600      	movs	r6, #0
 800693a:	f000 f819 	bl	8006970 <_init>
 800693e:	4c0a      	ldr	r4, [pc, #40]	@ (8006968 <__libc_init_array+0x40>)
 8006940:	4d0a      	ldr	r5, [pc, #40]	@ (800696c <__libc_init_array+0x44>)
 8006942:	1b64      	subs	r4, r4, r5
 8006944:	10a4      	asrs	r4, r4, #2
 8006946:	42a6      	cmp	r6, r4
 8006948:	d105      	bne.n	8006956 <__libc_init_array+0x2e>
 800694a:	bd70      	pop	{r4, r5, r6, pc}
 800694c:	00b3      	lsls	r3, r6, #2
 800694e:	58eb      	ldr	r3, [r5, r3]
 8006950:	4798      	blx	r3
 8006952:	3601      	adds	r6, #1
 8006954:	e7ee      	b.n	8006934 <__libc_init_array+0xc>
 8006956:	00b3      	lsls	r3, r6, #2
 8006958:	58eb      	ldr	r3, [r5, r3]
 800695a:	4798      	blx	r3
 800695c:	3601      	adds	r6, #1
 800695e:	e7f2      	b.n	8006946 <__libc_init_array+0x1e>
 8006960:	080069c8 	.word	0x080069c8
 8006964:	080069c8 	.word	0x080069c8
 8006968:	080069cc 	.word	0x080069cc
 800696c:	080069c8 	.word	0x080069c8

08006970 <_init>:
 8006970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006972:	46c0      	nop			@ (mov r8, r8)
 8006974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006976:	bc08      	pop	{r3}
 8006978:	469e      	mov	lr, r3
 800697a:	4770      	bx	lr

0800697c <_fini>:
 800697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697e:	46c0      	nop			@ (mov r8, r8)
 8006980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006982:	bc08      	pop	{r3}
 8006984:	469e      	mov	lr, r3
 8006986:	4770      	bx	lr
