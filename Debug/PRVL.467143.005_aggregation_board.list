
PRVL.467143.005_aggregation_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062c4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006380  08006380  00007380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063c0  080063c0  00008074  2**0
                  CONTENTS
  4 .ARM          00000000  080063c0  080063c0  00008074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063c0  080063c0  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063c0  080063c0  000073c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063c4  080063c4  000073c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080063c8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000074  0800643c  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  0800643c  000083d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eeb7  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002383  00000000  00000000  00016f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  000192d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c40  00000000  00000000  0001a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fde  00000000  00000000  0001aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012948  00000000  00000000  00032e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bcd7  00000000  00000000  000457d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e14ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c8  00000000  00000000  000e14f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e4db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006368 	.word	0x08006368

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08006368 	.word	0x08006368

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <UpdateLED>:
	// Чтение данных из регистра reg_addr устройства с адресом dev_addr
	return HAL_I2C_Mem_Read(&hi2c2, dev_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
}

void UpdateLED(LEDState *led)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	if (led->is_blinking) {
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	7d1b      	ldrb	r3, [r3, #20]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d039      	beq.n	80002a0 <UpdateLED+0x84>
		uint32_t current_time = HAL_GetTick();
 800022c:	f002 fae2 	bl	80027f4 <HAL_GetTick>
 8000230:	0003      	movs	r3, r0
 8000232:	60fb      	str	r3, [r7, #12]
		uint32_t elapsed_time = current_time - led->blink_start_time;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	68fa      	ldr	r2, [r7, #12]
 800023a:	1ad3      	subs	r3, r2, r3
 800023c:	60bb      	str	r3, [r7, #8]

		if (elapsed_time < led->blink_duration) {
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	68db      	ldr	r3, [r3, #12]
 8000242:	68ba      	ldr	r2, [r7, #8]
 8000244:	429a      	cmp	r2, r3
 8000246:	d21f      	bcs.n	8000288 <UpdateLED+0x6c>
			// Мигание
			if (elapsed_time % led->blink_period < led->blink_period / 2) {
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	691a      	ldr	r2, [r3, #16]
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	0011      	movs	r1, r2
 8000250:	0018      	movs	r0, r3
 8000252:	f7ff ffdd 	bl	8000210 <__aeabi_uidivmod>
 8000256:	000b      	movs	r3, r1
 8000258:	001a      	movs	r2, r3
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	691b      	ldr	r3, [r3, #16]
 800025e:	085b      	lsrs	r3, r3, #1
 8000260:	429a      	cmp	r2, r3
 8000262:	d208      	bcs.n	8000276 <UpdateLED+0x5a>
				HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, SET);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	6818      	ldr	r0, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	889b      	ldrh	r3, [r3, #4]
 800026c:	2201      	movs	r2, #1
 800026e:	0019      	movs	r1, r3
 8000270:	f002 ff4f 	bl	8003112 <HAL_GPIO_WritePin>
 8000274:	e04e      	b.n	8000314 <UpdateLED+0xf8>
			} else {
				HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	6818      	ldr	r0, [r3, #0]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	889b      	ldrh	r3, [r3, #4]
 800027e:	2200      	movs	r2, #0
 8000280:	0019      	movs	r1, r3
 8000282:	f002 ff46 	bl	8003112 <HAL_GPIO_WritePin>
 8000286:	e045      	b.n	8000314 <UpdateLED+0xf8>
			}
		} else {
			// Завершение мигания
			HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	6818      	ldr	r0, [r3, #0]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	889b      	ldrh	r3, [r3, #4]
 8000290:	2200      	movs	r2, #0
 8000292:	0019      	movs	r1, r3
 8000294:	f002 ff3d 	bl	8003112 <HAL_GPIO_WritePin>
			led->is_blinking = 0;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2200      	movs	r2, #0
 800029c:	751a      	strb	r2, [r3, #20]
 800029e:	e039      	b.n	8000314 <UpdateLED+0xf8>
		}
	} else if ((adapter1_state == 1 && MB1_attach == 0) || (adapter2_state == 1 && MB2_attach == 0))
 80002a0:	4b41      	ldr	r3, [pc, #260]	@ (80003a8 <UpdateLED+0x18c>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d103      	bne.n	80002b0 <UpdateLED+0x94>
 80002a8:	4b40      	ldr	r3, [pc, #256]	@ (80003ac <UpdateLED+0x190>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d007      	beq.n	80002c0 <UpdateLED+0xa4>
 80002b0:	4b3f      	ldr	r3, [pc, #252]	@ (80003b0 <UpdateLED+0x194>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d12d      	bne.n	8000314 <UpdateLED+0xf8>
 80002b8:	4b3e      	ldr	r3, [pc, #248]	@ (80003b4 <UpdateLED+0x198>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d129      	bne.n	8000314 <UpdateLED+0xf8>
	{
		if(adapter1_state == 1 && led->GPIO_Pin == FP_MB1_PWRLED_Pin && MB1_attach == 0) HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, SET);
 80002c0:	4b39      	ldr	r3, [pc, #228]	@ (80003a8 <UpdateLED+0x18c>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d111      	bne.n	80002ec <UpdateLED+0xd0>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	889a      	ldrh	r2, [r3, #4]
 80002cc:	2380      	movs	r3, #128	@ 0x80
 80002ce:	011b      	lsls	r3, r3, #4
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d10b      	bne.n	80002ec <UpdateLED+0xd0>
 80002d4:	4b35      	ldr	r3, [pc, #212]	@ (80003ac <UpdateLED+0x190>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d107      	bne.n	80002ec <UpdateLED+0xd0>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	6818      	ldr	r0, [r3, #0]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	889b      	ldrh	r3, [r3, #4]
 80002e4:	2201      	movs	r2, #1
 80002e6:	0019      	movs	r1, r3
 80002e8:	f002 ff13 	bl	8003112 <HAL_GPIO_WritePin>
		if(adapter2_state == 1 && led->GPIO_Pin == FP_MB2_PWRLED_Pin && MB2_attach == 0) HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, SET);
 80002ec:	4b30      	ldr	r3, [pc, #192]	@ (80003b0 <UpdateLED+0x194>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d10f      	bne.n	8000314 <UpdateLED+0xf8>
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	889b      	ldrh	r3, [r3, #4]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d10b      	bne.n	8000314 <UpdateLED+0xf8>
 80002fc:	4b2d      	ldr	r3, [pc, #180]	@ (80003b4 <UpdateLED+0x198>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d107      	bne.n	8000314 <UpdateLED+0xf8>
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	6818      	ldr	r0, [r3, #0]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	889b      	ldrh	r3, [r3, #4]
 800030c:	2201      	movs	r2, #1
 800030e:	0019      	movs	r1, r3
 8000310:	f002 feff 	bl	8003112 <HAL_GPIO_WritePin>
	}
	if (MB1_attach == 1 && led->GPIO_Pin == FP_MB1_PWRLED_Pin){
 8000314:	4b25      	ldr	r3, [pc, #148]	@ (80003ac <UpdateLED+0x190>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d10e      	bne.n	800033a <UpdateLED+0x11e>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	889a      	ldrh	r2, [r3, #4]
 8000320:	2380      	movs	r3, #128	@ 0x80
 8000322:	011b      	lsls	r3, r3, #4
 8000324:	429a      	cmp	r2, r3
 8000326:	d108      	bne.n	800033a <UpdateLED+0x11e>
		HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6818      	ldr	r0, [r3, #0]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	889b      	ldrh	r3, [r3, #4]
 8000330:	2200      	movs	r2, #0
 8000332:	0019      	movs	r1, r3
 8000334:	f002 feed 	bl	8003112 <HAL_GPIO_WritePin>
 8000338:	e011      	b.n	800035e <UpdateLED+0x142>
	}else if (adapter1_state == 0 && led->GPIO_Pin == FP_MB1_PWRLED_Pin)
 800033a:	4b1b      	ldr	r3, [pc, #108]	@ (80003a8 <UpdateLED+0x18c>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d10d      	bne.n	800035e <UpdateLED+0x142>
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	889a      	ldrh	r2, [r3, #4]
 8000346:	2380      	movs	r3, #128	@ 0x80
 8000348:	011b      	lsls	r3, r3, #4
 800034a:	429a      	cmp	r2, r3
 800034c:	d107      	bne.n	800035e <UpdateLED+0x142>
	{
		HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	6818      	ldr	r0, [r3, #0]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	889b      	ldrh	r3, [r3, #4]
 8000356:	2200      	movs	r2, #0
 8000358:	0019      	movs	r1, r3
 800035a:	f002 feda 	bl	8003112 <HAL_GPIO_WritePin>
	}
	if (MB2_attach == 1 && led->GPIO_Pin == FP_MB2_PWRLED_Pin){
 800035e:	4b15      	ldr	r3, [pc, #84]	@ (80003b4 <UpdateLED+0x198>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d10c      	bne.n	8000380 <UpdateLED+0x164>
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	889b      	ldrh	r3, [r3, #4]
 800036a:	2b01      	cmp	r3, #1
 800036c:	d108      	bne.n	8000380 <UpdateLED+0x164>
		HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	6818      	ldr	r0, [r3, #0]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	889b      	ldrh	r3, [r3, #4]
 8000376:	2200      	movs	r2, #0
 8000378:	0019      	movs	r1, r3
 800037a:	f002 feca 	bl	8003112 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
	}


}
 800037e:	e00f      	b.n	80003a0 <UpdateLED+0x184>
	}else if (adapter2_state == 0 && led->GPIO_Pin == FP_MB2_PWRLED_Pin)
 8000380:	4b0b      	ldr	r3, [pc, #44]	@ (80003b0 <UpdateLED+0x194>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d10b      	bne.n	80003a0 <UpdateLED+0x184>
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	889b      	ldrh	r3, [r3, #4]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d107      	bne.n	80003a0 <UpdateLED+0x184>
		HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	6818      	ldr	r0, [r3, #0]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	889b      	ldrh	r3, [r3, #4]
 8000398:	2200      	movs	r2, #0
 800039a:	0019      	movs	r1, r3
 800039c:	f002 feb9 	bl	8003112 <HAL_GPIO_WritePin>
}
 80003a0:	46c0      	nop			@ (mov r8, r8)
 80003a2:	46bd      	mov	sp, r7
 80003a4:	b004      	add	sp, #16
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	200003b4 	.word	0x200003b4
 80003ac:	20000063 	.word	0x20000063
 80003b0:	200003b5 	.word	0x200003b5
 80003b4:	20000064 	.word	0x20000064

080003b8 <StartBlinking>:

void StartBlinking(LEDState *led, uint32_t frequency, uint32_t duration)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
	led->blink_period = 1000 / frequency; // Период мигания в мс
 80003c4:	68b9      	ldr	r1, [r7, #8]
 80003c6:	23fa      	movs	r3, #250	@ 0xfa
 80003c8:	0098      	lsls	r0, r3, #2
 80003ca:	f7ff fe9b 	bl	8000104 <__udivsi3>
 80003ce:	0003      	movs	r3, r0
 80003d0:	001a      	movs	r2, r3
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	611a      	str	r2, [r3, #16]
	led->blink_duration = duration;       // Длительность мигания
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	60da      	str	r2, [r3, #12]
	led->blink_start_time = HAL_GetTick(); // Время начала мигания
 80003dc:	f002 fa0a 	bl	80027f4 <HAL_GetTick>
 80003e0:	0002      	movs	r2, r0
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	609a      	str	r2, [r3, #8]
	led->is_blinking = 1;                 // Включить мигание
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	2201      	movs	r2, #1
 80003ea:	751a      	strb	r2, [r3, #20]
}
 80003ec:	46c0      	nop			@ (mov r8, r8)
 80003ee:	46bd      	mov	sp, r7
 80003f0:	b004      	add	sp, #16
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <HandleButtonAction>:

void HandleButtonAction(uint8_t button_number, uint32_t press_duration)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	0002      	movs	r2, r0
 80003fc:	6039      	str	r1, [r7, #0]
 80003fe:	1dfb      	adds	r3, r7, #7
 8000400:	701a      	strb	r2, [r3, #0]
	if (button_number == 1) {
 8000402:	1dfb      	adds	r3, r7, #7
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d12e      	bne.n	8000468 <HandleButtonAction+0x74>
		if (press_duration <= 1000) {
 800040a:	683a      	ldr	r2, [r7, #0]
 800040c:	23fa      	movs	r3, #250	@ 0xfa
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	429a      	cmp	r2, r3
 8000412:	d803      	bhi.n	800041c <HandleButtonAction+0x28>
			// Короткое нажатие (0-1 сек) - включение адаптера 1
			PowerOnAdapter(1);
 8000414:	2001      	movs	r0, #1
 8000416:	f001 fc7f 	bl	8001d18 <PowerOnAdapter>
		} else if (press_duration > 6000) {
			// Очень долгое нажатие (6-10 сек) - выключение адаптера 2
			PowerOffAdapter(2);
		}
	}
}
 800041a:	e057      	b.n	80004cc <HandleButtonAction+0xd8>
		} else if (press_duration <= 3000) {
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	4a2d      	ldr	r2, [pc, #180]	@ (80004d4 <HandleButtonAction+0xe0>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d80a      	bhi.n	800043a <HandleButtonAction+0x46>
			RebootAdapter(1, 0);
 8000424:	2100      	movs	r1, #0
 8000426:	2001      	movs	r0, #1
 8000428:	f001 fe2a 	bl	8002080 <RebootAdapter>
			StartBlinking(&led1, 4, 5000); // Мигание 4 Гц, 5 сек
 800042c:	4a2a      	ldr	r2, [pc, #168]	@ (80004d8 <HandleButtonAction+0xe4>)
 800042e:	4b2b      	ldr	r3, [pc, #172]	@ (80004dc <HandleButtonAction+0xe8>)
 8000430:	2104      	movs	r1, #4
 8000432:	0018      	movs	r0, r3
 8000434:	f7ff ffc0 	bl	80003b8 <StartBlinking>
}
 8000438:	e048      	b.n	80004cc <HandleButtonAction+0xd8>
		} else if (press_duration <= 6000) {
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	4a28      	ldr	r2, [pc, #160]	@ (80004e0 <HandleButtonAction+0xec>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d80a      	bhi.n	8000458 <HandleButtonAction+0x64>
			RebootAdapter(1, 1);
 8000442:	2101      	movs	r1, #1
 8000444:	2001      	movs	r0, #1
 8000446:	f001 fe1b 	bl	8002080 <RebootAdapter>
			StartBlinking(&led1, 4, 5000); // Мигание 4 Гц, 5 сек
 800044a:	4a23      	ldr	r2, [pc, #140]	@ (80004d8 <HandleButtonAction+0xe4>)
 800044c:	4b23      	ldr	r3, [pc, #140]	@ (80004dc <HandleButtonAction+0xe8>)
 800044e:	2104      	movs	r1, #4
 8000450:	0018      	movs	r0, r3
 8000452:	f7ff ffb1 	bl	80003b8 <StartBlinking>
}
 8000456:	e039      	b.n	80004cc <HandleButtonAction+0xd8>
		} else if (press_duration > 6000) {
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	4a21      	ldr	r2, [pc, #132]	@ (80004e0 <HandleButtonAction+0xec>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d935      	bls.n	80004cc <HandleButtonAction+0xd8>
			PowerOffAdapter(1);
 8000460:	2001      	movs	r0, #1
 8000462:	f001 fd5d 	bl	8001f20 <PowerOffAdapter>
}
 8000466:	e031      	b.n	80004cc <HandleButtonAction+0xd8>
	} else if (button_number == 2) {
 8000468:	1dfb      	adds	r3, r7, #7
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b02      	cmp	r3, #2
 800046e:	d12d      	bne.n	80004cc <HandleButtonAction+0xd8>
		if (press_duration <= 1000) {
 8000470:	683a      	ldr	r2, [r7, #0]
 8000472:	23fa      	movs	r3, #250	@ 0xfa
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	429a      	cmp	r2, r3
 8000478:	d803      	bhi.n	8000482 <HandleButtonAction+0x8e>
			PowerOnAdapter(2);
 800047a:	2002      	movs	r0, #2
 800047c:	f001 fc4c 	bl	8001d18 <PowerOnAdapter>
}
 8000480:	e024      	b.n	80004cc <HandleButtonAction+0xd8>
		} else if (press_duration <= 3000) {
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	4a13      	ldr	r2, [pc, #76]	@ (80004d4 <HandleButtonAction+0xe0>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d80a      	bhi.n	80004a0 <HandleButtonAction+0xac>
			RebootAdapter(2, 0);
 800048a:	2100      	movs	r1, #0
 800048c:	2002      	movs	r0, #2
 800048e:	f001 fdf7 	bl	8002080 <RebootAdapter>
			StartBlinking(&led2, 4, 5000); // Мигание 4 Гц, 5 сек
 8000492:	4a11      	ldr	r2, [pc, #68]	@ (80004d8 <HandleButtonAction+0xe4>)
 8000494:	4b13      	ldr	r3, [pc, #76]	@ (80004e4 <HandleButtonAction+0xf0>)
 8000496:	2104      	movs	r1, #4
 8000498:	0018      	movs	r0, r3
 800049a:	f7ff ff8d 	bl	80003b8 <StartBlinking>
}
 800049e:	e015      	b.n	80004cc <HandleButtonAction+0xd8>
		} else if (press_duration <= 6000) {
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	4a0f      	ldr	r2, [pc, #60]	@ (80004e0 <HandleButtonAction+0xec>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d80a      	bhi.n	80004be <HandleButtonAction+0xca>
			RebootAdapter(2, 1);
 80004a8:	2101      	movs	r1, #1
 80004aa:	2002      	movs	r0, #2
 80004ac:	f001 fde8 	bl	8002080 <RebootAdapter>
			StartBlinking(&led2, 4, 5000); // Мигание 4 Гц, 5 сек
 80004b0:	4a09      	ldr	r2, [pc, #36]	@ (80004d8 <HandleButtonAction+0xe4>)
 80004b2:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <HandleButtonAction+0xf0>)
 80004b4:	2104      	movs	r1, #4
 80004b6:	0018      	movs	r0, r3
 80004b8:	f7ff ff7e 	bl	80003b8 <StartBlinking>
}
 80004bc:	e006      	b.n	80004cc <HandleButtonAction+0xd8>
		} else if (press_duration > 6000) {
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	4a07      	ldr	r2, [pc, #28]	@ (80004e0 <HandleButtonAction+0xec>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d902      	bls.n	80004cc <HandleButtonAction+0xd8>
			PowerOffAdapter(2);
 80004c6:	2002      	movs	r0, #2
 80004c8:	f001 fd2a 	bl	8001f20 <PowerOffAdapter>
}
 80004cc:	46c0      	nop			@ (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b002      	add	sp, #8
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	00000bb8 	.word	0x00000bb8
 80004d8:	00001388 	.word	0x00001388
 80004dc:	20000000 	.word	0x20000000
 80004e0:	00001770 	.word	0x00001770
 80004e4:	20000018 	.word	0x20000018

080004e8 <UpdateDiskStatus>:

void UpdateDiskStatus(uint8_t diskIndex, uint8_t activity, uint8_t error, uint8_t locate) //функция для обновления данных о дисках
{
 80004e8:	b5b0      	push	{r4, r5, r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	0005      	movs	r5, r0
 80004f0:	000c      	movs	r4, r1
 80004f2:	0010      	movs	r0, r2
 80004f4:	0019      	movs	r1, r3
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	1c2a      	adds	r2, r5, #0
 80004fa:	701a      	strb	r2, [r3, #0]
 80004fc:	1dbb      	adds	r3, r7, #6
 80004fe:	1c22      	adds	r2, r4, #0
 8000500:	701a      	strb	r2, [r3, #0]
 8000502:	1d7b      	adds	r3, r7, #5
 8000504:	1c02      	adds	r2, r0, #0
 8000506:	701a      	strb	r2, [r3, #0]
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	1c0a      	adds	r2, r1, #0
 800050c:	701a      	strb	r2, [r3, #0]
	disks[diskIndex].activity = activity;
 800050e:	1dfb      	adds	r3, r7, #7
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	4a0e      	ldr	r2, [pc, #56]	@ (800054c <UpdateDiskStatus+0x64>)
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	18d3      	adds	r3, r2, r3
 8000518:	3301      	adds	r3, #1
 800051a:	1dba      	adds	r2, r7, #6
 800051c:	7812      	ldrb	r2, [r2, #0]
 800051e:	701a      	strb	r2, [r3, #0]
	disks[diskIndex].error = error;
 8000520:	1dfb      	adds	r3, r7, #7
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4a09      	ldr	r2, [pc, #36]	@ (800054c <UpdateDiskStatus+0x64>)
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	18d3      	adds	r3, r2, r3
 800052a:	3302      	adds	r3, #2
 800052c:	1d7a      	adds	r2, r7, #5
 800052e:	7812      	ldrb	r2, [r2, #0]
 8000530:	701a      	strb	r2, [r3, #0]
	disks[diskIndex].locate = locate;
 8000532:	1dfb      	adds	r3, r7, #7
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	4a05      	ldr	r2, [pc, #20]	@ (800054c <UpdateDiskStatus+0x64>)
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	18d3      	adds	r3, r2, r3
 800053c:	3303      	adds	r3, #3
 800053e:	1d3a      	adds	r2, r7, #4
 8000540:	7812      	ldrb	r2, [r2, #0]
 8000542:	701a      	strb	r2, [r3, #0]
}
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bdb0      	pop	{r4, r5, r7, pc}
 800054c:	20000294 	.word	0x20000294

08000550 <Read_Disk_Status>:

void Read_Disk_Status(uint16_t slave_address, uint8_t *data, uint16_t size) {
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b085      	sub	sp, #20
 8000554:	af02      	add	r7, sp, #8
 8000556:	6039      	str	r1, [r7, #0]
 8000558:	0011      	movs	r1, r2
 800055a:	1dbb      	adds	r3, r7, #6
 800055c:	1c02      	adds	r2, r0, #0
 800055e:	801a      	strh	r2, [r3, #0]
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	1c0a      	adds	r2, r1, #0
 8000564:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_0, 1, HAL_MAX_DELAY);
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <Read_Disk_Status+0x58>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	18db      	adds	r3, r3, r3
 800056c:	b299      	uxth	r1, r3
 800056e:	4a0f      	ldr	r2, [pc, #60]	@ (80005ac <Read_Disk_Status+0x5c>)
 8000570:	480f      	ldr	r0, [pc, #60]	@ (80005b0 <Read_Disk_Status+0x60>)
 8000572:	2301      	movs	r3, #1
 8000574:	425b      	negs	r3, r3
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2301      	movs	r3, #1
 800057a:	f002 feb7 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 800057e:	2032      	movs	r0, #50	@ 0x32
 8000580:	f002 f942 	bl	8002808 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, slave_address << 1, data, size, HAL_MAX_DELAY);
 8000584:	1dbb      	adds	r3, r7, #6
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	18db      	adds	r3, r3, r3
 800058a:	b299      	uxth	r1, r3
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	881c      	ldrh	r4, [r3, #0]
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	4807      	ldr	r0, [pc, #28]	@ (80005b0 <Read_Disk_Status+0x60>)
 8000594:	2301      	movs	r3, #1
 8000596:	425b      	negs	r3, r3
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	0023      	movs	r3, r4
 800059c:	f002 ffd0 	bl	8003540 <HAL_I2C_Master_Receive>
}
 80005a0:	46c0      	nop			@ (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b003      	add	sp, #12
 80005a6:	bd90      	pop	{r4, r7, pc}
 80005a8:	20000052 	.word	0x20000052
 80005ac:	20000038 	.word	0x20000038
 80005b0:	20000094 	.word	0x20000094

080005b4 <Decode_Disk_Status>:

void Decode_Disk_Status(uint8_t *data) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	for (uint8_t disk_id = 0; disk_id < 24; disk_id++) {
 80005bc:	230f      	movs	r3, #15
 80005be:	18fb      	adds	r3, r7, r3
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
 80005c4:	e057      	b.n	8000676 <Decode_Disk_Status+0xc2>
		uint8_t byte_index = disk_id / 4; // �?ндекс байта
 80005c6:	210e      	movs	r1, #14
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	200f      	movs	r0, #15
 80005cc:	183a      	adds	r2, r7, r0
 80005ce:	7812      	ldrb	r2, [r2, #0]
 80005d0:	0892      	lsrs	r2, r2, #2
 80005d2:	701a      	strb	r2, [r3, #0]
		uint8_t bit_offset = (disk_id % 4) * 2; // Смещение в байте
 80005d4:	183b      	adds	r3, r7, r0
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2203      	movs	r2, #3
 80005da:	4013      	ands	r3, r2
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	200d      	movs	r0, #13
 80005e0:	183a      	adds	r2, r7, r0
 80005e2:	18db      	adds	r3, r3, r3
 80005e4:	7013      	strb	r3, [r2, #0]
		uint8_t status = (data[byte_index] >> bit_offset) & 0x03; // �?звлечение статуса
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	18d3      	adds	r3, r2, r3
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	001a      	movs	r2, r3
 80005f2:	183b      	adds	r3, r7, r0
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	411a      	asrs	r2, r3
 80005f8:	0013      	movs	r3, r2
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	200c      	movs	r0, #12
 80005fe:	183b      	adds	r3, r7, r0
 8000600:	2103      	movs	r1, #3
 8000602:	400a      	ands	r2, r1
 8000604:	701a      	strb	r2, [r3, #0]

		// Декодирование статуса
		switch (status) {
 8000606:	183b      	adds	r3, r7, r0
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b03      	cmp	r3, #3
 800060c:	d023      	beq.n	8000656 <Decode_Disk_Status+0xa2>
 800060e:	dc2b      	bgt.n	8000668 <Decode_Disk_Status+0xb4>
 8000610:	2b02      	cmp	r3, #2
 8000612:	d017      	beq.n	8000644 <Decode_Disk_Status+0x90>
 8000614:	dc28      	bgt.n	8000668 <Decode_Disk_Status+0xb4>
 8000616:	2b00      	cmp	r3, #0
 8000618:	d002      	beq.n	8000620 <Decode_Disk_Status+0x6c>
 800061a:	2b01      	cmp	r3, #1
 800061c:	d009      	beq.n	8000632 <Decode_Disk_Status+0x7e>
			break;
		case 0x03:
			UpdateDiskStatus(disk_id, 0, 0, 1);
			break;
		default:
			break;
 800061e:	e023      	b.n	8000668 <Decode_Disk_Status+0xb4>
			UpdateDiskStatus(disk_id, 0, 0, 0);
 8000620:	230f      	movs	r3, #15
 8000622:	18fb      	adds	r3, r7, r3
 8000624:	7818      	ldrb	r0, [r3, #0]
 8000626:	2300      	movs	r3, #0
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	f7ff ff5c 	bl	80004e8 <UpdateDiskStatus>
			break;
 8000630:	e01b      	b.n	800066a <Decode_Disk_Status+0xb6>
			UpdateDiskStatus(disk_id, 1, 0, 0);
 8000632:	230f      	movs	r3, #15
 8000634:	18fb      	adds	r3, r7, r3
 8000636:	7818      	ldrb	r0, [r3, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	2200      	movs	r2, #0
 800063c:	2101      	movs	r1, #1
 800063e:	f7ff ff53 	bl	80004e8 <UpdateDiskStatus>
			break;
 8000642:	e012      	b.n	800066a <Decode_Disk_Status+0xb6>
			UpdateDiskStatus(disk_id, 0, 1, 0);
 8000644:	230f      	movs	r3, #15
 8000646:	18fb      	adds	r3, r7, r3
 8000648:	7818      	ldrb	r0, [r3, #0]
 800064a:	2300      	movs	r3, #0
 800064c:	2201      	movs	r2, #1
 800064e:	2100      	movs	r1, #0
 8000650:	f7ff ff4a 	bl	80004e8 <UpdateDiskStatus>
			break;
 8000654:	e009      	b.n	800066a <Decode_Disk_Status+0xb6>
			UpdateDiskStatus(disk_id, 0, 0, 1);
 8000656:	230f      	movs	r3, #15
 8000658:	18fb      	adds	r3, r7, r3
 800065a:	7818      	ldrb	r0, [r3, #0]
 800065c:	2301      	movs	r3, #1
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	f7ff ff41 	bl	80004e8 <UpdateDiskStatus>
			break;
 8000666:	e000      	b.n	800066a <Decode_Disk_Status+0xb6>
			break;
 8000668:	46c0      	nop			@ (mov r8, r8)
	for (uint8_t disk_id = 0; disk_id < 24; disk_id++) {
 800066a:	210f      	movs	r1, #15
 800066c:	187b      	adds	r3, r7, r1
 800066e:	781a      	ldrb	r2, [r3, #0]
 8000670:	187b      	adds	r3, r7, r1
 8000672:	3201      	adds	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
 8000676:	230f      	movs	r3, #15
 8000678:	18fb      	adds	r3, r7, r3
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b17      	cmp	r3, #23
 800067e:	d9a2      	bls.n	80005c6 <Decode_Disk_Status+0x12>
		}
	}
}
 8000680:	46c0      	nop			@ (mov r8, r8)
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b004      	add	sp, #16
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000690:	f002 f834 	bl	80026fc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000694:	f000 f870 	bl	8000778 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000698:	f000 fa62 	bl	8000b60 <MX_GPIO_Init>
	MX_DMA_Init();
 800069c:	f000 fa4a 	bl	8000b34 <MX_DMA_Init>
	MX_I2C2_Init();
 80006a0:	f000 f8fa 	bl	8000898 <MX_I2C2_Init>
	MX_TIM3_Init();
 80006a4:	f000 f9ee 	bl	8000a84 <MX_TIM3_Init>
	MX_TIM1_Init();
 80006a8:	f000 f93a 	bl	8000920 <MX_TIM1_Init>
	MX_TIM2_Init();
 80006ac:	f000 f994 	bl	80009d8 <MX_TIM2_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80006b0:	f000 f8bc 	bl	800082c <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */


	ResetBus();
 80006b4:	f000 fc6e 	bl	8000f94 <ResetBus>
	HAL_Delay(500);
 80006b8:	23fa      	movs	r3, #250	@ 0xfa
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	0018      	movs	r0, r3
 80006be:	f002 f8a3 	bl	8002808 <HAL_Delay>
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2101      	movs	r1, #1
 80006c6:	2007      	movs	r0, #7
 80006c8:	f002 f96e 	bl	80029a8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80006cc:	2007      	movs	r0, #7
 80006ce:	f002 f980 	bl	80029d2 <HAL_NVIC_EnableIRQ>

	InitializeDiskPins();
 80006d2:	f001 fa5b 	bl	8001b8c <InitializeDiskPins>

	Initialize_Disks();
 80006d6:	f000 fc2f 	bl	8000f38 <Initialize_Disks>
	HAL_TIM_Base_Start_IT(&htim1);
 80006da:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <main+0xc8>)
 80006dc:	0018      	movs	r0, r3
 80006de:	f005 fa0d 	bl	8005afc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <main+0xcc>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f005 fa09 	bl	8005afc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <main+0xd0>)
 80006ec:	0018      	movs	r0, r3
 80006ee:	f005 fa05 	bl	8005afc <HAL_TIM_Base_Start_IT>

		/* USER CODE BEGIN 3 */


		// Обновление состояния светодиодов
		UpdateLED(&led1);
 80006f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <main+0xd4>)
 80006f4:	0018      	movs	r0, r3
 80006f6:	f7ff fd91 	bl	800021c <UpdateLED>
		UpdateLED(&led2);
 80006fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <main+0xd8>)
 80006fc:	0018      	movs	r0, r3
 80006fe:	f7ff fd8d 	bl	800021c <UpdateLED>

		if (MB1_attach == 0) {
 8000702:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <main+0xdc>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d10f      	bne.n	800072a <main+0x9e>
			if (HAL_GPIO_ReadPin(MB1_BITCH_GPIO_Port, MB1_BITCH_Pin) == 1)
 800070a:	23a0      	movs	r3, #160	@ 0xa0
 800070c:	05db      	lsls	r3, r3, #23
 800070e:	2108      	movs	r1, #8
 8000710:	0018      	movs	r0, r3
 8000712:	f002 fce1 	bl	80030d8 <HAL_GPIO_ReadPin>
 8000716:	0003      	movs	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d103      	bne.n	8000724 <main+0x98>
			{
				adapter1_state = 0;}
 800071c:	4b13      	ldr	r3, [pc, #76]	@ (800076c <main+0xe0>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	e002      	b.n	800072a <main+0x9e>
			else adapter1_state = 1;
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <main+0xe0>)
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
		}

		if (MB2_attach == 0) {
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <main+0xe4>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1df      	bne.n	80006f2 <main+0x66>
			if (HAL_GPIO_ReadPin(MB2_BITCH_GPIO_Port, MB2_BITCH_Pin) == 1)
 8000732:	23a0      	movs	r3, #160	@ 0xa0
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	2120      	movs	r1, #32
 8000738:	0018      	movs	r0, r3
 800073a:	f002 fccd 	bl	80030d8 <HAL_GPIO_ReadPin>
 800073e:	0003      	movs	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d103      	bne.n	800074c <main+0xc0>
			{
				adapter2_state = 0;
 8000744:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <main+0xe8>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
 800074a:	e7d2      	b.n	80006f2 <main+0x66>
			}else adapter2_state = 1;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <main+0xe8>)
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
		UpdateLED(&led1);
 8000752:	e7ce      	b.n	80006f2 <main+0x66>
 8000754:	200001a0 	.word	0x200001a0
 8000758:	200001ec 	.word	0x200001ec
 800075c:	20000238 	.word	0x20000238
 8000760:	20000000 	.word	0x20000000
 8000764:	20000018 	.word	0x20000018
 8000768:	20000063 	.word	0x20000063
 800076c:	200003b4 	.word	0x200003b4
 8000770:	20000064 	.word	0x20000064
 8000774:	200003b5 	.word	0x200003b5

08000778 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b093      	sub	sp, #76	@ 0x4c
 800077c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	2410      	movs	r4, #16
 8000780:	193b      	adds	r3, r7, r4
 8000782:	0018      	movs	r0, r3
 8000784:	2338      	movs	r3, #56	@ 0x38
 8000786:	001a      	movs	r2, r3
 8000788:	2100      	movs	r1, #0
 800078a:	f005 fdc1 	bl	8006310 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078e:	003b      	movs	r3, r7
 8000790:	0018      	movs	r0, r3
 8000792:	2310      	movs	r3, #16
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f005 fdba 	bl	8006310 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079c:	2380      	movs	r3, #128	@ 0x80
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f004 fa7f 	bl	8004ca4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2201      	movs	r2, #1
 80007aa:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2280      	movs	r2, #128	@ 0x80
 80007b0:	0252      	lsls	r2, r2, #9
 80007b2:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	0021      	movs	r1, r4
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2202      	movs	r2, #2
 80007ba:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2203      	movs	r2, #3
 80007c0:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLN = 16;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2210      	movs	r2, #16
 80007cc:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2280      	movs	r2, #128	@ 0x80
 80007d2:	0292      	lsls	r2, r2, #10
 80007d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	22c0      	movs	r2, #192	@ 0xc0
 80007da:	04d2      	lsls	r2, r2, #19
 80007dc:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2280      	movs	r2, #128	@ 0x80
 80007e2:	0592      	lsls	r2, r2, #22
 80007e4:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	0018      	movs	r0, r3
 80007ea:	f004 fa9b 	bl	8004d24 <HAL_RCC_OscConfig>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x7e>
	{
		Error_Handler();
 80007f2:	f001 fd91 	bl	8002318 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	003b      	movs	r3, r7
 80007f8:	2207      	movs	r2, #7
 80007fa:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	003b      	movs	r3, r7
 80007fe:	2202      	movs	r2, #2
 8000800:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	003b      	movs	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000808:	003b      	movs	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800080e:	003b      	movs	r3, r7
 8000810:	2102      	movs	r1, #2
 8000812:	0018      	movs	r0, r3
 8000814:	f004 fda0 	bl	8005358 <HAL_RCC_ClockConfig>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xa8>
	{
		Error_Handler();
 800081c:	f001 fd7c 	bl	8002318 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8000820:	f004 ff24 	bl	800566c <HAL_RCC_EnableCSS>
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b013      	add	sp, #76	@ 0x4c
 800082a:	bd90      	pop	{r4, r7, pc}

0800082c <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2102      	movs	r1, #2
 8000834:	2009      	movs	r0, #9
 8000836:	f002 f8b7 	bl	80029a8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800083a:	2009      	movs	r0, #9
 800083c:	f002 f8c9 	bl	80029d2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2102      	movs	r1, #2
 8000844:	200a      	movs	r0, #10
 8000846:	f002 f8af 	bl	80029a8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800084a:	200a      	movs	r0, #10
 800084c:	f002 f8c1 	bl	80029d2 <HAL_NVIC_EnableIRQ>
	/* TIM1_BRK_UP_TRG_COM_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 2, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2102      	movs	r1, #2
 8000854:	200d      	movs	r0, #13
 8000856:	f002 f8a7 	bl	80029a8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800085a:	200d      	movs	r0, #13
 800085c:	f002 f8b9 	bl	80029d2 <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2102      	movs	r1, #2
 8000864:	200f      	movs	r0, #15
 8000866:	f002 f89f 	bl	80029a8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800086a:	200f      	movs	r0, #15
 800086c:	f002 f8b1 	bl	80029d2 <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2102      	movs	r1, #2
 8000874:	2010      	movs	r0, #16
 8000876:	f002 f897 	bl	80029a8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800087a:	2010      	movs	r0, #16
 800087c:	f002 f8a9 	bl	80029d2 <HAL_NVIC_EnableIRQ>
	/* I2C2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C2_IRQn, 2, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2102      	movs	r1, #2
 8000884:	2018      	movs	r0, #24
 8000886:	f002 f88f 	bl	80029a8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C2_IRQn);
 800088a:	2018      	movs	r0, #24
 800088c:	f002 f8a1 	bl	80029d2 <HAL_NVIC_EnableIRQ>
}
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800089c:	4b1d      	ldr	r3, [pc, #116]	@ (8000914 <MX_I2C2_Init+0x7c>)
 800089e:	4a1e      	ldr	r2, [pc, #120]	@ (8000918 <MX_I2C2_Init+0x80>)
 80008a0:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x00C12469;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000914 <MX_I2C2_Init+0x7c>)
 80008a4:	4a1d      	ldr	r2, [pc, #116]	@ (800091c <MX_I2C2_Init+0x84>)
 80008a6:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_I2C2_Init+0x7c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ae:	4b19      	ldr	r3, [pc, #100]	@ (8000914 <MX_I2C2_Init+0x7c>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b4:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_I2C2_Init+0x7c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80008ba:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <MX_I2C2_Init+0x7c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_I2C2_Init+0x7c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c6:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <MX_I2C2_Init+0x7c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80008cc:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_I2C2_Init+0x7c>)
 80008ce:	2280      	movs	r2, #128	@ 0x80
 80008d0:	0292      	lsls	r2, r2, #10
 80008d2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_I2C2_Init+0x7c>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f002 fc62 	bl	80031a0 <HAL_I2C_Init>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 80008e0:	f001 fd1a 	bl	8002318 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80008e4:	2380      	movs	r3, #128	@ 0x80
 80008e6:	015a      	lsls	r2, r3, #5
 80008e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <MX_I2C2_Init+0x7c>)
 80008ea:	0011      	movs	r1, r2
 80008ec:	0018      	movs	r0, r3
 80008ee:	f004 f941 	bl	8004b74 <HAL_I2CEx_ConfigAnalogFilter>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2C2_Init+0x62>
	{
		Error_Handler();
 80008f6:	f001 fd0f 	bl	8002318 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_I2C2_Init+0x7c>)
 80008fc:	2100      	movs	r1, #0
 80008fe:	0018      	movs	r0, r3
 8000900:	f004 f984 	bl	8004c0c <HAL_I2CEx_ConfigDigitalFilter>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <MX_I2C2_Init+0x74>
	{
		Error_Handler();
 8000908:	f001 fd06 	bl	8002318 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	20000094 	.word	0x20000094
 8000918:	40005800 	.word	0x40005800
 800091c:	00c12469 	.word	0x00c12469

08000920 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	2310      	movs	r3, #16
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	0018      	movs	r0, r3
 800092c:	2310      	movs	r3, #16
 800092e:	001a      	movs	r2, r3
 8000930:	2100      	movs	r1, #0
 8000932:	f005 fced 	bl	8006310 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	0018      	movs	r0, r3
 800093a:	230c      	movs	r3, #12
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f005 fce6 	bl	8006310 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000944:	4b21      	ldr	r3, [pc, #132]	@ (80009cc <MX_TIM1_Init+0xac>)
 8000946:	4a22      	ldr	r2, [pc, #136]	@ (80009d0 <MX_TIM1_Init+0xb0>)
 8000948:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 63999;
 800094a:	4b20      	ldr	r3, [pc, #128]	@ (80009cc <MX_TIM1_Init+0xac>)
 800094c:	4a21      	ldr	r2, [pc, #132]	@ (80009d4 <MX_TIM1_Init+0xb4>)
 800094e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b1e      	ldr	r3, [pc, #120]	@ (80009cc <MX_TIM1_Init+0xac>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 124;
 8000956:	4b1d      	ldr	r3, [pc, #116]	@ (80009cc <MX_TIM1_Init+0xac>)
 8000958:	227c      	movs	r2, #124	@ 0x7c
 800095a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <MX_TIM1_Init+0xac>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000962:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <MX_TIM1_Init+0xac>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000968:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <MX_TIM1_Init+0xac>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800096e:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <MX_TIM1_Init+0xac>)
 8000970:	0018      	movs	r0, r3
 8000972:	f005 f86b 	bl	8005a4c <HAL_TIM_Base_Init>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d001      	beq.n	800097e <MX_TIM1_Init+0x5e>
	{
		Error_Handler();
 800097a:	f001 fccd 	bl	8002318 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097e:	2110      	movs	r1, #16
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2280      	movs	r2, #128	@ 0x80
 8000984:	0152      	lsls	r2, r2, #5
 8000986:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000988:	187a      	adds	r2, r7, r1
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <MX_TIM1_Init+0xac>)
 800098c:	0011      	movs	r1, r2
 800098e:	0018      	movs	r0, r3
 8000990:	f005 fa18 	bl	8005dc4 <HAL_TIM_ConfigClockSource>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8000998:	f001 fcbe 	bl	8002318 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ae:	1d3a      	adds	r2, r7, #4
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_TIM1_Init+0xac>)
 80009b2:	0011      	movs	r1, r2
 80009b4:	0018      	movs	r0, r3
 80009b6:	f005 fc25 	bl	8006204 <HAL_TIMEx_MasterConfigSynchronization>
 80009ba:	1e03      	subs	r3, r0, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0xa2>
	{
		Error_Handler();
 80009be:	f001 fcab 	bl	8002318 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b008      	add	sp, #32
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	200001a0 	.word	0x200001a0
 80009d0:	40012c00 	.word	0x40012c00
 80009d4:	0000f9ff 	.word	0x0000f9ff

080009d8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	2310      	movs	r3, #16
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	0018      	movs	r0, r3
 80009e4:	2310      	movs	r3, #16
 80009e6:	001a      	movs	r2, r3
 80009e8:	2100      	movs	r1, #0
 80009ea:	f005 fc91 	bl	8006310 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	0018      	movs	r0, r3
 80009f2:	230c      	movs	r3, #12
 80009f4:	001a      	movs	r2, r3
 80009f6:	2100      	movs	r1, #0
 80009f8:	f005 fc8a 	bl	8006310 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <MX_TIM2_Init+0xa4>)
 80009fe:	2280      	movs	r2, #128	@ 0x80
 8000a00:	05d2      	lsls	r2, r2, #23
 8000a02:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 63999;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <MX_TIM2_Init+0xa4>)
 8000a06:	4a1e      	ldr	r2, [pc, #120]	@ (8000a80 <MX_TIM2_Init+0xa8>)
 8000a08:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <MX_TIM2_Init+0xa4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 499;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <MX_TIM2_Init+0xa4>)
 8000a12:	22f4      	movs	r2, #244	@ 0xf4
 8000a14:	32ff      	adds	r2, #255	@ 0xff
 8000a16:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a18:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <MX_TIM2_Init+0xa4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <MX_TIM2_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a24:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <MX_TIM2_Init+0xa4>)
 8000a26:	0018      	movs	r0, r3
 8000a28:	f005 f810 	bl	8005a4c <HAL_TIM_Base_Init>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8000a30:	f001 fc72 	bl	8002318 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a34:	2110      	movs	r1, #16
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2280      	movs	r2, #128	@ 0x80
 8000a3a:	0152      	lsls	r2, r2, #5
 8000a3c:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a3e:	187a      	adds	r2, r7, r1
 8000a40:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <MX_TIM2_Init+0xa4>)
 8000a42:	0011      	movs	r1, r2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f005 f9bd 	bl	8005dc4 <HAL_TIM_ConfigClockSource>
 8000a4a:	1e03      	subs	r3, r0, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 8000a4e:	f001 fc63 	bl	8002318 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a5e:	1d3a      	adds	r2, r7, #4
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_TIM2_Init+0xa4>)
 8000a62:	0011      	movs	r1, r2
 8000a64:	0018      	movs	r0, r3
 8000a66:	f005 fbcd 	bl	8006204 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 8000a6e:	f001 fc53 	bl	8002318 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b008      	add	sp, #32
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	200001ec 	.word	0x200001ec
 8000a80:	0000f9ff 	.word	0x0000f9ff

08000a84 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	0018      	movs	r0, r3
 8000a90:	2310      	movs	r3, #16
 8000a92:	001a      	movs	r2, r3
 8000a94:	2100      	movs	r1, #0
 8000a96:	f005 fc3b 	bl	8006310 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	230c      	movs	r3, #12
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f005 fc34 	bl	8006310 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b24 <MX_TIM3_Init+0xa0>)
 8000aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8000b28 <MX_TIM3_Init+0xa4>)
 8000aac:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 63999;
 8000aae:	4b1d      	ldr	r3, [pc, #116]	@ (8000b24 <MX_TIM3_Init+0xa0>)
 8000ab0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b2c <MX_TIM3_Init+0xa8>)
 8000ab2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <MX_TIM3_Init+0xa0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <MX_TIM3_Init+0xa0>)
 8000abc:	4a1c      	ldr	r2, [pc, #112]	@ (8000b30 <MX_TIM3_Init+0xac>)
 8000abe:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <MX_TIM3_Init+0xa0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <MX_TIM3_Init+0xa0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000acc:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <MX_TIM3_Init+0xa0>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f004 ffbc 	bl	8005a4c <HAL_TIM_Base_Init>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM3_Init+0x58>
	{
		Error_Handler();
 8000ad8:	f001 fc1e 	bl	8002318 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000adc:	2110      	movs	r1, #16
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2280      	movs	r2, #128	@ 0x80
 8000ae2:	0152      	lsls	r2, r2, #5
 8000ae4:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ae6:	187a      	adds	r2, r7, r1
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <MX_TIM3_Init+0xa0>)
 8000aea:	0011      	movs	r1, r2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f005 f969 	bl	8005dc4 <HAL_TIM_ConfigClockSource>
 8000af2:	1e03      	subs	r3, r0, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 8000af6:	f001 fc0f 	bl	8002318 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b06:	1d3a      	adds	r2, r7, #4
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <MX_TIM3_Init+0xa0>)
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f005 fb79 	bl	8006204 <HAL_TIMEx_MasterConfigSynchronization>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM3_Init+0x96>
	{
		Error_Handler();
 8000b16:	f001 fbff 	bl	8002318 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b008      	add	sp, #32
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	20000238 	.word	0x20000238
 8000b28:	40000400 	.word	0x40000400
 8000b2c:	0000f9ff 	.word	0x0000f9ff
 8000b30:	000003e7 	.word	0x000003e7

08000b34 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <MX_DMA_Init+0x28>)
 8000b3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b3e:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <MX_DMA_Init+0x28>)
 8000b40:	2101      	movs	r1, #1
 8000b42:	430a      	orrs	r2, r1
 8000b44:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b46:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <MX_DMA_Init+0x28>)
 8000b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	40021000 	.word	0x40021000

08000b60 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b08b      	sub	sp, #44	@ 0x2c
 8000b64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	2414      	movs	r4, #20
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	2314      	movs	r3, #20
 8000b6e:	001a      	movs	r2, r3
 8000b70:	2100      	movs	r1, #0
 8000b72:	f005 fbcd 	bl	8006310 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b8b      	ldr	r3, [pc, #556]	@ (8000da4 <MX_GPIO_Init+0x244>)
 8000b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b7a:	4b8a      	ldr	r3, [pc, #552]	@ (8000da4 <MX_GPIO_Init+0x244>)
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b82:	4b88      	ldr	r3, [pc, #544]	@ (8000da4 <MX_GPIO_Init+0x244>)
 8000b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b86:	2204      	movs	r2, #4
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8e:	4b85      	ldr	r3, [pc, #532]	@ (8000da4 <MX_GPIO_Init+0x244>)
 8000b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b92:	4b84      	ldr	r3, [pc, #528]	@ (8000da4 <MX_GPIO_Init+0x244>)
 8000b94:	2120      	movs	r1, #32
 8000b96:	430a      	orrs	r2, r1
 8000b98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b9a:	4b82      	ldr	r3, [pc, #520]	@ (8000da4 <MX_GPIO_Init+0x244>)
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b9e:	2220      	movs	r2, #32
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8000da4 <MX_GPIO_Init+0x244>)
 8000ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000baa:	4b7e      	ldr	r3, [pc, #504]	@ (8000da4 <MX_GPIO_Init+0x244>)
 8000bac:	2101      	movs	r1, #1
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8000da4 <MX_GPIO_Init+0x244>)
 8000bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b79      	ldr	r3, [pc, #484]	@ (8000da4 <MX_GPIO_Init+0x244>)
 8000bc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bc2:	4b78      	ldr	r3, [pc, #480]	@ (8000da4 <MX_GPIO_Init+0x244>)
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bca:	4b76      	ldr	r3, [pc, #472]	@ (8000da4 <MX_GPIO_Init+0x244>)
 8000bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bce:	2202      	movs	r2, #2
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	4b73      	ldr	r3, [pc, #460]	@ (8000da4 <MX_GPIO_Init+0x244>)
 8000bd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bda:	4b72      	ldr	r3, [pc, #456]	@ (8000da4 <MX_GPIO_Init+0x244>)
 8000bdc:	2108      	movs	r1, #8
 8000bde:	430a      	orrs	r2, r1
 8000be0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000be2:	4b70      	ldr	r3, [pc, #448]	@ (8000da4 <MX_GPIO_Init+0x244>)
 8000be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000be6:	2208      	movs	r2, #8
 8000be8:	4013      	ands	r3, r2
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, FP_MB1_PWRLED_Pin|FP_MB2_PWRLED_Pin|CPU_PSON_Pin, GPIO_PIN_RESET);
 8000bee:	496e      	ldr	r1, [pc, #440]	@ (8000da8 <MX_GPIO_Init+0x248>)
 8000bf0:	4b6e      	ldr	r3, [pc, #440]	@ (8000dac <MX_GPIO_Init+0x24c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f002 fa8c 	bl	8003112 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, SGPIO_I2C2_RES_G_Pin|SGPIO_I2C2_RES_Pin|SGPIO_I2C1_RES_Pin, GPIO_PIN_SET);
 8000bfa:	23c4      	movs	r3, #196	@ 0xc4
 8000bfc:	01db      	lsls	r3, r3, #7
 8000bfe:	486b      	ldr	r0, [pc, #428]	@ (8000dac <MX_GPIO_Init+0x24c>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	0019      	movs	r1, r3
 8000c04:	f002 fa85 	bl	8003112 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, MB1_STATUS_LED_Pin|MB2_STATUS_LED_Pin, GPIO_PIN_SET);
 8000c08:	23a0      	movs	r3, #160	@ 0xa0
 8000c0a:	05db      	lsls	r3, r3, #23
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2150      	movs	r1, #80	@ 0x50
 8000c10:	0018      	movs	r0, r3
 8000c12:	f002 fa7e 	bl	8003112 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SGPIO_I2C3_RES_Pin|SGPIO_I2C3RES_G_Pin, GPIO_PIN_SET);
 8000c16:	4b66      	ldr	r3, [pc, #408]	@ (8000db0 <MX_GPIO_Init+0x250>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2106      	movs	r1, #6
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f002 fa78 	bl	8003112 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, SGPIO_I2C1_RES_G_Pin|TEMP_I2C2_RES_Pin|TEMP_I2C1_RES_Pin, GPIO_PIN_SET);
 8000c22:	4b64      	ldr	r3, [pc, #400]	@ (8000db4 <MX_GPIO_Init+0x254>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	2107      	movs	r1, #7
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f002 fa72 	bl	8003112 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : FP_MB1_PWRLED_Pin SGPIO_I2C2_RES_G_Pin SGPIO_I2C2_RES_Pin FP_MB2_PWRLED_Pin
                           CPU_PSON_Pin SGPIO_I2C1_RES_Pin */
	GPIO_InitStruct.Pin = FP_MB1_PWRLED_Pin|SGPIO_I2C2_RES_G_Pin|SGPIO_I2C2_RES_Pin|FP_MB2_PWRLED_Pin
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	4a61      	ldr	r2, [pc, #388]	@ (8000db8 <MX_GPIO_Init+0x258>)
 8000c32:	601a      	str	r2, [r3, #0]
			|CPU_PSON_Pin|SGPIO_I2C1_RES_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	193b      	adds	r3, r7, r4
 8000c36:	2201      	movs	r2, #1
 8000c38:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	4a58      	ldr	r2, [pc, #352]	@ (8000dac <MX_GPIO_Init+0x24c>)
 8000c4a:	0019      	movs	r1, r3
 8000c4c:	0010      	movs	r0, r2
 8000c4e:	f002 f8df 	bl	8002e10 <HAL_GPIO_Init>

	/*Configure GPIO pins : D_DRIVE4_ACTIVITY_Pin B_DRIVE4_ACTIVITY_Pin B_DRIVE3_ACTIVITY_Pin B_DRIVE2_ACTIVITY_Pin
                           MB1_PWR_SW_Pin C_DRIVE1_ACTIVITY_Pin C_DRIVE2_ACTIVITY_Pin E_DRIVE1_ACTIVITY_Pin */
	GPIO_InitStruct.Pin = D_DRIVE4_ACTIVITY_Pin|B_DRIVE4_ACTIVITY_Pin|B_DRIVE3_ACTIVITY_Pin|B_DRIVE2_ACTIVITY_Pin
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	4a59      	ldr	r2, [pc, #356]	@ (8000dbc <MX_GPIO_Init+0x25c>)
 8000c56:	601a      	str	r2, [r3, #0]
			|MB1_PWR_SW_Pin|C_DRIVE1_ACTIVITY_Pin|C_DRIVE2_ACTIVITY_Pin|E_DRIVE1_ACTIVITY_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	193b      	adds	r3, r7, r4
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c64:	193b      	adds	r3, r7, r4
 8000c66:	4a51      	ldr	r2, [pc, #324]	@ (8000dac <MX_GPIO_Init+0x24c>)
 8000c68:	0019      	movs	r1, r3
 8000c6a:	0010      	movs	r0, r2
 8000c6c:	f002 f8d0 	bl	8002e10 <HAL_GPIO_Init>

	/*Configure GPIO pins : MB1_BITCH_Pin MB2_BITCH_Pin CPU_PWROK_Pin A_DRIVE4_ACTIVITY_Pin
                           B_DRIVE1_ACTIVITY_Pin D_DRIVE1_ACTIVITY_Pin D_DRIVE2_ACTIVITY_Pin D_DRIVE3_ACTIVITY_Pin */
	GPIO_InitStruct.Pin = MB1_BITCH_Pin|MB2_BITCH_Pin|CPU_PWROK_Pin|A_DRIVE4_ACTIVITY_Pin
 8000c70:	193b      	adds	r3, r7, r4
 8000c72:	4a53      	ldr	r2, [pc, #332]	@ (8000dc0 <MX_GPIO_Init+0x260>)
 8000c74:	601a      	str	r2, [r3, #0]
			|B_DRIVE1_ACTIVITY_Pin|D_DRIVE1_ACTIVITY_Pin|D_DRIVE2_ACTIVITY_Pin|D_DRIVE3_ACTIVITY_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	193a      	adds	r2, r7, r4
 8000c84:	23a0      	movs	r3, #160	@ 0xa0
 8000c86:	05db      	lsls	r3, r3, #23
 8000c88:	0011      	movs	r1, r2
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f002 f8c0 	bl	8002e10 <HAL_GPIO_Init>

	/*Configure GPIO pins : MB1_STATUS_LED_Pin MB2_STATUS_LED_Pin */
	GPIO_InitStruct.Pin = MB1_STATUS_LED_Pin|MB2_STATUS_LED_Pin;
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	2250      	movs	r2, #80	@ 0x50
 8000c94:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2201      	movs	r2, #1
 8000c9a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	193a      	adds	r2, r7, r4
 8000caa:	23a0      	movs	r3, #160	@ 0xa0
 8000cac:	05db      	lsls	r3, r3, #23
 8000cae:	0011      	movs	r1, r2
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f002 f8ad 	bl	8002e10 <HAL_GPIO_Init>

	/*Configure GPIO pins : MB1_ATTACH_Pin A_DRIVE1_ACTIVITY_Pin A_DRIVE2_ACTIVITY_Pin A_DRIVE3_ACTIVITY_Pin
                           F_DRIVE4_ACTIVITY_Pin F_DRIVE3_ACTIVITY_Pin F_DRIVE2_ACTIVITY_Pin F_DRIVE1_ACTIVITY_Pin
                           E_DRIVE4_ACTIVITY_Pin E_DRIVE3_ACTIVITY_Pin E_DRIVE2_ACTIVITY_Pin */
	GPIO_InitStruct.Pin = MB1_ATTACH_Pin|A_DRIVE1_ACTIVITY_Pin|A_DRIVE2_ACTIVITY_Pin|A_DRIVE3_ACTIVITY_Pin
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	4a42      	ldr	r2, [pc, #264]	@ (8000dc4 <MX_GPIO_Init+0x264>)
 8000cba:	601a      	str	r2, [r3, #0]
			|F_DRIVE4_ACTIVITY_Pin|F_DRIVE3_ACTIVITY_Pin|F_DRIVE2_ACTIVITY_Pin|F_DRIVE1_ACTIVITY_Pin
			|E_DRIVE4_ACTIVITY_Pin|E_DRIVE3_ACTIVITY_Pin|E_DRIVE2_ACTIVITY_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	4a39      	ldr	r2, [pc, #228]	@ (8000db0 <MX_GPIO_Init+0x250>)
 8000ccc:	0019      	movs	r1, r3
 8000cce:	0010      	movs	r0, r2
 8000cd0:	f002 f89e 	bl	8002e10 <HAL_GPIO_Init>

	/*Configure GPIO pins : SGPIO_I2C3_RES_Pin SGPIO_I2C3RES_G_Pin */
	GPIO_InitStruct.Pin = SGPIO_I2C3_RES_Pin|SGPIO_I2C3RES_G_Pin;
 8000cd4:	193b      	adds	r3, r7, r4
 8000cd6:	2206      	movs	r2, #6
 8000cd8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	2201      	movs	r2, #1
 8000cde:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	4a30      	ldr	r2, [pc, #192]	@ (8000db0 <MX_GPIO_Init+0x250>)
 8000cf0:	0019      	movs	r1, r3
 8000cf2:	0010      	movs	r0, r2
 8000cf4:	f002 f88c 	bl	8002e10 <HAL_GPIO_Init>

	/*Configure GPIO pins : C_DRIVE3_ACTIVITY_Pin C_DRIVE4_ACTIVITY_Pin MB2_ATTACH_Pin MB2_PWR_SW_Pin */
	GPIO_InitStruct.Pin = C_DRIVE3_ACTIVITY_Pin|C_DRIVE4_ACTIVITY_Pin|MB2_ATTACH_Pin|MB2_PWR_SW_Pin;
 8000cf8:	0021      	movs	r1, r4
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	22d8      	movs	r2, #216	@ 0xd8
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d02:	000c      	movs	r4, r1
 8000d04:	193b      	adds	r3, r7, r4
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d10:	193b      	adds	r3, r7, r4
 8000d12:	4a28      	ldr	r2, [pc, #160]	@ (8000db4 <MX_GPIO_Init+0x254>)
 8000d14:	0019      	movs	r1, r3
 8000d16:	0010      	movs	r0, r2
 8000d18:	f002 f87a 	bl	8002e10 <HAL_GPIO_Init>

	/*Configure GPIO pin : FP_MB1_PWR_SW_Pin */
	GPIO_InitStruct.Pin = FP_MB1_PWR_SW_Pin;
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	2280      	movs	r2, #128	@ 0x80
 8000d20:	0212      	lsls	r2, r2, #8
 8000d22:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	22c4      	movs	r2, #196	@ 0xc4
 8000d28:	0392      	lsls	r2, r2, #14
 8000d2a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2c:	193b      	adds	r3, r7, r4
 8000d2e:	2201      	movs	r2, #1
 8000d30:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(FP_MB1_PWR_SW_GPIO_Port, &GPIO_InitStruct);
 8000d32:	193a      	adds	r2, r7, r4
 8000d34:	23a0      	movs	r3, #160	@ 0xa0
 8000d36:	05db      	lsls	r3, r3, #23
 8000d38:	0011      	movs	r1, r2
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f002 f868 	bl	8002e10 <HAL_GPIO_Init>

	/*Configure GPIO pin : FP_MB2_PWR_SW_Pin */
	GPIO_InitStruct.Pin = FP_MB2_PWR_SW_Pin;
 8000d40:	0021      	movs	r1, r4
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2280      	movs	r2, #128	@ 0x80
 8000d46:	0052      	lsls	r2, r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	22c4      	movs	r2, #196	@ 0xc4
 8000d4e:	0392      	lsls	r2, r2, #14
 8000d50:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2201      	movs	r2, #1
 8000d56:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(FP_MB2_PWR_SW_GPIO_Port, &GPIO_InitStruct);
 8000d58:	000c      	movs	r4, r1
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	4a13      	ldr	r2, [pc, #76]	@ (8000dac <MX_GPIO_Init+0x24c>)
 8000d5e:	0019      	movs	r1, r3
 8000d60:	0010      	movs	r0, r2
 8000d62:	f002 f855 	bl	8002e10 <HAL_GPIO_Init>

	/*Configure GPIO pins : SGPIO_I2C1_RES_G_Pin TEMP_I2C2_RES_Pin TEMP_I2C1_RES_Pin */
	GPIO_InitStruct.Pin = SGPIO_I2C1_RES_G_Pin|TEMP_I2C2_RES_Pin|TEMP_I2C1_RES_Pin;
 8000d66:	0021      	movs	r1, r4
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	2207      	movs	r2, #7
 8000d6c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	2201      	movs	r2, #1
 8000d72:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	4a0c      	ldr	r2, [pc, #48]	@ (8000db4 <MX_GPIO_Init+0x254>)
 8000d84:	0019      	movs	r1, r3
 8000d86:	0010      	movs	r0, r2
 8000d88:	f002 f842 	bl	8002e10 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2101      	movs	r1, #1
 8000d90:	2007      	movs	r0, #7
 8000d92:	f001 fe09 	bl	80029a8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000d96:	2007      	movs	r0, #7
 8000d98:	f001 fe1b 	bl	80029d2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d9c:	46c0      	nop			@ (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b00b      	add	sp, #44	@ 0x2c
 8000da2:	bd90      	pop	{r4, r7, pc}
 8000da4:	40021000 	.word	0x40021000
 8000da8:	00000811 	.word	0x00000811
 8000dac:	50000800 	.word	0x50000800
 8000db0:	50000400 	.word	0x50000400
 8000db4:	50000c00 	.word	0x50000c00
 8000db8:	00006a11 	.word	0x00006a11
 8000dbc:	000084ee 	.word	0x000084ee
 8000dc0:	00001fa8 	.word	0x00001fa8
 8000dc4:	0000e3f9 	.word	0x0000e3f9

08000dc8 <Set_devslp>:

/* USER CODE BEGIN 4 */
void Set_devslp()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af02      	add	r7, sp, #8
	while (HAL_I2C_IsDeviceReady(&hi2c2, I2C_EXPAND_adr << 1, 3, 100) != HAL_OK);
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	4b51      	ldr	r3, [pc, #324]	@ (8000f18 <Set_devslp+0x150>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	18db      	adds	r3, r3, r3
 8000dd6:	b299      	uxth	r1, r3
 8000dd8:	4850      	ldr	r0, [pc, #320]	@ (8000f1c <Set_devslp+0x154>)
 8000dda:	2364      	movs	r3, #100	@ 0x64
 8000ddc:	2203      	movs	r2, #3
 8000dde:	f002 fcb7 	bl	8003750 <HAL_I2C_IsDeviceReady>
 8000de2:	1e03      	subs	r3, r0, #0
 8000de4:	d1f4      	bne.n	8000dd0 <Set_devslp+0x8>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 1); //DevSLP  0 канал (E/F)
 8000de6:	4b4c      	ldr	r3, [pc, #304]	@ (8000f18 <Set_devslp+0x150>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	18db      	adds	r3, r3, r3
 8000dec:	b299      	uxth	r1, r3
 8000dee:	4a4c      	ldr	r2, [pc, #304]	@ (8000f20 <Set_devslp+0x158>)
 8000df0:	484a      	ldr	r0, [pc, #296]	@ (8000f1c <Set_devslp+0x154>)
 8000df2:	2301      	movs	r3, #1
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2301      	movs	r3, #1
 8000df8:	f002 fa78 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000dfc:	2005      	movs	r0, #5
 8000dfe:	f001 fd03 	bl	8002808 <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&hi2c2, Dev_SLP_adr << 1, 3, 100) != HAL_OK);
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	4b47      	ldr	r3, [pc, #284]	@ (8000f24 <Set_devslp+0x15c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	18db      	adds	r3, r3, r3
 8000e0a:	b299      	uxth	r1, r3
 8000e0c:	4843      	ldr	r0, [pc, #268]	@ (8000f1c <Set_devslp+0x154>)
 8000e0e:	2364      	movs	r3, #100	@ 0x64
 8000e10:	2203      	movs	r2, #3
 8000e12:	f002 fc9d 	bl	8003750 <HAL_I2C_IsDeviceReady>
 8000e16:	1e03      	subs	r3, r0, #0
 8000e18:	d1f4      	bne.n	8000e04 <Set_devslp+0x3c>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), i2cbuff_IN, 3, 1); // init input
 8000e1a:	4b42      	ldr	r3, [pc, #264]	@ (8000f24 <Set_devslp+0x15c>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	18db      	adds	r3, r3, r3
 8000e20:	b299      	uxth	r1, r3
 8000e22:	4a41      	ldr	r2, [pc, #260]	@ (8000f28 <Set_devslp+0x160>)
 8000e24:	483d      	ldr	r0, [pc, #244]	@ (8000f1c <Set_devslp+0x154>)
 8000e26:	2301      	movs	r3, #1
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	f002 fa5e 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000e30:	2005      	movs	r0, #5
 8000e32:	f001 fce9 	bl	8002808 <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&hi2c2, Dev_SLP_adr << 1, 3, 100) != HAL_OK);
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	4b3a      	ldr	r3, [pc, #232]	@ (8000f24 <Set_devslp+0x15c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	18db      	adds	r3, r3, r3
 8000e3e:	b299      	uxth	r1, r3
 8000e40:	4836      	ldr	r0, [pc, #216]	@ (8000f1c <Set_devslp+0x154>)
 8000e42:	2364      	movs	r3, #100	@ 0x64
 8000e44:	2203      	movs	r2, #3
 8000e46:	f002 fc83 	bl	8003750 <HAL_I2C_IsDeviceReady>
 8000e4a:	1e03      	subs	r3, r0, #0
 8000e4c:	d1f4      	bne.n	8000e38 <Set_devslp+0x70>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), Dev_SLP_ON, 3, 1); //write
 8000e4e:	4b35      	ldr	r3, [pc, #212]	@ (8000f24 <Set_devslp+0x15c>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	18db      	adds	r3, r3, r3
 8000e54:	b299      	uxth	r1, r3
 8000e56:	4a35      	ldr	r2, [pc, #212]	@ (8000f2c <Set_devslp+0x164>)
 8000e58:	4830      	ldr	r0, [pc, #192]	@ (8000f1c <Set_devslp+0x154>)
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2303      	movs	r3, #3
 8000e60:	f002 fa44 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000e64:	2005      	movs	r0, #5
 8000e66:	f001 fccf 	bl	8002808 <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 1); //DevSLP  1 канал (C/D)
 8000e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f18 <Set_devslp+0x150>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	18db      	adds	r3, r3, r3
 8000e70:	b299      	uxth	r1, r3
 8000e72:	4a2f      	ldr	r2, [pc, #188]	@ (8000f30 <Set_devslp+0x168>)
 8000e74:	4829      	ldr	r0, [pc, #164]	@ (8000f1c <Set_devslp+0x154>)
 8000e76:	2301      	movs	r3, #1
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f002 fa36 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000e80:	2005      	movs	r0, #5
 8000e82:	f001 fcc1 	bl	8002808 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), i2cbuff_IN, 3, 1);
 8000e86:	4b27      	ldr	r3, [pc, #156]	@ (8000f24 <Set_devslp+0x15c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	18db      	adds	r3, r3, r3
 8000e8c:	b299      	uxth	r1, r3
 8000e8e:	4a26      	ldr	r2, [pc, #152]	@ (8000f28 <Set_devslp+0x160>)
 8000e90:	4822      	ldr	r0, [pc, #136]	@ (8000f1c <Set_devslp+0x154>)
 8000e92:	2301      	movs	r3, #1
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	2303      	movs	r3, #3
 8000e98:	f002 fa28 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000e9c:	2005      	movs	r0, #5
 8000e9e:	f001 fcb3 	bl	8002808 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), Dev_SLP_ON, 3, 1);
 8000ea2:	4b20      	ldr	r3, [pc, #128]	@ (8000f24 <Set_devslp+0x15c>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	18db      	adds	r3, r3, r3
 8000ea8:	b299      	uxth	r1, r3
 8000eaa:	4a20      	ldr	r2, [pc, #128]	@ (8000f2c <Set_devslp+0x164>)
 8000eac:	481b      	ldr	r0, [pc, #108]	@ (8000f1c <Set_devslp+0x154>)
 8000eae:	2301      	movs	r3, #1
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	f002 fa1a 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000eb8:	2005      	movs	r0, #5
 8000eba:	f001 fca5 	bl	8002808 <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 1); //DevSLP  2 канал (A/B)
 8000ebe:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <Set_devslp+0x150>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	18db      	adds	r3, r3, r3
 8000ec4:	b299      	uxth	r1, r3
 8000ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8000f34 <Set_devslp+0x16c>)
 8000ec8:	4814      	ldr	r0, [pc, #80]	@ (8000f1c <Set_devslp+0x154>)
 8000eca:	2301      	movs	r3, #1
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2301      	movs	r3, #1
 8000ed0:	f002 fa0c 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000ed4:	2005      	movs	r0, #5
 8000ed6:	f001 fc97 	bl	8002808 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), i2cbuff_IN, 3, 1);
 8000eda:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <Set_devslp+0x15c>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	18db      	adds	r3, r3, r3
 8000ee0:	b299      	uxth	r1, r3
 8000ee2:	4a11      	ldr	r2, [pc, #68]	@ (8000f28 <Set_devslp+0x160>)
 8000ee4:	480d      	ldr	r0, [pc, #52]	@ (8000f1c <Set_devslp+0x154>)
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2303      	movs	r3, #3
 8000eec:	f002 f9fe 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000ef0:	2005      	movs	r0, #5
 8000ef2:	f001 fc89 	bl	8002808 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), Dev_SLP_ON, 3, 1);
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <Set_devslp+0x15c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	18db      	adds	r3, r3, r3
 8000efc:	b299      	uxth	r1, r3
 8000efe:	4a0b      	ldr	r2, [pc, #44]	@ (8000f2c <Set_devslp+0x164>)
 8000f00:	4806      	ldr	r0, [pc, #24]	@ (8000f1c <Set_devslp+0x154>)
 8000f02:	2301      	movs	r3, #1
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2303      	movs	r3, #3
 8000f08:	f002 f9f0 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000f0c:	2005      	movs	r0, #5
 8000f0e:	f001 fc7b 	bl	8002808 <HAL_Delay>
}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000051 	.word	0x20000051
 8000f1c:	20000094 	.word	0x20000094
 8000f20:	20000038 	.word	0x20000038
 8000f24:	20000050 	.word	0x20000050
 8000f28:	20000034 	.word	0x20000034
 8000f2c:	20000054 	.word	0x20000054
 8000f30:	2000003c 	.word	0x2000003c
 8000f34:	20000040 	.word	0x20000040

08000f38 <Initialize_Disks>:

void Initialize_Disks()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_DISKS; ++i) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	e01c      	b.n	8000f7e <Initialize_Disks+0x46>
		disks[i].isConnected = 0;
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <Initialize_Disks+0x58>)
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	0092      	lsls	r2, r2, #2
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	54d1      	strb	r1, [r2, r3]
		disks[i].activity = 0;
 8000f4e:	4a10      	ldr	r2, [pc, #64]	@ (8000f90 <Initialize_Disks+0x58>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	18d3      	adds	r3, r2, r3
 8000f56:	3301      	adds	r3, #1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
		disks[i].error = 0;
 8000f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f90 <Initialize_Disks+0x58>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	18d3      	adds	r3, r2, r3
 8000f64:	3302      	adds	r3, #2
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
		disks[i].locate = 0;
 8000f6a:	4a09      	ldr	r2, [pc, #36]	@ (8000f90 <Initialize_Disks+0x58>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	18d3      	adds	r3, r2, r3
 8000f72:	3303      	adds	r3, #3
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_DISKS; ++i) {
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b17      	cmp	r3, #23
 8000f82:	dddf      	ble.n	8000f44 <Initialize_Disks+0xc>
	}
}
 8000f84:	46c0      	nop			@ (mov r8, r8)
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	20000294 	.word	0x20000294

08000f94 <ResetBus>:

	}
}

void ResetBus()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	flag_update = 10;
 8000f98:	4b37      	ldr	r3, [pc, #220]	@ (8001078 <ResetBus+0xe4>)
 8000f9a:	220a      	movs	r2, #10
 8000f9c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TEMP_I2C1_RES_GPIO_Port, TEMP_I2C1_RES_Pin, RESET);
 8000f9e:	4b37      	ldr	r3, [pc, #220]	@ (800107c <ResetBus+0xe8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f002 f8b4 	bl	8003112 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_G_GPIO_Port, SGPIO_I2C1_RES_G_Pin, RESET);
 8000faa:	4b34      	ldr	r3, [pc, #208]	@ (800107c <ResetBus+0xe8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	2101      	movs	r1, #1
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f002 f8ae 	bl	8003112 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_GPIO_Port, SGPIO_I2C1_RES_Pin, RESET);
 8000fb6:	2380      	movs	r3, #128	@ 0x80
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4831      	ldr	r0, [pc, #196]	@ (8001080 <ResetBus+0xec>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	f002 f8a7 	bl	8003112 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3RES_G_GPIO_Port, SGPIO_I2C3RES_G_Pin, RESET);
 8000fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8001084 <ResetBus+0xf0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2104      	movs	r1, #4
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f002 f8a1 	bl	8003112 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3_RES_GPIO_Port, SGPIO_I2C3_RES_Pin, RESET);
 8000fd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001084 <ResetBus+0xf0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f002 f89b 	bl	8003112 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_GPIO_Port, SGPIO_I2C2_RES_Pin, RESET);
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	01db      	lsls	r3, r3, #7
 8000fe0:	4827      	ldr	r0, [pc, #156]	@ (8001080 <ResetBus+0xec>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	f002 f894 	bl	8003112 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_G_GPIO_Port, SGPIO_I2C2_RES_G_Pin, RESET);
 8000fea:	2380      	movs	r3, #128	@ 0x80
 8000fec:	019b      	lsls	r3, r3, #6
 8000fee:	4824      	ldr	r0, [pc, #144]	@ (8001080 <ResetBus+0xec>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	0019      	movs	r1, r3
 8000ff4:	f002 f88d 	bl	8003112 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_I2C2_RES_GPIO_Port, TEMP_I2C2_RES_Pin, RESET);
 8000ff8:	4b20      	ldr	r3, [pc, #128]	@ (800107c <ResetBus+0xe8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	0018      	movs	r0, r3
 8001000:	f002 f887 	bl	8003112 <HAL_GPIO_WritePin>

	flag_update = 11;
 8001004:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <ResetBus+0xe4>)
 8001006:	220b      	movs	r2, #11
 8001008:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TEMP_I2C1_RES_GPIO_Port, TEMP_I2C1_RES_Pin, SET);
 800100a:	4b1c      	ldr	r3, [pc, #112]	@ (800107c <ResetBus+0xe8>)
 800100c:	2201      	movs	r2, #1
 800100e:	2104      	movs	r1, #4
 8001010:	0018      	movs	r0, r3
 8001012:	f002 f87e 	bl	8003112 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_G_GPIO_Port, SGPIO_I2C1_RES_G_Pin, SET);
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <ResetBus+0xe8>)
 8001018:	2201      	movs	r2, #1
 800101a:	2101      	movs	r1, #1
 800101c:	0018      	movs	r0, r3
 800101e:	f002 f878 	bl	8003112 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_GPIO_Port, SGPIO_I2C1_RES_Pin, SET);
 8001022:	2380      	movs	r3, #128	@ 0x80
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4816      	ldr	r0, [pc, #88]	@ (8001080 <ResetBus+0xec>)
 8001028:	2201      	movs	r2, #1
 800102a:	0019      	movs	r1, r3
 800102c:	f002 f871 	bl	8003112 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3RES_G_GPIO_Port, SGPIO_I2C3RES_G_Pin, SET);
 8001030:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <ResetBus+0xf0>)
 8001032:	2201      	movs	r2, #1
 8001034:	2104      	movs	r1, #4
 8001036:	0018      	movs	r0, r3
 8001038:	f002 f86b 	bl	8003112 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3_RES_GPIO_Port, SGPIO_I2C3_RES_Pin, SET);
 800103c:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <ResetBus+0xf0>)
 800103e:	2201      	movs	r2, #1
 8001040:	2102      	movs	r1, #2
 8001042:	0018      	movs	r0, r3
 8001044:	f002 f865 	bl	8003112 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_GPIO_Port, SGPIO_I2C2_RES_Pin, SET);
 8001048:	2380      	movs	r3, #128	@ 0x80
 800104a:	01db      	lsls	r3, r3, #7
 800104c:	480c      	ldr	r0, [pc, #48]	@ (8001080 <ResetBus+0xec>)
 800104e:	2201      	movs	r2, #1
 8001050:	0019      	movs	r1, r3
 8001052:	f002 f85e 	bl	8003112 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_G_GPIO_Port, SGPIO_I2C2_RES_G_Pin, SET);
 8001056:	2380      	movs	r3, #128	@ 0x80
 8001058:	019b      	lsls	r3, r3, #6
 800105a:	4809      	ldr	r0, [pc, #36]	@ (8001080 <ResetBus+0xec>)
 800105c:	2201      	movs	r2, #1
 800105e:	0019      	movs	r1, r3
 8001060:	f002 f857 	bl	8003112 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_I2C2_RES_GPIO_Port, TEMP_I2C2_RES_Pin, SET);
 8001064:	4b05      	ldr	r3, [pc, #20]	@ (800107c <ResetBus+0xe8>)
 8001066:	2201      	movs	r2, #1
 8001068:	2102      	movs	r1, #2
 800106a:	0018      	movs	r0, r3
 800106c:	f002 f851 	bl	8003112 <HAL_GPIO_WritePin>

}
 8001070:	46c0      	nop			@ (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	20000285 	.word	0x20000285
 800107c:	50000c00 	.word	0x50000c00
 8001080:	50000800 	.word	0x50000800
 8001084:	50000400 	.word	0x50000400

08001088 <Set_Led>:

void Set_Led()
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 800108e:	4b33      	ldr	r3, [pc, #204]	@ (800115c <Set_Led+0xd4>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	18db      	adds	r3, r3, r3
 8001094:	b299      	uxth	r1, r3
 8001096:	4a32      	ldr	r2, [pc, #200]	@ (8001160 <Set_Led+0xd8>)
 8001098:	4832      	ldr	r0, [pc, #200]	@ (8001164 <Set_Led+0xdc>)
 800109a:	230a      	movs	r3, #10
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	f002 f924 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 80010a4:	4b30      	ldr	r3, [pc, #192]	@ (8001168 <Set_Led+0xe0>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	18db      	adds	r3, r3, r3
 80010aa:	b299      	uxth	r1, r3
 80010ac:	4a2f      	ldr	r2, [pc, #188]	@ (800116c <Set_Led+0xe4>)
 80010ae:	482d      	ldr	r0, [pc, #180]	@ (8001164 <Set_Led+0xdc>)
 80010b0:	230a      	movs	r3, #10
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2303      	movs	r3, #3
 80010b6:	f002 f919 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), channel_one, 3, 10);
 80010ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001168 <Set_Led+0xe0>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	18db      	adds	r3, r3, r3
 80010c0:	b299      	uxth	r1, r3
 80010c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001170 <Set_Led+0xe8>)
 80010c4:	4827      	ldr	r0, [pc, #156]	@ (8001164 <Set_Led+0xdc>)
 80010c6:	230a      	movs	r3, #10
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2303      	movs	r3, #3
 80010cc:	f002 f90e 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 80010d0:	4b22      	ldr	r3, [pc, #136]	@ (800115c <Set_Led+0xd4>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	18db      	adds	r3, r3, r3
 80010d6:	b299      	uxth	r1, r3
 80010d8:	4a26      	ldr	r2, [pc, #152]	@ (8001174 <Set_Led+0xec>)
 80010da:	4822      	ldr	r0, [pc, #136]	@ (8001164 <Set_Led+0xdc>)
 80010dc:	230a      	movs	r3, #10
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	f002 f903 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 80010e6:	4b20      	ldr	r3, [pc, #128]	@ (8001168 <Set_Led+0xe0>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	18db      	adds	r3, r3, r3
 80010ec:	b299      	uxth	r1, r3
 80010ee:	4a1f      	ldr	r2, [pc, #124]	@ (800116c <Set_Led+0xe4>)
 80010f0:	481c      	ldr	r0, [pc, #112]	@ (8001164 <Set_Led+0xdc>)
 80010f2:	230a      	movs	r3, #10
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2303      	movs	r3, #3
 80010f8:	f002 f8f8 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), channel_two, 3, 10);
 80010fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <Set_Led+0xe0>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	18db      	adds	r3, r3, r3
 8001102:	b299      	uxth	r1, r3
 8001104:	4a1c      	ldr	r2, [pc, #112]	@ (8001178 <Set_Led+0xf0>)
 8001106:	4817      	ldr	r0, [pc, #92]	@ (8001164 <Set_Led+0xdc>)
 8001108:	230a      	movs	r3, #10
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2303      	movs	r3, #3
 800110e:	f002 f8ed 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 8001112:	4b12      	ldr	r3, [pc, #72]	@ (800115c <Set_Led+0xd4>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	18db      	adds	r3, r3, r3
 8001118:	b299      	uxth	r1, r3
 800111a:	4a18      	ldr	r2, [pc, #96]	@ (800117c <Set_Led+0xf4>)
 800111c:	4811      	ldr	r0, [pc, #68]	@ (8001164 <Set_Led+0xdc>)
 800111e:	230a      	movs	r3, #10
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	f002 f8e2 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 8001128:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <Set_Led+0xe0>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	18db      	adds	r3, r3, r3
 800112e:	b299      	uxth	r1, r3
 8001130:	4a0e      	ldr	r2, [pc, #56]	@ (800116c <Set_Led+0xe4>)
 8001132:	480c      	ldr	r0, [pc, #48]	@ (8001164 <Set_Led+0xdc>)
 8001134:	230a      	movs	r3, #10
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2303      	movs	r3, #3
 800113a:	f002 f8d7 	bl	80032ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), channel_three, 3, 10);
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <Set_Led+0xe0>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	18db      	adds	r3, r3, r3
 8001144:	b299      	uxth	r1, r3
 8001146:	4a0e      	ldr	r2, [pc, #56]	@ (8001180 <Set_Led+0xf8>)
 8001148:	4806      	ldr	r0, [pc, #24]	@ (8001164 <Set_Led+0xdc>)
 800114a:	230a      	movs	r3, #10
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2303      	movs	r3, #3
 8001150:	f002 f8cc 	bl	80032ec <HAL_I2C_Master_Transmit>
}
 8001154:	46c0      	nop			@ (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	20000051 	.word	0x20000051
 8001160:	20000038 	.word	0x20000038
 8001164:	20000094 	.word	0x20000094
 8001168:	2000004f 	.word	0x2000004f
 800116c:	20000030 	.word	0x20000030
 8001170:	20000058 	.word	0x20000058
 8001174:	2000003c 	.word	0x2000003c
 8001178:	2000005c 	.word	0x2000005c
 800117c:	20000040 	.word	0x20000040
 8001180:	20000060 	.word	0x20000060

08001184 <Set_Led_On>:

void Set_Led_On()
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af02      	add	r7, sp, #8
	flag_update = 5;
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <Set_Led_On+0x5c>)
 800118c:	2205      	movs	r2, #5
 800118e:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_IsDeviceReady(&hi2c2, LED_adr << 1, 3, 100) == HAL_OK) {
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <Set_Led_On+0x60>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	18db      	adds	r3, r3, r3
 8001196:	b299      	uxth	r1, r3
 8001198:	4813      	ldr	r0, [pc, #76]	@ (80011e8 <Set_Led_On+0x64>)
 800119a:	2364      	movs	r3, #100	@ 0x64
 800119c:	2203      	movs	r2, #3
 800119e:	f002 fad7 	bl	8003750 <HAL_I2C_IsDeviceReady>
 80011a2:	1e03      	subs	r3, r0, #0
 80011a4:	d10b      	bne.n	80011be <Set_Led_On+0x3a>
		HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <Set_Led_On+0x60>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	18db      	adds	r3, r3, r3
 80011ac:	b299      	uxth	r1, r3
 80011ae:	4a0f      	ldr	r2, [pc, #60]	@ (80011ec <Set_Led_On+0x68>)
 80011b0:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <Set_Led_On+0x64>)
 80011b2:	230a      	movs	r3, #10
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2303      	movs	r3, #3
 80011b8:	f002 f898 	bl	80032ec <HAL_I2C_Master_Transmit>
 80011bc:	e002      	b.n	80011c4 <Set_Led_On+0x40>
	} else {
		flag_update = 7;
 80011be:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <Set_Led_On+0x5c>)
 80011c0:	2207      	movs	r2, #7
 80011c2:	701a      	strb	r2, [r3, #0]
	}


	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), ledbufON, 3, 10);
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <Set_Led_On+0x60>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	18db      	adds	r3, r3, r3
 80011ca:	b299      	uxth	r1, r3
 80011cc:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <Set_Led_On+0x6c>)
 80011ce:	4806      	ldr	r0, [pc, #24]	@ (80011e8 <Set_Led_On+0x64>)
 80011d0:	230a      	movs	r3, #10
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2303      	movs	r3, #3
 80011d6:	f002 f889 	bl	80032ec <HAL_I2C_Master_Transmit>
}
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000285 	.word	0x20000285
 80011e4:	2000004f 	.word	0x2000004f
 80011e8:	20000094 	.word	0x20000094
 80011ec:	20000030 	.word	0x20000030
 80011f0:	20000048 	.word	0x20000048

080011f4 <Set_Led_Off>:

void Set_Led_Off()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 80011fa:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <Set_Led_Off+0x38>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	18db      	adds	r3, r3, r3
 8001200:	b299      	uxth	r1, r3
 8001202:	4a0b      	ldr	r2, [pc, #44]	@ (8001230 <Set_Led_Off+0x3c>)
 8001204:	480b      	ldr	r0, [pc, #44]	@ (8001234 <Set_Led_Off+0x40>)
 8001206:	230a      	movs	r3, #10
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2303      	movs	r3, #3
 800120c:	f002 f86e 	bl	80032ec <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), ledbufOFF, 3, 10);
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <Set_Led_Off+0x38>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	18db      	adds	r3, r3, r3
 8001216:	b299      	uxth	r1, r3
 8001218:	4a07      	ldr	r2, [pc, #28]	@ (8001238 <Set_Led_Off+0x44>)
 800121a:	4806      	ldr	r0, [pc, #24]	@ (8001234 <Set_Led_Off+0x40>)
 800121c:	230a      	movs	r3, #10
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2303      	movs	r3, #3
 8001222:	f002 f863 	bl	80032ec <HAL_I2C_Master_Transmit>

}
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000004f 	.word	0x2000004f
 8001230:	20000030 	.word	0x20000030
 8001234:	20000094 	.word	0x20000094
 8001238:	2000004c 	.word	0x2000004c

0800123c <Led_Init>:
void Led_Init()
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af02      	add	r7, sp, #8
	flag_update = 1;
 8001242:	4b36      	ldr	r3, [pc, #216]	@ (800131c <Led_Init+0xe0>)
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 8001248:	4b35      	ldr	r3, [pc, #212]	@ (8001320 <Led_Init+0xe4>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	18db      	adds	r3, r3, r3
 800124e:	b299      	uxth	r1, r3
 8001250:	4a34      	ldr	r2, [pc, #208]	@ (8001324 <Led_Init+0xe8>)
 8001252:	4835      	ldr	r0, [pc, #212]	@ (8001328 <Led_Init+0xec>)
 8001254:	230a      	movs	r3, #10
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	f002 f847 	bl	80032ec <HAL_I2C_Master_Transmit>
	flag_update = 3;
 800125e:	4b2f      	ldr	r3, [pc, #188]	@ (800131c <Led_Init+0xe0>)
 8001260:	2203      	movs	r2, #3
 8001262:	701a      	strb	r2, [r3, #0]
	Set_Led_On();
 8001264:	f7ff ff8e 	bl	8001184 <Set_Led_On>
	HAL_Delay(250);
 8001268:	20fa      	movs	r0, #250	@ 0xfa
 800126a:	f001 facd 	bl	8002808 <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 800126e:	4b2c      	ldr	r3, [pc, #176]	@ (8001320 <Led_Init+0xe4>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	18db      	adds	r3, r3, r3
 8001274:	b299      	uxth	r1, r3
 8001276:	4a2d      	ldr	r2, [pc, #180]	@ (800132c <Led_Init+0xf0>)
 8001278:	482b      	ldr	r0, [pc, #172]	@ (8001328 <Led_Init+0xec>)
 800127a:	230a      	movs	r3, #10
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2301      	movs	r3, #1
 8001280:	f002 f834 	bl	80032ec <HAL_I2C_Master_Transmit>
	Set_Led_On();
 8001284:	f7ff ff7e 	bl	8001184 <Set_Led_On>
	HAL_Delay(250);
 8001288:	20fa      	movs	r0, #250	@ 0xfa
 800128a:	f001 fabd 	bl	8002808 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 800128e:	4b24      	ldr	r3, [pc, #144]	@ (8001320 <Led_Init+0xe4>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	18db      	adds	r3, r3, r3
 8001294:	b299      	uxth	r1, r3
 8001296:	4a26      	ldr	r2, [pc, #152]	@ (8001330 <Led_Init+0xf4>)
 8001298:	4823      	ldr	r0, [pc, #140]	@ (8001328 <Led_Init+0xec>)
 800129a:	230a      	movs	r3, #10
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2301      	movs	r3, #1
 80012a0:	f002 f824 	bl	80032ec <HAL_I2C_Master_Transmit>
	Set_Led_On();
 80012a4:	f7ff ff6e 	bl	8001184 <Set_Led_On>
	HAL_Delay(250);
 80012a8:	20fa      	movs	r0, #250	@ 0xfa
 80012aa:	f001 faad 	bl	8002808 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 80012ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001320 <Led_Init+0xe4>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	18db      	adds	r3, r3, r3
 80012b4:	b299      	uxth	r1, r3
 80012b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001324 <Led_Init+0xe8>)
 80012b8:	481b      	ldr	r0, [pc, #108]	@ (8001328 <Led_Init+0xec>)
 80012ba:	230a      	movs	r3, #10
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2301      	movs	r3, #1
 80012c0:	f002 f814 	bl	80032ec <HAL_I2C_Master_Transmit>
	Set_Led_Off();
 80012c4:	f7ff ff96 	bl	80011f4 <Set_Led_Off>
	HAL_Delay(250);
 80012c8:	20fa      	movs	r0, #250	@ 0xfa
 80012ca:	f001 fa9d 	bl	8002808 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 80012ce:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <Led_Init+0xe4>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	18db      	adds	r3, r3, r3
 80012d4:	b299      	uxth	r1, r3
 80012d6:	4a15      	ldr	r2, [pc, #84]	@ (800132c <Led_Init+0xf0>)
 80012d8:	4813      	ldr	r0, [pc, #76]	@ (8001328 <Led_Init+0xec>)
 80012da:	230a      	movs	r3, #10
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2301      	movs	r3, #1
 80012e0:	f002 f804 	bl	80032ec <HAL_I2C_Master_Transmit>
	Set_Led_Off();
 80012e4:	f7ff ff86 	bl	80011f4 <Set_Led_Off>
	HAL_Delay(250);
 80012e8:	20fa      	movs	r0, #250	@ 0xfa
 80012ea:	f001 fa8d 	bl	8002808 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 80012ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <Led_Init+0xe4>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	18db      	adds	r3, r3, r3
 80012f4:	b299      	uxth	r1, r3
 80012f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001330 <Led_Init+0xf4>)
 80012f8:	480b      	ldr	r0, [pc, #44]	@ (8001328 <Led_Init+0xec>)
 80012fa:	230a      	movs	r3, #10
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2301      	movs	r3, #1
 8001300:	f001 fff4 	bl	80032ec <HAL_I2C_Master_Transmit>
	Set_Led_Off();
 8001304:	f7ff ff76 	bl	80011f4 <Set_Led_Off>
	HAL_Delay(250);
 8001308:	20fa      	movs	r0, #250	@ 0xfa
 800130a:	f001 fa7d 	bl	8002808 <HAL_Delay>
	flag_update = 2;
 800130e:	4b03      	ldr	r3, [pc, #12]	@ (800131c <Led_Init+0xe0>)
 8001310:	2202      	movs	r2, #2
 8001312:	701a      	strb	r2, [r3, #0]
}
 8001314:	46c0      	nop			@ (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	20000285 	.word	0x20000285
 8001320:	20000051 	.word	0x20000051
 8001324:	20000038 	.word	0x20000038
 8001328:	20000094 	.word	0x20000094
 800132c:	2000003c 	.word	0x2000003c
 8001330:	20000040 	.word	0x20000040

08001334 <Read_disks_connected>:
}



void Read_disks_connected()
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af02      	add	r7, sp, #8

	ResetBus();
 800133a:	f7ff fe2b 	bl	8000f94 <ResetBus>
	HAL_Delay(10);
 800133e:	200a      	movs	r0, #10
 8001340:	f001 fa62 	bl	8002808 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 8001344:	4bcf      	ldr	r3, [pc, #828]	@ (8001684 <Read_disks_connected+0x350>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	18db      	adds	r3, r3, r3
 800134a:	b299      	uxth	r1, r3
 800134c:	4ace      	ldr	r2, [pc, #824]	@ (8001688 <Read_disks_connected+0x354>)
 800134e:	48cf      	ldr	r0, [pc, #828]	@ (800168c <Read_disks_connected+0x358>)
 8001350:	230a      	movs	r3, #10
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2301      	movs	r3, #1
 8001356:	f001 ffc9 	bl	80032ec <HAL_I2C_Master_Transmit>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 800135a:	4bcd      	ldr	r3, [pc, #820]	@ (8001690 <Read_disks_connected+0x35c>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	001a      	movs	r2, r3
 8001360:	4bcc      	ldr	r3, [pc, #816]	@ (8001694 <Read_disks_connected+0x360>)
 8001362:	0019      	movs	r1, r3
 8001364:	2001      	movs	r0, #1
 8001366:	f000 f9a7 	bl	80016b8 <Read_Register>


	if (~Buf_PRSTN[0] & 0x02)		//PRSTN F1
 800136a:	4bca      	ldr	r3, [pc, #808]	@ (8001694 <Read_disks_connected+0x360>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	001a      	movs	r2, r3
 8001370:	2302      	movs	r3, #2
 8001372:	4013      	ands	r3, r2
 8001374:	d103      	bne.n	800137e <Read_disks_connected+0x4a>
	{
		disks[0].isConnected = 1;
 8001376:	4bc8      	ldr	r3, [pc, #800]	@ (8001698 <Read_disks_connected+0x364>)
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	e002      	b.n	8001384 <Read_disks_connected+0x50>
	} else {
		disks[0].isConnected = 0;
 800137e:	4bc6      	ldr	r3, [pc, #792]	@ (8001698 <Read_disks_connected+0x364>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN F2
 8001384:	4bc3      	ldr	r3, [pc, #780]	@ (8001694 <Read_disks_connected+0x360>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	001a      	movs	r2, r3
 800138a:	2308      	movs	r3, #8
 800138c:	4013      	ands	r3, r2
 800138e:	d103      	bne.n	8001398 <Read_disks_connected+0x64>
	{
		disks[1].isConnected = 1;
 8001390:	4bc1      	ldr	r3, [pc, #772]	@ (8001698 <Read_disks_connected+0x364>)
 8001392:	2201      	movs	r2, #1
 8001394:	711a      	strb	r2, [r3, #4]
 8001396:	e002      	b.n	800139e <Read_disks_connected+0x6a>
	} else {
		disks[1].isConnected = 0;
 8001398:	4bbf      	ldr	r3, [pc, #764]	@ (8001698 <Read_disks_connected+0x364>)
 800139a:	2200      	movs	r2, #0
 800139c:	711a      	strb	r2, [r3, #4]
	}

	if (~Buf_PRSTN[0] & 0x20)		//PRSTN F3
 800139e:	4bbd      	ldr	r3, [pc, #756]	@ (8001694 <Read_disks_connected+0x360>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	001a      	movs	r2, r3
 80013a4:	2320      	movs	r3, #32
 80013a6:	4013      	ands	r3, r2
 80013a8:	d103      	bne.n	80013b2 <Read_disks_connected+0x7e>
	{
		disks[2].isConnected = 1;
 80013aa:	4bbb      	ldr	r3, [pc, #748]	@ (8001698 <Read_disks_connected+0x364>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	721a      	strb	r2, [r3, #8]
 80013b0:	e002      	b.n	80013b8 <Read_disks_connected+0x84>
	} else {
		disks[2].isConnected = 0;
 80013b2:	4bb9      	ldr	r3, [pc, #740]	@ (8001698 <Read_disks_connected+0x364>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	721a      	strb	r2, [r3, #8]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN F4
 80013b8:	4bb6      	ldr	r3, [pc, #728]	@ (8001694 <Read_disks_connected+0x360>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db03      	blt.n	80013ca <Read_disks_connected+0x96>
	{
		disks[3].isConnected = 1;
 80013c2:	4bb5      	ldr	r3, [pc, #724]	@ (8001698 <Read_disks_connected+0x364>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	731a      	strb	r2, [r3, #12]
 80013c8:	e002      	b.n	80013d0 <Read_disks_connected+0x9c>
	} else {
		disks[3].isConnected = 0;
 80013ca:	4bb3      	ldr	r3, [pc, #716]	@ (8001698 <Read_disks_connected+0x364>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	731a      	strb	r2, [r3, #12]
	}

	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 80013d0:	4baf      	ldr	r3, [pc, #700]	@ (8001690 <Read_disks_connected+0x35c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	001a      	movs	r2, r3
 80013d6:	4baf      	ldr	r3, [pc, #700]	@ (8001694 <Read_disks_connected+0x360>)
 80013d8:	0019      	movs	r1, r3
 80013da:	2000      	movs	r0, #0
 80013dc:	f000 f96c 	bl	80016b8 <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN E1
 80013e0:	4bac      	ldr	r3, [pc, #688]	@ (8001694 <Read_disks_connected+0x360>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	001a      	movs	r2, r3
 80013e6:	2302      	movs	r3, #2
 80013e8:	4013      	ands	r3, r2
 80013ea:	d103      	bne.n	80013f4 <Read_disks_connected+0xc0>
	{
		disks[4].isConnected = 1;
 80013ec:	4baa      	ldr	r3, [pc, #680]	@ (8001698 <Read_disks_connected+0x364>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	741a      	strb	r2, [r3, #16]
 80013f2:	e002      	b.n	80013fa <Read_disks_connected+0xc6>
	} else {
		disks[4].isConnected = 0;
 80013f4:	4ba8      	ldr	r3, [pc, #672]	@ (8001698 <Read_disks_connected+0x364>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	741a      	strb	r2, [r3, #16]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN E2
 80013fa:	4ba6      	ldr	r3, [pc, #664]	@ (8001694 <Read_disks_connected+0x360>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	001a      	movs	r2, r3
 8001400:	2308      	movs	r3, #8
 8001402:	4013      	ands	r3, r2
 8001404:	d103      	bne.n	800140e <Read_disks_connected+0xda>
	{
		disks[5].isConnected = 1;
 8001406:	4ba4      	ldr	r3, [pc, #656]	@ (8001698 <Read_disks_connected+0x364>)
 8001408:	2201      	movs	r2, #1
 800140a:	751a      	strb	r2, [r3, #20]
 800140c:	e002      	b.n	8001414 <Read_disks_connected+0xe0>
	} else {
		disks[5].isConnected = 0;
 800140e:	4ba2      	ldr	r3, [pc, #648]	@ (8001698 <Read_disks_connected+0x364>)
 8001410:	2200      	movs	r2, #0
 8001412:	751a      	strb	r2, [r3, #20]
	}

	if (~Buf_PRSTN[0] & 0x20)		//PRSTN E3
 8001414:	4b9f      	ldr	r3, [pc, #636]	@ (8001694 <Read_disks_connected+0x360>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	001a      	movs	r2, r3
 800141a:	2320      	movs	r3, #32
 800141c:	4013      	ands	r3, r2
 800141e:	d103      	bne.n	8001428 <Read_disks_connected+0xf4>
	{
		disks[6].isConnected = 1;
 8001420:	4b9d      	ldr	r3, [pc, #628]	@ (8001698 <Read_disks_connected+0x364>)
 8001422:	2201      	movs	r2, #1
 8001424:	761a      	strb	r2, [r3, #24]
 8001426:	e002      	b.n	800142e <Read_disks_connected+0xfa>
	} else {
		disks[6].isConnected = 0;
 8001428:	4b9b      	ldr	r3, [pc, #620]	@ (8001698 <Read_disks_connected+0x364>)
 800142a:	2200      	movs	r2, #0
 800142c:	761a      	strb	r2, [r3, #24]
	}

	if (~Buf_PRSTN[0] & 0x80)		//PRSTN E4
 800142e:	4b99      	ldr	r3, [pc, #612]	@ (8001694 <Read_disks_connected+0x360>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b25b      	sxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	db03      	blt.n	8001440 <Read_disks_connected+0x10c>

	{
		disks[7].isConnected = 1;
 8001438:	4b97      	ldr	r3, [pc, #604]	@ (8001698 <Read_disks_connected+0x364>)
 800143a:	2201      	movs	r2, #1
 800143c:	771a      	strb	r2, [r3, #28]
 800143e:	e002      	b.n	8001446 <Read_disks_connected+0x112>
	} else {
		disks[7].isConnected = 0;
 8001440:	4b95      	ldr	r3, [pc, #596]	@ (8001698 <Read_disks_connected+0x364>)
 8001442:	2200      	movs	r2, #0
 8001444:	771a      	strb	r2, [r3, #28]
	}

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 8001446:	4b8f      	ldr	r3, [pc, #572]	@ (8001684 <Read_disks_connected+0x350>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	18db      	adds	r3, r3, r3
 800144c:	b299      	uxth	r1, r3
 800144e:	4a93      	ldr	r2, [pc, #588]	@ (800169c <Read_disks_connected+0x368>)
 8001450:	488e      	ldr	r0, [pc, #568]	@ (800168c <Read_disks_connected+0x358>)
 8001452:	230a      	movs	r3, #10
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2301      	movs	r3, #1
 8001458:	f001 ff48 	bl	80032ec <HAL_I2C_Master_Transmit>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 800145c:	4b8c      	ldr	r3, [pc, #560]	@ (8001690 <Read_disks_connected+0x35c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	001a      	movs	r2, r3
 8001462:	4b8c      	ldr	r3, [pc, #560]	@ (8001694 <Read_disks_connected+0x360>)
 8001464:	0019      	movs	r1, r3
 8001466:	2001      	movs	r0, #1
 8001468:	f000 f926 	bl	80016b8 <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN D1
 800146c:	4b89      	ldr	r3, [pc, #548]	@ (8001694 <Read_disks_connected+0x360>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	001a      	movs	r2, r3
 8001472:	2302      	movs	r3, #2
 8001474:	4013      	ands	r3, r2
 8001476:	d104      	bne.n	8001482 <Read_disks_connected+0x14e>
	{
		disks[8].isConnected = 1;
 8001478:	4b87      	ldr	r3, [pc, #540]	@ (8001698 <Read_disks_connected+0x364>)
 800147a:	2220      	movs	r2, #32
 800147c:	2101      	movs	r1, #1
 800147e:	5499      	strb	r1, [r3, r2]
 8001480:	e003      	b.n	800148a <Read_disks_connected+0x156>
	} else {
		disks[8].isConnected = 0;
 8001482:	4b85      	ldr	r3, [pc, #532]	@ (8001698 <Read_disks_connected+0x364>)
 8001484:	2220      	movs	r2, #32
 8001486:	2100      	movs	r1, #0
 8001488:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN D2
 800148a:	4b82      	ldr	r3, [pc, #520]	@ (8001694 <Read_disks_connected+0x360>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	001a      	movs	r2, r3
 8001490:	2308      	movs	r3, #8
 8001492:	4013      	ands	r3, r2
 8001494:	d104      	bne.n	80014a0 <Read_disks_connected+0x16c>
	{
		disks[9].isConnected = 1;
 8001496:	4b80      	ldr	r3, [pc, #512]	@ (8001698 <Read_disks_connected+0x364>)
 8001498:	2224      	movs	r2, #36	@ 0x24
 800149a:	2101      	movs	r1, #1
 800149c:	5499      	strb	r1, [r3, r2]
 800149e:	e003      	b.n	80014a8 <Read_disks_connected+0x174>
	} else {
		disks[9].isConnected = 0;
 80014a0:	4b7d      	ldr	r3, [pc, #500]	@ (8001698 <Read_disks_connected+0x364>)
 80014a2:	2224      	movs	r2, #36	@ 0x24
 80014a4:	2100      	movs	r1, #0
 80014a6:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN D3
 80014a8:	4b7a      	ldr	r3, [pc, #488]	@ (8001694 <Read_disks_connected+0x360>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	001a      	movs	r2, r3
 80014ae:	2320      	movs	r3, #32
 80014b0:	4013      	ands	r3, r2
 80014b2:	d104      	bne.n	80014be <Read_disks_connected+0x18a>
	{
		disks[10].isConnected = 1;
 80014b4:	4b78      	ldr	r3, [pc, #480]	@ (8001698 <Read_disks_connected+0x364>)
 80014b6:	2228      	movs	r2, #40	@ 0x28
 80014b8:	2101      	movs	r1, #1
 80014ba:	5499      	strb	r1, [r3, r2]
 80014bc:	e003      	b.n	80014c6 <Read_disks_connected+0x192>
	} else {
		disks[10].isConnected = 0;
 80014be:	4b76      	ldr	r3, [pc, #472]	@ (8001698 <Read_disks_connected+0x364>)
 80014c0:	2228      	movs	r2, #40	@ 0x28
 80014c2:	2100      	movs	r1, #0
 80014c4:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN D4
 80014c6:	4b73      	ldr	r3, [pc, #460]	@ (8001694 <Read_disks_connected+0x360>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db04      	blt.n	80014da <Read_disks_connected+0x1a6>
	{
		disks[11].isConnected = 1;
 80014d0:	4b71      	ldr	r3, [pc, #452]	@ (8001698 <Read_disks_connected+0x364>)
 80014d2:	222c      	movs	r2, #44	@ 0x2c
 80014d4:	2101      	movs	r1, #1
 80014d6:	5499      	strb	r1, [r3, r2]
 80014d8:	e003      	b.n	80014e2 <Read_disks_connected+0x1ae>
	} else {
		disks[11].isConnected = 0;
 80014da:	4b6f      	ldr	r3, [pc, #444]	@ (8001698 <Read_disks_connected+0x364>)
 80014dc:	222c      	movs	r2, #44	@ 0x2c
 80014de:	2100      	movs	r1, #0
 80014e0:	5499      	strb	r1, [r3, r2]
	}
	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 80014e2:	4b6b      	ldr	r3, [pc, #428]	@ (8001690 <Read_disks_connected+0x35c>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	001a      	movs	r2, r3
 80014e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001694 <Read_disks_connected+0x360>)
 80014ea:	0019      	movs	r1, r3
 80014ec:	2000      	movs	r0, #0
 80014ee:	f000 f8e3 	bl	80016b8 <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN C1
 80014f2:	4b68      	ldr	r3, [pc, #416]	@ (8001694 <Read_disks_connected+0x360>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	001a      	movs	r2, r3
 80014f8:	2302      	movs	r3, #2
 80014fa:	4013      	ands	r3, r2
 80014fc:	d104      	bne.n	8001508 <Read_disks_connected+0x1d4>
	{
		disks[12].isConnected = 1;
 80014fe:	4b66      	ldr	r3, [pc, #408]	@ (8001698 <Read_disks_connected+0x364>)
 8001500:	2230      	movs	r2, #48	@ 0x30
 8001502:	2101      	movs	r1, #1
 8001504:	5499      	strb	r1, [r3, r2]
 8001506:	e003      	b.n	8001510 <Read_disks_connected+0x1dc>
	} else {
		disks[12].isConnected = 0;
 8001508:	4b63      	ldr	r3, [pc, #396]	@ (8001698 <Read_disks_connected+0x364>)
 800150a:	2230      	movs	r2, #48	@ 0x30
 800150c:	2100      	movs	r1, #0
 800150e:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN C2
 8001510:	4b60      	ldr	r3, [pc, #384]	@ (8001694 <Read_disks_connected+0x360>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	001a      	movs	r2, r3
 8001516:	2308      	movs	r3, #8
 8001518:	4013      	ands	r3, r2
 800151a:	d104      	bne.n	8001526 <Read_disks_connected+0x1f2>
	{
		disks[13].isConnected = 1;
 800151c:	4b5e      	ldr	r3, [pc, #376]	@ (8001698 <Read_disks_connected+0x364>)
 800151e:	2234      	movs	r2, #52	@ 0x34
 8001520:	2101      	movs	r1, #1
 8001522:	5499      	strb	r1, [r3, r2]
 8001524:	e003      	b.n	800152e <Read_disks_connected+0x1fa>
	} else {
		disks[13].isConnected = 0;
 8001526:	4b5c      	ldr	r3, [pc, #368]	@ (8001698 <Read_disks_connected+0x364>)
 8001528:	2234      	movs	r2, #52	@ 0x34
 800152a:	2100      	movs	r1, #0
 800152c:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN C3
 800152e:	4b59      	ldr	r3, [pc, #356]	@ (8001694 <Read_disks_connected+0x360>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	001a      	movs	r2, r3
 8001534:	2320      	movs	r3, #32
 8001536:	4013      	ands	r3, r2
 8001538:	d104      	bne.n	8001544 <Read_disks_connected+0x210>
	{
		disks[14].isConnected = 1;
 800153a:	4b57      	ldr	r3, [pc, #348]	@ (8001698 <Read_disks_connected+0x364>)
 800153c:	2238      	movs	r2, #56	@ 0x38
 800153e:	2101      	movs	r1, #1
 8001540:	5499      	strb	r1, [r3, r2]
 8001542:	e003      	b.n	800154c <Read_disks_connected+0x218>
	} else {
		disks[14].isConnected = 0;
 8001544:	4b54      	ldr	r3, [pc, #336]	@ (8001698 <Read_disks_connected+0x364>)
 8001546:	2238      	movs	r2, #56	@ 0x38
 8001548:	2100      	movs	r1, #0
 800154a:	5499      	strb	r1, [r3, r2]
	}

	if (~Buf_PRSTN[0] & 0x80)		//PRSTN C4
 800154c:	4b51      	ldr	r3, [pc, #324]	@ (8001694 <Read_disks_connected+0x360>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b25b      	sxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	db04      	blt.n	8001560 <Read_disks_connected+0x22c>
	{
		disks[15].isConnected = 1;
 8001556:	4b50      	ldr	r3, [pc, #320]	@ (8001698 <Read_disks_connected+0x364>)
 8001558:	223c      	movs	r2, #60	@ 0x3c
 800155a:	2101      	movs	r1, #1
 800155c:	5499      	strb	r1, [r3, r2]
 800155e:	e003      	b.n	8001568 <Read_disks_connected+0x234>
	} else {
		disks[15].isConnected = 0;
 8001560:	4b4d      	ldr	r3, [pc, #308]	@ (8001698 <Read_disks_connected+0x364>)
 8001562:	223c      	movs	r2, #60	@ 0x3c
 8001564:	2100      	movs	r1, #0
 8001566:	5499      	strb	r1, [r3, r2]
	}

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 8001568:	4b46      	ldr	r3, [pc, #280]	@ (8001684 <Read_disks_connected+0x350>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	18db      	adds	r3, r3, r3
 800156e:	b299      	uxth	r1, r3
 8001570:	4a4b      	ldr	r2, [pc, #300]	@ (80016a0 <Read_disks_connected+0x36c>)
 8001572:	4846      	ldr	r0, [pc, #280]	@ (800168c <Read_disks_connected+0x358>)
 8001574:	230a      	movs	r3, #10
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	f001 feb7 	bl	80032ec <HAL_I2C_Master_Transmit>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 800157e:	4b44      	ldr	r3, [pc, #272]	@ (8001690 <Read_disks_connected+0x35c>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	001a      	movs	r2, r3
 8001584:	4b43      	ldr	r3, [pc, #268]	@ (8001694 <Read_disks_connected+0x360>)
 8001586:	0019      	movs	r1, r3
 8001588:	2001      	movs	r0, #1
 800158a:	f000 f895 	bl	80016b8 <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN B1
 800158e:	4b41      	ldr	r3, [pc, #260]	@ (8001694 <Read_disks_connected+0x360>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	001a      	movs	r2, r3
 8001594:	2302      	movs	r3, #2
 8001596:	4013      	ands	r3, r2
 8001598:	d104      	bne.n	80015a4 <Read_disks_connected+0x270>
	{
		disks[16].isConnected = 1;
 800159a:	4b3f      	ldr	r3, [pc, #252]	@ (8001698 <Read_disks_connected+0x364>)
 800159c:	2240      	movs	r2, #64	@ 0x40
 800159e:	2101      	movs	r1, #1
 80015a0:	5499      	strb	r1, [r3, r2]
 80015a2:	e003      	b.n	80015ac <Read_disks_connected+0x278>
	} else {
		disks[16].isConnected = 0;
 80015a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001698 <Read_disks_connected+0x364>)
 80015a6:	2240      	movs	r2, #64	@ 0x40
 80015a8:	2100      	movs	r1, #0
 80015aa:	5499      	strb	r1, [r3, r2]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN B2
 80015ac:	4b39      	ldr	r3, [pc, #228]	@ (8001694 <Read_disks_connected+0x360>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	001a      	movs	r2, r3
 80015b2:	2308      	movs	r3, #8
 80015b4:	4013      	ands	r3, r2
 80015b6:	d104      	bne.n	80015c2 <Read_disks_connected+0x28e>
	{
		disks[17].isConnected = 1;
 80015b8:	4b37      	ldr	r3, [pc, #220]	@ (8001698 <Read_disks_connected+0x364>)
 80015ba:	2244      	movs	r2, #68	@ 0x44
 80015bc:	2101      	movs	r1, #1
 80015be:	5499      	strb	r1, [r3, r2]
 80015c0:	e003      	b.n	80015ca <Read_disks_connected+0x296>
	} else {
		disks[17].isConnected = 0;
 80015c2:	4b35      	ldr	r3, [pc, #212]	@ (8001698 <Read_disks_connected+0x364>)
 80015c4:	2244      	movs	r2, #68	@ 0x44
 80015c6:	2100      	movs	r1, #0
 80015c8:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN B3
 80015ca:	4b32      	ldr	r3, [pc, #200]	@ (8001694 <Read_disks_connected+0x360>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	001a      	movs	r2, r3
 80015d0:	2320      	movs	r3, #32
 80015d2:	4013      	ands	r3, r2
 80015d4:	d104      	bne.n	80015e0 <Read_disks_connected+0x2ac>
	{
		disks[18].isConnected = 1;
 80015d6:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <Read_disks_connected+0x364>)
 80015d8:	2248      	movs	r2, #72	@ 0x48
 80015da:	2101      	movs	r1, #1
 80015dc:	5499      	strb	r1, [r3, r2]
 80015de:	e003      	b.n	80015e8 <Read_disks_connected+0x2b4>
	} else {
		disks[18].isConnected = 0;
 80015e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001698 <Read_disks_connected+0x364>)
 80015e2:	2248      	movs	r2, #72	@ 0x48
 80015e4:	2100      	movs	r1, #0
 80015e6:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN B4
 80015e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001694 <Read_disks_connected+0x360>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db04      	blt.n	80015fc <Read_disks_connected+0x2c8>
	{
		disks[19].isConnected = 1;
 80015f2:	4b29      	ldr	r3, [pc, #164]	@ (8001698 <Read_disks_connected+0x364>)
 80015f4:	224c      	movs	r2, #76	@ 0x4c
 80015f6:	2101      	movs	r1, #1
 80015f8:	5499      	strb	r1, [r3, r2]
 80015fa:	e003      	b.n	8001604 <Read_disks_connected+0x2d0>
	} else {
		disks[19].isConnected = 0;
 80015fc:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <Read_disks_connected+0x364>)
 80015fe:	224c      	movs	r2, #76	@ 0x4c
 8001600:	2100      	movs	r1, #0
 8001602:	5499      	strb	r1, [r3, r2]
	}
	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 8001604:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <Read_disks_connected+0x35c>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	001a      	movs	r2, r3
 800160a:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <Read_disks_connected+0x360>)
 800160c:	0019      	movs	r1, r3
 800160e:	2000      	movs	r0, #0
 8001610:	f000 f852 	bl	80016b8 <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN A1
 8001614:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <Read_disks_connected+0x360>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	001a      	movs	r2, r3
 800161a:	2302      	movs	r3, #2
 800161c:	4013      	ands	r3, r2
 800161e:	d104      	bne.n	800162a <Read_disks_connected+0x2f6>
	{
		disks[20].isConnected = 1;
 8001620:	4b1d      	ldr	r3, [pc, #116]	@ (8001698 <Read_disks_connected+0x364>)
 8001622:	2250      	movs	r2, #80	@ 0x50
 8001624:	2101      	movs	r1, #1
 8001626:	5499      	strb	r1, [r3, r2]
 8001628:	e003      	b.n	8001632 <Read_disks_connected+0x2fe>
	} else {
		disks[20].isConnected = 0;
 800162a:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <Read_disks_connected+0x364>)
 800162c:	2250      	movs	r2, #80	@ 0x50
 800162e:	2100      	movs	r1, #0
 8001630:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN A2
 8001632:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <Read_disks_connected+0x360>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	001a      	movs	r2, r3
 8001638:	2308      	movs	r3, #8
 800163a:	4013      	ands	r3, r2
 800163c:	d104      	bne.n	8001648 <Read_disks_connected+0x314>
	{
		disks[21].isConnected = 1;
 800163e:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <Read_disks_connected+0x364>)
 8001640:	2254      	movs	r2, #84	@ 0x54
 8001642:	2101      	movs	r1, #1
 8001644:	5499      	strb	r1, [r3, r2]
 8001646:	e003      	b.n	8001650 <Read_disks_connected+0x31c>
	} else {
		disks[21].isConnected = 0;
 8001648:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <Read_disks_connected+0x364>)
 800164a:	2254      	movs	r2, #84	@ 0x54
 800164c:	2100      	movs	r1, #0
 800164e:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN A3
 8001650:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <Read_disks_connected+0x360>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	001a      	movs	r2, r3
 8001656:	2320      	movs	r3, #32
 8001658:	4013      	ands	r3, r2
 800165a:	d104      	bne.n	8001666 <Read_disks_connected+0x332>
	{
		disks[22].isConnected = 1;
 800165c:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <Read_disks_connected+0x364>)
 800165e:	2258      	movs	r2, #88	@ 0x58
 8001660:	2101      	movs	r1, #1
 8001662:	5499      	strb	r1, [r3, r2]
 8001664:	e003      	b.n	800166e <Read_disks_connected+0x33a>
	} else {
		disks[22].isConnected = 0;
 8001666:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <Read_disks_connected+0x364>)
 8001668:	2258      	movs	r2, #88	@ 0x58
 800166a:	2100      	movs	r1, #0
 800166c:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN A4
 800166e:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <Read_disks_connected+0x360>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b25b      	sxtb	r3, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	db15      	blt.n	80016a4 <Read_disks_connected+0x370>
	{
		disks[23].isConnected = 1;
 8001678:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <Read_disks_connected+0x364>)
 800167a:	225c      	movs	r2, #92	@ 0x5c
 800167c:	2101      	movs	r1, #1
 800167e:	5499      	strb	r1, [r3, r2]
	} else {
		disks[23].isConnected = 0;
	}
}
 8001680:	e014      	b.n	80016ac <Read_disks_connected+0x378>
 8001682:	46c0      	nop			@ (mov r8, r8)
 8001684:	20000051 	.word	0x20000051
 8001688:	20000038 	.word	0x20000038
 800168c:	20000094 	.word	0x20000094
 8001690:	20000050 	.word	0x20000050
 8001694:	20000290 	.word	0x20000290
 8001698:	20000294 	.word	0x20000294
 800169c:	2000003c 	.word	0x2000003c
 80016a0:	20000040 	.word	0x20000040
		disks[23].isConnected = 0;
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <Read_disks_connected+0x380>)
 80016a6:	225c      	movs	r2, #92	@ 0x5c
 80016a8:	2100      	movs	r1, #0
 80016aa:	5499      	strb	r1, [r3, r2]
}
 80016ac:	46c0      	nop			@ (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	20000294 	.word	0x20000294

080016b8 <Read_Register>:

void Read_Register(uint8_t register_pointer, uint8_t* receive_buffer, uint16_t adr_rep)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af02      	add	r7, sp, #8
 80016be:	6039      	str	r1, [r7, #0]
 80016c0:	0011      	movs	r1, r2
 80016c2:	1dfb      	adds	r3, r7, #7
 80016c4:	1c02      	adds	r2, r0, #0
 80016c6:	701a      	strb	r2, [r3, #0]
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	1c0a      	adds	r2, r1, #0
 80016cc:	801a      	strh	r2, [r3, #0]
	//set pointer to register

	HAL_I2C_Master_Transmit(&hi2c2, (adr_rep << 1), &register_pointer, 1, 10);
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	18db      	adds	r3, r3, r3
 80016d4:	b299      	uxth	r1, r3
 80016d6:	1dfa      	adds	r2, r7, #7
 80016d8:	480a      	ldr	r0, [pc, #40]	@ (8001704 <Read_Register+0x4c>)
 80016da:	230a      	movs	r3, #10
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2301      	movs	r3, #1
 80016e0:	f001 fe04 	bl	80032ec <HAL_I2C_Master_Transmit>
	//receive data to receive_buffer
	HAL_I2C_Master_Receive(&hi2c2, (adr_rep << 1), receive_buffer, 1, 10);
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	18db      	adds	r3, r3, r3
 80016ea:	b299      	uxth	r1, r3
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	4805      	ldr	r0, [pc, #20]	@ (8001704 <Read_Register+0x4c>)
 80016f0:	230a      	movs	r3, #10
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	f001 ff23 	bl	8003540 <HAL_I2C_Master_Receive>

}
 80016fa:	46c0      	nop			@ (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b002      	add	sp, #8
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			@ (mov r8, r8)
 8001704:	20000094 	.word	0x20000094

08001708 <UpdateLEDStates>:

void UpdateLEDStates()
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
	static uint8_t blinkState = 0; // Состояние мигания (0 или 1)
	blinkState = !blinkState;     // �?нвертируем состояние каждые 125 мс (4 Гц)
 800170e:	4b9c      	ldr	r3, [pc, #624]	@ (8001980 <UpdateLEDStates+0x278>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	425a      	negs	r2, r3
 8001714:	4153      	adcs	r3, r2
 8001716:	b2db      	uxtb	r3, r3
 8001718:	001a      	movs	r2, r3
 800171a:	4b99      	ldr	r3, [pc, #612]	@ (8001980 <UpdateLEDStates+0x278>)
 800171c:	701a      	strb	r2, [r3, #0]

	// Очищаем буферы каналов


	// Обновляем состояние светодиодов для каждого диска
	for (int i = 0; i < MAX_DISKS; ++i) {
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	e224      	b.n	8001b6e <UpdateLEDStates+0x466>
		if (disks[i].isConnected) {
 8001724:	4b97      	ldr	r3, [pc, #604]	@ (8001984 <UpdateLEDStates+0x27c>)
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	0092      	lsls	r2, r2, #2
 800172a:	5cd3      	ldrb	r3, [r2, r3]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d100      	bne.n	8001732 <UpdateLEDStates+0x2a>
 8001730:	e21a      	b.n	8001b68 <UpdateLEDStates+0x460>
			// Определяем, какой канал использовать
			uint8_t *channel;
			uint8_t greenBit;
			uint8_t redBit;

			if (i < 8) {
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b07      	cmp	r3, #7
 8001736:	dc4e      	bgt.n	80017d6 <UpdateLEDStates+0xce>
				channel = channel_one;
 8001738:	4b93      	ldr	r3, [pc, #588]	@ (8001988 <UpdateLEDStates+0x280>)
 800173a:	60bb      	str	r3, [r7, #8]
				if (i < 4) {
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b03      	cmp	r3, #3
 8001740:	dc24      	bgt.n	800178c <UpdateLEDStates+0x84>
					// Диски 0-3: первый байт
					greenBit = (i == 0) ? 6 : (i == 1) ? 4 : (i == 2) ? 2 : 1;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00b      	beq.n	8001760 <UpdateLEDStates+0x58>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d006      	beq.n	800175c <UpdateLEDStates+0x54>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d101      	bne.n	8001758 <UpdateLEDStates+0x50>
 8001754:	2302      	movs	r3, #2
 8001756:	e004      	b.n	8001762 <UpdateLEDStates+0x5a>
 8001758:	2301      	movs	r3, #1
 800175a:	e002      	b.n	8001762 <UpdateLEDStates+0x5a>
 800175c:	2304      	movs	r3, #4
 800175e:	e000      	b.n	8001762 <UpdateLEDStates+0x5a>
 8001760:	2306      	movs	r3, #6
 8001762:	1dfa      	adds	r2, r7, #7
 8001764:	7013      	strb	r3, [r2, #0]
					redBit = (i == 0) ? 7 : (i == 1) ? 5 : (i == 2) ? 3 : 0;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00b      	beq.n	8001784 <UpdateLEDStates+0x7c>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d006      	beq.n	8001780 <UpdateLEDStates+0x78>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d101      	bne.n	800177c <UpdateLEDStates+0x74>
 8001778:	2303      	movs	r3, #3
 800177a:	e004      	b.n	8001786 <UpdateLEDStates+0x7e>
 800177c:	2300      	movs	r3, #0
 800177e:	e002      	b.n	8001786 <UpdateLEDStates+0x7e>
 8001780:	2305      	movs	r3, #5
 8001782:	e000      	b.n	8001786 <UpdateLEDStates+0x7e>
 8001784:	2307      	movs	r3, #7
 8001786:	1dba      	adds	r2, r7, #6
 8001788:	7013      	strb	r3, [r2, #0]
 800178a:	e0c4      	b.n	8001916 <UpdateLEDStates+0x20e>
				} else {
					// Диски 4-7: второй байт
					greenBit = (i == 4) ? 7 : (i == 5) ? 4 : (i == 6) ? 3 : 1;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b04      	cmp	r3, #4
 8001790:	d00b      	beq.n	80017aa <UpdateLEDStates+0xa2>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b05      	cmp	r3, #5
 8001796:	d006      	beq.n	80017a6 <UpdateLEDStates+0x9e>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b06      	cmp	r3, #6
 800179c:	d101      	bne.n	80017a2 <UpdateLEDStates+0x9a>
 800179e:	2303      	movs	r3, #3
 80017a0:	e004      	b.n	80017ac <UpdateLEDStates+0xa4>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e002      	b.n	80017ac <UpdateLEDStates+0xa4>
 80017a6:	2304      	movs	r3, #4
 80017a8:	e000      	b.n	80017ac <UpdateLEDStates+0xa4>
 80017aa:	2307      	movs	r3, #7
 80017ac:	1dfa      	adds	r2, r7, #7
 80017ae:	7013      	strb	r3, [r2, #0]
					redBit = (i == 4) ? 6 : (i == 5) ? 5 : (i == 6) ? 2 : 0;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d00b      	beq.n	80017ce <UpdateLEDStates+0xc6>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d006      	beq.n	80017ca <UpdateLEDStates+0xc2>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d101      	bne.n	80017c6 <UpdateLEDStates+0xbe>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e004      	b.n	80017d0 <UpdateLEDStates+0xc8>
 80017c6:	2300      	movs	r3, #0
 80017c8:	e002      	b.n	80017d0 <UpdateLEDStates+0xc8>
 80017ca:	2305      	movs	r3, #5
 80017cc:	e000      	b.n	80017d0 <UpdateLEDStates+0xc8>
 80017ce:	2306      	movs	r3, #6
 80017d0:	1dba      	adds	r2, r7, #6
 80017d2:	7013      	strb	r3, [r2, #0]
 80017d4:	e09f      	b.n	8001916 <UpdateLEDStates+0x20e>
				}
			} else if (i < 16) {
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	dc4e      	bgt.n	800187a <UpdateLEDStates+0x172>
				channel = channel_two;
 80017dc:	4b6b      	ldr	r3, [pc, #428]	@ (800198c <UpdateLEDStates+0x284>)
 80017de:	60bb      	str	r3, [r7, #8]
				if (i < 12) {
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b0b      	cmp	r3, #11
 80017e4:	dc24      	bgt.n	8001830 <UpdateLEDStates+0x128>
					// Диски 8-11: первый байт
					greenBit = (i == 8) ? 6 : (i == 9) ? 5 : (i == 10) ? 2 : 1;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d00b      	beq.n	8001804 <UpdateLEDStates+0xfc>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b09      	cmp	r3, #9
 80017f0:	d006      	beq.n	8001800 <UpdateLEDStates+0xf8>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b0a      	cmp	r3, #10
 80017f6:	d101      	bne.n	80017fc <UpdateLEDStates+0xf4>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e004      	b.n	8001806 <UpdateLEDStates+0xfe>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e002      	b.n	8001806 <UpdateLEDStates+0xfe>
 8001800:	2305      	movs	r3, #5
 8001802:	e000      	b.n	8001806 <UpdateLEDStates+0xfe>
 8001804:	2306      	movs	r3, #6
 8001806:	1dfa      	adds	r2, r7, #7
 8001808:	7013      	strb	r3, [r2, #0]
					redBit = (i == 8) ? 7 : (i == 9) ? 4 : (i == 10) ? 3 : 0;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b08      	cmp	r3, #8
 800180e:	d00b      	beq.n	8001828 <UpdateLEDStates+0x120>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b09      	cmp	r3, #9
 8001814:	d006      	beq.n	8001824 <UpdateLEDStates+0x11c>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b0a      	cmp	r3, #10
 800181a:	d101      	bne.n	8001820 <UpdateLEDStates+0x118>
 800181c:	2303      	movs	r3, #3
 800181e:	e004      	b.n	800182a <UpdateLEDStates+0x122>
 8001820:	2300      	movs	r3, #0
 8001822:	e002      	b.n	800182a <UpdateLEDStates+0x122>
 8001824:	2304      	movs	r3, #4
 8001826:	e000      	b.n	800182a <UpdateLEDStates+0x122>
 8001828:	2307      	movs	r3, #7
 800182a:	1dba      	adds	r2, r7, #6
 800182c:	7013      	strb	r3, [r2, #0]
 800182e:	e072      	b.n	8001916 <UpdateLEDStates+0x20e>
				} else {
					// Диски 12-15: второй байт
					greenBit = (i == 12) ? 6 : (i == 13) ? 4 : (i == 14) ? 2 : 1;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b0c      	cmp	r3, #12
 8001834:	d00b      	beq.n	800184e <UpdateLEDStates+0x146>
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b0d      	cmp	r3, #13
 800183a:	d006      	beq.n	800184a <UpdateLEDStates+0x142>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b0e      	cmp	r3, #14
 8001840:	d101      	bne.n	8001846 <UpdateLEDStates+0x13e>
 8001842:	2302      	movs	r3, #2
 8001844:	e004      	b.n	8001850 <UpdateLEDStates+0x148>
 8001846:	2301      	movs	r3, #1
 8001848:	e002      	b.n	8001850 <UpdateLEDStates+0x148>
 800184a:	2304      	movs	r3, #4
 800184c:	e000      	b.n	8001850 <UpdateLEDStates+0x148>
 800184e:	2306      	movs	r3, #6
 8001850:	1dfa      	adds	r2, r7, #7
 8001852:	7013      	strb	r3, [r2, #0]
					redBit = (i == 12) ? 7 : (i == 13) ? 5 : (i == 14) ? 3 : 0;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b0c      	cmp	r3, #12
 8001858:	d00b      	beq.n	8001872 <UpdateLEDStates+0x16a>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b0d      	cmp	r3, #13
 800185e:	d006      	beq.n	800186e <UpdateLEDStates+0x166>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b0e      	cmp	r3, #14
 8001864:	d101      	bne.n	800186a <UpdateLEDStates+0x162>
 8001866:	2303      	movs	r3, #3
 8001868:	e004      	b.n	8001874 <UpdateLEDStates+0x16c>
 800186a:	2300      	movs	r3, #0
 800186c:	e002      	b.n	8001874 <UpdateLEDStates+0x16c>
 800186e:	2305      	movs	r3, #5
 8001870:	e000      	b.n	8001874 <UpdateLEDStates+0x16c>
 8001872:	2307      	movs	r3, #7
 8001874:	1dba      	adds	r2, r7, #6
 8001876:	7013      	strb	r3, [r2, #0]
 8001878:	e04d      	b.n	8001916 <UpdateLEDStates+0x20e>
				}
			} else {
				channel = channel_three;
 800187a:	4b45      	ldr	r3, [pc, #276]	@ (8001990 <UpdateLEDStates+0x288>)
 800187c:	60bb      	str	r3, [r7, #8]
				if (i < 20) {
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b13      	cmp	r3, #19
 8001882:	dc24      	bgt.n	80018ce <UpdateLEDStates+0x1c6>
					// Диски 16-19: первый байт
					greenBit = (i == 16) ? 7 : (i == 17) ? 5 : (i == 18) ? 3 : 1;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b10      	cmp	r3, #16
 8001888:	d00b      	beq.n	80018a2 <UpdateLEDStates+0x19a>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b11      	cmp	r3, #17
 800188e:	d006      	beq.n	800189e <UpdateLEDStates+0x196>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b12      	cmp	r3, #18
 8001894:	d101      	bne.n	800189a <UpdateLEDStates+0x192>
 8001896:	2303      	movs	r3, #3
 8001898:	e004      	b.n	80018a4 <UpdateLEDStates+0x19c>
 800189a:	2301      	movs	r3, #1
 800189c:	e002      	b.n	80018a4 <UpdateLEDStates+0x19c>
 800189e:	2305      	movs	r3, #5
 80018a0:	e000      	b.n	80018a4 <UpdateLEDStates+0x19c>
 80018a2:	2307      	movs	r3, #7
 80018a4:	1dfa      	adds	r2, r7, #7
 80018a6:	7013      	strb	r3, [r2, #0]
					redBit = (i == 16) ? 6 : (i == 17) ? 4 : (i == 18) ? 2 : 0;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b10      	cmp	r3, #16
 80018ac:	d00b      	beq.n	80018c6 <UpdateLEDStates+0x1be>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b11      	cmp	r3, #17
 80018b2:	d006      	beq.n	80018c2 <UpdateLEDStates+0x1ba>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b12      	cmp	r3, #18
 80018b8:	d101      	bne.n	80018be <UpdateLEDStates+0x1b6>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e004      	b.n	80018c8 <UpdateLEDStates+0x1c0>
 80018be:	2300      	movs	r3, #0
 80018c0:	e002      	b.n	80018c8 <UpdateLEDStates+0x1c0>
 80018c2:	2304      	movs	r3, #4
 80018c4:	e000      	b.n	80018c8 <UpdateLEDStates+0x1c0>
 80018c6:	2306      	movs	r3, #6
 80018c8:	1dba      	adds	r2, r7, #6
 80018ca:	7013      	strb	r3, [r2, #0]
 80018cc:	e023      	b.n	8001916 <UpdateLEDStates+0x20e>
				} else {
					// Диски 20-23: второй байт
					greenBit = (i == 20) ? 6 : (i == 21) ? 4 : (i == 22) ? 2 : 1;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2b14      	cmp	r3, #20
 80018d2:	d00b      	beq.n	80018ec <UpdateLEDStates+0x1e4>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b15      	cmp	r3, #21
 80018d8:	d006      	beq.n	80018e8 <UpdateLEDStates+0x1e0>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b16      	cmp	r3, #22
 80018de:	d101      	bne.n	80018e4 <UpdateLEDStates+0x1dc>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e004      	b.n	80018ee <UpdateLEDStates+0x1e6>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e002      	b.n	80018ee <UpdateLEDStates+0x1e6>
 80018e8:	2304      	movs	r3, #4
 80018ea:	e000      	b.n	80018ee <UpdateLEDStates+0x1e6>
 80018ec:	2306      	movs	r3, #6
 80018ee:	1dfa      	adds	r2, r7, #7
 80018f0:	7013      	strb	r3, [r2, #0]
					redBit = (i == 20) ? 7 : (i == 21) ? 5 : (i == 22) ? 3 : 0;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b14      	cmp	r3, #20
 80018f6:	d00b      	beq.n	8001910 <UpdateLEDStates+0x208>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b15      	cmp	r3, #21
 80018fc:	d006      	beq.n	800190c <UpdateLEDStates+0x204>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2b16      	cmp	r3, #22
 8001902:	d101      	bne.n	8001908 <UpdateLEDStates+0x200>
 8001904:	2303      	movs	r3, #3
 8001906:	e004      	b.n	8001912 <UpdateLEDStates+0x20a>
 8001908:	2300      	movs	r3, #0
 800190a:	e002      	b.n	8001912 <UpdateLEDStates+0x20a>
 800190c:	2305      	movs	r3, #5
 800190e:	e000      	b.n	8001912 <UpdateLEDStates+0x20a>
 8001910:	2307      	movs	r3, #7
 8001912:	1dba      	adds	r2, r7, #6
 8001914:	7013      	strb	r3, [r2, #0]
				}
			}
			uint8_t byteIndex = (i < 4 || (i >= 8 && i < 12) || (i >= 16 && i < 20)) ? 2 : 1;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b03      	cmp	r3, #3
 800191a:	dd0b      	ble.n	8001934 <UpdateLEDStates+0x22c>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b07      	cmp	r3, #7
 8001920:	dd02      	ble.n	8001928 <UpdateLEDStates+0x220>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2b0b      	cmp	r3, #11
 8001926:	dd05      	ble.n	8001934 <UpdateLEDStates+0x22c>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b0f      	cmp	r3, #15
 800192c:	dd04      	ble.n	8001938 <UpdateLEDStates+0x230>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b13      	cmp	r3, #19
 8001932:	dc01      	bgt.n	8001938 <UpdateLEDStates+0x230>
 8001934:	2202      	movs	r2, #2
 8001936:	e000      	b.n	800193a <UpdateLEDStates+0x232>
 8001938:	2201      	movs	r2, #1
 800193a:	1d7b      	adds	r3, r7, #5
 800193c:	701a      	strb	r2, [r3, #0]
			// Управление светодиодами
			if (disks[i].error) {
 800193e:	4a11      	ldr	r2, [pc, #68]	@ (8001984 <UpdateLEDStates+0x27c>)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	18d3      	adds	r3, r2, r3
 8001946:	3302      	adds	r3, #2
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d022      	beq.n	8001994 <UpdateLEDStates+0x28c>
				// Ошибка: красный светодиод горит постоянно
				channel[byteIndex] &= ~(1 << (redBit % 8)); // Включаем красный светодиод
 800194e:	1d7b      	adds	r3, r7, #5
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	18d3      	adds	r3, r2, r3
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b25b      	sxtb	r3, r3
 800195a:	1dba      	adds	r2, r7, #6
 800195c:	7812      	ldrb	r2, [r2, #0]
 800195e:	2107      	movs	r1, #7
 8001960:	400a      	ands	r2, r1
 8001962:	2101      	movs	r1, #1
 8001964:	4091      	lsls	r1, r2
 8001966:	000a      	movs	r2, r1
 8001968:	b252      	sxtb	r2, r2
 800196a:	43d2      	mvns	r2, r2
 800196c:	b252      	sxtb	r2, r2
 800196e:	4013      	ands	r3, r2
 8001970:	b259      	sxtb	r1, r3
 8001972:	1d7b      	adds	r3, r7, #5
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	18d3      	adds	r3, r2, r3
 800197a:	b2ca      	uxtb	r2, r1
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	e0f3      	b.n	8001b68 <UpdateLEDStates+0x460>
 8001980:	200003cc 	.word	0x200003cc
 8001984:	20000294 	.word	0x20000294
 8001988:	20000058 	.word	0x20000058
 800198c:	2000005c 	.word	0x2000005c
 8001990:	20000060 	.word	0x20000060
			} else if (disks[i].locate) {
 8001994:	4a7b      	ldr	r2, [pc, #492]	@ (8001b84 <UpdateLEDStates+0x47c>)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	18d3      	adds	r3, r2, r3
 800199c:	3303      	adds	r3, #3
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d061      	beq.n	8001a68 <UpdateLEDStates+0x360>
				// Локация: зеленый и красный светодиоды мигают
				if (blinkState) {
 80019a4:	4b78      	ldr	r3, [pc, #480]	@ (8001b88 <UpdateLEDStates+0x480>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d030      	beq.n	8001a0e <UpdateLEDStates+0x306>
					channel[byteIndex] &= ~(1 << (greenBit % 8)); // Включаем зеленый светодиод
 80019ac:	1d7b      	adds	r3, r7, #5
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	18d3      	adds	r3, r2, r3
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b25b      	sxtb	r3, r3
 80019b8:	1dfa      	adds	r2, r7, #7
 80019ba:	7812      	ldrb	r2, [r2, #0]
 80019bc:	2107      	movs	r1, #7
 80019be:	400a      	ands	r2, r1
 80019c0:	2101      	movs	r1, #1
 80019c2:	4091      	lsls	r1, r2
 80019c4:	000a      	movs	r2, r1
 80019c6:	b252      	sxtb	r2, r2
 80019c8:	43d2      	mvns	r2, r2
 80019ca:	b252      	sxtb	r2, r2
 80019cc:	4013      	ands	r3, r2
 80019ce:	b259      	sxtb	r1, r3
 80019d0:	1d7b      	adds	r3, r7, #5
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	18d3      	adds	r3, r2, r3
 80019d8:	b2ca      	uxtb	r2, r1
 80019da:	701a      	strb	r2, [r3, #0]
					channel[byteIndex] &= ~(1 << (redBit % 8)); // Включаем красный светодиод
 80019dc:	1d7b      	adds	r3, r7, #5
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	18d3      	adds	r3, r2, r3
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	1dba      	adds	r2, r7, #6
 80019ea:	7812      	ldrb	r2, [r2, #0]
 80019ec:	2107      	movs	r1, #7
 80019ee:	400a      	ands	r2, r1
 80019f0:	2101      	movs	r1, #1
 80019f2:	4091      	lsls	r1, r2
 80019f4:	000a      	movs	r2, r1
 80019f6:	b252      	sxtb	r2, r2
 80019f8:	43d2      	mvns	r2, r2
 80019fa:	b252      	sxtb	r2, r2
 80019fc:	4013      	ands	r3, r2
 80019fe:	b259      	sxtb	r1, r3
 8001a00:	1d7b      	adds	r3, r7, #5
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	18d3      	adds	r3, r2, r3
 8001a08:	b2ca      	uxtb	r2, r1
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e0ac      	b.n	8001b68 <UpdateLEDStates+0x460>
				} else {
					channel[byteIndex] |= (1 << (greenBit % 8));  // Выключаем зеленый светодиод
 8001a0e:	1d7b      	adds	r3, r7, #5
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	18d3      	adds	r3, r2, r3
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b25a      	sxtb	r2, r3
 8001a1a:	1dfb      	adds	r3, r7, #7
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2107      	movs	r1, #7
 8001a20:	400b      	ands	r3, r1
 8001a22:	2101      	movs	r1, #1
 8001a24:	4099      	lsls	r1, r3
 8001a26:	000b      	movs	r3, r1
 8001a28:	b25b      	sxtb	r3, r3
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	b259      	sxtb	r1, r3
 8001a2e:	1d7b      	adds	r3, r7, #5
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	18d3      	adds	r3, r2, r3
 8001a36:	b2ca      	uxtb	r2, r1
 8001a38:	701a      	strb	r2, [r3, #0]
					channel[byteIndex] |= (1 << (redBit % 8));  // Выключаем красный светодиод
 8001a3a:	1d7b      	adds	r3, r7, #5
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	18d3      	adds	r3, r2, r3
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b25a      	sxtb	r2, r3
 8001a46:	1dbb      	adds	r3, r7, #6
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2107      	movs	r1, #7
 8001a4c:	400b      	ands	r3, r1
 8001a4e:	2101      	movs	r1, #1
 8001a50:	4099      	lsls	r1, r3
 8001a52:	000b      	movs	r3, r1
 8001a54:	b25b      	sxtb	r3, r3
 8001a56:	4313      	orrs	r3, r2
 8001a58:	b259      	sxtb	r1, r3
 8001a5a:	1d7b      	adds	r3, r7, #5
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	18d3      	adds	r3, r2, r3
 8001a62:	b2ca      	uxtb	r2, r1
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	e07f      	b.n	8001b68 <UpdateLEDStates+0x460>
				}
			} else if (disks[i].activity) {
 8001a68:	4a46      	ldr	r2, [pc, #280]	@ (8001b84 <UpdateLEDStates+0x47c>)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	18d3      	adds	r3, r2, r3
 8001a70:	3301      	adds	r3, #1
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d033      	beq.n	8001ae0 <UpdateLEDStates+0x3d8>
				// Активность: зеленый светодиод мигает
				if (blinkState) {
 8001a78:	4b43      	ldr	r3, [pc, #268]	@ (8001b88 <UpdateLEDStates+0x480>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d018      	beq.n	8001ab2 <UpdateLEDStates+0x3aa>
					channel[byteIndex] &= ~(1 << (greenBit % 8)); // Включаем зеленый светодиод
 8001a80:	1d7b      	adds	r3, r7, #5
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	18d3      	adds	r3, r2, r3
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	1dfa      	adds	r2, r7, #7
 8001a8e:	7812      	ldrb	r2, [r2, #0]
 8001a90:	2107      	movs	r1, #7
 8001a92:	400a      	ands	r2, r1
 8001a94:	2101      	movs	r1, #1
 8001a96:	4091      	lsls	r1, r2
 8001a98:	000a      	movs	r2, r1
 8001a9a:	b252      	sxtb	r2, r2
 8001a9c:	43d2      	mvns	r2, r2
 8001a9e:	b252      	sxtb	r2, r2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	b259      	sxtb	r1, r3
 8001aa4:	1d7b      	adds	r3, r7, #5
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	18d3      	adds	r3, r2, r3
 8001aac:	b2ca      	uxtb	r2, r1
 8001aae:	701a      	strb	r2, [r3, #0]
 8001ab0:	e05a      	b.n	8001b68 <UpdateLEDStates+0x460>
				} else {
					channel[byteIndex] |= (1 << (greenBit % 8));  // Выключаем зеленый светодиод
 8001ab2:	1d7b      	adds	r3, r7, #5
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	18d3      	adds	r3, r2, r3
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b25a      	sxtb	r2, r3
 8001abe:	1dfb      	adds	r3, r7, #7
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2107      	movs	r1, #7
 8001ac4:	400b      	ands	r3, r1
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	4099      	lsls	r1, r3
 8001aca:	000b      	movs	r3, r1
 8001acc:	b25b      	sxtb	r3, r3
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	b259      	sxtb	r1, r3
 8001ad2:	1d7b      	adds	r3, r7, #5
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	18d3      	adds	r3, r2, r3
 8001ada:	b2ca      	uxtb	r2, r1
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	e043      	b.n	8001b68 <UpdateLEDStates+0x460>
				}
			} else if (disks[i].error == 0 && disks[i].locate == 0 && disks[i].activity == 0)
 8001ae0:	4a28      	ldr	r2, [pc, #160]	@ (8001b84 <UpdateLEDStates+0x47c>)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	18d3      	adds	r3, r2, r3
 8001ae8:	3302      	adds	r3, #2
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d13b      	bne.n	8001b68 <UpdateLEDStates+0x460>
 8001af0:	4a24      	ldr	r2, [pc, #144]	@ (8001b84 <UpdateLEDStates+0x47c>)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	18d3      	adds	r3, r2, r3
 8001af8:	3303      	adds	r3, #3
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d133      	bne.n	8001b68 <UpdateLEDStates+0x460>
 8001b00:	4a20      	ldr	r2, [pc, #128]	@ (8001b84 <UpdateLEDStates+0x47c>)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	18d3      	adds	r3, r2, r3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d12b      	bne.n	8001b68 <UpdateLEDStates+0x460>
			{
				channel[byteIndex] |= (1 << (greenBit % 8));  // Выключаем зеленый светодиод
 8001b10:	1d7b      	adds	r3, r7, #5
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	68ba      	ldr	r2, [r7, #8]
 8001b16:	18d3      	adds	r3, r2, r3
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b25a      	sxtb	r2, r3
 8001b1c:	1dfb      	adds	r3, r7, #7
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2107      	movs	r1, #7
 8001b22:	400b      	ands	r3, r1
 8001b24:	2101      	movs	r1, #1
 8001b26:	4099      	lsls	r1, r3
 8001b28:	000b      	movs	r3, r1
 8001b2a:	b25b      	sxtb	r3, r3
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	b259      	sxtb	r1, r3
 8001b30:	1d7b      	adds	r3, r7, #5
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	18d3      	adds	r3, r2, r3
 8001b38:	b2ca      	uxtb	r2, r1
 8001b3a:	701a      	strb	r2, [r3, #0]
				channel[byteIndex] |= (1 << (redBit % 8));  // Выключаем красный светодиод
 8001b3c:	1d7b      	adds	r3, r7, #5
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	18d3      	adds	r3, r2, r3
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b25a      	sxtb	r2, r3
 8001b48:	1dbb      	adds	r3, r7, #6
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2107      	movs	r1, #7
 8001b4e:	400b      	ands	r3, r1
 8001b50:	2101      	movs	r1, #1
 8001b52:	4099      	lsls	r1, r3
 8001b54:	000b      	movs	r3, r1
 8001b56:	b25b      	sxtb	r3, r3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	b259      	sxtb	r1, r3
 8001b5c:	1d7b      	adds	r3, r7, #5
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	18d3      	adds	r3, r2, r3
 8001b64:	b2ca      	uxtb	r2, r1
 8001b66:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_DISKS; ++i) {
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b17      	cmp	r3, #23
 8001b72:	dc00      	bgt.n	8001b76 <UpdateLEDStates+0x46e>
 8001b74:	e5d6      	b.n	8001724 <UpdateLEDStates+0x1c>
			}
		}
	}

	// Обновляем светодиоды на расширителе
	Set_Led();
 8001b76:	f7ff fa87 	bl	8001088 <Set_Led>
}
 8001b7a:	46c0      	nop			@ (mov r8, r8)
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b004      	add	sp, #16
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			@ (mov r8, r8)
 8001b84:	20000294 	.word	0x20000294
 8001b88:	200003cc 	.word	0x200003cc

08001b8c <InitializeDiskPins>:

void InitializeDiskPins()

{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	// Диск 0
	diskPins[0].activPort = F_DRIVE1_ACTIVITY_GPIO_Port;
 8001b90:	4b5c      	ldr	r3, [pc, #368]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001b92:	4a5d      	ldr	r2, [pc, #372]	@ (8001d08 <InitializeDiskPins+0x17c>)
 8001b94:	601a      	str	r2, [r3, #0]
	diskPins[0].activPin = F_DRIVE1_ACTIVITY_Pin;
 8001b96:	4b5b      	ldr	r3, [pc, #364]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001b98:	2240      	movs	r2, #64	@ 0x40
 8001b9a:	809a      	strh	r2, [r3, #4]
	// Диск 1
	diskPins[1].activPort = F_DRIVE2_ACTIVITY_GPIO_Port;
 8001b9c:	4b59      	ldr	r3, [pc, #356]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001b9e:	4a5a      	ldr	r2, [pc, #360]	@ (8001d08 <InitializeDiskPins+0x17c>)
 8001ba0:	609a      	str	r2, [r3, #8]
	diskPins[1].activPin = F_DRIVE2_ACTIVITY_Pin;
 8001ba2:	4b58      	ldr	r3, [pc, #352]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	819a      	strh	r2, [r3, #12]
	// Диск 2
	diskPins[2].activPort = F_DRIVE3_ACTIVITY_GPIO_Port;
 8001ba8:	4b56      	ldr	r3, [pc, #344]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001baa:	4a57      	ldr	r2, [pc, #348]	@ (8001d08 <InitializeDiskPins+0x17c>)
 8001bac:	611a      	str	r2, [r3, #16]
	diskPins[2].activPin = F_DRIVE3_ACTIVITY_Pin;
 8001bae:	4b55      	ldr	r3, [pc, #340]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	829a      	strh	r2, [r3, #20]
	// �? так далее для остальных дисков...
	diskPins[3].activPort = F_DRIVE4_ACTIVITY_GPIO_Port;
 8001bb4:	4b53      	ldr	r3, [pc, #332]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001bb6:	4a54      	ldr	r2, [pc, #336]	@ (8001d08 <InitializeDiskPins+0x17c>)
 8001bb8:	619a      	str	r2, [r3, #24]
	diskPins[3].activPin = F_DRIVE4_ACTIVITY_Pin;
 8001bba:	4b52      	ldr	r3, [pc, #328]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001bbc:	2208      	movs	r2, #8
 8001bbe:	839a      	strh	r2, [r3, #28]
	diskPins[4].activPort = E_DRIVE1_ACTIVITY_GPIO_Port;
 8001bc0:	4b50      	ldr	r3, [pc, #320]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001bc2:	4a52      	ldr	r2, [pc, #328]	@ (8001d0c <InitializeDiskPins+0x180>)
 8001bc4:	621a      	str	r2, [r3, #32]
	diskPins[4].activPin = E_DRIVE1_ACTIVITY_Pin;
 8001bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001bc8:	2280      	movs	r2, #128	@ 0x80
 8001bca:	00d2      	lsls	r2, r2, #3
 8001bcc:	849a      	strh	r2, [r3, #36]	@ 0x24
	diskPins[5].activPort = E_DRIVE2_ACTIVITY_GPIO_Port;
 8001bce:	4b4d      	ldr	r3, [pc, #308]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001bd0:	4a4d      	ldr	r2, [pc, #308]	@ (8001d08 <InitializeDiskPins+0x17c>)
 8001bd2:	629a      	str	r2, [r3, #40]	@ 0x28
	diskPins[5].activPin = E_DRIVE2_ACTIVITY_Pin;
 8001bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001bd6:	2280      	movs	r2, #128	@ 0x80
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	859a      	strh	r2, [r3, #44]	@ 0x2c
	diskPins[6].activPort = E_DRIVE3_ACTIVITY_GPIO_Port;
 8001bdc:	4b49      	ldr	r3, [pc, #292]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001bde:	4a4a      	ldr	r2, [pc, #296]	@ (8001d08 <InitializeDiskPins+0x17c>)
 8001be0:	631a      	str	r2, [r3, #48]	@ 0x30
	diskPins[6].activPin = E_DRIVE3_ACTIVITY_Pin;
 8001be2:	4b48      	ldr	r3, [pc, #288]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001be4:	2280      	movs	r2, #128	@ 0x80
 8001be6:	0052      	lsls	r2, r2, #1
 8001be8:	869a      	strh	r2, [r3, #52]	@ 0x34
	diskPins[7].activPort = E_DRIVE4_ACTIVITY_GPIO_Port;
 8001bea:	4b46      	ldr	r3, [pc, #280]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001bec:	4a46      	ldr	r2, [pc, #280]	@ (8001d08 <InitializeDiskPins+0x17c>)
 8001bee:	639a      	str	r2, [r3, #56]	@ 0x38
	diskPins[7].activPin = E_DRIVE4_ACTIVITY_Pin;
 8001bf0:	4b44      	ldr	r3, [pc, #272]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001bf2:	2280      	movs	r2, #128	@ 0x80
 8001bf4:	879a      	strh	r2, [r3, #60]	@ 0x3c
	diskPins[8].activPort = D_DRIVE1_ACTIVITY_GPIO_Port;
 8001bf6:	4b43      	ldr	r3, [pc, #268]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001bf8:	22a0      	movs	r2, #160	@ 0xa0
 8001bfa:	05d2      	lsls	r2, r2, #23
 8001bfc:	641a      	str	r2, [r3, #64]	@ 0x40
	diskPins[8].activPin = D_DRIVE1_ACTIVITY_Pin;
 8001bfe:	4b41      	ldr	r3, [pc, #260]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c00:	2244      	movs	r2, #68	@ 0x44
 8001c02:	2180      	movs	r1, #128	@ 0x80
 8001c04:	00c9      	lsls	r1, r1, #3
 8001c06:	5299      	strh	r1, [r3, r2]
	diskPins[9].activPort = D_DRIVE2_ACTIVITY_GPIO_Port;
 8001c08:	4b3e      	ldr	r3, [pc, #248]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c0a:	22a0      	movs	r2, #160	@ 0xa0
 8001c0c:	05d2      	lsls	r2, r2, #23
 8001c0e:	649a      	str	r2, [r3, #72]	@ 0x48
	diskPins[9].activPin = D_DRIVE2_ACTIVITY_Pin;
 8001c10:	4b3c      	ldr	r3, [pc, #240]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c12:	224c      	movs	r2, #76	@ 0x4c
 8001c14:	2180      	movs	r1, #128	@ 0x80
 8001c16:	0109      	lsls	r1, r1, #4
 8001c18:	5299      	strh	r1, [r3, r2]
	diskPins[10].activPort = D_DRIVE3_ACTIVITY_GPIO_Port;
 8001c1a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c1c:	22a0      	movs	r2, #160	@ 0xa0
 8001c1e:	05d2      	lsls	r2, r2, #23
 8001c20:	651a      	str	r2, [r3, #80]	@ 0x50
	diskPins[10].activPin = D_DRIVE3_ACTIVITY_Pin;
 8001c22:	4b38      	ldr	r3, [pc, #224]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c24:	2254      	movs	r2, #84	@ 0x54
 8001c26:	2180      	movs	r1, #128	@ 0x80
 8001c28:	0149      	lsls	r1, r1, #5
 8001c2a:	5299      	strh	r1, [r3, r2]
	diskPins[11].activPort = D_DRIVE4_ACTIVITY_GPIO_Port;
 8001c2c:	4b35      	ldr	r3, [pc, #212]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c2e:	4a37      	ldr	r2, [pc, #220]	@ (8001d0c <InitializeDiskPins+0x180>)
 8001c30:	659a      	str	r2, [r3, #88]	@ 0x58
	diskPins[11].activPin = D_DRIVE4_ACTIVITY_Pin;
 8001c32:	4b34      	ldr	r3, [pc, #208]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c34:	225c      	movs	r2, #92	@ 0x5c
 8001c36:	4936      	ldr	r1, [pc, #216]	@ (8001d10 <InitializeDiskPins+0x184>)
 8001c38:	5299      	strh	r1, [r3, r2]
	diskPins[12].activPort = C_DRIVE1_ACTIVITY_GPIO_Port;
 8001c3a:	4b32      	ldr	r3, [pc, #200]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c3c:	4a33      	ldr	r2, [pc, #204]	@ (8001d0c <InitializeDiskPins+0x180>)
 8001c3e:	661a      	str	r2, [r3, #96]	@ 0x60
	diskPins[12].activPin = C_DRIVE1_ACTIVITY_Pin;
 8001c40:	4b30      	ldr	r3, [pc, #192]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c42:	2264      	movs	r2, #100	@ 0x64
 8001c44:	2140      	movs	r1, #64	@ 0x40
 8001c46:	5299      	strh	r1, [r3, r2]
	diskPins[13].activPort = C_DRIVE2_ACTIVITY_GPIO_Port;
 8001c48:	4b2e      	ldr	r3, [pc, #184]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c4a:	4a30      	ldr	r2, [pc, #192]	@ (8001d0c <InitializeDiskPins+0x180>)
 8001c4c:	669a      	str	r2, [r3, #104]	@ 0x68
	diskPins[13].activPin = C_DRIVE2_ACTIVITY_Pin;
 8001c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c50:	226c      	movs	r2, #108	@ 0x6c
 8001c52:	2180      	movs	r1, #128	@ 0x80
 8001c54:	5299      	strh	r1, [r3, r2]
	diskPins[14].activPort = C_DRIVE3_ACTIVITY_GPIO_Port;
 8001c56:	4b2b      	ldr	r3, [pc, #172]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c58:	4a2e      	ldr	r2, [pc, #184]	@ (8001d14 <InitializeDiskPins+0x188>)
 8001c5a:	671a      	str	r2, [r3, #112]	@ 0x70
	diskPins[14].activPin = C_DRIVE3_ACTIVITY_Pin;
 8001c5c:	4b29      	ldr	r3, [pc, #164]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c5e:	2274      	movs	r2, #116	@ 0x74
 8001c60:	2180      	movs	r1, #128	@ 0x80
 8001c62:	0049      	lsls	r1, r1, #1
 8001c64:	5299      	strh	r1, [r3, r2]
	diskPins[15].activPort = C_DRIVE4_ACTIVITY_GPIO_Port;
 8001c66:	4b27      	ldr	r3, [pc, #156]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c68:	4a2a      	ldr	r2, [pc, #168]	@ (8001d14 <InitializeDiskPins+0x188>)
 8001c6a:	679a      	str	r2, [r3, #120]	@ 0x78
	diskPins[15].activPin = C_DRIVE4_ACTIVITY_Pin;
 8001c6c:	4b25      	ldr	r3, [pc, #148]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c6e:	227c      	movs	r2, #124	@ 0x7c
 8001c70:	2180      	movs	r1, #128	@ 0x80
 8001c72:	0089      	lsls	r1, r1, #2
 8001c74:	5299      	strh	r1, [r3, r2]
	diskPins[16].activPort = B_DRIVE1_ACTIVITY_GPIO_Port;
 8001c76:	4b23      	ldr	r3, [pc, #140]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c78:	2180      	movs	r1, #128	@ 0x80
 8001c7a:	22a0      	movs	r2, #160	@ 0xa0
 8001c7c:	05d2      	lsls	r2, r2, #23
 8001c7e:	505a      	str	r2, [r3, r1]
	diskPins[16].activPin = B_DRIVE1_ACTIVITY_Pin;
 8001c80:	4b20      	ldr	r3, [pc, #128]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c82:	2284      	movs	r2, #132	@ 0x84
 8001c84:	2180      	movs	r1, #128	@ 0x80
 8001c86:	0089      	lsls	r1, r1, #2
 8001c88:	5299      	strh	r1, [r3, r2]
	diskPins[17].activPort = B_DRIVE2_ACTIVITY_GPIO_Port;
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c8c:	2288      	movs	r2, #136	@ 0x88
 8001c8e:	491f      	ldr	r1, [pc, #124]	@ (8001d0c <InitializeDiskPins+0x180>)
 8001c90:	5099      	str	r1, [r3, r2]
	diskPins[17].activPin = B_DRIVE2_ACTIVITY_Pin;
 8001c92:	4b1c      	ldr	r3, [pc, #112]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c94:	228c      	movs	r2, #140	@ 0x8c
 8001c96:	2108      	movs	r1, #8
 8001c98:	5299      	strh	r1, [r3, r2]
	diskPins[18].activPort = B_DRIVE3_ACTIVITY_GPIO_Port;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001c9c:	2290      	movs	r2, #144	@ 0x90
 8001c9e:	491b      	ldr	r1, [pc, #108]	@ (8001d0c <InitializeDiskPins+0x180>)
 8001ca0:	5099      	str	r1, [r3, r2]
	diskPins[18].activPin = B_DRIVE3_ACTIVITY_Pin;
 8001ca2:	4b18      	ldr	r3, [pc, #96]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001ca4:	2294      	movs	r2, #148	@ 0x94
 8001ca6:	2104      	movs	r1, #4
 8001ca8:	5299      	strh	r1, [r3, r2]
	diskPins[19].activPort = B_DRIVE4_ACTIVITY_GPIO_Port;
 8001caa:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001cac:	2298      	movs	r2, #152	@ 0x98
 8001cae:	4917      	ldr	r1, [pc, #92]	@ (8001d0c <InitializeDiskPins+0x180>)
 8001cb0:	5099      	str	r1, [r3, r2]
	diskPins[19].activPin = B_DRIVE4_ACTIVITY_Pin;
 8001cb2:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001cb4:	229c      	movs	r2, #156	@ 0x9c
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	5299      	strh	r1, [r3, r2]
	diskPins[20].activPort = A_DRIVE1_ACTIVITY_GPIO_Port;
 8001cba:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001cbc:	22a0      	movs	r2, #160	@ 0xa0
 8001cbe:	4912      	ldr	r1, [pc, #72]	@ (8001d08 <InitializeDiskPins+0x17c>)
 8001cc0:	5099      	str	r1, [r3, r2]
	diskPins[20].activPin = A_DRIVE1_ACTIVITY_Pin;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001cc4:	22a4      	movs	r2, #164	@ 0xa4
 8001cc6:	2180      	movs	r1, #128	@ 0x80
 8001cc8:	0189      	lsls	r1, r1, #6
 8001cca:	5299      	strh	r1, [r3, r2]
	diskPins[21].activPort = A_DRIVE2_ACTIVITY_GPIO_Port;
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001cce:	22a8      	movs	r2, #168	@ 0xa8
 8001cd0:	490d      	ldr	r1, [pc, #52]	@ (8001d08 <InitializeDiskPins+0x17c>)
 8001cd2:	5099      	str	r1, [r3, r2]
	diskPins[21].activPin = A_DRIVE2_ACTIVITY_Pin;
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001cd6:	22ac      	movs	r2, #172	@ 0xac
 8001cd8:	2180      	movs	r1, #128	@ 0x80
 8001cda:	01c9      	lsls	r1, r1, #7
 8001cdc:	5299      	strh	r1, [r3, r2]
	diskPins[22].activPort = A_DRIVE3_ACTIVITY_GPIO_Port;
 8001cde:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001ce0:	22b0      	movs	r2, #176	@ 0xb0
 8001ce2:	4909      	ldr	r1, [pc, #36]	@ (8001d08 <InitializeDiskPins+0x17c>)
 8001ce4:	5099      	str	r1, [r3, r2]
	diskPins[22].activPin = A_DRIVE3_ACTIVITY_Pin;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001ce8:	22b4      	movs	r2, #180	@ 0xb4
 8001cea:	4909      	ldr	r1, [pc, #36]	@ (8001d10 <InitializeDiskPins+0x184>)
 8001cec:	5299      	strh	r1, [r3, r2]
	diskPins[23].activPort = A_DRIVE3_ACTIVITY_GPIO_Port;
 8001cee:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001cf0:	22b8      	movs	r2, #184	@ 0xb8
 8001cf2:	4905      	ldr	r1, [pc, #20]	@ (8001d08 <InitializeDiskPins+0x17c>)
 8001cf4:	5099      	str	r1, [r3, r2]
	diskPins[23].activPin = A_DRIVE3_ACTIVITY_Pin;
 8001cf6:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <InitializeDiskPins+0x178>)
 8001cf8:	22bc      	movs	r2, #188	@ 0xbc
 8001cfa:	4905      	ldr	r1, [pc, #20]	@ (8001d10 <InitializeDiskPins+0x184>)
 8001cfc:	5299      	strh	r1, [r3, r2]

}
 8001cfe:	46c0      	nop			@ (mov r8, r8)
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	200002f4 	.word	0x200002f4
 8001d08:	50000400 	.word	0x50000400
 8001d0c:	50000800 	.word	0x50000800
 8001d10:	ffff8000 	.word	0xffff8000
 8001d14:	50000c00 	.word	0x50000c00

08001d18 <PowerOnAdapter>:
	}
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET); // Выключить светодиод после мигания
}

void PowerOnAdapter(uint8_t adapter_number)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	0002      	movs	r2, r0
 8001d20:	1dfb      	adds	r3, r7, #7
 8001d22:	701a      	strb	r2, [r3, #0]
	uint8_t i2c_buffer[1]; // Буфер для передачи данных по I2C

	if (adapter_number == 1 && adapter1_state != 1) {
 8001d24:	1dfb      	adds	r3, r7, #7
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d16a      	bne.n	8001e02 <PowerOnAdapter+0xea>
 8001d2c:	4b6e      	ldr	r3, [pc, #440]	@ (8001ee8 <PowerOnAdapter+0x1d0>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d066      	beq.n	8001e02 <PowerOnAdapter+0xea>
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 8001d34:	4b6d      	ldr	r3, [pc, #436]	@ (8001eec <PowerOnAdapter+0x1d4>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	2110      	movs	r1, #16
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f001 f9e9 	bl	8003112 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MB1_STATUS_LED_GPIO_Port, MB1_STATUS_LED_Pin, SET);
 8001d40:	23a0      	movs	r3, #160	@ 0xa0
 8001d42:	05db      	lsls	r3, r3, #23
 8001d44:	2201      	movs	r2, #1
 8001d46:	2110      	movs	r1, #16
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f001 f9e2 	bl	8003112 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001d4e:	2064      	movs	r0, #100	@ 0x64
 8001d50:	f000 fd5a 	bl	8002808 <HAL_Delay>
		ResetBus();
 8001d54:	f7ff f91e 	bl	8000f94 <ResetBus>
		if(BP_ON == 0) Led_Init();
 8001d58:	4b65      	ldr	r3, [pc, #404]	@ (8001ef0 <PowerOnAdapter+0x1d8>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <PowerOnAdapter+0x4c>
 8001d60:	f7ff fa6c 	bl	800123c <Led_Init>
		HAL_Delay(300);
 8001d64:	2396      	movs	r3, #150	@ 0x96
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f000 fd4d 	bl	8002808 <HAL_Delay>
		// Подготовка команды для передачи по I2C
		i2c_buffer[0] = PWR_ON; // Используем значение из enum
 8001d6e:	240c      	movs	r4, #12
 8001d70:	193b      	adds	r3, r7, r4
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 8001d76:	23fa      	movs	r3, #250	@ 0xfa
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f000 fd44 	bl	8002808 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_2, 1, HAL_MAX_DELAY);
 8001d80:	4b5c      	ldr	r3, [pc, #368]	@ (8001ef4 <PowerOnAdapter+0x1dc>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	18db      	adds	r3, r3, r3
 8001d86:	b299      	uxth	r1, r3
 8001d88:	4a5b      	ldr	r2, [pc, #364]	@ (8001ef8 <PowerOnAdapter+0x1e0>)
 8001d8a:	485c      	ldr	r0, [pc, #368]	@ (8001efc <PowerOnAdapter+0x1e4>)
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	425b      	negs	r3, r3
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2301      	movs	r3, #1
 8001d94:	f001 faaa 	bl	80032ec <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 8001d98:	2032      	movs	r0, #50	@ 0x32
 8001d9a:	f000 fd35 	bl	8002808 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (0x25 << 1), i2c_buffer, 1, HAL_MAX_DELAY); // Передаём буфер
 8001d9e:	193a      	adds	r2, r7, r4
 8001da0:	4856      	ldr	r0, [pc, #344]	@ (8001efc <PowerOnAdapter+0x1e4>)
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2301      	movs	r3, #1
 8001daa:	214a      	movs	r1, #74	@ 0x4a
 8001dac:	f001 fa9e 	bl	80032ec <HAL_I2C_Master_Transmit>
		Set_devslp();
 8001db0:	f7ff f80a 	bl	8000dc8 <Set_devslp>
		HAL_TIM_Base_Start_IT(&htim2);
 8001db4:	4b52      	ldr	r3, [pc, #328]	@ (8001f00 <PowerOnAdapter+0x1e8>)
 8001db6:	0018      	movs	r0, r3
 8001db8:	f003 fea0 	bl	8005afc <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001dbc:	4b51      	ldr	r3, [pc, #324]	@ (8001f04 <PowerOnAdapter+0x1ec>)
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f003 fe9c 	bl	8005afc <HAL_TIM_Base_Start_IT>
		Counter_sgpio_timeout = 0;
 8001dc4:	4b50      	ldr	r3, [pc, #320]	@ (8001f08 <PowerOnAdapter+0x1f0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
		StartBlinking(&led1, 2, 10000); // Мигание 2 Гц, 10 сек
 8001dca:	4a50      	ldr	r2, [pc, #320]	@ (8001f0c <PowerOnAdapter+0x1f4>)
 8001dcc:	4b50      	ldr	r3, [pc, #320]	@ (8001f10 <PowerOnAdapter+0x1f8>)
 8001dce:	2102      	movs	r1, #2
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7fe faf1 	bl	80003b8 <StartBlinking>
		while (adapter1_state != 1){
 8001dd6:	e00f      	b.n	8001df8 <PowerOnAdapter+0xe0>
			if(HAL_GPIO_ReadPin(MB1_BITCH_GPIO_Port, MB1_BITCH_Pin)!= 1){ adapter1_state = 1;
 8001dd8:	23a0      	movs	r3, #160	@ 0xa0
 8001dda:	05db      	lsls	r3, r3, #23
 8001ddc:	2108      	movs	r1, #8
 8001dde:	0018      	movs	r0, r3
 8001de0:	f001 f97a 	bl	80030d8 <HAL_GPIO_ReadPin>
 8001de4:	0003      	movs	r3, r0
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d003      	beq.n	8001df2 <PowerOnAdapter+0xda>
 8001dea:	4b3f      	ldr	r3, [pc, #252]	@ (8001ee8 <PowerOnAdapter+0x1d0>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	e002      	b.n	8001df8 <PowerOnAdapter+0xe0>
			}else adapter1_state = 0;
 8001df2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee8 <PowerOnAdapter+0x1d0>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
		while (adapter1_state != 1){
 8001df8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee8 <PowerOnAdapter+0x1d0>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d1eb      	bne.n	8001dd8 <PowerOnAdapter+0xc0>
	if (adapter_number == 1 && adapter1_state != 1) {
 8001e00:	e06b      	b.n	8001eda <PowerOnAdapter+0x1c2>

		}
	} else if (adapter_number == 2 && adapter2_state != 1 ) {
 8001e02:	1dfb      	adds	r3, r7, #7
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d167      	bne.n	8001eda <PowerOnAdapter+0x1c2>
 8001e0a:	4b42      	ldr	r3, [pc, #264]	@ (8001f14 <PowerOnAdapter+0x1fc>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d063      	beq.n	8001eda <PowerOnAdapter+0x1c2>
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 8001e12:	4b36      	ldr	r3, [pc, #216]	@ (8001eec <PowerOnAdapter+0x1d4>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	2110      	movs	r1, #16
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f001 f97a 	bl	8003112 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(MB2_STATUS_LED_GPIO_Port, MB2_STATUS_LED_Pin, SET);
 8001e1e:	23a0      	movs	r3, #160	@ 0xa0
 8001e20:	05db      	lsls	r3, r3, #23
 8001e22:	2201      	movs	r2, #1
 8001e24:	2140      	movs	r1, #64	@ 0x40
 8001e26:	0018      	movs	r0, r3
 8001e28:	f001 f973 	bl	8003112 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001e2c:	2064      	movs	r0, #100	@ 0x64
 8001e2e:	f000 fceb 	bl	8002808 <HAL_Delay>
		ResetBus();
 8001e32:	f7ff f8af 	bl	8000f94 <ResetBus>
		if(BP_ON == 0) Led_Init();
 8001e36:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef0 <PowerOnAdapter+0x1d8>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <PowerOnAdapter+0x12a>
 8001e3e:	f7ff f9fd 	bl	800123c <Led_Init>
		HAL_Delay(300);
 8001e42:	2396      	movs	r3, #150	@ 0x96
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	0018      	movs	r0, r3
 8001e48:	f000 fcde 	bl	8002808 <HAL_Delay>
		// Подготовка команды для передачи по I2C
		i2c_buffer[0] = PWR_ON; // Используем значение из enum
 8001e4c:	240c      	movs	r4, #12
 8001e4e:	193b      	adds	r3, r7, r4
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 8001e54:	2032      	movs	r0, #50	@ 0x32
 8001e56:	f000 fcd7 	bl	8002808 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_3, 1, HAL_MAX_DELAY);
 8001e5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ef4 <PowerOnAdapter+0x1dc>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	18db      	adds	r3, r3, r3
 8001e60:	b299      	uxth	r1, r3
 8001e62:	4a2d      	ldr	r2, [pc, #180]	@ (8001f18 <PowerOnAdapter+0x200>)
 8001e64:	4825      	ldr	r0, [pc, #148]	@ (8001efc <PowerOnAdapter+0x1e4>)
 8001e66:	2301      	movs	r3, #1
 8001e68:	425b      	negs	r3, r3
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f001 fa3d 	bl	80032ec <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 8001e72:	2032      	movs	r0, #50	@ 0x32
 8001e74:	f000 fcc8 	bl	8002808 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (0x25 << 1), i2c_buffer, 1, HAL_MAX_DELAY); // Передаём буфер
 8001e78:	193a      	adds	r2, r7, r4
 8001e7a:	4820      	ldr	r0, [pc, #128]	@ (8001efc <PowerOnAdapter+0x1e4>)
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	425b      	negs	r3, r3
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2301      	movs	r3, #1
 8001e84:	214a      	movs	r1, #74	@ 0x4a
 8001e86:	f001 fa31 	bl	80032ec <HAL_I2C_Master_Transmit>
		Set_devslp();
 8001e8a:	f7fe ff9d 	bl	8000dc8 <Set_devslp>
		HAL_TIM_Base_Start_IT(&htim2);
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f00 <PowerOnAdapter+0x1e8>)
 8001e90:	0018      	movs	r0, r3
 8001e92:	f003 fe33 	bl	8005afc <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001e96:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <PowerOnAdapter+0x1ec>)
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f003 fe2f 	bl	8005afc <HAL_TIM_Base_Start_IT>
		Counter_sgpio_timeout = 0;
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <PowerOnAdapter+0x1f0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
		StartBlinking(&led2, 2, 10000); // Мигание 2 Гц, 10 сек
 8001ea4:	4a19      	ldr	r2, [pc, #100]	@ (8001f0c <PowerOnAdapter+0x1f4>)
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <PowerOnAdapter+0x204>)
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f7fe fa84 	bl	80003b8 <StartBlinking>
		while (adapter2_state != 1){
 8001eb0:	e00f      	b.n	8001ed2 <PowerOnAdapter+0x1ba>

			if(HAL_GPIO_ReadPin(MB2_BITCH_GPIO_Port, MB2_BITCH_Pin)!= 1) {
 8001eb2:	23a0      	movs	r3, #160	@ 0xa0
 8001eb4:	05db      	lsls	r3, r3, #23
 8001eb6:	2120      	movs	r1, #32
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f001 f90d 	bl	80030d8 <HAL_GPIO_ReadPin>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d003      	beq.n	8001ecc <PowerOnAdapter+0x1b4>
				adapter2_state = 1;
 8001ec4:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <PowerOnAdapter+0x1fc>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	e002      	b.n	8001ed2 <PowerOnAdapter+0x1ba>
			} else adapter2_state = 0;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <PowerOnAdapter+0x1fc>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
		while (adapter2_state != 1){
 8001ed2:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <PowerOnAdapter+0x1fc>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d1eb      	bne.n	8001eb2 <PowerOnAdapter+0x19a>

		}

	}
	UpdateCPU_PSON(); // Обновляем состояние CPU_PSON
 8001eda:	f000 f8a7 	bl	800202c <UpdateCPU_PSON>
}
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b005      	add	sp, #20
 8001ee4:	bd90      	pop	{r4, r7, pc}
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	200003b4 	.word	0x200003b4
 8001eec:	50000800 	.word	0x50000800
 8001ef0:	200003b6 	.word	0x200003b6
 8001ef4:	20000052 	.word	0x20000052
 8001ef8:	20000040 	.word	0x20000040
 8001efc:	20000094 	.word	0x20000094
 8001f00:	200001ec 	.word	0x200001ec
 8001f04:	20000238 	.word	0x20000238
 8001f08:	200003b8 	.word	0x200003b8
 8001f0c:	00002710 	.word	0x00002710
 8001f10:	20000000 	.word	0x20000000
 8001f14:	200003b5 	.word	0x200003b5
 8001f18:	20000044 	.word	0x20000044
 8001f1c:	20000018 	.word	0x20000018

08001f20 <PowerOffAdapter>:

void PowerOffAdapter(uint8_t adapter_number)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	0002      	movs	r2, r0
 8001f28:	1dfb      	adds	r3, r7, #7
 8001f2a:	701a      	strb	r2, [r3, #0]
	uint8_t i2c_buffer[1]; // Буфер для передачи данных по I2C

	if (adapter_number == 1 && adapter1_state == 1) {
 8001f2c:	1dfb      	adds	r3, r7, #7
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d132      	bne.n	8001f9a <PowerOffAdapter+0x7a>
 8001f34:	4b37      	ldr	r3, [pc, #220]	@ (8002014 <PowerOffAdapter+0xf4>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d12e      	bne.n	8001f9a <PowerOffAdapter+0x7a>
		// Подготовка команды для передачи по I2C
		i2c_buffer[0] = PWR_OFF; // Используем значение из enum
 8001f3c:	240c      	movs	r4, #12
 8001f3e:	193b      	adds	r3, r7, r4
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_2, 1, HAL_MAX_DELAY);
 8001f44:	4b34      	ldr	r3, [pc, #208]	@ (8002018 <PowerOffAdapter+0xf8>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	18db      	adds	r3, r3, r3
 8001f4a:	b299      	uxth	r1, r3
 8001f4c:	4a33      	ldr	r2, [pc, #204]	@ (800201c <PowerOffAdapter+0xfc>)
 8001f4e:	4834      	ldr	r0, [pc, #208]	@ (8002020 <PowerOffAdapter+0x100>)
 8001f50:	2301      	movs	r3, #1
 8001f52:	425b      	negs	r3, r3
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2301      	movs	r3, #1
 8001f58:	f001 f9c8 	bl	80032ec <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&hi2c2, (0x25 << 1), i2c_buffer, 1, HAL_MAX_DELAY); // Передаём буфер
 8001f5c:	193a      	adds	r2, r7, r4
 8001f5e:	4830      	ldr	r0, [pc, #192]	@ (8002020 <PowerOffAdapter+0x100>)
 8001f60:	2301      	movs	r3, #1
 8001f62:	425b      	negs	r3, r3
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	2301      	movs	r3, #1
 8001f68:	214a      	movs	r1, #74	@ 0x4a
 8001f6a:	f001 f9bf 	bl	80032ec <HAL_I2C_Master_Transmit>
		while (adapter1_state != 0){
 8001f6e:	e00f      	b.n	8001f90 <PowerOffAdapter+0x70>
			if(HAL_GPIO_ReadPin(MB1_BITCH_GPIO_Port, MB1_BITCH_Pin)!= 1) {
 8001f70:	23a0      	movs	r3, #160	@ 0xa0
 8001f72:	05db      	lsls	r3, r3, #23
 8001f74:	2108      	movs	r1, #8
 8001f76:	0018      	movs	r0, r3
 8001f78:	f001 f8ae 	bl	80030d8 <HAL_GPIO_ReadPin>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d003      	beq.n	8001f8a <PowerOffAdapter+0x6a>
				adapter1_state = 1;
 8001f82:	4b24      	ldr	r3, [pc, #144]	@ (8002014 <PowerOffAdapter+0xf4>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	e002      	b.n	8001f90 <PowerOffAdapter+0x70>
			} else adapter1_state = 0;
 8001f8a:	4b22      	ldr	r3, [pc, #136]	@ (8002014 <PowerOffAdapter+0xf4>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
		while (adapter1_state != 0){
 8001f90:	4b20      	ldr	r3, [pc, #128]	@ (8002014 <PowerOffAdapter+0xf4>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1eb      	bne.n	8001f70 <PowerOffAdapter+0x50>
	if (adapter_number == 1 && adapter1_state == 1) {
 8001f98:	e035      	b.n	8002006 <PowerOffAdapter+0xe6>
		}


	} else if (adapter_number == 2 && adapter2_state == 1) {
 8001f9a:	1dfb      	adds	r3, r7, #7
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d131      	bne.n	8002006 <PowerOffAdapter+0xe6>
 8001fa2:	4b20      	ldr	r3, [pc, #128]	@ (8002024 <PowerOffAdapter+0x104>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d12d      	bne.n	8002006 <PowerOffAdapter+0xe6>
		// Подготовка команды для передачи по I2C
		i2c_buffer[0] = PWR_OFF; // Используем значение из enum
 8001faa:	240c      	movs	r4, #12
 8001fac:	193b      	adds	r3, r7, r4
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_3, 1, HAL_MAX_DELAY);
 8001fb2:	4b19      	ldr	r3, [pc, #100]	@ (8002018 <PowerOffAdapter+0xf8>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	18db      	adds	r3, r3, r3
 8001fb8:	b299      	uxth	r1, r3
 8001fba:	4a1b      	ldr	r2, [pc, #108]	@ (8002028 <PowerOffAdapter+0x108>)
 8001fbc:	4818      	ldr	r0, [pc, #96]	@ (8002020 <PowerOffAdapter+0x100>)
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	425b      	negs	r3, r3
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f001 f991 	bl	80032ec <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&hi2c2, (0x25 << 1), i2c_buffer, 1, HAL_MAX_DELAY); // Передаём буфер
 8001fca:	193a      	adds	r2, r7, r4
 8001fcc:	4814      	ldr	r0, [pc, #80]	@ (8002020 <PowerOffAdapter+0x100>)
 8001fce:	2301      	movs	r3, #1
 8001fd0:	425b      	negs	r3, r3
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	214a      	movs	r1, #74	@ 0x4a
 8001fd8:	f001 f988 	bl	80032ec <HAL_I2C_Master_Transmit>
		while (adapter2_state != 0){
 8001fdc:	e00f      	b.n	8001ffe <PowerOffAdapter+0xde>
			if(HAL_GPIO_ReadPin(MB2_BITCH_GPIO_Port, MB2_BITCH_Pin)!= 1) {
 8001fde:	23a0      	movs	r3, #160	@ 0xa0
 8001fe0:	05db      	lsls	r3, r3, #23
 8001fe2:	2120      	movs	r1, #32
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f001 f877 	bl	80030d8 <HAL_GPIO_ReadPin>
 8001fea:	0003      	movs	r3, r0
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d003      	beq.n	8001ff8 <PowerOffAdapter+0xd8>
				adapter2_state = 1;
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <PowerOffAdapter+0x104>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	e002      	b.n	8001ffe <PowerOffAdapter+0xde>
			} else adapter2_state = 0;
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <PowerOffAdapter+0x104>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
		while (adapter2_state != 0){
 8001ffe:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <PowerOffAdapter+0x104>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1eb      	bne.n	8001fde <PowerOffAdapter+0xbe>
		}

	}
	UpdateCPU_PSON(); // Обновляем состояние CPU_PSON
 8002006:	f000 f811 	bl	800202c <UpdateCPU_PSON>
}
 800200a:	46c0      	nop			@ (mov r8, r8)
 800200c:	46bd      	mov	sp, r7
 800200e:	b005      	add	sp, #20
 8002010:	bd90      	pop	{r4, r7, pc}
 8002012:	46c0      	nop			@ (mov r8, r8)
 8002014:	200003b4 	.word	0x200003b4
 8002018:	20000052 	.word	0x20000052
 800201c:	20000040 	.word	0x20000040
 8002020:	20000094 	.word	0x20000094
 8002024:	200003b5 	.word	0x200003b5
 8002028:	20000044 	.word	0x20000044

0800202c <UpdateCPU_PSON>:

void UpdateCPU_PSON()
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
	if (adapter1_state == 1 || adapter2_state == 1) {
 8002030:	4b0f      	ldr	r3, [pc, #60]	@ (8002070 <UpdateCPU_PSON+0x44>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d003      	beq.n	8002040 <UpdateCPU_PSON+0x14>
 8002038:	4b0e      	ldr	r3, [pc, #56]	@ (8002074 <UpdateCPU_PSON+0x48>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d109      	bne.n	8002054 <UpdateCPU_PSON+0x28>
		// Если хотя бы один адаптер включен, выставляем CPU_PSON в 1
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 8002040:	4b0d      	ldr	r3, [pc, #52]	@ (8002078 <UpdateCPU_PSON+0x4c>)
 8002042:	2201      	movs	r2, #1
 8002044:	2110      	movs	r1, #16
 8002046:	0018      	movs	r0, r3
 8002048:	f001 f863 	bl	8003112 <HAL_GPIO_WritePin>
		BP_ON = 1;
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <UpdateCPU_PSON+0x50>)
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
 8002052:	e009      	b.n	8002068 <UpdateCPU_PSON+0x3c>
	} else {
		// Если оба адаптера выключены, выставляем CPU_PSON в 0
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, RESET);
 8002054:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <UpdateCPU_PSON+0x4c>)
 8002056:	2200      	movs	r2, #0
 8002058:	2110      	movs	r1, #16
 800205a:	0018      	movs	r0, r3
 800205c:	f001 f859 	bl	8003112 <HAL_GPIO_WritePin>
		BP_ON = 0;
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <UpdateCPU_PSON+0x50>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
	}
}
 8002066:	46c0      	nop			@ (mov r8, r8)
 8002068:	46c0      	nop			@ (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			@ (mov r8, r8)
 8002070:	200003b4 	.word	0x200003b4
 8002074:	200003b5 	.word	0x200003b5
 8002078:	50000800 	.word	0x50000800
 800207c:	200003b6 	.word	0x200003b6

08002080 <RebootAdapter>:

void RebootAdapter(uint8_t adapter_number, uint8_t is_hard_reboot)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	0002      	movs	r2, r0
 8002088:	1dfb      	adds	r3, r7, #7
 800208a:	701a      	strb	r2, [r3, #0]
 800208c:	1dbb      	adds	r3, r7, #6
 800208e:	1c0a      	adds	r2, r1, #0
 8002090:	701a      	strb	r2, [r3, #0]

	PowerOffAdapter(adapter_number);
 8002092:	1dfb      	adds	r3, r7, #7
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	0018      	movs	r0, r3
 8002098:	f7ff ff42 	bl	8001f20 <PowerOffAdapter>
	if (adapter_number == 1)StartBlinking(&led1, 4, 5000);
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d106      	bne.n	80020b2 <RebootAdapter+0x32>
 80020a4:	4a10      	ldr	r2, [pc, #64]	@ (80020e8 <RebootAdapter+0x68>)
 80020a6:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <RebootAdapter+0x6c>)
 80020a8:	2104      	movs	r1, #4
 80020aa:	0018      	movs	r0, r3
 80020ac:	f7fe f984 	bl	80003b8 <StartBlinking>
 80020b0:	e005      	b.n	80020be <RebootAdapter+0x3e>
	else StartBlinking(&led2, 4, 5000);// Мигание 4 Гц, 5 сек
 80020b2:	4a0d      	ldr	r2, [pc, #52]	@ (80020e8 <RebootAdapter+0x68>)
 80020b4:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <RebootAdapter+0x70>)
 80020b6:	2104      	movs	r1, #4
 80020b8:	0018      	movs	r0, r3
 80020ba:	f7fe f97d 	bl	80003b8 <StartBlinking>
	HAL_Delay(is_hard_reboot ? 1000 : 500); // Задержка для hard/soft reboot
 80020be:	1dbb      	adds	r3, r7, #6
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <RebootAdapter+0x4c>
 80020c6:	23fa      	movs	r3, #250	@ 0xfa
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	e001      	b.n	80020d0 <RebootAdapter+0x50>
 80020cc:	23fa      	movs	r3, #250	@ 0xfa
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	0018      	movs	r0, r3
 80020d2:	f000 fb99 	bl	8002808 <HAL_Delay>
	PowerOnAdapter(adapter_number);
 80020d6:	1dfb      	adds	r3, r7, #7
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	0018      	movs	r0, r3
 80020dc:	f7ff fe1c 	bl	8001d18 <PowerOnAdapter>
}
 80020e0:	46c0      	nop			@ (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b002      	add	sp, #8
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	00001388 	.word	0x00001388
 80020ec:	20000000 	.word	0x20000000
 80020f0:	20000018 	.word	0x20000018

080020f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) // 8 раз в секунду
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a28      	ldr	r2, [pc, #160]	@ (80021a4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d114      	bne.n	8002130 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		UpdateLEDStates();
 8002106:	f7ff faff 	bl	8001708 <UpdateLEDStates>
		MB1_attach = HAL_GPIO_ReadPin(MB1_ATTACH_GPIO_Port, MB1_ATTACH_Pin);
 800210a:	4b27      	ldr	r3, [pc, #156]	@ (80021a8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800210c:	2101      	movs	r1, #1
 800210e:	0018      	movs	r0, r3
 8002110:	f000 ffe2 	bl	80030d8 <HAL_GPIO_ReadPin>
 8002114:	0003      	movs	r3, r0
 8002116:	001a      	movs	r2, r3
 8002118:	4b24      	ldr	r3, [pc, #144]	@ (80021ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800211a:	701a      	strb	r2, [r3, #0]
		MB2_attach = HAL_GPIO_ReadPin(MB2_ATTACH_GPIO_Port, MB2_ATTACH_Pin);
 800211c:	4b24      	ldr	r3, [pc, #144]	@ (80021b0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800211e:	2120      	movs	r1, #32
 8002120:	0018      	movs	r0, r3
 8002122:	f000 ffd9 	bl	80030d8 <HAL_GPIO_ReadPin>
 8002126:	0003      	movs	r3, r0
 8002128:	001a      	movs	r2, r3
 800212a:	4b22      	ldr	r3, [pc, #136]	@ (80021b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800212c:	701a      	strb	r2, [r3, #0]


					}
				}
			}
}
 800212e:	e034      	b.n	800219a <HAL_TIM_PeriodElapsedCallback+0xa6>
		if (htim->Instance == TIM2) // 4 раза в секунду
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	05db      	lsls	r3, r3, #23
 8002138:	429a      	cmp	r2, r3
 800213a:	d10a      	bne.n	8002152 <HAL_TIM_PeriodElapsedCallback+0x5e>
			Read_Disk_Status(0x24, disk_status, 6);
 800213c:	4b1e      	ldr	r3, [pc, #120]	@ (80021b8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800213e:	2206      	movs	r2, #6
 8002140:	0019      	movs	r1, r3
 8002142:	2024      	movs	r0, #36	@ 0x24
 8002144:	f7fe fa04 	bl	8000550 <Read_Disk_Status>
			Decode_Disk_Status(disk_status);
 8002148:	4b1b      	ldr	r3, [pc, #108]	@ (80021b8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800214a:	0018      	movs	r0, r3
 800214c:	f7fe fa32 	bl	80005b4 <Decode_Disk_Status>
}
 8002150:	e023      	b.n	800219a <HAL_TIM_PeriodElapsedCallback+0xa6>
			if (htim->Instance == TIM3) // 1 раз в секунду
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a19      	ldr	r2, [pc, #100]	@ (80021bc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d11e      	bne.n	800219a <HAL_TIM_PeriodElapsedCallback+0xa6>
				Read_disks_connected();
 800215c:	f7ff f8ea 	bl	8001334 <Read_disks_connected>
				if(sgpio_started == 0 && (adapter1_state == 1 || adapter2_state == 1))
 8002160:	4b17      	ldr	r3, [pc, #92]	@ (80021c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d118      	bne.n	800219a <HAL_TIM_PeriodElapsedCallback+0xa6>
 8002168:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d003      	beq.n	8002178 <HAL_TIM_PeriodElapsedCallback+0x84>
 8002170:	4b15      	ldr	r3, [pc, #84]	@ (80021c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d110      	bne.n	800219a <HAL_TIM_PeriodElapsedCallback+0xa6>
					++Counter_sgpio_timeout;
 8002178:	4b14      	ldr	r3, [pc, #80]	@ (80021cc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	b2da      	uxtb	r2, r3
 8002180:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002182:	701a      	strb	r2, [r3, #0]
					if (Counter_sgpio_timeout > 250 && sgpio_started == 0)
 8002184:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2bfa      	cmp	r3, #250	@ 0xfa
 800218a:	d906      	bls.n	800219a <HAL_TIM_PeriodElapsedCallback+0xa6>
 800218c:	4b0c      	ldr	r3, [pc, #48]	@ (80021c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <HAL_TIM_PeriodElapsedCallback+0xa6>
						sgpio_timeout = 1;
 8002194:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
}
 800219a:	46c0      	nop			@ (mov r8, r8)
 800219c:	46bd      	mov	sp, r7
 800219e:	b002      	add	sp, #8
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	46c0      	nop			@ (mov r8, r8)
 80021a4:	40012c00 	.word	0x40012c00
 80021a8:	50000400 	.word	0x50000400
 80021ac:	20000063 	.word	0x20000063
 80021b0:	50000c00 	.word	0x50000c00
 80021b4:	20000064 	.word	0x20000064
 80021b8:	20000288 	.word	0x20000288
 80021bc:	40000400 	.word	0x40000400
 80021c0:	200003b7 	.word	0x200003b7
 80021c4:	200003b4 	.word	0x200003b4
 80021c8:	200003b5 	.word	0x200003b5
 80021cc:	200003b8 	.word	0x200003b8
 80021d0:	200003b9 	.word	0x200003b9

080021d4 <HAL_GPIO_EXTI_Rising_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	0002      	movs	r2, r0
 80021dc:	1dbb      	adds	r3, r7, #6
 80021de:	801a      	strh	r2, [r3, #0]
	uint32_t current_time = HAL_GetTick();
 80021e0:	f000 fb08 	bl	80027f4 <HAL_GetTick>
 80021e4:	0003      	movs	r3, r0
 80021e6:	60fb      	str	r3, [r7, #12]

	if (GPIO_Pin == FP_MB1_PWR_SW_Pin && button1_state == BUTTON_STATE_PRESSED)
 80021e8:	1dbb      	adds	r3, r7, #6
 80021ea:	881a      	ldrh	r2, [r3, #0]
 80021ec:	2380      	movs	r3, #128	@ 0x80
 80021ee:	021b      	lsls	r3, r3, #8
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d117      	bne.n	8002224 <HAL_GPIO_EXTI_Rising_Callback+0x50>
 80021f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002268 <HAL_GPIO_EXTI_Rising_Callback+0x94>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d113      	bne.n	8002224 <HAL_GPIO_EXTI_Rising_Callback+0x50>
	{
		if (current_time - button1_debounce_time >= DEBOUNCE_DELAY)
 80021fc:	4b1b      	ldr	r3, [pc, #108]	@ (800226c <HAL_GPIO_EXTI_Rising_Callback+0x98>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b4a      	cmp	r3, #74	@ 0x4a
 8002206:	d90d      	bls.n	8002224 <HAL_GPIO_EXTI_Rising_Callback+0x50>
		{
			button1_state = BUTTON_STATE_RELEASED;
 8002208:	4b17      	ldr	r3, [pc, #92]	@ (8002268 <HAL_GPIO_EXTI_Rising_Callback+0x94>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
			HandleButtonAction(1, current_time - button1_press_time);
 800220e:	4b18      	ldr	r3, [pc, #96]	@ (8002270 <HAL_GPIO_EXTI_Rising_Callback+0x9c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	0019      	movs	r1, r3
 8002218:	2001      	movs	r0, #1
 800221a:	f7fe f8eb 	bl	80003f4 <HandleButtonAction>
			button1_press_time = 0;
 800221e:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <HAL_GPIO_EXTI_Rising_Callback+0x9c>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == FP_MB2_PWR_SW_Pin && button2_state == BUTTON_STATE_PRESSED)
 8002224:	1dbb      	adds	r3, r7, #6
 8002226:	881a      	ldrh	r2, [r3, #0]
 8002228:	2380      	movs	r3, #128	@ 0x80
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	429a      	cmp	r2, r3
 800222e:	d117      	bne.n	8002260 <HAL_GPIO_EXTI_Rising_Callback+0x8c>
 8002230:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d113      	bne.n	8002260 <HAL_GPIO_EXTI_Rising_Callback+0x8c>
	{
		if (current_time - button2_debounce_time >= DEBOUNCE_DELAY)
 8002238:	4b0f      	ldr	r3, [pc, #60]	@ (8002278 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b4a      	cmp	r3, #74	@ 0x4a
 8002242:	d90d      	bls.n	8002260 <HAL_GPIO_EXTI_Rising_Callback+0x8c>
		{
			button2_state = BUTTON_STATE_RELEASED;
 8002244:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
			HandleButtonAction(2, current_time - button2_press_time);
 800224a:	4b0c      	ldr	r3, [pc, #48]	@ (800227c <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	0019      	movs	r1, r3
 8002254:	2002      	movs	r0, #2
 8002256:	f7fe f8cd 	bl	80003f4 <HandleButtonAction>
			button2_press_time = 0;
 800225a:	4b08      	ldr	r3, [pc, #32]	@ (800227c <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002260:	46c0      	nop			@ (mov r8, r8)
 8002262:	46bd      	mov	sp, r7
 8002264:	b004      	add	sp, #16
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000090 	.word	0x20000090
 800226c:	200003c4 	.word	0x200003c4
 8002270:	200003bc 	.word	0x200003bc
 8002274:	20000091 	.word	0x20000091
 8002278:	200003c8 	.word	0x200003c8
 800227c:	200003c0 	.word	0x200003c0

08002280 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	0002      	movs	r2, r0
 8002288:	1dbb      	adds	r3, r7, #6
 800228a:	801a      	strh	r2, [r3, #0]
	uint32_t current_time = HAL_GetTick();
 800228c:	f000 fab2 	bl	80027f4 <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	60fb      	str	r3, [r7, #12]

	if (GPIO_Pin == FP_MB1_PWR_SW_Pin && button1_state == BUTTON_STATE_RELEASED)
 8002294:	1dbb      	adds	r3, r7, #6
 8002296:	881a      	ldrh	r2, [r3, #0]
 8002298:	2380      	movs	r3, #128	@ 0x80
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	429a      	cmp	r2, r3
 800229e:	d112      	bne.n	80022c6 <HAL_GPIO_EXTI_Falling_Callback+0x46>
 80022a0:	4b17      	ldr	r3, [pc, #92]	@ (8002300 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10e      	bne.n	80022c6 <HAL_GPIO_EXTI_Falling_Callback+0x46>
	{
		if (current_time - button1_debounce_time >= DEBOUNCE_DELAY)
 80022a8:	4b16      	ldr	r3, [pc, #88]	@ (8002304 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b4a      	cmp	r3, #74	@ 0x4a
 80022b2:	d908      	bls.n	80022c6 <HAL_GPIO_EXTI_Falling_Callback+0x46>
		{
			button1_state = BUTTON_STATE_PRESSED;
 80022b4:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
			button1_press_time = current_time;
 80022ba:	4b13      	ldr	r3, [pc, #76]	@ (8002308 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	601a      	str	r2, [r3, #0]
			button1_debounce_time = current_time;
 80022c0:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	601a      	str	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == FP_MB2_PWR_SW_Pin && button2_state == BUTTON_STATE_RELEASED)
 80022c6:	1dbb      	adds	r3, r7, #6
 80022c8:	881a      	ldrh	r2, [r3, #0]
 80022ca:	2380      	movs	r3, #128	@ 0x80
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d112      	bne.n	80022f8 <HAL_GPIO_EXTI_Falling_Callback+0x78>
 80022d2:	4b0e      	ldr	r3, [pc, #56]	@ (800230c <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10e      	bne.n	80022f8 <HAL_GPIO_EXTI_Falling_Callback+0x78>
	{
		if (current_time - button2_debounce_time >= DEBOUNCE_DELAY)
 80022da:	4b0d      	ldr	r3, [pc, #52]	@ (8002310 <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b4a      	cmp	r3, #74	@ 0x4a
 80022e4:	d908      	bls.n	80022f8 <HAL_GPIO_EXTI_Falling_Callback+0x78>
		{
			button2_state = BUTTON_STATE_PRESSED;
 80022e6:	4b09      	ldr	r3, [pc, #36]	@ (800230c <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
			button2_press_time = current_time;
 80022ec:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	601a      	str	r2, [r3, #0]
			button2_debounce_time = current_time;
 80022f2:	4b07      	ldr	r3, [pc, #28]	@ (8002310 <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80022f8:	46c0      	nop			@ (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b004      	add	sp, #16
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000090 	.word	0x20000090
 8002304:	200003c4 	.word	0x200003c4
 8002308:	200003bc 	.word	0x200003bc
 800230c:	20000091 	.word	0x20000091
 8002310:	200003c8 	.word	0x200003c8
 8002314:	200003c0 	.word	0x200003c0

08002318 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800231c:	b672      	cpsid	i
}
 800231e:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	flag_error = 1;
 8002320:	4b02      	ldr	r3, [pc, #8]	@ (800232c <Error_Handler+0x14>)
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
	while (1)
 8002326:	46c0      	nop			@ (mov r8, r8)
 8002328:	e7fd      	b.n	8002326 <Error_Handler+0xe>
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	20000284 	.word	0x20000284

08002330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002336:	4b13      	ldr	r3, [pc, #76]	@ (8002384 <HAL_MspInit+0x54>)
 8002338:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800233a:	4b12      	ldr	r3, [pc, #72]	@ (8002384 <HAL_MspInit+0x54>)
 800233c:	2101      	movs	r1, #1
 800233e:	430a      	orrs	r2, r1
 8002340:	641a      	str	r2, [r3, #64]	@ 0x40
 8002342:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <HAL_MspInit+0x54>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	2201      	movs	r2, #1
 8002348:	4013      	ands	r3, r2
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <HAL_MspInit+0x54>)
 8002350:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002352:	4b0c      	ldr	r3, [pc, #48]	@ (8002384 <HAL_MspInit+0x54>)
 8002354:	2180      	movs	r1, #128	@ 0x80
 8002356:	0549      	lsls	r1, r1, #21
 8002358:	430a      	orrs	r2, r1
 800235a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800235c:	4b09      	ldr	r3, [pc, #36]	@ (8002384 <HAL_MspInit+0x54>)
 800235e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002360:	2380      	movs	r3, #128	@ 0x80
 8002362:	055b      	lsls	r3, r3, #21
 8002364:	4013      	ands	r3, r2
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	2004      	movs	r0, #4
 8002370:	f000 fb1a 	bl	80029a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002374:	2004      	movs	r0, #4
 8002376:	f000 fb2c 	bl	80029d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800237a:	46c0      	nop			@ (mov r8, r8)
 800237c:	46bd      	mov	sp, r7
 800237e:	b002      	add	sp, #8
 8002380:	bd80      	pop	{r7, pc}
 8002382:	46c0      	nop			@ (mov r8, r8)
 8002384:	40021000 	.word	0x40021000

08002388 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b08b      	sub	sp, #44	@ 0x2c
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	2414      	movs	r4, #20
 8002392:	193b      	adds	r3, r7, r4
 8002394:	0018      	movs	r0, r3
 8002396:	2314      	movs	r3, #20
 8002398:	001a      	movs	r2, r3
 800239a:	2100      	movs	r1, #0
 800239c:	f003 ffb8 	bl	8006310 <memset>
  if(hi2c->Instance==I2C2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a45      	ldr	r2, [pc, #276]	@ (80024bc <HAL_I2C_MspInit+0x134>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d000      	beq.n	80023ac <HAL_I2C_MspInit+0x24>
 80023aa:	e082      	b.n	80024b2 <HAL_I2C_MspInit+0x12a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ac:	4b44      	ldr	r3, [pc, #272]	@ (80024c0 <HAL_I2C_MspInit+0x138>)
 80023ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023b0:	4b43      	ldr	r3, [pc, #268]	@ (80024c0 <HAL_I2C_MspInit+0x138>)
 80023b2:	2102      	movs	r1, #2
 80023b4:	430a      	orrs	r2, r1
 80023b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80023b8:	4b41      	ldr	r3, [pc, #260]	@ (80024c0 <HAL_I2C_MspInit+0x138>)
 80023ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023bc:	2202      	movs	r2, #2
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = TEMP_I2C1_SCL_Pin|TEMP_I2C1_SDA_Pin;
 80023c4:	193b      	adds	r3, r7, r4
 80023c6:	22c0      	movs	r2, #192	@ 0xc0
 80023c8:	0112      	lsls	r2, r2, #4
 80023ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023cc:	0021      	movs	r1, r4
 80023ce:	187b      	adds	r3, r7, r1
 80023d0:	2212      	movs	r2, #18
 80023d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	187b      	adds	r3, r7, r1
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	187b      	adds	r3, r7, r1
 80023dc:	2200      	movs	r2, #0
 80023de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80023e0:	187b      	adds	r3, r7, r1
 80023e2:	2206      	movs	r2, #6
 80023e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e6:	187b      	adds	r3, r7, r1
 80023e8:	4a36      	ldr	r2, [pc, #216]	@ (80024c4 <HAL_I2C_MspInit+0x13c>)
 80023ea:	0019      	movs	r1, r3
 80023ec:	0010      	movs	r0, r2
 80023ee:	f000 fd0f 	bl	8002e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023f2:	4b33      	ldr	r3, [pc, #204]	@ (80024c0 <HAL_I2C_MspInit+0x138>)
 80023f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023f6:	4b32      	ldr	r3, [pc, #200]	@ (80024c0 <HAL_I2C_MspInit+0x138>)
 80023f8:	2180      	movs	r1, #128	@ 0x80
 80023fa:	03c9      	lsls	r1, r1, #15
 80023fc:	430a      	orrs	r2, r1
 80023fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002400:	4b2f      	ldr	r3, [pc, #188]	@ (80024c0 <HAL_I2C_MspInit+0x138>)
 8002402:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002404:	2380      	movs	r3, #128	@ 0x80
 8002406:	03db      	lsls	r3, r3, #15
 8002408:	4013      	ands	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel1;
 800240e:	4b2e      	ldr	r3, [pc, #184]	@ (80024c8 <HAL_I2C_MspInit+0x140>)
 8002410:	4a2e      	ldr	r2, [pc, #184]	@ (80024cc <HAL_I2C_MspInit+0x144>)
 8002412:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8002414:	4b2c      	ldr	r3, [pc, #176]	@ (80024c8 <HAL_I2C_MspInit+0x140>)
 8002416:	220c      	movs	r2, #12
 8002418:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800241a:	4b2b      	ldr	r3, [pc, #172]	@ (80024c8 <HAL_I2C_MspInit+0x140>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002420:	4b29      	ldr	r3, [pc, #164]	@ (80024c8 <HAL_I2C_MspInit+0x140>)
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002426:	4b28      	ldr	r3, [pc, #160]	@ (80024c8 <HAL_I2C_MspInit+0x140>)
 8002428:	2280      	movs	r2, #128	@ 0x80
 800242a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800242c:	4b26      	ldr	r3, [pc, #152]	@ (80024c8 <HAL_I2C_MspInit+0x140>)
 800242e:	2200      	movs	r2, #0
 8002430:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002432:	4b25      	ldr	r3, [pc, #148]	@ (80024c8 <HAL_I2C_MspInit+0x140>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002438:	4b23      	ldr	r3, [pc, #140]	@ (80024c8 <HAL_I2C_MspInit+0x140>)
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800243e:	4b22      	ldr	r3, [pc, #136]	@ (80024c8 <HAL_I2C_MspInit+0x140>)
 8002440:	2200      	movs	r2, #0
 8002442:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002444:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <HAL_I2C_MspInit+0x140>)
 8002446:	0018      	movs	r0, r3
 8002448:	f000 fae0 	bl	8002a0c <HAL_DMA_Init>
 800244c:	1e03      	subs	r3, r0, #0
 800244e:	d001      	beq.n	8002454 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002450:	f7ff ff62 	bl	8002318 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a1c      	ldr	r2, [pc, #112]	@ (80024c8 <HAL_I2C_MspInit+0x140>)
 8002458:	63da      	str	r2, [r3, #60]	@ 0x3c
 800245a:	4b1b      	ldr	r3, [pc, #108]	@ (80024c8 <HAL_I2C_MspInit+0x140>)
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel2;
 8002460:	4b1b      	ldr	r3, [pc, #108]	@ (80024d0 <HAL_I2C_MspInit+0x148>)
 8002462:	4a1c      	ldr	r2, [pc, #112]	@ (80024d4 <HAL_I2C_MspInit+0x14c>)
 8002464:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8002466:	4b1a      	ldr	r3, [pc, #104]	@ (80024d0 <HAL_I2C_MspInit+0x148>)
 8002468:	220d      	movs	r2, #13
 800246a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800246c:	4b18      	ldr	r3, [pc, #96]	@ (80024d0 <HAL_I2C_MspInit+0x148>)
 800246e:	2210      	movs	r2, #16
 8002470:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002472:	4b17      	ldr	r3, [pc, #92]	@ (80024d0 <HAL_I2C_MspInit+0x148>)
 8002474:	2200      	movs	r2, #0
 8002476:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002478:	4b15      	ldr	r3, [pc, #84]	@ (80024d0 <HAL_I2C_MspInit+0x148>)
 800247a:	2280      	movs	r2, #128	@ 0x80
 800247c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800247e:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <HAL_I2C_MspInit+0x148>)
 8002480:	2200      	movs	r2, #0
 8002482:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002484:	4b12      	ldr	r3, [pc, #72]	@ (80024d0 <HAL_I2C_MspInit+0x148>)
 8002486:	2200      	movs	r2, #0
 8002488:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800248a:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <HAL_I2C_MspInit+0x148>)
 800248c:	2200      	movs	r2, #0
 800248e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002490:	4b0f      	ldr	r3, [pc, #60]	@ (80024d0 <HAL_I2C_MspInit+0x148>)
 8002492:	2200      	movs	r2, #0
 8002494:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002496:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <HAL_I2C_MspInit+0x148>)
 8002498:	0018      	movs	r0, r3
 800249a:	f000 fab7 	bl	8002a0c <HAL_DMA_Init>
 800249e:	1e03      	subs	r3, r0, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 80024a2:	f7ff ff39 	bl	8002318 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a09      	ldr	r2, [pc, #36]	@ (80024d0 <HAL_I2C_MspInit+0x148>)
 80024aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80024ac:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <HAL_I2C_MspInit+0x148>)
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80024b2:	46c0      	nop			@ (mov r8, r8)
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b00b      	add	sp, #44	@ 0x2c
 80024b8:	bd90      	pop	{r4, r7, pc}
 80024ba:	46c0      	nop			@ (mov r8, r8)
 80024bc:	40005800 	.word	0x40005800
 80024c0:	40021000 	.word	0x40021000
 80024c4:	50000400 	.word	0x50000400
 80024c8:	200000e8 	.word	0x200000e8
 80024cc:	40020008 	.word	0x40020008
 80024d0:	20000144 	.word	0x20000144
 80024d4:	4002001c 	.word	0x4002001c

080024d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b093      	sub	sp, #76	@ 0x4c
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024e0:	2414      	movs	r4, #20
 80024e2:	193b      	adds	r3, r7, r4
 80024e4:	0018      	movs	r0, r3
 80024e6:	2334      	movs	r3, #52	@ 0x34
 80024e8:	001a      	movs	r2, r3
 80024ea:	2100      	movs	r1, #0
 80024ec:	f003 ff10 	bl	8006310 <memset>
  if(htim_base->Instance==TIM1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a24      	ldr	r2, [pc, #144]	@ (8002588 <HAL_TIM_Base_MspInit+0xb0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d11d      	bne.n	8002536 <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80024fa:	193b      	adds	r3, r7, r4
 80024fc:	2280      	movs	r2, #128	@ 0x80
 80024fe:	0392      	lsls	r2, r2, #14
 8002500:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8002502:	193b      	adds	r3, r7, r4
 8002504:	2200      	movs	r2, #0
 8002506:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002508:	193b      	adds	r3, r7, r4
 800250a:	0018      	movs	r0, r3
 800250c:	f003 f8e6 	bl	80056dc <HAL_RCCEx_PeriphCLKConfig>
 8002510:	1e03      	subs	r3, r0, #0
 8002512:	d001      	beq.n	8002518 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8002514:	f7ff ff00 	bl	8002318 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002518:	4b1c      	ldr	r3, [pc, #112]	@ (800258c <HAL_TIM_Base_MspInit+0xb4>)
 800251a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800251c:	4b1b      	ldr	r3, [pc, #108]	@ (800258c <HAL_TIM_Base_MspInit+0xb4>)
 800251e:	2180      	movs	r1, #128	@ 0x80
 8002520:	0109      	lsls	r1, r1, #4
 8002522:	430a      	orrs	r2, r1
 8002524:	641a      	str	r2, [r3, #64]	@ 0x40
 8002526:	4b19      	ldr	r3, [pc, #100]	@ (800258c <HAL_TIM_Base_MspInit+0xb4>)
 8002528:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800252a:	2380      	movs	r3, #128	@ 0x80
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002534:	e023      	b.n	800257e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	2380      	movs	r3, #128	@ 0x80
 800253c:	05db      	lsls	r3, r3, #23
 800253e:	429a      	cmp	r2, r3
 8002540:	d10c      	bne.n	800255c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002542:	4b12      	ldr	r3, [pc, #72]	@ (800258c <HAL_TIM_Base_MspInit+0xb4>)
 8002544:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002546:	4b11      	ldr	r3, [pc, #68]	@ (800258c <HAL_TIM_Base_MspInit+0xb4>)
 8002548:	2101      	movs	r1, #1
 800254a:	430a      	orrs	r2, r1
 800254c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800254e:	4b0f      	ldr	r3, [pc, #60]	@ (800258c <HAL_TIM_Base_MspInit+0xb4>)
 8002550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002552:	2201      	movs	r2, #1
 8002554:	4013      	ands	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
}
 800255a:	e010      	b.n	800257e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a0b      	ldr	r2, [pc, #44]	@ (8002590 <HAL_TIM_Base_MspInit+0xb8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d10b      	bne.n	800257e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002566:	4b09      	ldr	r3, [pc, #36]	@ (800258c <HAL_TIM_Base_MspInit+0xb4>)
 8002568:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800256a:	4b08      	ldr	r3, [pc, #32]	@ (800258c <HAL_TIM_Base_MspInit+0xb4>)
 800256c:	2102      	movs	r1, #2
 800256e:	430a      	orrs	r2, r1
 8002570:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002572:	4b06      	ldr	r3, [pc, #24]	@ (800258c <HAL_TIM_Base_MspInit+0xb4>)
 8002574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002576:	2202      	movs	r2, #2
 8002578:	4013      	ands	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	46bd      	mov	sp, r7
 8002582:	b013      	add	sp, #76	@ 0x4c
 8002584:	bd90      	pop	{r4, r7, pc}
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	40012c00 	.word	0x40012c00
 800258c:	40021000 	.word	0x40021000
 8002590:	40000400 	.word	0x40000400

08002594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002598:	f003 f876 	bl	8005688 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800259c:	46c0      	nop			@ (mov r8, r8)
 800259e:	e7fd      	b.n	800259c <NMI_Handler+0x8>

080025a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a4:	46c0      	nop			@ (mov r8, r8)
 80025a6:	e7fd      	b.n	80025a4 <HardFault_Handler+0x4>

080025a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80025ac:	46c0      	nop			@ (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025b6:	46c0      	nop			@ (mov r8, r8)
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025c0:	f000 f906 	bl	80027d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c4:	46c0      	nop			@ (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80025ce:	46c0      	nop			@ (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FP_MB2_PWR_SW_Pin);
 80025d8:	2380      	movs	r3, #128	@ 0x80
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	0018      	movs	r0, r3
 80025de:	f000 fdb5 	bl	800314c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FP_MB1_PWR_SW_Pin);
 80025e2:	2380      	movs	r3, #128	@ 0x80
 80025e4:	021b      	lsls	r3, r3, #8
 80025e6:	0018      	movs	r0, r3
 80025e8:	f000 fdb0 	bl	800314c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80025ec:	46c0      	nop			@ (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80025f8:	4b03      	ldr	r3, [pc, #12]	@ (8002608 <DMA1_Channel1_IRQHandler+0x14>)
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 fafa 	bl	8002bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002600:	46c0      	nop			@ (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	46c0      	nop			@ (mov r8, r8)
 8002608:	200000e8 	.word	0x200000e8

0800260c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002610:	4b03      	ldr	r3, [pc, #12]	@ (8002620 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002612:	0018      	movs	r0, r3
 8002614:	f000 faee 	bl	8002bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002618:	46c0      	nop			@ (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			@ (mov r8, r8)
 8002620:	20000144 	.word	0x20000144

08002624 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002628:	4b03      	ldr	r3, [pc, #12]	@ (8002638 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800262a:	0018      	movs	r0, r3
 800262c:	f003 fac2 	bl	8005bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002630:	46c0      	nop			@ (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	46c0      	nop			@ (mov r8, r8)
 8002638:	200001a0 	.word	0x200001a0

0800263c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002640:	4b03      	ldr	r3, [pc, #12]	@ (8002650 <TIM2_IRQHandler+0x14>)
 8002642:	0018      	movs	r0, r3
 8002644:	f003 fab6 	bl	8005bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002648:	46c0      	nop			@ (mov r8, r8)
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	46c0      	nop			@ (mov r8, r8)
 8002650:	200001ec 	.word	0x200001ec

08002654 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002658:	4b03      	ldr	r3, [pc, #12]	@ (8002668 <TIM3_IRQHandler+0x14>)
 800265a:	0018      	movs	r0, r3
 800265c:	f003 faaa 	bl	8005bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002660:	46c0      	nop			@ (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			@ (mov r8, r8)
 8002668:	20000238 	.word	0x20000238

0800266c <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002670:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <I2C2_IRQHandler+0x2c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	23e0      	movs	r3, #224	@ 0xe0
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4013      	ands	r3, r2
 800267c:	d004      	beq.n	8002688 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <I2C2_IRQHandler+0x2c>)
 8002680:	0018      	movs	r0, r3
 8002682:	f001 f97b 	bl	800397c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8002686:	e003      	b.n	8002690 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8002688:	4b03      	ldr	r3, [pc, #12]	@ (8002698 <I2C2_IRQHandler+0x2c>)
 800268a:	0018      	movs	r0, r3
 800268c:	f001 f95c 	bl	8003948 <HAL_I2C_EV_IRQHandler>
}
 8002690:	46c0      	nop			@ (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	46c0      	nop			@ (mov r8, r8)
 8002698:	20000094 	.word	0x20000094

0800269c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a0:	46c0      	nop			@ (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026a8:	480d      	ldr	r0, [pc, #52]	@ (80026e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026ac:	f7ff fff6 	bl	800269c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b0:	480c      	ldr	r0, [pc, #48]	@ (80026e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80026b2:	490d      	ldr	r1, [pc, #52]	@ (80026e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026b4:	4a0d      	ldr	r2, [pc, #52]	@ (80026ec <LoopForever+0xe>)
  movs r3, #0
 80026b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b8:	e002      	b.n	80026c0 <LoopCopyDataInit>

080026ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026be:	3304      	adds	r3, #4

080026c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c4:	d3f9      	bcc.n	80026ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c6:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026c8:	4c0a      	ldr	r4, [pc, #40]	@ (80026f4 <LoopForever+0x16>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026cc:	e001      	b.n	80026d2 <LoopFillZerobss>

080026ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d0:	3204      	adds	r2, #4

080026d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d4:	d3fb      	bcc.n	80026ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026d6:	f003 fe23 	bl	8006320 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80026da:	f7fd ffd7 	bl	800068c <main>

080026de <LoopForever>:

LoopForever:
  b LoopForever
 80026de:	e7fe      	b.n	80026de <LoopForever>
  ldr   r0, =_estack
 80026e0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80026e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80026ec:	080063c8 	.word	0x080063c8
  ldr r2, =_sbss
 80026f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80026f4:	200003d4 	.word	0x200003d4

080026f8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026f8:	e7fe      	b.n	80026f8 <ADC1_COMP_IRQHandler>
	...

080026fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002702:	1dfb      	adds	r3, r7, #7
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002708:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <HAL_Init+0x3c>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b0a      	ldr	r3, [pc, #40]	@ (8002738 <HAL_Init+0x3c>)
 800270e:	2180      	movs	r1, #128	@ 0x80
 8002710:	0049      	lsls	r1, r1, #1
 8002712:	430a      	orrs	r2, r1
 8002714:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002716:	2000      	movs	r0, #0
 8002718:	f000 f810 	bl	800273c <HAL_InitTick>
 800271c:	1e03      	subs	r3, r0, #0
 800271e:	d003      	beq.n	8002728 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002720:	1dfb      	adds	r3, r7, #7
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
 8002726:	e001      	b.n	800272c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002728:	f7ff fe02 	bl	8002330 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800272c:	1dfb      	adds	r3, r7, #7
 800272e:	781b      	ldrb	r3, [r3, #0]
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b002      	add	sp, #8
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40022000 	.word	0x40022000

0800273c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002744:	230f      	movs	r3, #15
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800274c:	4b1d      	ldr	r3, [pc, #116]	@ (80027c4 <HAL_InitTick+0x88>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d02b      	beq.n	80027ac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002754:	4b1c      	ldr	r3, [pc, #112]	@ (80027c8 <HAL_InitTick+0x8c>)
 8002756:	681c      	ldr	r4, [r3, #0]
 8002758:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <HAL_InitTick+0x88>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	0019      	movs	r1, r3
 800275e:	23fa      	movs	r3, #250	@ 0xfa
 8002760:	0098      	lsls	r0, r3, #2
 8002762:	f7fd fccf 	bl	8000104 <__udivsi3>
 8002766:	0003      	movs	r3, r0
 8002768:	0019      	movs	r1, r3
 800276a:	0020      	movs	r0, r4
 800276c:	f7fd fcca 	bl	8000104 <__udivsi3>
 8002770:	0003      	movs	r3, r0
 8002772:	0018      	movs	r0, r3
 8002774:	f000 f93d 	bl	80029f2 <HAL_SYSTICK_Config>
 8002778:	1e03      	subs	r3, r0, #0
 800277a:	d112      	bne.n	80027a2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d80a      	bhi.n	8002798 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	2301      	movs	r3, #1
 8002786:	425b      	negs	r3, r3
 8002788:	2200      	movs	r2, #0
 800278a:	0018      	movs	r0, r3
 800278c:	f000 f90c 	bl	80029a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002790:	4b0e      	ldr	r3, [pc, #56]	@ (80027cc <HAL_InitTick+0x90>)
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	e00d      	b.n	80027b4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002798:	230f      	movs	r3, #15
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	2201      	movs	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	e008      	b.n	80027b4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027a2:	230f      	movs	r3, #15
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	e003      	b.n	80027b4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027ac:	230f      	movs	r3, #15
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	2201      	movs	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80027b4:	230f      	movs	r3, #15
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	781b      	ldrb	r3, [r3, #0]
}
 80027ba:	0018      	movs	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	b005      	add	sp, #20
 80027c0:	bd90      	pop	{r4, r7, pc}
 80027c2:	46c0      	nop			@ (mov r8, r8)
 80027c4:	20000070 	.word	0x20000070
 80027c8:	20000068 	.word	0x20000068
 80027cc:	2000006c 	.word	0x2000006c

080027d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027d4:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <HAL_IncTick+0x1c>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	001a      	movs	r2, r3
 80027da:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <HAL_IncTick+0x20>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	18d2      	adds	r2, r2, r3
 80027e0:	4b03      	ldr	r3, [pc, #12]	@ (80027f0 <HAL_IncTick+0x20>)
 80027e2:	601a      	str	r2, [r3, #0]
}
 80027e4:	46c0      	nop			@ (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			@ (mov r8, r8)
 80027ec:	20000070 	.word	0x20000070
 80027f0:	200003d0 	.word	0x200003d0

080027f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  return uwTick;
 80027f8:	4b02      	ldr	r3, [pc, #8]	@ (8002804 <HAL_GetTick+0x10>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	0018      	movs	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	200003d0 	.word	0x200003d0

08002808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff fff0 	bl	80027f4 <HAL_GetTick>
 8002814:	0003      	movs	r3, r0
 8002816:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	3301      	adds	r3, #1
 8002820:	d005      	beq.n	800282e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002822:	4b0a      	ldr	r3, [pc, #40]	@ (800284c <HAL_Delay+0x44>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	001a      	movs	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	189b      	adds	r3, r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	f7ff ffe0 	bl	80027f4 <HAL_GetTick>
 8002834:	0002      	movs	r2, r0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	429a      	cmp	r2, r3
 800283e:	d8f7      	bhi.n	8002830 <HAL_Delay+0x28>
  {
  }
}
 8002840:	46c0      	nop			@ (mov r8, r8)
 8002842:	46c0      	nop			@ (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	b004      	add	sp, #16
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	20000070 	.word	0x20000070

08002850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	0002      	movs	r2, r0
 8002858:	1dfb      	adds	r3, r7, #7
 800285a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800285c:	1dfb      	adds	r3, r7, #7
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b7f      	cmp	r3, #127	@ 0x7f
 8002862:	d809      	bhi.n	8002878 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002864:	1dfb      	adds	r3, r7, #7
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	001a      	movs	r2, r3
 800286a:	231f      	movs	r3, #31
 800286c:	401a      	ands	r2, r3
 800286e:	4b04      	ldr	r3, [pc, #16]	@ (8002880 <__NVIC_EnableIRQ+0x30>)
 8002870:	2101      	movs	r1, #1
 8002872:	4091      	lsls	r1, r2
 8002874:	000a      	movs	r2, r1
 8002876:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002878:	46c0      	nop			@ (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	b002      	add	sp, #8
 800287e:	bd80      	pop	{r7, pc}
 8002880:	e000e100 	.word	0xe000e100

08002884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	0002      	movs	r2, r0
 800288c:	6039      	str	r1, [r7, #0]
 800288e:	1dfb      	adds	r3, r7, #7
 8002890:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002892:	1dfb      	adds	r3, r7, #7
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b7f      	cmp	r3, #127	@ 0x7f
 8002898:	d828      	bhi.n	80028ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800289a:	4a2f      	ldr	r2, [pc, #188]	@ (8002958 <__NVIC_SetPriority+0xd4>)
 800289c:	1dfb      	adds	r3, r7, #7
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	b25b      	sxtb	r3, r3
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	33c0      	adds	r3, #192	@ 0xc0
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	589b      	ldr	r3, [r3, r2]
 80028aa:	1dfa      	adds	r2, r7, #7
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	0011      	movs	r1, r2
 80028b0:	2203      	movs	r2, #3
 80028b2:	400a      	ands	r2, r1
 80028b4:	00d2      	lsls	r2, r2, #3
 80028b6:	21ff      	movs	r1, #255	@ 0xff
 80028b8:	4091      	lsls	r1, r2
 80028ba:	000a      	movs	r2, r1
 80028bc:	43d2      	mvns	r2, r2
 80028be:	401a      	ands	r2, r3
 80028c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	019b      	lsls	r3, r3, #6
 80028c6:	22ff      	movs	r2, #255	@ 0xff
 80028c8:	401a      	ands	r2, r3
 80028ca:	1dfb      	adds	r3, r7, #7
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	0018      	movs	r0, r3
 80028d0:	2303      	movs	r3, #3
 80028d2:	4003      	ands	r3, r0
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028d8:	481f      	ldr	r0, [pc, #124]	@ (8002958 <__NVIC_SetPriority+0xd4>)
 80028da:	1dfb      	adds	r3, r7, #7
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	b25b      	sxtb	r3, r3
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	430a      	orrs	r2, r1
 80028e4:	33c0      	adds	r3, #192	@ 0xc0
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028ea:	e031      	b.n	8002950 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028ec:	4a1b      	ldr	r2, [pc, #108]	@ (800295c <__NVIC_SetPriority+0xd8>)
 80028ee:	1dfb      	adds	r3, r7, #7
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	0019      	movs	r1, r3
 80028f4:	230f      	movs	r3, #15
 80028f6:	400b      	ands	r3, r1
 80028f8:	3b08      	subs	r3, #8
 80028fa:	089b      	lsrs	r3, r3, #2
 80028fc:	3306      	adds	r3, #6
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	18d3      	adds	r3, r2, r3
 8002902:	3304      	adds	r3, #4
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	1dfa      	adds	r2, r7, #7
 8002908:	7812      	ldrb	r2, [r2, #0]
 800290a:	0011      	movs	r1, r2
 800290c:	2203      	movs	r2, #3
 800290e:	400a      	ands	r2, r1
 8002910:	00d2      	lsls	r2, r2, #3
 8002912:	21ff      	movs	r1, #255	@ 0xff
 8002914:	4091      	lsls	r1, r2
 8002916:	000a      	movs	r2, r1
 8002918:	43d2      	mvns	r2, r2
 800291a:	401a      	ands	r2, r3
 800291c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	019b      	lsls	r3, r3, #6
 8002922:	22ff      	movs	r2, #255	@ 0xff
 8002924:	401a      	ands	r2, r3
 8002926:	1dfb      	adds	r3, r7, #7
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	0018      	movs	r0, r3
 800292c:	2303      	movs	r3, #3
 800292e:	4003      	ands	r3, r0
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002934:	4809      	ldr	r0, [pc, #36]	@ (800295c <__NVIC_SetPriority+0xd8>)
 8002936:	1dfb      	adds	r3, r7, #7
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	001c      	movs	r4, r3
 800293c:	230f      	movs	r3, #15
 800293e:	4023      	ands	r3, r4
 8002940:	3b08      	subs	r3, #8
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	430a      	orrs	r2, r1
 8002946:	3306      	adds	r3, #6
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	18c3      	adds	r3, r0, r3
 800294c:	3304      	adds	r3, #4
 800294e:	601a      	str	r2, [r3, #0]
}
 8002950:	46c0      	nop			@ (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	b003      	add	sp, #12
 8002956:	bd90      	pop	{r4, r7, pc}
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	1e5a      	subs	r2, r3, #1
 800296c:	2380      	movs	r3, #128	@ 0x80
 800296e:	045b      	lsls	r3, r3, #17
 8002970:	429a      	cmp	r2, r3
 8002972:	d301      	bcc.n	8002978 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002974:	2301      	movs	r3, #1
 8002976:	e010      	b.n	800299a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002978:	4b0a      	ldr	r3, [pc, #40]	@ (80029a4 <SysTick_Config+0x44>)
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	3a01      	subs	r2, #1
 800297e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002980:	2301      	movs	r3, #1
 8002982:	425b      	negs	r3, r3
 8002984:	2103      	movs	r1, #3
 8002986:	0018      	movs	r0, r3
 8002988:	f7ff ff7c 	bl	8002884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <SysTick_Config+0x44>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002992:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <SysTick_Config+0x44>)
 8002994:	2207      	movs	r2, #7
 8002996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002998:	2300      	movs	r3, #0
}
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b002      	add	sp, #8
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	46c0      	nop			@ (mov r8, r8)
 80029a4:	e000e010 	.word	0xe000e010

080029a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	210f      	movs	r1, #15
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	1c02      	adds	r2, r0, #0
 80029b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	b25b      	sxtb	r3, r3
 80029c2:	0011      	movs	r1, r2
 80029c4:	0018      	movs	r0, r3
 80029c6:	f7ff ff5d 	bl	8002884 <__NVIC_SetPriority>
}
 80029ca:	46c0      	nop			@ (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b004      	add	sp, #16
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	0002      	movs	r2, r0
 80029da:	1dfb      	adds	r3, r7, #7
 80029dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029de:	1dfb      	adds	r3, r7, #7
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	0018      	movs	r0, r3
 80029e6:	f7ff ff33 	bl	8002850 <__NVIC_EnableIRQ>
}
 80029ea:	46c0      	nop			@ (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	0018      	movs	r0, r3
 80029fe:	f7ff ffaf 	bl	8002960 <SysTick_Config>
 8002a02:	0003      	movs	r3, r0
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b002      	add	sp, #8
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e077      	b.n	8002b0e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a3d      	ldr	r2, [pc, #244]	@ (8002b18 <HAL_DMA_Init+0x10c>)
 8002a24:	4694      	mov	ip, r2
 8002a26:	4463      	add	r3, ip
 8002a28:	2114      	movs	r1, #20
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7fd fb6a 	bl	8000104 <__udivsi3>
 8002a30:	0003      	movs	r3, r0
 8002a32:	009a      	lsls	r2, r3, #2
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2225      	movs	r2, #37	@ 0x25
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4934      	ldr	r1, [pc, #208]	@ (8002b1c <HAL_DMA_Init+0x110>)
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6819      	ldr	r1, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 f971 	bl	8002d70 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	2380      	movs	r3, #128	@ 0x80
 8002a94:	01db      	lsls	r3, r3, #7
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d102      	bne.n	8002aa0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa8:	213f      	movs	r1, #63	@ 0x3f
 8002aaa:	400a      	ands	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ab6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d011      	beq.n	8002ae4 <HAL_DMA_Init+0xd8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d80d      	bhi.n	8002ae4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 f97c 	bl	8002dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	e008      	b.n	8002af6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2225      	movs	r2, #37	@ 0x25
 8002b00:	2101      	movs	r1, #1
 8002b02:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2224      	movs	r2, #36	@ 0x24
 8002b08:	2100      	movs	r1, #0
 8002b0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	0018      	movs	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b002      	add	sp, #8
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	46c0      	nop			@ (mov r8, r8)
 8002b18:	bffdfff8 	.word	0xbffdfff8
 8002b1c:	ffff800f 	.word	0xffff800f

08002b20 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b28:	210f      	movs	r1, #15
 8002b2a:	187b      	adds	r3, r7, r1
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2225      	movs	r2, #37	@ 0x25
 8002b34:	5c9b      	ldrb	r3, [r3, r2]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d006      	beq.n	8002b4a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2204      	movs	r2, #4
 8002b40:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002b42:	187b      	adds	r3, r7, r1
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	e049      	b.n	8002bde <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	210e      	movs	r1, #14
 8002b56:	438a      	bics	r2, r1
 8002b58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2101      	movs	r1, #1
 8002b66:	438a      	bics	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b74:	491d      	ldr	r1, [pc, #116]	@ (8002bec <HAL_DMA_Abort_IT+0xcc>)
 8002b76:	400a      	ands	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf0 <HAL_DMA_Abort_IT+0xd0>)
 8002b7c:	6859      	ldr	r1, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	221c      	movs	r2, #28
 8002b84:	4013      	ands	r3, r2
 8002b86:	2201      	movs	r2, #1
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	4b19      	ldr	r3, [pc, #100]	@ (8002bf0 <HAL_DMA_Abort_IT+0xd0>)
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002b98:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00c      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bac:	490f      	ldr	r1, [pc, #60]	@ (8002bec <HAL_DMA_Abort_IT+0xcc>)
 8002bae:	400a      	ands	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002bba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2225      	movs	r2, #37	@ 0x25
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	@ 0x24
 8002bc8:	2100      	movs	r1, #0
 8002bca:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d004      	beq.n	8002bde <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	0010      	movs	r0, r2
 8002bdc:	4798      	blx	r3
    }
  }
  return status;
 8002bde:	230f      	movs	r3, #15
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	781b      	ldrb	r3, [r3, #0]
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b004      	add	sp, #16
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	fffffeff 	.word	0xfffffeff
 8002bf0:	40020000 	.word	0x40020000

08002bf4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002bfc:	4b55      	ldr	r3, [pc, #340]	@ (8002d54 <HAL_DMA_IRQHandler+0x160>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	221c      	movs	r2, #28
 8002c10:	4013      	ands	r3, r2
 8002c12:	2204      	movs	r2, #4
 8002c14:	409a      	lsls	r2, r3
 8002c16:	0013      	movs	r3, r2
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d027      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x7a>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2204      	movs	r2, #4
 8002c22:	4013      	ands	r3, r2
 8002c24:	d023      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d107      	bne.n	8002c42 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2104      	movs	r1, #4
 8002c3e:	438a      	bics	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002c42:	4b44      	ldr	r3, [pc, #272]	@ (8002d54 <HAL_DMA_IRQHandler+0x160>)
 8002c44:	6859      	ldr	r1, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	221c      	movs	r2, #28
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2204      	movs	r2, #4
 8002c50:	409a      	lsls	r2, r3
 8002c52:	4b40      	ldr	r3, [pc, #256]	@ (8002d54 <HAL_DMA_IRQHandler+0x160>)
 8002c54:	430a      	orrs	r2, r1
 8002c56:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d100      	bne.n	8002c62 <HAL_DMA_IRQHandler+0x6e>
 8002c60:	e073      	b.n	8002d4a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	0010      	movs	r0, r2
 8002c6a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002c6c:	e06d      	b.n	8002d4a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	221c      	movs	r2, #28
 8002c74:	4013      	ands	r3, r2
 8002c76:	2202      	movs	r2, #2
 8002c78:	409a      	lsls	r2, r3
 8002c7a:	0013      	movs	r3, r2
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d02e      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0xec>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2202      	movs	r2, #2
 8002c86:	4013      	ands	r3, r2
 8002c88:	d02a      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2220      	movs	r2, #32
 8002c92:	4013      	ands	r3, r2
 8002c94:	d10b      	bne.n	8002cae <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	210a      	movs	r1, #10
 8002ca2:	438a      	bics	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2225      	movs	r2, #37	@ 0x25
 8002caa:	2101      	movs	r1, #1
 8002cac:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002cae:	4b29      	ldr	r3, [pc, #164]	@ (8002d54 <HAL_DMA_IRQHandler+0x160>)
 8002cb0:	6859      	ldr	r1, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	221c      	movs	r2, #28
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2202      	movs	r2, #2
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	4b25      	ldr	r3, [pc, #148]	@ (8002d54 <HAL_DMA_IRQHandler+0x160>)
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2224      	movs	r2, #36	@ 0x24
 8002cc8:	2100      	movs	r1, #0
 8002cca:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d03a      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	0010      	movs	r0, r2
 8002cdc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002cde:	e034      	b.n	8002d4a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce4:	221c      	movs	r2, #28
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2208      	movs	r2, #8
 8002cea:	409a      	lsls	r2, r3
 8002cec:	0013      	movs	r3, r2
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d02b      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x158>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2208      	movs	r2, #8
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d027      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	210e      	movs	r1, #14
 8002d08:	438a      	bics	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002d0c:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <HAL_DMA_IRQHandler+0x160>)
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	221c      	movs	r2, #28
 8002d16:	4013      	ands	r3, r2
 8002d18:	2201      	movs	r2, #1
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d54 <HAL_DMA_IRQHandler+0x160>)
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2225      	movs	r2, #37	@ 0x25
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2224      	movs	r2, #36	@ 0x24
 8002d34:	2100      	movs	r1, #0
 8002d36:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	0010      	movs	r0, r2
 8002d48:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	46c0      	nop			@ (mov r8, r8)
}
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b004      	add	sp, #16
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40020000 	.word	0x40020000

08002d58 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2225      	movs	r2, #37	@ 0x25
 8002d64:	5c9b      	ldrb	r3, [r3, r2]
 8002d66:	b2db      	uxtb	r3, r3
}
 8002d68:	0018      	movs	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	089b      	lsrs	r3, r3, #2
 8002d7e:	4a10      	ldr	r2, [pc, #64]	@ (8002dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002d80:	4694      	mov	ip, r2
 8002d82:	4463      	add	r3, ip
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	001a      	movs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	001a      	movs	r2, r3
 8002d92:	23ff      	movs	r3, #255	@ 0xff
 8002d94:	4013      	ands	r3, r2
 8002d96:	3b08      	subs	r3, #8
 8002d98:	2114      	movs	r1, #20
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f7fd f9b2 	bl	8000104 <__udivsi3>
 8002da0:	0003      	movs	r3, r0
 8002da2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a07      	ldr	r2, [pc, #28]	@ (8002dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002da8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	221f      	movs	r2, #31
 8002dae:	4013      	ands	r3, r2
 8002db0:	2201      	movs	r2, #1
 8002db2:	409a      	lsls	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b004      	add	sp, #16
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	10008200 	.word	0x10008200
 8002dc4:	40020880 	.word	0x40020880

08002dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	223f      	movs	r2, #63	@ 0x3f
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8002e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002dde:	4694      	mov	ip, r2
 8002de0:	4463      	add	r3, ip
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	001a      	movs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a07      	ldr	r2, [pc, #28]	@ (8002e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002dee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	2203      	movs	r2, #3
 8002df6:	4013      	ands	r3, r2
 8002df8:	2201      	movs	r2, #1
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002e00:	46c0      	nop			@ (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b004      	add	sp, #16
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	1000823f 	.word	0x1000823f
 8002e0c:	40020940 	.word	0x40020940

08002e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e1e:	e147      	b.n	80030b0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4091      	lsls	r1, r2
 8002e2a:	000a      	movs	r2, r1
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d100      	bne.n	8002e38 <HAL_GPIO_Init+0x28>
 8002e36:	e138      	b.n	80030aa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d005      	beq.n	8002e50 <HAL_GPIO_Init+0x40>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2203      	movs	r2, #3
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d130      	bne.n	8002eb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	0013      	movs	r3, r2
 8002e60:	43da      	mvns	r2, r3
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	409a      	lsls	r2, r3
 8002e72:	0013      	movs	r3, r2
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e86:	2201      	movs	r2, #1
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	0013      	movs	r3, r2
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	0013      	movs	r3, r2
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d017      	beq.n	8002eee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	2203      	movs	r2, #3
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	0013      	movs	r3, r2
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	0013      	movs	r3, r2
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d123      	bne.n	8002f42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	08da      	lsrs	r2, r3, #3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3208      	adds	r2, #8
 8002f02:	0092      	lsls	r2, r2, #2
 8002f04:	58d3      	ldr	r3, [r2, r3]
 8002f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2207      	movs	r2, #7
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	220f      	movs	r2, #15
 8002f12:	409a      	lsls	r2, r3
 8002f14:	0013      	movs	r3, r2
 8002f16:	43da      	mvns	r2, r3
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2107      	movs	r1, #7
 8002f26:	400b      	ands	r3, r1
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	0013      	movs	r3, r2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	08da      	lsrs	r2, r3, #3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3208      	adds	r2, #8
 8002f3c:	0092      	lsls	r2, r2, #2
 8002f3e:	6939      	ldr	r1, [r7, #16]
 8002f40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	0013      	movs	r3, r2
 8002f52:	43da      	mvns	r2, r3
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4013      	ands	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2203      	movs	r2, #3
 8002f60:	401a      	ands	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	409a      	lsls	r2, r3
 8002f68:	0013      	movs	r3, r2
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	23c0      	movs	r3, #192	@ 0xc0
 8002f7c:	029b      	lsls	r3, r3, #10
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d100      	bne.n	8002f84 <HAL_GPIO_Init+0x174>
 8002f82:	e092      	b.n	80030aa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002f84:	4a50      	ldr	r2, [pc, #320]	@ (80030c8 <HAL_GPIO_Init+0x2b8>)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	089b      	lsrs	r3, r3, #2
 8002f8a:	3318      	adds	r3, #24
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	589b      	ldr	r3, [r3, r2]
 8002f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2203      	movs	r2, #3
 8002f96:	4013      	ands	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	220f      	movs	r2, #15
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	0013      	movs	r3, r2
 8002fa0:	43da      	mvns	r2, r3
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	23a0      	movs	r3, #160	@ 0xa0
 8002fac:	05db      	lsls	r3, r3, #23
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d013      	beq.n	8002fda <HAL_GPIO_Init+0x1ca>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a45      	ldr	r2, [pc, #276]	@ (80030cc <HAL_GPIO_Init+0x2bc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00d      	beq.n	8002fd6 <HAL_GPIO_Init+0x1c6>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a44      	ldr	r2, [pc, #272]	@ (80030d0 <HAL_GPIO_Init+0x2c0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d007      	beq.n	8002fd2 <HAL_GPIO_Init+0x1c2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a43      	ldr	r2, [pc, #268]	@ (80030d4 <HAL_GPIO_Init+0x2c4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d101      	bne.n	8002fce <HAL_GPIO_Init+0x1be>
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e006      	b.n	8002fdc <HAL_GPIO_Init+0x1cc>
 8002fce:	2305      	movs	r3, #5
 8002fd0:	e004      	b.n	8002fdc <HAL_GPIO_Init+0x1cc>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e002      	b.n	8002fdc <HAL_GPIO_Init+0x1cc>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <HAL_GPIO_Init+0x1cc>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	2103      	movs	r1, #3
 8002fe0:	400a      	ands	r2, r1
 8002fe2:	00d2      	lsls	r2, r2, #3
 8002fe4:	4093      	lsls	r3, r2
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002fec:	4936      	ldr	r1, [pc, #216]	@ (80030c8 <HAL_GPIO_Init+0x2b8>)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	089b      	lsrs	r3, r3, #2
 8002ff2:	3318      	adds	r3, #24
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ffa:	4b33      	ldr	r3, [pc, #204]	@ (80030c8 <HAL_GPIO_Init+0x2b8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	43da      	mvns	r2, r3
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	2380      	movs	r3, #128	@ 0x80
 8003010:	035b      	lsls	r3, r3, #13
 8003012:	4013      	ands	r3, r2
 8003014:	d003      	beq.n	800301e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800301e:	4b2a      	ldr	r3, [pc, #168]	@ (80030c8 <HAL_GPIO_Init+0x2b8>)
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003024:	4b28      	ldr	r3, [pc, #160]	@ (80030c8 <HAL_GPIO_Init+0x2b8>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	43da      	mvns	r2, r3
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4013      	ands	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	2380      	movs	r3, #128	@ 0x80
 800303a:	039b      	lsls	r3, r3, #14
 800303c:	4013      	ands	r3, r2
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003048:	4b1f      	ldr	r3, [pc, #124]	@ (80030c8 <HAL_GPIO_Init+0x2b8>)
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800304e:	4a1e      	ldr	r2, [pc, #120]	@ (80030c8 <HAL_GPIO_Init+0x2b8>)
 8003050:	2384      	movs	r3, #132	@ 0x84
 8003052:	58d3      	ldr	r3, [r2, r3]
 8003054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	43da      	mvns	r2, r3
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	2380      	movs	r3, #128	@ 0x80
 8003066:	029b      	lsls	r3, r3, #10
 8003068:	4013      	ands	r3, r2
 800306a:	d003      	beq.n	8003074 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003074:	4914      	ldr	r1, [pc, #80]	@ (80030c8 <HAL_GPIO_Init+0x2b8>)
 8003076:	2284      	movs	r2, #132	@ 0x84
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800307c:	4a12      	ldr	r2, [pc, #72]	@ (80030c8 <HAL_GPIO_Init+0x2b8>)
 800307e:	2380      	movs	r3, #128	@ 0x80
 8003080:	58d3      	ldr	r3, [r2, r3]
 8003082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	43da      	mvns	r2, r3
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4013      	ands	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	2380      	movs	r3, #128	@ 0x80
 8003094:	025b      	lsls	r3, r3, #9
 8003096:	4013      	ands	r3, r2
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030a2:	4909      	ldr	r1, [pc, #36]	@ (80030c8 <HAL_GPIO_Init+0x2b8>)
 80030a4:	2280      	movs	r2, #128	@ 0x80
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3301      	adds	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	40da      	lsrs	r2, r3
 80030b8:	1e13      	subs	r3, r2, #0
 80030ba:	d000      	beq.n	80030be <HAL_GPIO_Init+0x2ae>
 80030bc:	e6b0      	b.n	8002e20 <HAL_GPIO_Init+0x10>
  }
}
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	46c0      	nop			@ (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b006      	add	sp, #24
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021800 	.word	0x40021800
 80030cc:	50000400 	.word	0x50000400
 80030d0:	50000800 	.word	0x50000800
 80030d4:	50000c00 	.word	0x50000c00

080030d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	000a      	movs	r2, r1
 80030e2:	1cbb      	adds	r3, r7, #2
 80030e4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	1cba      	adds	r2, r7, #2
 80030ec:	8812      	ldrh	r2, [r2, #0]
 80030ee:	4013      	ands	r3, r2
 80030f0:	d004      	beq.n	80030fc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80030f2:	230f      	movs	r3, #15
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	e003      	b.n	8003104 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030fc:	230f      	movs	r3, #15
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003104:	230f      	movs	r3, #15
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	781b      	ldrb	r3, [r3, #0]
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b004      	add	sp, #16
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	0008      	movs	r0, r1
 800311c:	0011      	movs	r1, r2
 800311e:	1cbb      	adds	r3, r7, #2
 8003120:	1c02      	adds	r2, r0, #0
 8003122:	801a      	strh	r2, [r3, #0]
 8003124:	1c7b      	adds	r3, r7, #1
 8003126:	1c0a      	adds	r2, r1, #0
 8003128:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800312a:	1c7b      	adds	r3, r7, #1
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d004      	beq.n	800313c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003132:	1cbb      	adds	r3, r7, #2
 8003134:	881a      	ldrh	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800313a:	e003      	b.n	8003144 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800313c:	1cbb      	adds	r3, r7, #2
 800313e:	881a      	ldrh	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003144:	46c0      	nop			@ (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b002      	add	sp, #8
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	0002      	movs	r2, r0
 8003154:	1dbb      	adds	r3, r7, #6
 8003156:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003158:	4b10      	ldr	r3, [pc, #64]	@ (800319c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	1dba      	adds	r2, r7, #6
 800315e:	8812      	ldrh	r2, [r2, #0]
 8003160:	4013      	ands	r3, r2
 8003162:	d008      	beq.n	8003176 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003164:	4b0d      	ldr	r3, [pc, #52]	@ (800319c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003166:	1dba      	adds	r2, r7, #6
 8003168:	8812      	ldrh	r2, [r2, #0]
 800316a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800316c:	1dbb      	adds	r3, r7, #6
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	0018      	movs	r0, r3
 8003172:	f7ff f82f 	bl	80021d4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003176:	4b09      	ldr	r3, [pc, #36]	@ (800319c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	1dba      	adds	r2, r7, #6
 800317c:	8812      	ldrh	r2, [r2, #0]
 800317e:	4013      	ands	r3, r2
 8003180:	d008      	beq.n	8003194 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003182:	4b06      	ldr	r3, [pc, #24]	@ (800319c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003184:	1dba      	adds	r2, r7, #6
 8003186:	8812      	ldrh	r2, [r2, #0]
 8003188:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800318a:	1dbb      	adds	r3, r7, #6
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	0018      	movs	r0, r3
 8003190:	f7ff f876 	bl	8002280 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003194:	46c0      	nop			@ (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b002      	add	sp, #8
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021800 	.word	0x40021800

080031a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e08f      	b.n	80032d2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2241      	movs	r2, #65	@ 0x41
 80031b6:	5c9b      	ldrb	r3, [r3, r2]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d107      	bne.n	80031ce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2240      	movs	r2, #64	@ 0x40
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f7ff f8dd 	bl	8002388 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2241      	movs	r2, #65	@ 0x41
 80031d2:	2124      	movs	r1, #36	@ 0x24
 80031d4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2101      	movs	r1, #1
 80031e2:	438a      	bics	r2, r1
 80031e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	493b      	ldr	r1, [pc, #236]	@ (80032dc <HAL_I2C_Init+0x13c>)
 80031f0:	400a      	ands	r2, r1
 80031f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4938      	ldr	r1, [pc, #224]	@ (80032e0 <HAL_I2C_Init+0x140>)
 8003200:	400a      	ands	r2, r1
 8003202:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d108      	bne.n	800321e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2180      	movs	r1, #128	@ 0x80
 8003216:	0209      	lsls	r1, r1, #8
 8003218:	430a      	orrs	r2, r1
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	e007      	b.n	800322e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2184      	movs	r1, #132	@ 0x84
 8003228:	0209      	lsls	r1, r1, #8
 800322a:	430a      	orrs	r2, r1
 800322c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d109      	bne.n	800324a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2180      	movs	r1, #128	@ 0x80
 8003242:	0109      	lsls	r1, r1, #4
 8003244:	430a      	orrs	r2, r1
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	e007      	b.n	800325a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4923      	ldr	r1, [pc, #140]	@ (80032e4 <HAL_I2C_Init+0x144>)
 8003256:	400a      	ands	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4920      	ldr	r1, [pc, #128]	@ (80032e8 <HAL_I2C_Init+0x148>)
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	491a      	ldr	r1, [pc, #104]	@ (80032e0 <HAL_I2C_Init+0x140>)
 8003276:	400a      	ands	r2, r1
 8003278:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	431a      	orrs	r2, r3
 8003284:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69d9      	ldr	r1, [r3, #28]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1a      	ldr	r2, [r3, #32]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2101      	movs	r1, #1
 80032b0:	430a      	orrs	r2, r1
 80032b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2241      	movs	r2, #65	@ 0x41
 80032be:	2120      	movs	r1, #32
 80032c0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2242      	movs	r2, #66	@ 0x42
 80032cc:	2100      	movs	r1, #0
 80032ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	0018      	movs	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b002      	add	sp, #8
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	46c0      	nop			@ (mov r8, r8)
 80032dc:	f0ffffff 	.word	0xf0ffffff
 80032e0:	ffff7fff 	.word	0xffff7fff
 80032e4:	fffff7ff 	.word	0xfffff7ff
 80032e8:	02008000 	.word	0x02008000

080032ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b089      	sub	sp, #36	@ 0x24
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	0008      	movs	r0, r1
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	0019      	movs	r1, r3
 80032fa:	230a      	movs	r3, #10
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	1c02      	adds	r2, r0, #0
 8003300:	801a      	strh	r2, [r3, #0]
 8003302:	2308      	movs	r3, #8
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	1c0a      	adds	r2, r1, #0
 8003308:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2241      	movs	r2, #65	@ 0x41
 800330e:	5c9b      	ldrb	r3, [r3, r2]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b20      	cmp	r3, #32
 8003314:	d000      	beq.n	8003318 <HAL_I2C_Master_Transmit+0x2c>
 8003316:	e10a      	b.n	800352e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2240      	movs	r2, #64	@ 0x40
 800331c:	5c9b      	ldrb	r3, [r3, r2]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_I2C_Master_Transmit+0x3a>
 8003322:	2302      	movs	r3, #2
 8003324:	e104      	b.n	8003530 <HAL_I2C_Master_Transmit+0x244>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2240      	movs	r2, #64	@ 0x40
 800332a:	2101      	movs	r1, #1
 800332c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800332e:	f7ff fa61 	bl	80027f4 <HAL_GetTick>
 8003332:	0003      	movs	r3, r0
 8003334:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003336:	2380      	movs	r3, #128	@ 0x80
 8003338:	0219      	lsls	r1, r3, #8
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2319      	movs	r3, #25
 8003342:	2201      	movs	r2, #1
 8003344:	f001 f900 	bl	8004548 <I2C_WaitOnFlagUntilTimeout>
 8003348:	1e03      	subs	r3, r0, #0
 800334a:	d001      	beq.n	8003350 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0ef      	b.n	8003530 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2241      	movs	r2, #65	@ 0x41
 8003354:	2121      	movs	r1, #33	@ 0x21
 8003356:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2242      	movs	r2, #66	@ 0x42
 800335c:	2110      	movs	r1, #16
 800335e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2208      	movs	r2, #8
 8003370:	18ba      	adds	r2, r7, r2
 8003372:	8812      	ldrh	r2, [r2, #0]
 8003374:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003380:	b29b      	uxth	r3, r3
 8003382:	2bff      	cmp	r3, #255	@ 0xff
 8003384:	d906      	bls.n	8003394 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	22ff      	movs	r2, #255	@ 0xff
 800338a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800338c:	2380      	movs	r3, #128	@ 0x80
 800338e:	045b      	lsls	r3, r3, #17
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e007      	b.n	80033a4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800339e:	2380      	movs	r3, #128	@ 0x80
 80033a0:	049b      	lsls	r3, r3, #18
 80033a2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d027      	beq.n	80033fc <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	3301      	adds	r3, #1
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	697c      	ldr	r4, [r7, #20]
 80033e8:	230a      	movs	r3, #10
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	8819      	ldrh	r1, [r3, #0]
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	4b51      	ldr	r3, [pc, #324]	@ (8003538 <HAL_I2C_Master_Transmit+0x24c>)
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	0023      	movs	r3, r4
 80033f6:	f001 fb1f 	bl	8004a38 <I2C_TransferConfig>
 80033fa:	e06f      	b.n	80034dc <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003400:	b2da      	uxtb	r2, r3
 8003402:	697c      	ldr	r4, [r7, #20]
 8003404:	230a      	movs	r3, #10
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	8819      	ldrh	r1, [r3, #0]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	4b4a      	ldr	r3, [pc, #296]	@ (8003538 <HAL_I2C_Master_Transmit+0x24c>)
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	0023      	movs	r3, r4
 8003412:	f001 fb11 	bl	8004a38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003416:	e061      	b.n	80034dc <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	0018      	movs	r0, r3
 8003420:	f001 f8ea 	bl	80045f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003424:	1e03      	subs	r3, r0, #0
 8003426:	d001      	beq.n	800342c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e081      	b.n	8003530 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	781a      	ldrb	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d03a      	beq.n	80034dc <HAL_I2C_Master_Transmit+0x1f0>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346a:	2b00      	cmp	r3, #0
 800346c:	d136      	bne.n	80034dc <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800346e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	0013      	movs	r3, r2
 8003478:	2200      	movs	r2, #0
 800347a:	2180      	movs	r1, #128	@ 0x80
 800347c:	f001 f864 	bl	8004548 <I2C_WaitOnFlagUntilTimeout>
 8003480:	1e03      	subs	r3, r0, #0
 8003482:	d001      	beq.n	8003488 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e053      	b.n	8003530 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	2bff      	cmp	r3, #255	@ 0xff
 8003490:	d911      	bls.n	80034b6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	22ff      	movs	r2, #255	@ 0xff
 8003496:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349c:	b2da      	uxtb	r2, r3
 800349e:	2380      	movs	r3, #128	@ 0x80
 80034a0:	045c      	lsls	r4, r3, #17
 80034a2:	230a      	movs	r3, #10
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	8819      	ldrh	r1, [r3, #0]
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	2300      	movs	r3, #0
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	0023      	movs	r3, r4
 80034b0:	f001 fac2 	bl	8004a38 <I2C_TransferConfig>
 80034b4:	e012      	b.n	80034dc <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	2380      	movs	r3, #128	@ 0x80
 80034c8:	049c      	lsls	r4, r3, #18
 80034ca:	230a      	movs	r3, #10
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	8819      	ldrh	r1, [r3, #0]
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	2300      	movs	r3, #0
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	0023      	movs	r3, r4
 80034d8:	f001 faae 	bl	8004a38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d198      	bne.n	8003418 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	0018      	movs	r0, r3
 80034ee:	f001 f8c9 	bl	8004684 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034f2:	1e03      	subs	r3, r0, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e01a      	b.n	8003530 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2220      	movs	r2, #32
 8003500:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	490b      	ldr	r1, [pc, #44]	@ (800353c <HAL_I2C_Master_Transmit+0x250>)
 800350e:	400a      	ands	r2, r1
 8003510:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2241      	movs	r2, #65	@ 0x41
 8003516:	2120      	movs	r1, #32
 8003518:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2242      	movs	r2, #66	@ 0x42
 800351e:	2100      	movs	r1, #0
 8003520:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2240      	movs	r2, #64	@ 0x40
 8003526:	2100      	movs	r1, #0
 8003528:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	e000      	b.n	8003530 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800352e:	2302      	movs	r3, #2
  }
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	b007      	add	sp, #28
 8003536:	bd90      	pop	{r4, r7, pc}
 8003538:	80002000 	.word	0x80002000
 800353c:	fe00e800 	.word	0xfe00e800

08003540 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b089      	sub	sp, #36	@ 0x24
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	0008      	movs	r0, r1
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	0019      	movs	r1, r3
 800354e:	230a      	movs	r3, #10
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	1c02      	adds	r2, r0, #0
 8003554:	801a      	strh	r2, [r3, #0]
 8003556:	2308      	movs	r3, #8
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	1c0a      	adds	r2, r1, #0
 800355c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2241      	movs	r2, #65	@ 0x41
 8003562:	5c9b      	ldrb	r3, [r3, r2]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b20      	cmp	r3, #32
 8003568:	d000      	beq.n	800356c <HAL_I2C_Master_Receive+0x2c>
 800356a:	e0e8      	b.n	800373e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2240      	movs	r2, #64	@ 0x40
 8003570:	5c9b      	ldrb	r3, [r3, r2]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_I2C_Master_Receive+0x3a>
 8003576:	2302      	movs	r3, #2
 8003578:	e0e2      	b.n	8003740 <HAL_I2C_Master_Receive+0x200>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2240      	movs	r2, #64	@ 0x40
 800357e:	2101      	movs	r1, #1
 8003580:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003582:	f7ff f937 	bl	80027f4 <HAL_GetTick>
 8003586:	0003      	movs	r3, r0
 8003588:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800358a:	2380      	movs	r3, #128	@ 0x80
 800358c:	0219      	lsls	r1, r3, #8
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2319      	movs	r3, #25
 8003596:	2201      	movs	r2, #1
 8003598:	f000 ffd6 	bl	8004548 <I2C_WaitOnFlagUntilTimeout>
 800359c:	1e03      	subs	r3, r0, #0
 800359e:	d001      	beq.n	80035a4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0cd      	b.n	8003740 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2241      	movs	r2, #65	@ 0x41
 80035a8:	2122      	movs	r1, #34	@ 0x22
 80035aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2242      	movs	r2, #66	@ 0x42
 80035b0:	2110      	movs	r1, #16
 80035b2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2208      	movs	r2, #8
 80035c4:	18ba      	adds	r2, r7, r2
 80035c6:	8812      	ldrh	r2, [r2, #0]
 80035c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2bff      	cmp	r3, #255	@ 0xff
 80035d8:	d911      	bls.n	80035fe <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	22ff      	movs	r2, #255	@ 0xff
 80035de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	045c      	lsls	r4, r3, #17
 80035ea:	230a      	movs	r3, #10
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	8819      	ldrh	r1, [r3, #0]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	4b55      	ldr	r3, [pc, #340]	@ (8003748 <HAL_I2C_Master_Receive+0x208>)
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	0023      	movs	r3, r4
 80035f8:	f001 fa1e 	bl	8004a38 <I2C_TransferConfig>
 80035fc:	e076      	b.n	80036ec <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360c:	b2da      	uxtb	r2, r3
 800360e:	2380      	movs	r3, #128	@ 0x80
 8003610:	049c      	lsls	r4, r3, #18
 8003612:	230a      	movs	r3, #10
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	8819      	ldrh	r1, [r3, #0]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	4b4b      	ldr	r3, [pc, #300]	@ (8003748 <HAL_I2C_Master_Receive+0x208>)
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	0023      	movs	r3, r4
 8003620:	f001 fa0a 	bl	8004a38 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003624:	e062      	b.n	80036ec <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	0018      	movs	r0, r3
 800362e:	f001 f86d 	bl	800470c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003632:	1e03      	subs	r3, r0, #0
 8003634:	d001      	beq.n	800363a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e082      	b.n	8003740 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d03a      	beq.n	80036ec <HAL_I2C_Master_Receive+0x1ac>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367a:	2b00      	cmp	r3, #0
 800367c:	d136      	bne.n	80036ec <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800367e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	0013      	movs	r3, r2
 8003688:	2200      	movs	r2, #0
 800368a:	2180      	movs	r1, #128	@ 0x80
 800368c:	f000 ff5c 	bl	8004548 <I2C_WaitOnFlagUntilTimeout>
 8003690:	1e03      	subs	r3, r0, #0
 8003692:	d001      	beq.n	8003698 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e053      	b.n	8003740 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	2bff      	cmp	r3, #255	@ 0xff
 80036a0:	d911      	bls.n	80036c6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	22ff      	movs	r2, #255	@ 0xff
 80036a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	2380      	movs	r3, #128	@ 0x80
 80036b0:	045c      	lsls	r4, r3, #17
 80036b2:	230a      	movs	r3, #10
 80036b4:	18fb      	adds	r3, r7, r3
 80036b6:	8819      	ldrh	r1, [r3, #0]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	2300      	movs	r3, #0
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	0023      	movs	r3, r4
 80036c0:	f001 f9ba 	bl	8004a38 <I2C_TransferConfig>
 80036c4:	e012      	b.n	80036ec <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	2380      	movs	r3, #128	@ 0x80
 80036d8:	049c      	lsls	r4, r3, #18
 80036da:	230a      	movs	r3, #10
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	8819      	ldrh	r1, [r3, #0]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	2300      	movs	r3, #0
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	0023      	movs	r3, r4
 80036e8:	f001 f9a6 	bl	8004a38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d197      	bne.n	8003626 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f000 ffc1 	bl	8004684 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003702:	1e03      	subs	r3, r0, #0
 8003704:	d001      	beq.n	800370a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e01a      	b.n	8003740 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2220      	movs	r2, #32
 8003710:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	490b      	ldr	r1, [pc, #44]	@ (800374c <HAL_I2C_Master_Receive+0x20c>)
 800371e:	400a      	ands	r2, r1
 8003720:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2241      	movs	r2, #65	@ 0x41
 8003726:	2120      	movs	r1, #32
 8003728:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2242      	movs	r2, #66	@ 0x42
 800372e:	2100      	movs	r1, #0
 8003730:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2240      	movs	r2, #64	@ 0x40
 8003736:	2100      	movs	r1, #0
 8003738:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	e000      	b.n	8003740 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800373e:	2302      	movs	r3, #2
  }
}
 8003740:	0018      	movs	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	b007      	add	sp, #28
 8003746:	bd90      	pop	{r4, r7, pc}
 8003748:	80002400 	.word	0x80002400
 800374c:	fe00e800 	.word	0xfe00e800

08003750 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	@ 0x28
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	230a      	movs	r3, #10
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	1c0a      	adds	r2, r1, #0
 8003762:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2241      	movs	r2, #65	@ 0x41
 800376c:	5c9b      	ldrb	r3, [r3, r2]
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b20      	cmp	r3, #32
 8003772:	d000      	beq.n	8003776 <HAL_I2C_IsDeviceReady+0x26>
 8003774:	e0df      	b.n	8003936 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	2380      	movs	r3, #128	@ 0x80
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	401a      	ands	r2, r3
 8003782:	2380      	movs	r3, #128	@ 0x80
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	429a      	cmp	r2, r3
 8003788:	d101      	bne.n	800378e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800378a:	2302      	movs	r3, #2
 800378c:	e0d4      	b.n	8003938 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2240      	movs	r2, #64	@ 0x40
 8003792:	5c9b      	ldrb	r3, [r3, r2]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_I2C_IsDeviceReady+0x4c>
 8003798:	2302      	movs	r3, #2
 800379a:	e0cd      	b.n	8003938 <HAL_I2C_IsDeviceReady+0x1e8>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2240      	movs	r2, #64	@ 0x40
 80037a0:	2101      	movs	r1, #1
 80037a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2241      	movs	r2, #65	@ 0x41
 80037a8:	2124      	movs	r1, #36	@ 0x24
 80037aa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d107      	bne.n	80037ca <HAL_I2C_IsDeviceReady+0x7a>
 80037ba:	230a      	movs	r3, #10
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	059b      	lsls	r3, r3, #22
 80037c2:	0d9b      	lsrs	r3, r3, #22
 80037c4:	4a5e      	ldr	r2, [pc, #376]	@ (8003940 <HAL_I2C_IsDeviceReady+0x1f0>)
 80037c6:	431a      	orrs	r2, r3
 80037c8:	e006      	b.n	80037d8 <HAL_I2C_IsDeviceReady+0x88>
 80037ca:	230a      	movs	r3, #10
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	059b      	lsls	r3, r3, #22
 80037d2:	0d9b      	lsrs	r3, r3, #22
 80037d4:	4a5b      	ldr	r2, [pc, #364]	@ (8003944 <HAL_I2C_IsDeviceReady+0x1f4>)
 80037d6:	431a      	orrs	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80037de:	f7ff f809 	bl	80027f4 <HAL_GetTick>
 80037e2:	0003      	movs	r3, r0
 80037e4:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2220      	movs	r2, #32
 80037ee:	4013      	ands	r3, r2
 80037f0:	3b20      	subs	r3, #32
 80037f2:	425a      	negs	r2, r3
 80037f4:	4153      	adcs	r3, r2
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	231f      	movs	r3, #31
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2210      	movs	r2, #16
 8003806:	4013      	ands	r3, r2
 8003808:	3b10      	subs	r3, #16
 800380a:	425a      	negs	r2, r3
 800380c:	4153      	adcs	r3, r2
 800380e:	b2da      	uxtb	r2, r3
 8003810:	231e      	movs	r3, #30
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003816:	e035      	b.n	8003884 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	3301      	adds	r3, #1
 800381c:	d01a      	beq.n	8003854 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800381e:	f7fe ffe9 	bl	80027f4 <HAL_GetTick>
 8003822:	0002      	movs	r2, r0
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d302      	bcc.n	8003834 <HAL_I2C_IsDeviceReady+0xe4>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10f      	bne.n	8003854 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2241      	movs	r2, #65	@ 0x41
 8003838:	2120      	movs	r1, #32
 800383a:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003840:	2220      	movs	r2, #32
 8003842:	431a      	orrs	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2240      	movs	r2, #64	@ 0x40
 800384c:	2100      	movs	r1, #0
 800384e:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e071      	b.n	8003938 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2220      	movs	r2, #32
 800385c:	4013      	ands	r3, r2
 800385e:	3b20      	subs	r3, #32
 8003860:	425a      	negs	r2, r3
 8003862:	4153      	adcs	r3, r2
 8003864:	b2da      	uxtb	r2, r3
 8003866:	231f      	movs	r3, #31
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	2210      	movs	r2, #16
 8003874:	4013      	ands	r3, r2
 8003876:	3b10      	subs	r3, #16
 8003878:	425a      	negs	r2, r3
 800387a:	4153      	adcs	r3, r2
 800387c:	b2da      	uxtb	r2, r3
 800387e:	231e      	movs	r3, #30
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003884:	231f      	movs	r3, #31
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d104      	bne.n	8003898 <HAL_I2C_IsDeviceReady+0x148>
 800388e:	231e      	movs	r3, #30
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0bf      	beq.n	8003818 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2210      	movs	r2, #16
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b10      	cmp	r3, #16
 80038a4:	d01a      	beq.n	80038dc <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	0013      	movs	r3, r2
 80038b0:	2200      	movs	r2, #0
 80038b2:	2120      	movs	r1, #32
 80038b4:	f000 fe48 	bl	8004548 <I2C_WaitOnFlagUntilTimeout>
 80038b8:	1e03      	subs	r3, r0, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e03b      	b.n	8003938 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2220      	movs	r2, #32
 80038c6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2241      	movs	r2, #65	@ 0x41
 80038cc:	2120      	movs	r1, #32
 80038ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2240      	movs	r2, #64	@ 0x40
 80038d4:	2100      	movs	r1, #0
 80038d6:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	e02d      	b.n	8003938 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	0013      	movs	r3, r2
 80038e6:	2200      	movs	r2, #0
 80038e8:	2120      	movs	r1, #32
 80038ea:	f000 fe2d 	bl	8004548 <I2C_WaitOnFlagUntilTimeout>
 80038ee:	1e03      	subs	r3, r0, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e020      	b.n	8003938 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2210      	movs	r2, #16
 80038fc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2220      	movs	r2, #32
 8003904:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	3301      	adds	r3, #1
 800390a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	429a      	cmp	r2, r3
 8003912:	d900      	bls.n	8003916 <HAL_I2C_IsDeviceReady+0x1c6>
 8003914:	e74d      	b.n	80037b2 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2241      	movs	r2, #65	@ 0x41
 800391a:	2120      	movs	r1, #32
 800391c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003922:	2220      	movs	r2, #32
 8003924:	431a      	orrs	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2240      	movs	r2, #64	@ 0x40
 800392e:	2100      	movs	r1, #0
 8003930:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8003936:	2302      	movs	r3, #2
  }
}
 8003938:	0018      	movs	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	b008      	add	sp, #32
 800393e:	bd80      	pop	{r7, pc}
 8003940:	02002000 	.word	0x02002000
 8003944:	02002800 	.word	0x02002800

08003948 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	68f9      	ldr	r1, [r7, #12]
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	4798      	blx	r3
  }
}
 8003974:	46c0      	nop			@ (mov r8, r8)
 8003976:	46bd      	mov	sp, r7
 8003978:	b004      	add	sp, #16
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	2380      	movs	r3, #128	@ 0x80
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4013      	ands	r3, r2
 800399c:	d00e      	beq.n	80039bc <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2280      	movs	r2, #128	@ 0x80
 80039a2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80039a4:	d00a      	beq.n	80039bc <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039aa:	2201      	movs	r2, #1
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2280      	movs	r2, #128	@ 0x80
 80039b8:	0052      	lsls	r2, r2, #1
 80039ba:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	2380      	movs	r3, #128	@ 0x80
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	4013      	ands	r3, r2
 80039c4:	d00e      	beq.n	80039e4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2280      	movs	r2, #128	@ 0x80
 80039ca:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80039cc:	d00a      	beq.n	80039e4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d2:	2208      	movs	r2, #8
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2280      	movs	r2, #128	@ 0x80
 80039e0:	00d2      	lsls	r2, r2, #3
 80039e2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	2380      	movs	r3, #128	@ 0x80
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4013      	ands	r3, r2
 80039ec:	d00e      	beq.n	8003a0c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2280      	movs	r2, #128	@ 0x80
 80039f2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80039f4:	d00a      	beq.n	8003a0c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fa:	2202      	movs	r2, #2
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2280      	movs	r2, #128	@ 0x80
 8003a08:	0092      	lsls	r2, r2, #2
 8003a0a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	220b      	movs	r2, #11
 8003a16:	4013      	ands	r3, r2
 8003a18:	d005      	beq.n	8003a26 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	0011      	movs	r1, r2
 8003a20:	0018      	movs	r0, r3
 8003a22:	f000 fc25 	bl	8004270 <I2C_ITError>
  }
}
 8003a26:	46c0      	nop			@ (mov r8, r8)
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b006      	add	sp, #24
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a36:	46c0      	nop			@ (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b002      	add	sp, #8
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b002      	add	sp, #8
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	0008      	movs	r0, r1
 8003a58:	0011      	movs	r1, r2
 8003a5a:	1cfb      	adds	r3, r7, #3
 8003a5c:	1c02      	adds	r2, r0, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
 8003a60:	003b      	movs	r3, r7
 8003a62:	1c0a      	adds	r2, r1, #0
 8003a64:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a66:	46c0      	nop			@ (mov r8, r8)
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b002      	add	sp, #8
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003a76:	46c0      	nop			@ (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b002      	add	sp, #8
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b002      	add	sp, #8
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b002      	add	sp, #8
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2240      	movs	r2, #64	@ 0x40
 8003aba:	5c9b      	ldrb	r3, [r3, r2]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <I2C_Slave_ISR_IT+0x24>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e0e7      	b.n	8003c94 <I2C_Slave_ISR_IT+0x1f4>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2240      	movs	r2, #64	@ 0x40
 8003ac8:	2101      	movs	r1, #1
 8003aca:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d00a      	beq.n	8003aea <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ada:	d006      	beq.n	8003aea <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	0011      	movs	r1, r2
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f000 f9e4 	bl	8003eb0 <I2C_ITSlaveCplt>
 8003ae8:	e0cf      	b.n	8003c8a <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	2210      	movs	r2, #16
 8003aee:	4013      	ands	r3, r2
 8003af0:	d052      	beq.n	8003b98 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2210      	movs	r2, #16
 8003af6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003af8:	d04e      	beq.n	8003b98 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d12d      	bne.n	8003b60 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2241      	movs	r2, #65	@ 0x41
 8003b08:	5c9b      	ldrb	r3, [r3, r2]
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b28      	cmp	r3, #40	@ 0x28
 8003b0e:	d10b      	bne.n	8003b28 <I2C_Slave_ISR_IT+0x88>
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	2380      	movs	r3, #128	@ 0x80
 8003b14:	049b      	lsls	r3, r3, #18
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d106      	bne.n	8003b28 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	0011      	movs	r1, r2
 8003b20:	0018      	movs	r0, r3
 8003b22:	f000 fb4d 	bl	80041c0 <I2C_ITListenCplt>
 8003b26:	e036      	b.n	8003b96 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2241      	movs	r2, #65	@ 0x41
 8003b2c:	5c9b      	ldrb	r3, [r3, r2]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b29      	cmp	r3, #41	@ 0x29
 8003b32:	d110      	bne.n	8003b56 <I2C_Slave_ISR_IT+0xb6>
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	4a59      	ldr	r2, [pc, #356]	@ (8003c9c <I2C_Slave_ISR_IT+0x1fc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00c      	beq.n	8003b56 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2210      	movs	r2, #16
 8003b42:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	0018      	movs	r0, r3
 8003b48:	f000 fcbd 	bl	80044c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f000 f94a 	bl	8003de8 <I2C_ITSlaveSeqCplt>
 8003b54:	e01f      	b.n	8003b96 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2210      	movs	r2, #16
 8003b5c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003b5e:	e091      	b.n	8003c84 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2210      	movs	r2, #16
 8003b66:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <I2C_Slave_ISR_IT+0xe6>
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	2380      	movs	r3, #128	@ 0x80
 8003b7e:	045b      	lsls	r3, r3, #17
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d000      	beq.n	8003b86 <I2C_Slave_ISR_IT+0xe6>
 8003b84:	e07e      	b.n	8003c84 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	0011      	movs	r1, r2
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f000 fb6e 	bl	8004270 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003b94:	e076      	b.n	8003c84 <I2C_Slave_ISR_IT+0x1e4>
 8003b96:	e075      	b.n	8003c84 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d02f      	beq.n	8003c00 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003ba6:	d02b      	beq.n	8003c00 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d018      	beq.n	8003be4 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d14c      	bne.n	8003c88 <I2C_Slave_ISR_IT+0x1e8>
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8003c9c <I2C_Slave_ISR_IT+0x1fc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d048      	beq.n	8003c88 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f000 f8f5 	bl	8003de8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003bfe:	e043      	b.n	8003c88 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2208      	movs	r2, #8
 8003c04:	4013      	ands	r3, r2
 8003c06:	d00a      	beq.n	8003c1e <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2208      	movs	r2, #8
 8003c0c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c0e:	d006      	beq.n	8003c1e <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	0011      	movs	r1, r2
 8003c16:	0018      	movs	r0, r3
 8003c18:	f000 f842 	bl	8003ca0 <I2C_ITAddrCplt>
 8003c1c:	e035      	b.n	8003c8a <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2202      	movs	r2, #2
 8003c22:	4013      	ands	r3, r2
 8003c24:	d031      	beq.n	8003c8a <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003c2c:	d02d      	beq.n	8003c8a <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d018      	beq.n	8003c6a <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003c68:	e00f      	b.n	8003c8a <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	2380      	movs	r3, #128	@ 0x80
 8003c6e:	045b      	lsls	r3, r3, #17
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d002      	beq.n	8003c7a <I2C_Slave_ISR_IT+0x1da>
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d107      	bne.n	8003c8a <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f000 f8b3 	bl	8003de8 <I2C_ITSlaveSeqCplt>
 8003c82:	e002      	b.n	8003c8a <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8003c84:	46c0      	nop			@ (mov r8, r8)
 8003c86:	e000      	b.n	8003c8a <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8003c88:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2240      	movs	r2, #64	@ 0x40
 8003c8e:	2100      	movs	r1, #0
 8003c90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	0018      	movs	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b006      	add	sp, #24
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	ffff0000 	.word	0xffff0000

08003ca0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ca0:	b5b0      	push	{r4, r5, r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2241      	movs	r2, #65	@ 0x41
 8003cae:	5c9b      	ldrb	r3, [r3, r2]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	001a      	movs	r2, r3
 8003cb4:	2328      	movs	r3, #40	@ 0x28
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b28      	cmp	r3, #40	@ 0x28
 8003cba:	d000      	beq.n	8003cbe <I2C_ITAddrCplt+0x1e>
 8003cbc:	e088      	b.n	8003dd0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	250f      	movs	r5, #15
 8003cca:	197b      	adds	r3, r7, r5
 8003ccc:	2101      	movs	r1, #1
 8003cce:	400a      	ands	r2, r1
 8003cd0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	200c      	movs	r0, #12
 8003cde:	183b      	adds	r3, r7, r0
 8003ce0:	21fe      	movs	r1, #254	@ 0xfe
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	240a      	movs	r4, #10
 8003cf0:	193b      	adds	r3, r7, r4
 8003cf2:	0592      	lsls	r2, r2, #22
 8003cf4:	0d92      	lsrs	r2, r2, #22
 8003cf6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	2308      	movs	r3, #8
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	21fe      	movs	r1, #254	@ 0xfe
 8003d06:	400a      	ands	r2, r1
 8003d08:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d148      	bne.n	8003da4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003d12:	0021      	movs	r1, r4
 8003d14:	187b      	adds	r3, r7, r1
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	09db      	lsrs	r3, r3, #7
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	183b      	adds	r3, r7, r0
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	4053      	eors	r3, r2
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	001a      	movs	r2, r3
 8003d26:	2306      	movs	r3, #6
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d120      	bne.n	8003d6e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003d2c:	183b      	adds	r3, r7, r0
 8003d2e:	187a      	adds	r2, r7, r1
 8003d30:	8812      	ldrh	r2, [r2, #0]
 8003d32:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d14c      	bne.n	8003de0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2208      	movs	r2, #8
 8003d52:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2240      	movs	r2, #64	@ 0x40
 8003d58:	2100      	movs	r1, #0
 8003d5a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003d5c:	183b      	adds	r3, r7, r0
 8003d5e:	881a      	ldrh	r2, [r3, #0]
 8003d60:	197b      	adds	r3, r7, r5
 8003d62:	7819      	ldrb	r1, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	0018      	movs	r0, r3
 8003d68:	f7ff fe71 	bl	8003a4e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d6c:	e038      	b.n	8003de0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8003d6e:	240c      	movs	r4, #12
 8003d70:	193b      	adds	r3, r7, r4
 8003d72:	2208      	movs	r2, #8
 8003d74:	18ba      	adds	r2, r7, r2
 8003d76:	8812      	ldrh	r2, [r2, #0]
 8003d78:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003d7a:	2380      	movs	r3, #128	@ 0x80
 8003d7c:	021a      	lsls	r2, r3, #8
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	0011      	movs	r1, r2
 8003d82:	0018      	movs	r0, r3
 8003d84:	f000 fe92 	bl	8004aac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2240      	movs	r2, #64	@ 0x40
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003d90:	193b      	adds	r3, r7, r4
 8003d92:	881a      	ldrh	r2, [r3, #0]
 8003d94:	230f      	movs	r3, #15
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	7819      	ldrb	r1, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f7ff fe56 	bl	8003a4e <HAL_I2C_AddrCallback>
}
 8003da2:	e01d      	b.n	8003de0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003da4:	2380      	movs	r3, #128	@ 0x80
 8003da6:	021a      	lsls	r2, r3, #8
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	0011      	movs	r1, r2
 8003dac:	0018      	movs	r0, r3
 8003dae:	f000 fe7d 	bl	8004aac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2240      	movs	r2, #64	@ 0x40
 8003db6:	2100      	movs	r1, #0
 8003db8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003dba:	230c      	movs	r3, #12
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	881a      	ldrh	r2, [r3, #0]
 8003dc0:	230f      	movs	r3, #15
 8003dc2:	18fb      	adds	r3, r7, r3
 8003dc4:	7819      	ldrb	r1, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7ff fe40 	bl	8003a4e <HAL_I2C_AddrCallback>
}
 8003dce:	e007      	b.n	8003de0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2240      	movs	r2, #64	@ 0x40
 8003ddc:	2100      	movs	r1, #0
 8003dde:	5499      	strb	r1, [r3, r2]
}
 8003de0:	46c0      	nop			@ (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b004      	add	sp, #16
 8003de6:	bdb0      	pop	{r4, r5, r7, pc}

08003de8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2242      	movs	r2, #66	@ 0x42
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	2380      	movs	r3, #128	@ 0x80
 8003e04:	01db      	lsls	r3, r3, #7
 8003e06:	4013      	ands	r3, r2
 8003e08:	d008      	beq.n	8003e1c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4924      	ldr	r1, [pc, #144]	@ (8003ea8 <I2C_ITSlaveSeqCplt+0xc0>)
 8003e16:	400a      	ands	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e00c      	b.n	8003e36 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	2380      	movs	r3, #128	@ 0x80
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	4013      	ands	r3, r2
 8003e24:	d007      	beq.n	8003e36 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	491e      	ldr	r1, [pc, #120]	@ (8003eac <I2C_ITSlaveSeqCplt+0xc4>)
 8003e32:	400a      	ands	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2241      	movs	r2, #65	@ 0x41
 8003e3a:	5c9b      	ldrb	r3, [r3, r2]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b29      	cmp	r3, #41	@ 0x29
 8003e40:	d114      	bne.n	8003e6c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2241      	movs	r2, #65	@ 0x41
 8003e46:	2128      	movs	r1, #40	@ 0x28
 8003e48:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2221      	movs	r2, #33	@ 0x21
 8003e4e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2101      	movs	r1, #1
 8003e54:	0018      	movs	r0, r3
 8003e56:	f000 fe29 	bl	8004aac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2240      	movs	r2, #64	@ 0x40
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	0018      	movs	r0, r3
 8003e66:	f7ff fde2 	bl	8003a2e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e6a:	e019      	b.n	8003ea0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2241      	movs	r2, #65	@ 0x41
 8003e70:	5c9b      	ldrb	r3, [r3, r2]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e76:	d113      	bne.n	8003ea0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2241      	movs	r2, #65	@ 0x41
 8003e7c:	2128      	movs	r1, #40	@ 0x28
 8003e7e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2222      	movs	r2, #34	@ 0x22
 8003e84:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2102      	movs	r1, #2
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f000 fe0e 	bl	8004aac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2240      	movs	r2, #64	@ 0x40
 8003e94:	2100      	movs	r1, #0
 8003e96:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f7ff fdcf 	bl	8003a3e <HAL_I2C_SlaveRxCpltCallback>
}
 8003ea0:	46c0      	nop			@ (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b004      	add	sp, #16
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	ffffbfff 	.word	0xffffbfff
 8003eac:	ffff7fff 	.word	0xffff7fff

08003eb0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eca:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ecc:	200b      	movs	r0, #11
 8003ece:	183b      	adds	r3, r7, r0
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	2141      	movs	r1, #65	@ 0x41
 8003ed4:	5c52      	ldrb	r2, [r2, r1]
 8003ed6:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2220      	movs	r2, #32
 8003ede:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ee0:	183b      	adds	r3, r7, r0
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b21      	cmp	r3, #33	@ 0x21
 8003ee6:	d003      	beq.n	8003ef0 <I2C_ITSlaveCplt+0x40>
 8003ee8:	183b      	adds	r3, r7, r0
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b29      	cmp	r3, #41	@ 0x29
 8003eee:	d109      	bne.n	8003f04 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003ef0:	4aac      	ldr	r2, [pc, #688]	@ (80041a4 <I2C_ITSlaveCplt+0x2f4>)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0011      	movs	r1, r2
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f000 fdd8 	bl	8004aac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2221      	movs	r2, #33	@ 0x21
 8003f00:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f02:	e020      	b.n	8003f46 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f04:	220b      	movs	r2, #11
 8003f06:	18bb      	adds	r3, r7, r2
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b22      	cmp	r3, #34	@ 0x22
 8003f0c:	d003      	beq.n	8003f16 <I2C_ITSlaveCplt+0x66>
 8003f0e:	18bb      	adds	r3, r7, r2
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f14:	d109      	bne.n	8003f2a <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003f16:	4aa4      	ldr	r2, [pc, #656]	@ (80041a8 <I2C_ITSlaveCplt+0x2f8>)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	0011      	movs	r1, r2
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f000 fdc5 	bl	8004aac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2222      	movs	r2, #34	@ 0x22
 8003f26:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f28:	e00d      	b.n	8003f46 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003f2a:	230b      	movs	r3, #11
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b28      	cmp	r3, #40	@ 0x28
 8003f32:	d108      	bne.n	8003f46 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003f34:	4a9d      	ldr	r2, [pc, #628]	@ (80041ac <I2C_ITSlaveCplt+0x2fc>)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	0011      	movs	r1, r2
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f000 fdb6 	bl	8004aac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2180      	movs	r1, #128	@ 0x80
 8003f52:	0209      	lsls	r1, r1, #8
 8003f54:	430a      	orrs	r2, r1
 8003f56:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4993      	ldr	r1, [pc, #588]	@ (80041b0 <I2C_ITSlaveCplt+0x300>)
 8003f64:	400a      	ands	r2, r1
 8003f66:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f000 faab 	bl	80044c6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	2380      	movs	r3, #128	@ 0x80
 8003f74:	01db      	lsls	r3, r3, #7
 8003f76:	4013      	ands	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	498b      	ldr	r1, [pc, #556]	@ (80041b4 <I2C_ITSlaveCplt+0x304>)
 8003f86:	400a      	ands	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d01f      	beq.n	8003fd2 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fa0:	e017      	b.n	8003fd2 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	2380      	movs	r3, #128	@ 0x80
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	4013      	ands	r3, r2
 8003faa:	d012      	beq.n	8003fd2 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4980      	ldr	r1, [pc, #512]	@ (80041b8 <I2C_ITSlaveCplt+0x308>)
 8003fb8:	400a      	ands	r2, r1
 8003fba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d020      	beq.n	800401c <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2204      	movs	r2, #4
 8003fde:	4393      	bics	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	b2d2      	uxtb	r2, r2
 8003fee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00c      	beq.n	800401c <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402a:	2204      	movs	r2, #4
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2210      	movs	r2, #16
 8004036:	4013      	ands	r3, r2
 8004038:	d04f      	beq.n	80040da <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	2210      	movs	r2, #16
 800403e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004040:	d04b      	beq.n	80040da <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004046:	b29b      	uxth	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d12d      	bne.n	80040a8 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2241      	movs	r2, #65	@ 0x41
 8004050:	5c9b      	ldrb	r3, [r3, r2]
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b28      	cmp	r3, #40	@ 0x28
 8004056:	d10b      	bne.n	8004070 <I2C_ITSlaveCplt+0x1c0>
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	2380      	movs	r3, #128	@ 0x80
 800405c:	049b      	lsls	r3, r3, #18
 800405e:	429a      	cmp	r2, r3
 8004060:	d106      	bne.n	8004070 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	0011      	movs	r1, r2
 8004068:	0018      	movs	r0, r3
 800406a:	f000 f8a9 	bl	80041c0 <I2C_ITListenCplt>
 800406e:	e034      	b.n	80040da <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2241      	movs	r2, #65	@ 0x41
 8004074:	5c9b      	ldrb	r3, [r3, r2]
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b29      	cmp	r3, #41	@ 0x29
 800407a:	d110      	bne.n	800409e <I2C_ITSlaveCplt+0x1ee>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a4f      	ldr	r2, [pc, #316]	@ (80041bc <I2C_ITSlaveCplt+0x30c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00c      	beq.n	800409e <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2210      	movs	r2, #16
 800408a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	0018      	movs	r0, r3
 8004090:	f000 fa19 	bl	80044c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	0018      	movs	r0, r3
 8004098:	f7ff fea6 	bl	8003de8 <I2C_ITSlaveSeqCplt>
 800409c:	e01d      	b.n	80040da <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2210      	movs	r2, #16
 80040a4:	61da      	str	r2, [r3, #28]
 80040a6:	e018      	b.n	80040da <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2210      	movs	r2, #16
 80040ae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b4:	2204      	movs	r2, #4
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <I2C_ITSlaveCplt+0x21c>
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	2380      	movs	r3, #128	@ 0x80
 80040c6:	045b      	lsls	r3, r3, #17
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d106      	bne.n	80040da <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	0011      	movs	r1, r2
 80040d4:	0018      	movs	r0, r3
 80040d6:	f000 f8cb 	bl	8004270 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2242      	movs	r2, #66	@ 0x42
 80040de:	2100      	movs	r1, #0
 80040e0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d013      	beq.n	8004118 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	0011      	movs	r1, r2
 80040f8:	0018      	movs	r0, r3
 80040fa:	f000 f8b9 	bl	8004270 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2241      	movs	r2, #65	@ 0x41
 8004102:	5c9b      	ldrb	r3, [r3, r2]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b28      	cmp	r3, #40	@ 0x28
 8004108:	d147      	bne.n	800419a <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	0011      	movs	r1, r2
 8004110:	0018      	movs	r0, r3
 8004112:	f000 f855 	bl	80041c0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004116:	e040      	b.n	800419a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411c:	4a27      	ldr	r2, [pc, #156]	@ (80041bc <I2C_ITSlaveCplt+0x30c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d016      	beq.n	8004150 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	0018      	movs	r0, r3
 8004126:	f7ff fe5f 	bl	8003de8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a23      	ldr	r2, [pc, #140]	@ (80041bc <I2C_ITSlaveCplt+0x30c>)
 800412e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2241      	movs	r2, #65	@ 0x41
 8004134:	2120      	movs	r1, #32
 8004136:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2240      	movs	r2, #64	@ 0x40
 8004142:	2100      	movs	r1, #0
 8004144:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	0018      	movs	r0, r3
 800414a:	f7ff fc90 	bl	8003a6e <HAL_I2C_ListenCpltCallback>
}
 800414e:	e024      	b.n	800419a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2241      	movs	r2, #65	@ 0x41
 8004154:	5c9b      	ldrb	r3, [r3, r2]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b22      	cmp	r3, #34	@ 0x22
 800415a:	d10f      	bne.n	800417c <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2241      	movs	r2, #65	@ 0x41
 8004160:	2120      	movs	r1, #32
 8004162:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2240      	movs	r2, #64	@ 0x40
 800416e:	2100      	movs	r1, #0
 8004170:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	0018      	movs	r0, r3
 8004176:	f7ff fc62 	bl	8003a3e <HAL_I2C_SlaveRxCpltCallback>
}
 800417a:	e00e      	b.n	800419a <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2241      	movs	r2, #65	@ 0x41
 8004180:	2120      	movs	r1, #32
 8004182:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2240      	movs	r2, #64	@ 0x40
 800418e:	2100      	movs	r1, #0
 8004190:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	0018      	movs	r0, r3
 8004196:	f7ff fc4a 	bl	8003a2e <HAL_I2C_SlaveTxCpltCallback>
}
 800419a:	46c0      	nop			@ (mov r8, r8)
 800419c:	46bd      	mov	sp, r7
 800419e:	b006      	add	sp, #24
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	46c0      	nop			@ (mov r8, r8)
 80041a4:	00008001 	.word	0x00008001
 80041a8:	00008002 	.word	0x00008002
 80041ac:	00008003 	.word	0x00008003
 80041b0:	fe00e800 	.word	0xfe00e800
 80041b4:	ffffbfff 	.word	0xffffbfff
 80041b8:	ffff7fff 	.word	0xffff7fff
 80041bc:	ffff0000 	.word	0xffff0000

080041c0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a26      	ldr	r2, [pc, #152]	@ (8004268 <I2C_ITListenCplt+0xa8>)
 80041ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2241      	movs	r2, #65	@ 0x41
 80041da:	2120      	movs	r1, #32
 80041dc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2242      	movs	r2, #66	@ 0x42
 80041e2:	2100      	movs	r1, #0
 80041e4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2204      	movs	r2, #4
 80041f0:	4013      	ands	r3, r2
 80041f2:	d022      	beq.n	800423a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004210:	2b00      	cmp	r3, #0
 8004212:	d012      	beq.n	800423a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004232:	2204      	movs	r2, #4
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800423a:	4a0c      	ldr	r2, [pc, #48]	@ (800426c <I2C_ITListenCplt+0xac>)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	0011      	movs	r1, r2
 8004240:	0018      	movs	r0, r3
 8004242:	f000 fc33 	bl	8004aac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2210      	movs	r2, #16
 800424c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2240      	movs	r2, #64	@ 0x40
 8004252:	2100      	movs	r1, #0
 8004254:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	0018      	movs	r0, r3
 800425a:	f7ff fc08 	bl	8003a6e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800425e:	46c0      	nop			@ (mov r8, r8)
 8004260:	46bd      	mov	sp, r7
 8004262:	b002      	add	sp, #8
 8004264:	bd80      	pop	{r7, pc}
 8004266:	46c0      	nop			@ (mov r8, r8)
 8004268:	ffff0000 	.word	0xffff0000
 800426c:	00008003 	.word	0x00008003

08004270 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800427a:	200f      	movs	r0, #15
 800427c:	183b      	adds	r3, r7, r0
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	2141      	movs	r1, #65	@ 0x41
 8004282:	5c52      	ldrb	r2, [r2, r1]
 8004284:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2242      	movs	r2, #66	@ 0x42
 800428a:	2100      	movs	r1, #0
 800428c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a72      	ldr	r2, [pc, #456]	@ (800445c <I2C_ITError+0x1ec>)
 8004292:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80042a6:	183b      	adds	r3, r7, r0
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b28      	cmp	r3, #40	@ 0x28
 80042ac:	d007      	beq.n	80042be <I2C_ITError+0x4e>
 80042ae:	183b      	adds	r3, r7, r0
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b29      	cmp	r3, #41	@ 0x29
 80042b4:	d003      	beq.n	80042be <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80042b6:	183b      	adds	r3, r7, r0
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80042bc:	d10c      	bne.n	80042d8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2103      	movs	r1, #3
 80042c2:	0018      	movs	r0, r3
 80042c4:	f000 fbf2 	bl	8004aac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2241      	movs	r2, #65	@ 0x41
 80042cc:	2128      	movs	r1, #40	@ 0x28
 80042ce:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a63      	ldr	r2, [pc, #396]	@ (8004460 <I2C_ITError+0x1f0>)
 80042d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80042d6:	e032      	b.n	800433e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042d8:	4a62      	ldr	r2, [pc, #392]	@ (8004464 <I2C_ITError+0x1f4>)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	0011      	movs	r1, r2
 80042de:	0018      	movs	r0, r3
 80042e0:	f000 fbe4 	bl	8004aac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	0018      	movs	r0, r3
 80042e8:	f000 f8ed 	bl	80044c6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2241      	movs	r2, #65	@ 0x41
 80042f0:	5c9b      	ldrb	r3, [r3, r2]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b60      	cmp	r3, #96	@ 0x60
 80042f6:	d01f      	beq.n	8004338 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2241      	movs	r2, #65	@ 0x41
 80042fc:	2120      	movs	r1, #32
 80042fe:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	2220      	movs	r2, #32
 8004308:	4013      	ands	r3, r2
 800430a:	2b20      	cmp	r3, #32
 800430c:	d114      	bne.n	8004338 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2210      	movs	r2, #16
 8004316:	4013      	ands	r3, r2
 8004318:	2b10      	cmp	r3, #16
 800431a:	d109      	bne.n	8004330 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2210      	movs	r2, #16
 8004322:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004328:	2204      	movs	r2, #4
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2220      	movs	r2, #32
 8004336:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004342:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004348:	2b00      	cmp	r3, #0
 800434a:	d03b      	beq.n	80043c4 <I2C_ITError+0x154>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b11      	cmp	r3, #17
 8004350:	d002      	beq.n	8004358 <I2C_ITError+0xe8>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b21      	cmp	r3, #33	@ 0x21
 8004356:	d135      	bne.n	80043c4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	2380      	movs	r3, #128	@ 0x80
 8004360:	01db      	lsls	r3, r3, #7
 8004362:	401a      	ands	r2, r3
 8004364:	2380      	movs	r3, #128	@ 0x80
 8004366:	01db      	lsls	r3, r3, #7
 8004368:	429a      	cmp	r2, r3
 800436a:	d107      	bne.n	800437c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	493c      	ldr	r1, [pc, #240]	@ (8004468 <I2C_ITError+0x1f8>)
 8004378:	400a      	ands	r2, r1
 800437a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004380:	0018      	movs	r0, r3
 8004382:	f7fe fce9 	bl	8002d58 <HAL_DMA_GetState>
 8004386:	0003      	movs	r3, r0
 8004388:	2b01      	cmp	r3, #1
 800438a:	d016      	beq.n	80043ba <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004390:	4a36      	ldr	r2, [pc, #216]	@ (800446c <I2C_ITError+0x1fc>)
 8004392:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2240      	movs	r2, #64	@ 0x40
 8004398:	2100      	movs	r1, #0
 800439a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a0:	0018      	movs	r0, r3
 80043a2:	f7fe fbbd 	bl	8002b20 <HAL_DMA_Abort_IT>
 80043a6:	1e03      	subs	r3, r0, #0
 80043a8:	d051      	beq.n	800444e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b4:	0018      	movs	r0, r3
 80043b6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043b8:	e049      	b.n	800444e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	0018      	movs	r0, r3
 80043be:	f000 f859 	bl	8004474 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043c2:	e044      	b.n	800444e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d03b      	beq.n	8004444 <I2C_ITError+0x1d4>
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b12      	cmp	r3, #18
 80043d0:	d002      	beq.n	80043d8 <I2C_ITError+0x168>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b22      	cmp	r3, #34	@ 0x22
 80043d6:	d135      	bne.n	8004444 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	2380      	movs	r3, #128	@ 0x80
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	401a      	ands	r2, r3
 80043e4:	2380      	movs	r3, #128	@ 0x80
 80043e6:	021b      	lsls	r3, r3, #8
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d107      	bne.n	80043fc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	491e      	ldr	r1, [pc, #120]	@ (8004470 <I2C_ITError+0x200>)
 80043f8:	400a      	ands	r2, r1
 80043fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004400:	0018      	movs	r0, r3
 8004402:	f7fe fca9 	bl	8002d58 <HAL_DMA_GetState>
 8004406:	0003      	movs	r3, r0
 8004408:	2b01      	cmp	r3, #1
 800440a:	d016      	beq.n	800443a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004410:	4a16      	ldr	r2, [pc, #88]	@ (800446c <I2C_ITError+0x1fc>)
 8004412:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2240      	movs	r2, #64	@ 0x40
 8004418:	2100      	movs	r1, #0
 800441a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004420:	0018      	movs	r0, r3
 8004422:	f7fe fb7d 	bl	8002b20 <HAL_DMA_Abort_IT>
 8004426:	1e03      	subs	r3, r0, #0
 8004428:	d013      	beq.n	8004452 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004434:	0018      	movs	r0, r3
 8004436:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004438:	e00b      	b.n	8004452 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	0018      	movs	r0, r3
 800443e:	f000 f819 	bl	8004474 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004442:	e006      	b.n	8004452 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	0018      	movs	r0, r3
 8004448:	f000 f814 	bl	8004474 <I2C_TreatErrorCallback>
  }
}
 800444c:	e002      	b.n	8004454 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800444e:	46c0      	nop			@ (mov r8, r8)
 8004450:	e000      	b.n	8004454 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004452:	46c0      	nop			@ (mov r8, r8)
}
 8004454:	46c0      	nop			@ (mov r8, r8)
 8004456:	46bd      	mov	sp, r7
 8004458:	b004      	add	sp, #16
 800445a:	bd80      	pop	{r7, pc}
 800445c:	ffff0000 	.word	0xffff0000
 8004460:	08003aa1 	.word	0x08003aa1
 8004464:	00008003 	.word	0x00008003
 8004468:	ffffbfff 	.word	0xffffbfff
 800446c:	0800450b 	.word	0x0800450b
 8004470:	ffff7fff 	.word	0xffff7fff

08004474 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2241      	movs	r2, #65	@ 0x41
 8004480:	5c9b      	ldrb	r3, [r3, r2]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b60      	cmp	r3, #96	@ 0x60
 8004486:	d10f      	bne.n	80044a8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2241      	movs	r2, #65	@ 0x41
 800448c:	2120      	movs	r1, #32
 800448e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2240      	movs	r2, #64	@ 0x40
 800449a:	2100      	movs	r1, #0
 800449c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0018      	movs	r0, r3
 80044a2:	f7ff faf4 	bl	8003a8e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044a6:	e00a      	b.n	80044be <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2240      	movs	r2, #64	@ 0x40
 80044b2:	2100      	movs	r1, #0
 80044b4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	0018      	movs	r0, r3
 80044ba:	f7ff fae0 	bl	8003a7e <HAL_I2C_ErrorCallback>
}
 80044be:	46c0      	nop			@ (mov r8, r8)
 80044c0:	46bd      	mov	sp, r7
 80044c2:	b002      	add	sp, #8
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2202      	movs	r2, #2
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d103      	bne.n	80044e4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2200      	movs	r2, #0
 80044e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2201      	movs	r2, #1
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d007      	beq.n	8004502 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2101      	movs	r1, #1
 80044fe:	430a      	orrs	r2, r1
 8004500:	619a      	str	r2, [r3, #24]
  }
}
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	46bd      	mov	sp, r7
 8004506:	b002      	add	sp, #8
 8004508:	bd80      	pop	{r7, pc}

0800450a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004524:	2200      	movs	r2, #0
 8004526:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004534:	2200      	movs	r2, #0
 8004536:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	0018      	movs	r0, r3
 800453c:	f7ff ff9a 	bl	8004474 <I2C_TreatErrorCallback>
}
 8004540:	46c0      	nop			@ (mov r8, r8)
 8004542:	46bd      	mov	sp, r7
 8004544:	b004      	add	sp, #16
 8004546:	bd80      	pop	{r7, pc}

08004548 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	1dfb      	adds	r3, r7, #7
 8004556:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004558:	e03a      	b.n	80045d0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	6839      	ldr	r1, [r7, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	0018      	movs	r0, r3
 8004562:	f000 f971 	bl	8004848 <I2C_IsErrorOccurred>
 8004566:	1e03      	subs	r3, r0, #0
 8004568:	d001      	beq.n	800456e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e040      	b.n	80045f0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	3301      	adds	r3, #1
 8004572:	d02d      	beq.n	80045d0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004574:	f7fe f93e 	bl	80027f4 <HAL_GetTick>
 8004578:	0002      	movs	r2, r0
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d302      	bcc.n	800458a <I2C_WaitOnFlagUntilTimeout+0x42>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d122      	bne.n	80045d0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	4013      	ands	r3, r2
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	425a      	negs	r2, r3
 800459a:	4153      	adcs	r3, r2
 800459c:	b2db      	uxtb	r3, r3
 800459e:	001a      	movs	r2, r3
 80045a0:	1dfb      	adds	r3, r7, #7
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d113      	bne.n	80045d0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ac:	2220      	movs	r2, #32
 80045ae:	431a      	orrs	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2241      	movs	r2, #65	@ 0x41
 80045b8:	2120      	movs	r1, #32
 80045ba:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2242      	movs	r2, #66	@ 0x42
 80045c0:	2100      	movs	r1, #0
 80045c2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2240      	movs	r2, #64	@ 0x40
 80045c8:	2100      	movs	r1, #0
 80045ca:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e00f      	b.n	80045f0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	4013      	ands	r3, r2
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	425a      	negs	r2, r3
 80045e0:	4153      	adcs	r3, r2
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	001a      	movs	r2, r3
 80045e6:	1dfb      	adds	r3, r7, #7
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d0b5      	beq.n	800455a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	0018      	movs	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b004      	add	sp, #16
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004604:	e032      	b.n	800466c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	0018      	movs	r0, r3
 800460e:	f000 f91b 	bl	8004848 <I2C_IsErrorOccurred>
 8004612:	1e03      	subs	r3, r0, #0
 8004614:	d001      	beq.n	800461a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e030      	b.n	800467c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	3301      	adds	r3, #1
 800461e:	d025      	beq.n	800466c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004620:	f7fe f8e8 	bl	80027f4 <HAL_GetTick>
 8004624:	0002      	movs	r2, r0
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	429a      	cmp	r2, r3
 800462e:	d302      	bcc.n	8004636 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d11a      	bne.n	800466c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2202      	movs	r2, #2
 800463e:	4013      	ands	r3, r2
 8004640:	2b02      	cmp	r3, #2
 8004642:	d013      	beq.n	800466c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004648:	2220      	movs	r2, #32
 800464a:	431a      	orrs	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2241      	movs	r2, #65	@ 0x41
 8004654:	2120      	movs	r1, #32
 8004656:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2242      	movs	r2, #66	@ 0x42
 800465c:	2100      	movs	r1, #0
 800465e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2240      	movs	r2, #64	@ 0x40
 8004664:	2100      	movs	r1, #0
 8004666:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e007      	b.n	800467c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	2202      	movs	r2, #2
 8004674:	4013      	ands	r3, r2
 8004676:	2b02      	cmp	r3, #2
 8004678:	d1c5      	bne.n	8004606 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	0018      	movs	r0, r3
 800467e:	46bd      	mov	sp, r7
 8004680:	b004      	add	sp, #16
 8004682:	bd80      	pop	{r7, pc}

08004684 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004690:	e02f      	b.n	80046f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	68b9      	ldr	r1, [r7, #8]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	0018      	movs	r0, r3
 800469a:	f000 f8d5 	bl	8004848 <I2C_IsErrorOccurred>
 800469e:	1e03      	subs	r3, r0, #0
 80046a0:	d001      	beq.n	80046a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e02d      	b.n	8004702 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a6:	f7fe f8a5 	bl	80027f4 <HAL_GetTick>
 80046aa:	0002      	movs	r2, r0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d302      	bcc.n	80046bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d11a      	bne.n	80046f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	2220      	movs	r2, #32
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d013      	beq.n	80046f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ce:	2220      	movs	r2, #32
 80046d0:	431a      	orrs	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2241      	movs	r2, #65	@ 0x41
 80046da:	2120      	movs	r1, #32
 80046dc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2242      	movs	r2, #66	@ 0x42
 80046e2:	2100      	movs	r1, #0
 80046e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2240      	movs	r2, #64	@ 0x40
 80046ea:	2100      	movs	r1, #0
 80046ec:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e007      	b.n	8004702 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	2220      	movs	r2, #32
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d1c8      	bne.n	8004692 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	0018      	movs	r0, r3
 8004704:	46bd      	mov	sp, r7
 8004706:	b004      	add	sp, #16
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004718:	2317      	movs	r3, #23
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	2200      	movs	r2, #0
 800471e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004720:	e07b      	b.n	800481a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	0018      	movs	r0, r3
 800472a:	f000 f88d 	bl	8004848 <I2C_IsErrorOccurred>
 800472e:	1e03      	subs	r3, r0, #0
 8004730:	d003      	beq.n	800473a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004732:	2317      	movs	r3, #23
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	2201      	movs	r2, #1
 8004738:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2220      	movs	r2, #32
 8004742:	4013      	ands	r3, r2
 8004744:	2b20      	cmp	r3, #32
 8004746:	d140      	bne.n	80047ca <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004748:	2117      	movs	r1, #23
 800474a:	187b      	adds	r3, r7, r1
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d13b      	bne.n	80047ca <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	2204      	movs	r2, #4
 800475a:	4013      	ands	r3, r2
 800475c:	2b04      	cmp	r3, #4
 800475e:	d106      	bne.n	800476e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004768:	187b      	adds	r3, r7, r1
 800476a:	2200      	movs	r2, #0
 800476c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	2210      	movs	r2, #16
 8004776:	4013      	ands	r3, r2
 8004778:	2b10      	cmp	r3, #16
 800477a:	d123      	bne.n	80047c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2210      	movs	r2, #16
 8004782:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2204      	movs	r2, #4
 8004788:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2220      	movs	r2, #32
 8004790:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4929      	ldr	r1, [pc, #164]	@ (8004844 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800479e:	400a      	ands	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2241      	movs	r2, #65	@ 0x41
 80047a6:	2120      	movs	r1, #32
 80047a8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2242      	movs	r2, #66	@ 0x42
 80047ae:	2100      	movs	r1, #0
 80047b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2240      	movs	r2, #64	@ 0x40
 80047b6:	2100      	movs	r1, #0
 80047b8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80047ba:	2317      	movs	r3, #23
 80047bc:	18fb      	adds	r3, r7, r3
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
 80047c2:	e002      	b.n	80047ca <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80047ca:	f7fe f813 	bl	80027f4 <HAL_GetTick>
 80047ce:	0002      	movs	r2, r0
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d302      	bcc.n	80047e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d11c      	bne.n	800481a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80047e0:	2017      	movs	r0, #23
 80047e2:	183b      	adds	r3, r7, r0
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d117      	bne.n	800481a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	2204      	movs	r2, #4
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d010      	beq.n	800481a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fc:	2220      	movs	r2, #32
 80047fe:	431a      	orrs	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2241      	movs	r2, #65	@ 0x41
 8004808:	2120      	movs	r1, #32
 800480a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2240      	movs	r2, #64	@ 0x40
 8004810:	2100      	movs	r1, #0
 8004812:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004814:	183b      	adds	r3, r7, r0
 8004816:	2201      	movs	r2, #1
 8004818:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	2204      	movs	r2, #4
 8004822:	4013      	ands	r3, r2
 8004824:	2b04      	cmp	r3, #4
 8004826:	d005      	beq.n	8004834 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004828:	2317      	movs	r3, #23
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d100      	bne.n	8004834 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004832:	e776      	b.n	8004722 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004834:	2317      	movs	r3, #23
 8004836:	18fb      	adds	r3, r7, r3
 8004838:	781b      	ldrb	r3, [r3, #0]
}
 800483a:	0018      	movs	r0, r3
 800483c:	46bd      	mov	sp, r7
 800483e:	b006      	add	sp, #24
 8004840:	bd80      	pop	{r7, pc}
 8004842:	46c0      	nop			@ (mov r8, r8)
 8004844:	fe00e800 	.word	0xfe00e800

08004848 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	@ 0x28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004854:	2327      	movs	r3, #39	@ 0x27
 8004856:	18fb      	adds	r3, r7, r3
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2210      	movs	r2, #16
 8004870:	4013      	ands	r3, r2
 8004872:	d100      	bne.n	8004876 <I2C_IsErrorOccurred+0x2e>
 8004874:	e079      	b.n	800496a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2210      	movs	r2, #16
 800487c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800487e:	e057      	b.n	8004930 <I2C_IsErrorOccurred+0xe8>
 8004880:	2227      	movs	r2, #39	@ 0x27
 8004882:	18bb      	adds	r3, r7, r2
 8004884:	18ba      	adds	r2, r7, r2
 8004886:	7812      	ldrb	r2, [r2, #0]
 8004888:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	3301      	adds	r3, #1
 800488e:	d04f      	beq.n	8004930 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004890:	f7fd ffb0 	bl	80027f4 <HAL_GetTick>
 8004894:	0002      	movs	r2, r0
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	429a      	cmp	r2, r3
 800489e:	d302      	bcc.n	80048a6 <I2C_IsErrorOccurred+0x5e>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d144      	bne.n	8004930 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	2380      	movs	r3, #128	@ 0x80
 80048ae:	01db      	lsls	r3, r3, #7
 80048b0:	4013      	ands	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048b4:	2013      	movs	r0, #19
 80048b6:	183b      	adds	r3, r7, r0
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	2142      	movs	r1, #66	@ 0x42
 80048bc:	5c52      	ldrb	r2, [r2, r1]
 80048be:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	2380      	movs	r3, #128	@ 0x80
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	401a      	ands	r2, r3
 80048cc:	2380      	movs	r3, #128	@ 0x80
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d126      	bne.n	8004922 <I2C_IsErrorOccurred+0xda>
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	2380      	movs	r3, #128	@ 0x80
 80048d8:	01db      	lsls	r3, r3, #7
 80048da:	429a      	cmp	r2, r3
 80048dc:	d021      	beq.n	8004922 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80048de:	183b      	adds	r3, r7, r0
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	d01d      	beq.n	8004922 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2180      	movs	r1, #128	@ 0x80
 80048f2:	01c9      	lsls	r1, r1, #7
 80048f4:	430a      	orrs	r2, r1
 80048f6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048f8:	f7fd ff7c 	bl	80027f4 <HAL_GetTick>
 80048fc:	0003      	movs	r3, r0
 80048fe:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004900:	e00f      	b.n	8004922 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004902:	f7fd ff77 	bl	80027f4 <HAL_GetTick>
 8004906:	0002      	movs	r2, r0
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b19      	cmp	r3, #25
 800490e:	d908      	bls.n	8004922 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	2220      	movs	r2, #32
 8004914:	4313      	orrs	r3, r2
 8004916:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004918:	2327      	movs	r3, #39	@ 0x27
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	2201      	movs	r2, #1
 800491e:	701a      	strb	r2, [r3, #0]

              break;
 8004920:	e006      	b.n	8004930 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	2220      	movs	r2, #32
 800492a:	4013      	ands	r3, r2
 800492c:	2b20      	cmp	r3, #32
 800492e:	d1e8      	bne.n	8004902 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	2220      	movs	r2, #32
 8004938:	4013      	ands	r3, r2
 800493a:	2b20      	cmp	r3, #32
 800493c:	d004      	beq.n	8004948 <I2C_IsErrorOccurred+0x100>
 800493e:	2327      	movs	r3, #39	@ 0x27
 8004940:	18fb      	adds	r3, r7, r3
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d09b      	beq.n	8004880 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004948:	2327      	movs	r3, #39	@ 0x27
 800494a:	18fb      	adds	r3, r7, r3
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d103      	bne.n	800495a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2220      	movs	r2, #32
 8004958:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	2204      	movs	r2, #4
 800495e:	4313      	orrs	r3, r2
 8004960:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004962:	2327      	movs	r3, #39	@ 0x27
 8004964:	18fb      	adds	r3, r7, r3
 8004966:	2201      	movs	r2, #1
 8004968:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	2380      	movs	r3, #128	@ 0x80
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	4013      	ands	r3, r2
 800497a:	d00c      	beq.n	8004996 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	2201      	movs	r2, #1
 8004980:	4313      	orrs	r3, r2
 8004982:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2280      	movs	r2, #128	@ 0x80
 800498a:	0052      	lsls	r2, r2, #1
 800498c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800498e:	2327      	movs	r3, #39	@ 0x27
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	2201      	movs	r2, #1
 8004994:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	2380      	movs	r3, #128	@ 0x80
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	4013      	ands	r3, r2
 800499e:	d00c      	beq.n	80049ba <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	2208      	movs	r2, #8
 80049a4:	4313      	orrs	r3, r2
 80049a6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2280      	movs	r2, #128	@ 0x80
 80049ae:	00d2      	lsls	r2, r2, #3
 80049b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049b2:	2327      	movs	r3, #39	@ 0x27
 80049b4:	18fb      	adds	r3, r7, r3
 80049b6:	2201      	movs	r2, #1
 80049b8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	2380      	movs	r3, #128	@ 0x80
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4013      	ands	r3, r2
 80049c2:	d00c      	beq.n	80049de <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	2202      	movs	r2, #2
 80049c8:	4313      	orrs	r3, r2
 80049ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2280      	movs	r2, #128	@ 0x80
 80049d2:	0092      	lsls	r2, r2, #2
 80049d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049d6:	2327      	movs	r3, #39	@ 0x27
 80049d8:	18fb      	adds	r3, r7, r3
 80049da:	2201      	movs	r2, #1
 80049dc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80049de:	2327      	movs	r3, #39	@ 0x27
 80049e0:	18fb      	adds	r3, r7, r3
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01d      	beq.n	8004a24 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	0018      	movs	r0, r3
 80049ec:	f7ff fd6b 	bl	80044c6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	490e      	ldr	r1, [pc, #56]	@ (8004a34 <I2C_IsErrorOccurred+0x1ec>)
 80049fc:	400a      	ands	r2, r1
 80049fe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2241      	movs	r2, #65	@ 0x41
 8004a10:	2120      	movs	r1, #32
 8004a12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2242      	movs	r2, #66	@ 0x42
 8004a18:	2100      	movs	r1, #0
 8004a1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2240      	movs	r2, #64	@ 0x40
 8004a20:	2100      	movs	r1, #0
 8004a22:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004a24:	2327      	movs	r3, #39	@ 0x27
 8004a26:	18fb      	adds	r3, r7, r3
 8004a28:	781b      	ldrb	r3, [r3, #0]
}
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b00a      	add	sp, #40	@ 0x28
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	46c0      	nop			@ (mov r8, r8)
 8004a34:	fe00e800 	.word	0xfe00e800

08004a38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a38:	b590      	push	{r4, r7, lr}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	0008      	movs	r0, r1
 8004a42:	0011      	movs	r1, r2
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	240a      	movs	r4, #10
 8004a48:	193b      	adds	r3, r7, r4
 8004a4a:	1c02      	adds	r2, r0, #0
 8004a4c:	801a      	strh	r2, [r3, #0]
 8004a4e:	2009      	movs	r0, #9
 8004a50:	183b      	adds	r3, r7, r0
 8004a52:	1c0a      	adds	r2, r1, #0
 8004a54:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a56:	193b      	adds	r3, r7, r4
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	059b      	lsls	r3, r3, #22
 8004a5c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a5e:	183b      	adds	r3, r7, r0
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	0419      	lsls	r1, r3, #16
 8004a64:	23ff      	movs	r3, #255	@ 0xff
 8004a66:	041b      	lsls	r3, r3, #16
 8004a68:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a6a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a72:	4313      	orrs	r3, r2
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	085b      	lsrs	r3, r3, #1
 8004a78:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a82:	0d51      	lsrs	r1, r2, #21
 8004a84:	2280      	movs	r2, #128	@ 0x80
 8004a86:	00d2      	lsls	r2, r2, #3
 8004a88:	400a      	ands	r2, r1
 8004a8a:	4907      	ldr	r1, [pc, #28]	@ (8004aa8 <I2C_TransferConfig+0x70>)
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	43d2      	mvns	r2, r2
 8004a90:	401a      	ands	r2, r3
 8004a92:	0011      	movs	r1, r2
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a9e:	46c0      	nop			@ (mov r8, r8)
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b007      	add	sp, #28
 8004aa4:	bd90      	pop	{r4, r7, pc}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	03ff63ff 	.word	0x03ff63ff

08004aac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	000a      	movs	r2, r1
 8004ab6:	1cbb      	adds	r3, r7, #2
 8004ab8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004abe:	1cbb      	adds	r3, r7, #2
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d010      	beq.n	8004aea <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2242      	movs	r2, #66	@ 0x42
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2241      	movs	r2, #65	@ 0x41
 8004ad4:	5c9b      	ldrb	r3, [r3, r2]
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	001a      	movs	r2, r3
 8004ada:	2328      	movs	r3, #40	@ 0x28
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b28      	cmp	r3, #40	@ 0x28
 8004ae0:	d003      	beq.n	8004aea <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	22b0      	movs	r2, #176	@ 0xb0
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004aea:	1cbb      	adds	r3, r7, #2
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	2202      	movs	r2, #2
 8004af0:	4013      	ands	r3, r2
 8004af2:	d010      	beq.n	8004b16 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2244      	movs	r2, #68	@ 0x44
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2241      	movs	r2, #65	@ 0x41
 8004b00:	5c9b      	ldrb	r3, [r3, r2]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	001a      	movs	r2, r3
 8004b06:	2328      	movs	r3, #40	@ 0x28
 8004b08:	4013      	ands	r3, r2
 8004b0a:	2b28      	cmp	r3, #40	@ 0x28
 8004b0c:	d003      	beq.n	8004b16 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	22b0      	movs	r2, #176	@ 0xb0
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b16:	1cbb      	adds	r3, r7, #2
 8004b18:	2200      	movs	r2, #0
 8004b1a:	5e9b      	ldrsh	r3, [r3, r2]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	da03      	bge.n	8004b28 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	22b8      	movs	r2, #184	@ 0xb8
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004b28:	1cbb      	adds	r3, r7, #2
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	2b10      	cmp	r3, #16
 8004b2e:	d103      	bne.n	8004b38 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2290      	movs	r2, #144	@ 0x90
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b38:	1cbb      	adds	r3, r7, #2
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d103      	bne.n	8004b48 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2220      	movs	r2, #32
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b48:	1cbb      	adds	r3, r7, #2
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	2b40      	cmp	r3, #64	@ 0x40
 8004b4e:	d103      	bne.n	8004b58 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2240      	movs	r2, #64	@ 0x40
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	43d9      	mvns	r1, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	400a      	ands	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]
}
 8004b6a:	46c0      	nop			@ (mov r8, r8)
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	b004      	add	sp, #16
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2241      	movs	r2, #65	@ 0x41
 8004b82:	5c9b      	ldrb	r3, [r3, r2]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d138      	bne.n	8004bfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2240      	movs	r2, #64	@ 0x40
 8004b8e:	5c9b      	ldrb	r3, [r3, r2]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b94:	2302      	movs	r3, #2
 8004b96:	e032      	b.n	8004bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2240      	movs	r2, #64	@ 0x40
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2241      	movs	r2, #65	@ 0x41
 8004ba4:	2124      	movs	r1, #36	@ 0x24
 8004ba6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	438a      	bics	r2, r1
 8004bb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4911      	ldr	r1, [pc, #68]	@ (8004c08 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004bc4:	400a      	ands	r2, r1
 8004bc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6819      	ldr	r1, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2101      	movs	r1, #1
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2241      	movs	r2, #65	@ 0x41
 8004bec:	2120      	movs	r1, #32
 8004bee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2240      	movs	r2, #64	@ 0x40
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e000      	b.n	8004bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004bfc:	2302      	movs	r3, #2
  }
}
 8004bfe:	0018      	movs	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b002      	add	sp, #8
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	46c0      	nop			@ (mov r8, r8)
 8004c08:	ffffefff 	.word	0xffffefff

08004c0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2241      	movs	r2, #65	@ 0x41
 8004c1a:	5c9b      	ldrb	r3, [r3, r2]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d139      	bne.n	8004c96 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2240      	movs	r2, #64	@ 0x40
 8004c26:	5c9b      	ldrb	r3, [r3, r2]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e033      	b.n	8004c98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2240      	movs	r2, #64	@ 0x40
 8004c34:	2101      	movs	r1, #1
 8004c36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2241      	movs	r2, #65	@ 0x41
 8004c3c:	2124      	movs	r1, #36	@ 0x24
 8004c3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	438a      	bics	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4a11      	ldr	r2, [pc, #68]	@ (8004ca0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2241      	movs	r2, #65	@ 0x41
 8004c86:	2120      	movs	r1, #32
 8004c88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2240      	movs	r2, #64	@ 0x40
 8004c8e:	2100      	movs	r1, #0
 8004c90:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	e000      	b.n	8004c98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c96:	2302      	movs	r3, #2
  }
}
 8004c98:	0018      	movs	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b004      	add	sp, #16
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	fffff0ff 	.word	0xfffff0ff

08004ca4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004cac:	4b19      	ldr	r3, [pc, #100]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a19      	ldr	r2, [pc, #100]	@ (8004d18 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	0019      	movs	r1, r3
 8004cb6:	4b17      	ldr	r3, [pc, #92]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	2380      	movs	r3, #128	@ 0x80
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d11f      	bne.n	8004d08 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004cc8:	4b14      	ldr	r3, [pc, #80]	@ (8004d1c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	0013      	movs	r3, r2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	189b      	adds	r3, r3, r2
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	4912      	ldr	r1, [pc, #72]	@ (8004d20 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f7fb fa14 	bl	8000104 <__udivsi3>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	3301      	adds	r3, #1
 8004ce0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ce2:	e008      	b.n	8004cf6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	e001      	b.n	8004cf6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e009      	b.n	8004d0a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cf6:	4b07      	ldr	r3, [pc, #28]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004cf8:	695a      	ldr	r2, [r3, #20]
 8004cfa:	2380      	movs	r3, #128	@ 0x80
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	401a      	ands	r2, r3
 8004d00:	2380      	movs	r3, #128	@ 0x80
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d0ed      	beq.n	8004ce4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	b004      	add	sp, #16
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	46c0      	nop			@ (mov r8, r8)
 8004d14:	40007000 	.word	0x40007000
 8004d18:	fffff9ff 	.word	0xfffff9ff
 8004d1c:	20000068 	.word	0x20000068
 8004d20:	000f4240 	.word	0x000f4240

08004d24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e2fe      	b.n	8005334 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d100      	bne.n	8004d42 <HAL_RCC_OscConfig+0x1e>
 8004d40:	e07c      	b.n	8004e3c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d42:	4bc3      	ldr	r3, [pc, #780]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2238      	movs	r2, #56	@ 0x38
 8004d48:	4013      	ands	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d4c:	4bc0      	ldr	r3, [pc, #768]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	2203      	movs	r2, #3
 8004d52:	4013      	ands	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	2b10      	cmp	r3, #16
 8004d5a:	d102      	bne.n	8004d62 <HAL_RCC_OscConfig+0x3e>
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d002      	beq.n	8004d68 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d10b      	bne.n	8004d80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d68:	4bb9      	ldr	r3, [pc, #740]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	2380      	movs	r3, #128	@ 0x80
 8004d6e:	029b      	lsls	r3, r3, #10
 8004d70:	4013      	ands	r3, r2
 8004d72:	d062      	beq.n	8004e3a <HAL_RCC_OscConfig+0x116>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d15e      	bne.n	8004e3a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e2d9      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	2380      	movs	r3, #128	@ 0x80
 8004d86:	025b      	lsls	r3, r3, #9
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d107      	bne.n	8004d9c <HAL_RCC_OscConfig+0x78>
 8004d8c:	4bb0      	ldr	r3, [pc, #704]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4baf      	ldr	r3, [pc, #700]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004d92:	2180      	movs	r1, #128	@ 0x80
 8004d94:	0249      	lsls	r1, r1, #9
 8004d96:	430a      	orrs	r2, r1
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	e020      	b.n	8004dde <HAL_RCC_OscConfig+0xba>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	23a0      	movs	r3, #160	@ 0xa0
 8004da2:	02db      	lsls	r3, r3, #11
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d10e      	bne.n	8004dc6 <HAL_RCC_OscConfig+0xa2>
 8004da8:	4ba9      	ldr	r3, [pc, #676]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	4ba8      	ldr	r3, [pc, #672]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004dae:	2180      	movs	r1, #128	@ 0x80
 8004db0:	02c9      	lsls	r1, r1, #11
 8004db2:	430a      	orrs	r2, r1
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	4ba6      	ldr	r3, [pc, #664]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4ba5      	ldr	r3, [pc, #660]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004dbc:	2180      	movs	r1, #128	@ 0x80
 8004dbe:	0249      	lsls	r1, r1, #9
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	e00b      	b.n	8004dde <HAL_RCC_OscConfig+0xba>
 8004dc6:	4ba2      	ldr	r3, [pc, #648]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	4ba1      	ldr	r3, [pc, #644]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004dcc:	49a1      	ldr	r1, [pc, #644]	@ (8005054 <HAL_RCC_OscConfig+0x330>)
 8004dce:	400a      	ands	r2, r1
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	4b9f      	ldr	r3, [pc, #636]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4b9e      	ldr	r3, [pc, #632]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004dd8:	499f      	ldr	r1, [pc, #636]	@ (8005058 <HAL_RCC_OscConfig+0x334>)
 8004dda:	400a      	ands	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d014      	beq.n	8004e10 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de6:	f7fd fd05 	bl	80027f4 <HAL_GetTick>
 8004dea:	0003      	movs	r3, r0
 8004dec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df0:	f7fd fd00 	bl	80027f4 <HAL_GetTick>
 8004df4:	0002      	movs	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b64      	cmp	r3, #100	@ 0x64
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e298      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e02:	4b93      	ldr	r3, [pc, #588]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	2380      	movs	r3, #128	@ 0x80
 8004e08:	029b      	lsls	r3, r3, #10
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0xcc>
 8004e0e:	e015      	b.n	8004e3c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e10:	f7fd fcf0 	bl	80027f4 <HAL_GetTick>
 8004e14:	0003      	movs	r3, r0
 8004e16:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e1a:	f7fd fceb 	bl	80027f4 <HAL_GetTick>
 8004e1e:	0002      	movs	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b64      	cmp	r3, #100	@ 0x64
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e283      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e2c:	4b88      	ldr	r3, [pc, #544]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	2380      	movs	r3, #128	@ 0x80
 8004e32:	029b      	lsls	r3, r3, #10
 8004e34:	4013      	ands	r3, r2
 8004e36:	d1f0      	bne.n	8004e1a <HAL_RCC_OscConfig+0xf6>
 8004e38:	e000      	b.n	8004e3c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e3a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2202      	movs	r2, #2
 8004e42:	4013      	ands	r3, r2
 8004e44:	d100      	bne.n	8004e48 <HAL_RCC_OscConfig+0x124>
 8004e46:	e099      	b.n	8004f7c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e48:	4b81      	ldr	r3, [pc, #516]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2238      	movs	r2, #56	@ 0x38
 8004e4e:	4013      	ands	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e52:	4b7f      	ldr	r3, [pc, #508]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	2203      	movs	r2, #3
 8004e58:	4013      	ands	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2b10      	cmp	r3, #16
 8004e60:	d102      	bne.n	8004e68 <HAL_RCC_OscConfig+0x144>
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d002      	beq.n	8004e6e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d135      	bne.n	8004eda <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e6e:	4b78      	ldr	r3, [pc, #480]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	2380      	movs	r3, #128	@ 0x80
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	4013      	ands	r3, r2
 8004e78:	d005      	beq.n	8004e86 <HAL_RCC_OscConfig+0x162>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e256      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e86:	4b72      	ldr	r3, [pc, #456]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4a74      	ldr	r2, [pc, #464]	@ (800505c <HAL_RCC_OscConfig+0x338>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	021a      	lsls	r2, r3, #8
 8004e96:	4b6e      	ldr	r3, [pc, #440]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d112      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ea2:	4b6b      	ldr	r3, [pc, #428]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a6e      	ldr	r2, [pc, #440]	@ (8005060 <HAL_RCC_OscConfig+0x33c>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	0019      	movs	r1, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	4b67      	ldr	r3, [pc, #412]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004eb6:	4b66      	ldr	r3, [pc, #408]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	0adb      	lsrs	r3, r3, #11
 8004ebc:	2207      	movs	r2, #7
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	4a68      	ldr	r2, [pc, #416]	@ (8005064 <HAL_RCC_OscConfig+0x340>)
 8004ec2:	40da      	lsrs	r2, r3
 8004ec4:	4b68      	ldr	r3, [pc, #416]	@ (8005068 <HAL_RCC_OscConfig+0x344>)
 8004ec6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ec8:	4b68      	ldr	r3, [pc, #416]	@ (800506c <HAL_RCC_OscConfig+0x348>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f7fd fc35 	bl	800273c <HAL_InitTick>
 8004ed2:	1e03      	subs	r3, r0, #0
 8004ed4:	d051      	beq.n	8004f7a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e22c      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d030      	beq.n	8004f44 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ee2:	4b5b      	ldr	r3, [pc, #364]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a5e      	ldr	r2, [pc, #376]	@ (8005060 <HAL_RCC_OscConfig+0x33c>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	0019      	movs	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	4b57      	ldr	r3, [pc, #348]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004ef6:	4b56      	ldr	r3, [pc, #344]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b55      	ldr	r3, [pc, #340]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004efc:	2180      	movs	r1, #128	@ 0x80
 8004efe:	0049      	lsls	r1, r1, #1
 8004f00:	430a      	orrs	r2, r1
 8004f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f04:	f7fd fc76 	bl	80027f4 <HAL_GetTick>
 8004f08:	0003      	movs	r3, r0
 8004f0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f0e:	f7fd fc71 	bl	80027f4 <HAL_GetTick>
 8004f12:	0002      	movs	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e209      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f20:	4b4b      	ldr	r3, [pc, #300]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	2380      	movs	r3, #128	@ 0x80
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	4013      	ands	r3, r2
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f2c:	4b48      	ldr	r3, [pc, #288]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4a4a      	ldr	r2, [pc, #296]	@ (800505c <HAL_RCC_OscConfig+0x338>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	0019      	movs	r1, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	021a      	lsls	r2, r3, #8
 8004f3c:	4b44      	ldr	r3, [pc, #272]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
 8004f42:	e01b      	b.n	8004f7c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004f44:	4b42      	ldr	r3, [pc, #264]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	4b41      	ldr	r3, [pc, #260]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004f4a:	4949      	ldr	r1, [pc, #292]	@ (8005070 <HAL_RCC_OscConfig+0x34c>)
 8004f4c:	400a      	ands	r2, r1
 8004f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f50:	f7fd fc50 	bl	80027f4 <HAL_GetTick>
 8004f54:	0003      	movs	r3, r0
 8004f56:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f5a:	f7fd fc4b 	bl	80027f4 <HAL_GetTick>
 8004f5e:	0002      	movs	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e1e3      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f6c:	4b38      	ldr	r3, [pc, #224]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	2380      	movs	r3, #128	@ 0x80
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4013      	ands	r3, r2
 8004f76:	d1f0      	bne.n	8004f5a <HAL_RCC_OscConfig+0x236>
 8004f78:	e000      	b.n	8004f7c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f7a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2208      	movs	r2, #8
 8004f82:	4013      	ands	r3, r2
 8004f84:	d047      	beq.n	8005016 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004f86:	4b32      	ldr	r3, [pc, #200]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2238      	movs	r2, #56	@ 0x38
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	2b18      	cmp	r3, #24
 8004f90:	d10a      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004f92:	4b2f      	ldr	r3, [pc, #188]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f96:	2202      	movs	r2, #2
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d03c      	beq.n	8005016 <HAL_RCC_OscConfig+0x2f2>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d138      	bne.n	8005016 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e1c5      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d019      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004fb0:	4b27      	ldr	r3, [pc, #156]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004fb2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004fb4:	4b26      	ldr	r3, [pc, #152]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fd fc1a 	bl	80027f4 <HAL_GetTick>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fc6:	f7fd fc15 	bl	80027f4 <HAL_GetTick>
 8004fca:	0002      	movs	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e1ad      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fdc:	2202      	movs	r2, #2
 8004fde:	4013      	ands	r3, r2
 8004fe0:	d0f1      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x2a2>
 8004fe2:	e018      	b.n	8005016 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004fe6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004fe8:	4b19      	ldr	r3, [pc, #100]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8004fea:	2101      	movs	r1, #1
 8004fec:	438a      	bics	r2, r1
 8004fee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff0:	f7fd fc00 	bl	80027f4 <HAL_GetTick>
 8004ff4:	0003      	movs	r3, r0
 8004ff6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ffa:	f7fd fbfb 	bl	80027f4 <HAL_GetTick>
 8004ffe:	0002      	movs	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e193      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800500c:	4b10      	ldr	r3, [pc, #64]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 800500e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005010:	2202      	movs	r2, #2
 8005012:	4013      	ands	r3, r2
 8005014:	d1f1      	bne.n	8004ffa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2204      	movs	r2, #4
 800501c:	4013      	ands	r3, r2
 800501e:	d100      	bne.n	8005022 <HAL_RCC_OscConfig+0x2fe>
 8005020:	e0c6      	b.n	80051b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005022:	231f      	movs	r3, #31
 8005024:	18fb      	adds	r3, r7, r3
 8005026:	2200      	movs	r2, #0
 8005028:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800502a:	4b09      	ldr	r3, [pc, #36]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	2238      	movs	r2, #56	@ 0x38
 8005030:	4013      	ands	r3, r2
 8005032:	2b20      	cmp	r3, #32
 8005034:	d11e      	bne.n	8005074 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005036:	4b06      	ldr	r3, [pc, #24]	@ (8005050 <HAL_RCC_OscConfig+0x32c>)
 8005038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800503a:	2202      	movs	r2, #2
 800503c:	4013      	ands	r3, r2
 800503e:	d100      	bne.n	8005042 <HAL_RCC_OscConfig+0x31e>
 8005040:	e0b6      	b.n	80051b0 <HAL_RCC_OscConfig+0x48c>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d000      	beq.n	800504c <HAL_RCC_OscConfig+0x328>
 800504a:	e0b1      	b.n	80051b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e171      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
 8005050:	40021000 	.word	0x40021000
 8005054:	fffeffff 	.word	0xfffeffff
 8005058:	fffbffff 	.word	0xfffbffff
 800505c:	ffff80ff 	.word	0xffff80ff
 8005060:	ffffc7ff 	.word	0xffffc7ff
 8005064:	00f42400 	.word	0x00f42400
 8005068:	20000068 	.word	0x20000068
 800506c:	2000006c 	.word	0x2000006c
 8005070:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005074:	4bb1      	ldr	r3, [pc, #708]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 8005076:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005078:	2380      	movs	r3, #128	@ 0x80
 800507a:	055b      	lsls	r3, r3, #21
 800507c:	4013      	ands	r3, r2
 800507e:	d101      	bne.n	8005084 <HAL_RCC_OscConfig+0x360>
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <HAL_RCC_OscConfig+0x362>
 8005084:	2300      	movs	r3, #0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d011      	beq.n	80050ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800508a:	4bac      	ldr	r3, [pc, #688]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 800508c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800508e:	4bab      	ldr	r3, [pc, #684]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 8005090:	2180      	movs	r1, #128	@ 0x80
 8005092:	0549      	lsls	r1, r1, #21
 8005094:	430a      	orrs	r2, r1
 8005096:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005098:	4ba8      	ldr	r3, [pc, #672]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 800509a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800509c:	2380      	movs	r3, #128	@ 0x80
 800509e:	055b      	lsls	r3, r3, #21
 80050a0:	4013      	ands	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80050a6:	231f      	movs	r3, #31
 80050a8:	18fb      	adds	r3, r7, r3
 80050aa:	2201      	movs	r2, #1
 80050ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050ae:	4ba4      	ldr	r3, [pc, #656]	@ (8005340 <HAL_RCC_OscConfig+0x61c>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	2380      	movs	r3, #128	@ 0x80
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	4013      	ands	r3, r2
 80050b8:	d11a      	bne.n	80050f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050ba:	4ba1      	ldr	r3, [pc, #644]	@ (8005340 <HAL_RCC_OscConfig+0x61c>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4ba0      	ldr	r3, [pc, #640]	@ (8005340 <HAL_RCC_OscConfig+0x61c>)
 80050c0:	2180      	movs	r1, #128	@ 0x80
 80050c2:	0049      	lsls	r1, r1, #1
 80050c4:	430a      	orrs	r2, r1
 80050c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80050c8:	f7fd fb94 	bl	80027f4 <HAL_GetTick>
 80050cc:	0003      	movs	r3, r0
 80050ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050d2:	f7fd fb8f 	bl	80027f4 <HAL_GetTick>
 80050d6:	0002      	movs	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e127      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050e4:	4b96      	ldr	r3, [pc, #600]	@ (8005340 <HAL_RCC_OscConfig+0x61c>)
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	2380      	movs	r3, #128	@ 0x80
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	4013      	ands	r3, r2
 80050ee:	d0f0      	beq.n	80050d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d106      	bne.n	8005106 <HAL_RCC_OscConfig+0x3e2>
 80050f8:	4b90      	ldr	r3, [pc, #576]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 80050fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80050fc:	4b8f      	ldr	r3, [pc, #572]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 80050fe:	2101      	movs	r1, #1
 8005100:	430a      	orrs	r2, r1
 8005102:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005104:	e01c      	b.n	8005140 <HAL_RCC_OscConfig+0x41c>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b05      	cmp	r3, #5
 800510c:	d10c      	bne.n	8005128 <HAL_RCC_OscConfig+0x404>
 800510e:	4b8b      	ldr	r3, [pc, #556]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 8005110:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005112:	4b8a      	ldr	r3, [pc, #552]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 8005114:	2104      	movs	r1, #4
 8005116:	430a      	orrs	r2, r1
 8005118:	65da      	str	r2, [r3, #92]	@ 0x5c
 800511a:	4b88      	ldr	r3, [pc, #544]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 800511c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800511e:	4b87      	ldr	r3, [pc, #540]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 8005120:	2101      	movs	r1, #1
 8005122:	430a      	orrs	r2, r1
 8005124:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005126:	e00b      	b.n	8005140 <HAL_RCC_OscConfig+0x41c>
 8005128:	4b84      	ldr	r3, [pc, #528]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 800512a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800512c:	4b83      	ldr	r3, [pc, #524]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 800512e:	2101      	movs	r1, #1
 8005130:	438a      	bics	r2, r1
 8005132:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005134:	4b81      	ldr	r3, [pc, #516]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 8005136:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005138:	4b80      	ldr	r3, [pc, #512]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 800513a:	2104      	movs	r1, #4
 800513c:	438a      	bics	r2, r1
 800513e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d014      	beq.n	8005172 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005148:	f7fd fb54 	bl	80027f4 <HAL_GetTick>
 800514c:	0003      	movs	r3, r0
 800514e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005150:	e009      	b.n	8005166 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005152:	f7fd fb4f 	bl	80027f4 <HAL_GetTick>
 8005156:	0002      	movs	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	4a79      	ldr	r2, [pc, #484]	@ (8005344 <HAL_RCC_OscConfig+0x620>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e0e6      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005166:	4b75      	ldr	r3, [pc, #468]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 8005168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800516a:	2202      	movs	r2, #2
 800516c:	4013      	ands	r3, r2
 800516e:	d0f0      	beq.n	8005152 <HAL_RCC_OscConfig+0x42e>
 8005170:	e013      	b.n	800519a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005172:	f7fd fb3f 	bl	80027f4 <HAL_GetTick>
 8005176:	0003      	movs	r3, r0
 8005178:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800517a:	e009      	b.n	8005190 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517c:	f7fd fb3a 	bl	80027f4 <HAL_GetTick>
 8005180:	0002      	movs	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	4a6f      	ldr	r2, [pc, #444]	@ (8005344 <HAL_RCC_OscConfig+0x620>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e0d1      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005190:	4b6a      	ldr	r3, [pc, #424]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 8005192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005194:	2202      	movs	r2, #2
 8005196:	4013      	ands	r3, r2
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800519a:	231f      	movs	r3, #31
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d105      	bne.n	80051b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80051a4:	4b65      	ldr	r3, [pc, #404]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 80051a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051a8:	4b64      	ldr	r3, [pc, #400]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 80051aa:	4967      	ldr	r1, [pc, #412]	@ (8005348 <HAL_RCC_OscConfig+0x624>)
 80051ac:	400a      	ands	r2, r1
 80051ae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d100      	bne.n	80051ba <HAL_RCC_OscConfig+0x496>
 80051b8:	e0bb      	b.n	8005332 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051ba:	4b60      	ldr	r3, [pc, #384]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2238      	movs	r2, #56	@ 0x38
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b10      	cmp	r3, #16
 80051c4:	d100      	bne.n	80051c8 <HAL_RCC_OscConfig+0x4a4>
 80051c6:	e07b      	b.n	80052c0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d156      	bne.n	800527e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d0:	4b5a      	ldr	r3, [pc, #360]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	4b59      	ldr	r3, [pc, #356]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 80051d6:	495d      	ldr	r1, [pc, #372]	@ (800534c <HAL_RCC_OscConfig+0x628>)
 80051d8:	400a      	ands	r2, r1
 80051da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fd fb0a 	bl	80027f4 <HAL_GetTick>
 80051e0:	0003      	movs	r3, r0
 80051e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e6:	f7fd fb05 	bl	80027f4 <HAL_GetTick>
 80051ea:	0002      	movs	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e09d      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051f8:	4b50      	ldr	r3, [pc, #320]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	2380      	movs	r3, #128	@ 0x80
 80051fe:	049b      	lsls	r3, r3, #18
 8005200:	4013      	ands	r3, r2
 8005202:	d1f0      	bne.n	80051e6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005204:	4b4d      	ldr	r3, [pc, #308]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	4a51      	ldr	r2, [pc, #324]	@ (8005350 <HAL_RCC_OscConfig+0x62c>)
 800520a:	4013      	ands	r3, r2
 800520c:	0019      	movs	r1, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1a      	ldr	r2, [r3, #32]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521c:	021b      	lsls	r3, r3, #8
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005230:	431a      	orrs	r2, r3
 8005232:	4b42      	ldr	r3, [pc, #264]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 8005234:	430a      	orrs	r2, r1
 8005236:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005238:	4b40      	ldr	r3, [pc, #256]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	4b3f      	ldr	r3, [pc, #252]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 800523e:	2180      	movs	r1, #128	@ 0x80
 8005240:	0449      	lsls	r1, r1, #17
 8005242:	430a      	orrs	r2, r1
 8005244:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005246:	4b3d      	ldr	r3, [pc, #244]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	4b3c      	ldr	r3, [pc, #240]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 800524c:	2180      	movs	r1, #128	@ 0x80
 800524e:	0549      	lsls	r1, r1, #21
 8005250:	430a      	orrs	r2, r1
 8005252:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fd face 	bl	80027f4 <HAL_GetTick>
 8005258:	0003      	movs	r3, r0
 800525a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800525e:	f7fd fac9 	bl	80027f4 <HAL_GetTick>
 8005262:	0002      	movs	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e061      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005270:	4b32      	ldr	r3, [pc, #200]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	2380      	movs	r3, #128	@ 0x80
 8005276:	049b      	lsls	r3, r3, #18
 8005278:	4013      	ands	r3, r2
 800527a:	d0f0      	beq.n	800525e <HAL_RCC_OscConfig+0x53a>
 800527c:	e059      	b.n	8005332 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527e:	4b2f      	ldr	r3, [pc, #188]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b2e      	ldr	r3, [pc, #184]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 8005284:	4931      	ldr	r1, [pc, #196]	@ (800534c <HAL_RCC_OscConfig+0x628>)
 8005286:	400a      	ands	r2, r1
 8005288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528a:	f7fd fab3 	bl	80027f4 <HAL_GetTick>
 800528e:	0003      	movs	r3, r0
 8005290:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005294:	f7fd faae 	bl	80027f4 <HAL_GetTick>
 8005298:	0002      	movs	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e046      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052a6:	4b25      	ldr	r3, [pc, #148]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	2380      	movs	r3, #128	@ 0x80
 80052ac:	049b      	lsls	r3, r3, #18
 80052ae:	4013      	ands	r3, r2
 80052b0:	d1f0      	bne.n	8005294 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80052b2:	4b22      	ldr	r3, [pc, #136]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	4b21      	ldr	r3, [pc, #132]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 80052b8:	4926      	ldr	r1, [pc, #152]	@ (8005354 <HAL_RCC_OscConfig+0x630>)
 80052ba:	400a      	ands	r2, r1
 80052bc:	60da      	str	r2, [r3, #12]
 80052be:	e038      	b.n	8005332 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e033      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80052cc:	4b1b      	ldr	r3, [pc, #108]	@ (800533c <HAL_RCC_OscConfig+0x618>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2203      	movs	r2, #3
 80052d6:	401a      	ands	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d126      	bne.n	800532e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	2270      	movs	r2, #112	@ 0x70
 80052e4:	401a      	ands	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d11f      	bne.n	800532e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	23fe      	movs	r3, #254	@ 0xfe
 80052f2:	01db      	lsls	r3, r3, #7
 80052f4:	401a      	ands	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d116      	bne.n	800532e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	23f8      	movs	r3, #248	@ 0xf8
 8005304:	039b      	lsls	r3, r3, #14
 8005306:	401a      	ands	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800530c:	429a      	cmp	r2, r3
 800530e:	d10e      	bne.n	800532e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	23e0      	movs	r3, #224	@ 0xe0
 8005314:	051b      	lsls	r3, r3, #20
 8005316:	401a      	ands	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800531c:	429a      	cmp	r2, r3
 800531e:	d106      	bne.n	800532e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	0f5b      	lsrs	r3, r3, #29
 8005324:	075a      	lsls	r2, r3, #29
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800532a:	429a      	cmp	r2, r3
 800532c:	d001      	beq.n	8005332 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	b008      	add	sp, #32
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40021000 	.word	0x40021000
 8005340:	40007000 	.word	0x40007000
 8005344:	00001388 	.word	0x00001388
 8005348:	efffffff 	.word	0xefffffff
 800534c:	feffffff 	.word	0xfeffffff
 8005350:	11c1808c 	.word	0x11c1808c
 8005354:	eefefffc 	.word	0xeefefffc

08005358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e0e9      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800536c:	4b76      	ldr	r3, [pc, #472]	@ (8005548 <HAL_RCC_ClockConfig+0x1f0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2207      	movs	r2, #7
 8005372:	4013      	ands	r3, r2
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d91e      	bls.n	80053b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b73      	ldr	r3, [pc, #460]	@ (8005548 <HAL_RCC_ClockConfig+0x1f0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2207      	movs	r2, #7
 8005380:	4393      	bics	r3, r2
 8005382:	0019      	movs	r1, r3
 8005384:	4b70      	ldr	r3, [pc, #448]	@ (8005548 <HAL_RCC_ClockConfig+0x1f0>)
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800538c:	f7fd fa32 	bl	80027f4 <HAL_GetTick>
 8005390:	0003      	movs	r3, r0
 8005392:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005394:	e009      	b.n	80053aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005396:	f7fd fa2d 	bl	80027f4 <HAL_GetTick>
 800539a:	0002      	movs	r2, r0
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	4a6a      	ldr	r2, [pc, #424]	@ (800554c <HAL_RCC_ClockConfig+0x1f4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e0ca      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80053aa:	4b67      	ldr	r3, [pc, #412]	@ (8005548 <HAL_RCC_ClockConfig+0x1f0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2207      	movs	r2, #7
 80053b0:	4013      	ands	r3, r2
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d1ee      	bne.n	8005396 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2202      	movs	r2, #2
 80053be:	4013      	ands	r3, r2
 80053c0:	d015      	beq.n	80053ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2204      	movs	r2, #4
 80053c8:	4013      	ands	r3, r2
 80053ca:	d006      	beq.n	80053da <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80053cc:	4b60      	ldr	r3, [pc, #384]	@ (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	4b5f      	ldr	r3, [pc, #380]	@ (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 80053d2:	21e0      	movs	r1, #224	@ 0xe0
 80053d4:	01c9      	lsls	r1, r1, #7
 80053d6:	430a      	orrs	r2, r1
 80053d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053da:	4b5d      	ldr	r3, [pc, #372]	@ (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	4a5d      	ldr	r2, [pc, #372]	@ (8005554 <HAL_RCC_ClockConfig+0x1fc>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	0019      	movs	r1, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	4b59      	ldr	r3, [pc, #356]	@ (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 80053ea:	430a      	orrs	r2, r1
 80053ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2201      	movs	r2, #1
 80053f4:	4013      	ands	r3, r2
 80053f6:	d057      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d107      	bne.n	8005410 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005400:	4b53      	ldr	r3, [pc, #332]	@ (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	2380      	movs	r3, #128	@ 0x80
 8005406:	029b      	lsls	r3, r3, #10
 8005408:	4013      	ands	r3, r2
 800540a:	d12b      	bne.n	8005464 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e097      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d107      	bne.n	8005428 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005418:	4b4d      	ldr	r3, [pc, #308]	@ (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	2380      	movs	r3, #128	@ 0x80
 800541e:	049b      	lsls	r3, r3, #18
 8005420:	4013      	ands	r3, r2
 8005422:	d11f      	bne.n	8005464 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e08b      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d107      	bne.n	8005440 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005430:	4b47      	ldr	r3, [pc, #284]	@ (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	2380      	movs	r3, #128	@ 0x80
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	4013      	ands	r3, r2
 800543a:	d113      	bne.n	8005464 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e07f      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b03      	cmp	r3, #3
 8005446:	d106      	bne.n	8005456 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005448:	4b41      	ldr	r3, [pc, #260]	@ (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 800544a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800544c:	2202      	movs	r2, #2
 800544e:	4013      	ands	r3, r2
 8005450:	d108      	bne.n	8005464 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e074      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005456:	4b3e      	ldr	r3, [pc, #248]	@ (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 8005458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800545a:	2202      	movs	r2, #2
 800545c:	4013      	ands	r3, r2
 800545e:	d101      	bne.n	8005464 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e06d      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005464:	4b3a      	ldr	r3, [pc, #232]	@ (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	2207      	movs	r2, #7
 800546a:	4393      	bics	r3, r2
 800546c:	0019      	movs	r1, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	4b37      	ldr	r3, [pc, #220]	@ (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 8005474:	430a      	orrs	r2, r1
 8005476:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005478:	f7fd f9bc 	bl	80027f4 <HAL_GetTick>
 800547c:	0003      	movs	r3, r0
 800547e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005480:	e009      	b.n	8005496 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005482:	f7fd f9b7 	bl	80027f4 <HAL_GetTick>
 8005486:	0002      	movs	r2, r0
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	4a2f      	ldr	r2, [pc, #188]	@ (800554c <HAL_RCC_ClockConfig+0x1f4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e054      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005496:	4b2e      	ldr	r3, [pc, #184]	@ (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2238      	movs	r2, #56	@ 0x38
 800549c:	401a      	ands	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d1ec      	bne.n	8005482 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054a8:	4b27      	ldr	r3, [pc, #156]	@ (8005548 <HAL_RCC_ClockConfig+0x1f0>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2207      	movs	r2, #7
 80054ae:	4013      	ands	r3, r2
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d21e      	bcs.n	80054f4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054b6:	4b24      	ldr	r3, [pc, #144]	@ (8005548 <HAL_RCC_ClockConfig+0x1f0>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2207      	movs	r2, #7
 80054bc:	4393      	bics	r3, r2
 80054be:	0019      	movs	r1, r3
 80054c0:	4b21      	ldr	r3, [pc, #132]	@ (8005548 <HAL_RCC_ClockConfig+0x1f0>)
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054c8:	f7fd f994 	bl	80027f4 <HAL_GetTick>
 80054cc:	0003      	movs	r3, r0
 80054ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054d0:	e009      	b.n	80054e6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054d2:	f7fd f98f 	bl	80027f4 <HAL_GetTick>
 80054d6:	0002      	movs	r2, r0
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	4a1b      	ldr	r2, [pc, #108]	@ (800554c <HAL_RCC_ClockConfig+0x1f4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e02c      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054e6:	4b18      	ldr	r3, [pc, #96]	@ (8005548 <HAL_RCC_ClockConfig+0x1f0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2207      	movs	r2, #7
 80054ec:	4013      	ands	r3, r2
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d1ee      	bne.n	80054d2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2204      	movs	r2, #4
 80054fa:	4013      	ands	r3, r2
 80054fc:	d009      	beq.n	8005512 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80054fe:	4b14      	ldr	r3, [pc, #80]	@ (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	4a15      	ldr	r2, [pc, #84]	@ (8005558 <HAL_RCC_ClockConfig+0x200>)
 8005504:	4013      	ands	r3, r2
 8005506:	0019      	movs	r1, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	4b10      	ldr	r3, [pc, #64]	@ (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 800550e:	430a      	orrs	r2, r1
 8005510:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005512:	f000 f829 	bl	8005568 <HAL_RCC_GetSysClockFreq>
 8005516:	0001      	movs	r1, r0
 8005518:	4b0d      	ldr	r3, [pc, #52]	@ (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	0a1b      	lsrs	r3, r3, #8
 800551e:	220f      	movs	r2, #15
 8005520:	401a      	ands	r2, r3
 8005522:	4b0e      	ldr	r3, [pc, #56]	@ (800555c <HAL_RCC_ClockConfig+0x204>)
 8005524:	0092      	lsls	r2, r2, #2
 8005526:	58d3      	ldr	r3, [r2, r3]
 8005528:	221f      	movs	r2, #31
 800552a:	4013      	ands	r3, r2
 800552c:	000a      	movs	r2, r1
 800552e:	40da      	lsrs	r2, r3
 8005530:	4b0b      	ldr	r3, [pc, #44]	@ (8005560 <HAL_RCC_ClockConfig+0x208>)
 8005532:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005534:	4b0b      	ldr	r3, [pc, #44]	@ (8005564 <HAL_RCC_ClockConfig+0x20c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	0018      	movs	r0, r3
 800553a:	f7fd f8ff 	bl	800273c <HAL_InitTick>
 800553e:	0003      	movs	r3, r0
}
 8005540:	0018      	movs	r0, r3
 8005542:	46bd      	mov	sp, r7
 8005544:	b004      	add	sp, #16
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40022000 	.word	0x40022000
 800554c:	00001388 	.word	0x00001388
 8005550:	40021000 	.word	0x40021000
 8005554:	fffff0ff 	.word	0xfffff0ff
 8005558:	ffff8fff 	.word	0xffff8fff
 800555c:	08006380 	.word	0x08006380
 8005560:	20000068 	.word	0x20000068
 8005564:	2000006c 	.word	0x2000006c

08005568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800556e:	4b3c      	ldr	r3, [pc, #240]	@ (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2238      	movs	r2, #56	@ 0x38
 8005574:	4013      	ands	r3, r2
 8005576:	d10f      	bne.n	8005598 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005578:	4b39      	ldr	r3, [pc, #228]	@ (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	0adb      	lsrs	r3, r3, #11
 800557e:	2207      	movs	r2, #7
 8005580:	4013      	ands	r3, r2
 8005582:	2201      	movs	r2, #1
 8005584:	409a      	lsls	r2, r3
 8005586:	0013      	movs	r3, r2
 8005588:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800558a:	6839      	ldr	r1, [r7, #0]
 800558c:	4835      	ldr	r0, [pc, #212]	@ (8005664 <HAL_RCC_GetSysClockFreq+0xfc>)
 800558e:	f7fa fdb9 	bl	8000104 <__udivsi3>
 8005592:	0003      	movs	r3, r0
 8005594:	613b      	str	r3, [r7, #16]
 8005596:	e05d      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005598:	4b31      	ldr	r3, [pc, #196]	@ (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	2238      	movs	r2, #56	@ 0x38
 800559e:	4013      	ands	r3, r2
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d102      	bne.n	80055aa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055a4:	4b30      	ldr	r3, [pc, #192]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x100>)
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	e054      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2238      	movs	r2, #56	@ 0x38
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b10      	cmp	r3, #16
 80055b4:	d138      	bne.n	8005628 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80055b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	2203      	movs	r2, #3
 80055bc:	4013      	ands	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055c0:	4b27      	ldr	r3, [pc, #156]	@ (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	091b      	lsrs	r3, r3, #4
 80055c6:	2207      	movs	r2, #7
 80055c8:	4013      	ands	r3, r2
 80055ca:	3301      	adds	r3, #1
 80055cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d10d      	bne.n	80055f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055d4:	68b9      	ldr	r1, [r7, #8]
 80055d6:	4824      	ldr	r0, [pc, #144]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x100>)
 80055d8:	f7fa fd94 	bl	8000104 <__udivsi3>
 80055dc:	0003      	movs	r3, r0
 80055de:	0019      	movs	r1, r3
 80055e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	0a1b      	lsrs	r3, r3, #8
 80055e6:	227f      	movs	r2, #127	@ 0x7f
 80055e8:	4013      	ands	r3, r2
 80055ea:	434b      	muls	r3, r1
 80055ec:	617b      	str	r3, [r7, #20]
        break;
 80055ee:	e00d      	b.n	800560c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	481c      	ldr	r0, [pc, #112]	@ (8005664 <HAL_RCC_GetSysClockFreq+0xfc>)
 80055f4:	f7fa fd86 	bl	8000104 <__udivsi3>
 80055f8:	0003      	movs	r3, r0
 80055fa:	0019      	movs	r1, r3
 80055fc:	4b18      	ldr	r3, [pc, #96]	@ (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	0a1b      	lsrs	r3, r3, #8
 8005602:	227f      	movs	r2, #127	@ 0x7f
 8005604:	4013      	ands	r3, r2
 8005606:	434b      	muls	r3, r1
 8005608:	617b      	str	r3, [r7, #20]
        break;
 800560a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800560c:	4b14      	ldr	r3, [pc, #80]	@ (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	0f5b      	lsrs	r3, r3, #29
 8005612:	2207      	movs	r2, #7
 8005614:	4013      	ands	r3, r2
 8005616:	3301      	adds	r3, #1
 8005618:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	6978      	ldr	r0, [r7, #20]
 800561e:	f7fa fd71 	bl	8000104 <__udivsi3>
 8005622:	0003      	movs	r3, r0
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	e015      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005628:	4b0d      	ldr	r3, [pc, #52]	@ (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2238      	movs	r2, #56	@ 0x38
 800562e:	4013      	ands	r3, r2
 8005630:	2b20      	cmp	r3, #32
 8005632:	d103      	bne.n	800563c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005634:	2380      	movs	r3, #128	@ 0x80
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	e00b      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800563c:	4b08      	ldr	r3, [pc, #32]	@ (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2238      	movs	r2, #56	@ 0x38
 8005642:	4013      	ands	r3, r2
 8005644:	2b18      	cmp	r3, #24
 8005646:	d103      	bne.n	8005650 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005648:	23fa      	movs	r3, #250	@ 0xfa
 800564a:	01db      	lsls	r3, r3, #7
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	e001      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005654:	693b      	ldr	r3, [r7, #16]
}
 8005656:	0018      	movs	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	b006      	add	sp, #24
 800565c:	bd80      	pop	{r7, pc}
 800565e:	46c0      	nop			@ (mov r8, r8)
 8005660:	40021000 	.word	0x40021000
 8005664:	00f42400 	.word	0x00f42400
 8005668:	007a1200 	.word	0x007a1200

0800566c <HAL_RCC_EnableCSS>:
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005670:	4b04      	ldr	r3, [pc, #16]	@ (8005684 <HAL_RCC_EnableCSS+0x18>)
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	4b03      	ldr	r3, [pc, #12]	@ (8005684 <HAL_RCC_EnableCSS+0x18>)
 8005676:	2180      	movs	r1, #128	@ 0x80
 8005678:	0309      	lsls	r1, r1, #12
 800567a:	430a      	orrs	r2, r1
 800567c:	601a      	str	r2, [r3, #0]
}
 800567e:	46c0      	nop			@ (mov r8, r8)
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40021000 	.word	0x40021000

08005688 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note  This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
  uint32_t itflag = RCC->CIFR;
 800568e:	4b0d      	ldr	r3, [pc, #52]	@ (80056c4 <HAL_RCC_NMI_IRQHandler+0x3c>)
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	607b      	str	r3, [r7, #4]

  /* Clear interrupt flags related to CSS */
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 8005694:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <HAL_RCC_NMI_IRQHandler+0x3c>)
 8005696:	6879      	ldr	r1, [r7, #4]
 8005698:	22c0      	movs	r2, #192	@ 0xc0
 800569a:	0092      	lsls	r2, r2, #2
 800569c:	400a      	ands	r2, r1
 800569e:	621a      	str	r2, [r3, #32]

  /* Check RCC CSSF interrupt flag  */
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	2380      	movs	r3, #128	@ 0x80
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	4013      	ands	r3, r2
 80056a8:	d001      	beq.n	80056ae <HAL_RCC_NMI_IRQHandler+0x26>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80056aa:	f000 f80d 	bl	80056c8 <HAL_RCC_CSSCallback>
  }

  /* Check RCC LSECSSF interrupt flag  */
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	2380      	movs	r3, #128	@ 0x80
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4013      	ands	r3, r2
 80056b6:	d001      	beq.n	80056bc <HAL_RCC_NMI_IRQHandler+0x34>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_LSECSSCallback();
 80056b8:	f000 f80b 	bl	80056d2 <HAL_RCC_LSECSSCallback>
  }
}
 80056bc:	46c0      	nop			@ (mov r8, r8)
 80056be:	46bd      	mov	sp, r7
 80056c0:	b002      	add	sp, #8
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40021000 	.word	0x40021000

080056c8 <HAL_RCC_CSSCallback>:
/**
  * @brief Handle the RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80056cc:	46c0      	nop			@ (mov r8, r8)
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_RCC_LSECSSCallback>:
/**
  * @brief  RCC LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_LSECSSCallback(void)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 80056d6:	46c0      	nop			@ (mov r8, r8)
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80056e4:	2313      	movs	r3, #19
 80056e6:	18fb      	adds	r3, r7, r3
 80056e8:	2200      	movs	r2, #0
 80056ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056ec:	2312      	movs	r3, #18
 80056ee:	18fb      	adds	r3, r7, r3
 80056f0:	2200      	movs	r2, #0
 80056f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	2380      	movs	r3, #128	@ 0x80
 80056fa:	029b      	lsls	r3, r3, #10
 80056fc:	4013      	ands	r3, r2
 80056fe:	d100      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005700:	e0a3      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005702:	2011      	movs	r0, #17
 8005704:	183b      	adds	r3, r7, r0
 8005706:	2200      	movs	r2, #0
 8005708:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800570a:	4bc3      	ldr	r3, [pc, #780]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800570c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800570e:	2380      	movs	r3, #128	@ 0x80
 8005710:	055b      	lsls	r3, r3, #21
 8005712:	4013      	ands	r3, r2
 8005714:	d110      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005716:	4bc0      	ldr	r3, [pc, #768]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005718:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800571a:	4bbf      	ldr	r3, [pc, #764]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800571c:	2180      	movs	r1, #128	@ 0x80
 800571e:	0549      	lsls	r1, r1, #21
 8005720:	430a      	orrs	r2, r1
 8005722:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005724:	4bbc      	ldr	r3, [pc, #752]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005726:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005728:	2380      	movs	r3, #128	@ 0x80
 800572a:	055b      	lsls	r3, r3, #21
 800572c:	4013      	ands	r3, r2
 800572e:	60bb      	str	r3, [r7, #8]
 8005730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005732:	183b      	adds	r3, r7, r0
 8005734:	2201      	movs	r2, #1
 8005736:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005738:	4bb8      	ldr	r3, [pc, #736]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4bb7      	ldr	r3, [pc, #732]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800573e:	2180      	movs	r1, #128	@ 0x80
 8005740:	0049      	lsls	r1, r1, #1
 8005742:	430a      	orrs	r2, r1
 8005744:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005746:	f7fd f855 	bl	80027f4 <HAL_GetTick>
 800574a:	0003      	movs	r3, r0
 800574c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800574e:	e00b      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005750:	f7fd f850 	bl	80027f4 <HAL_GetTick>
 8005754:	0002      	movs	r2, r0
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d904      	bls.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800575e:	2313      	movs	r3, #19
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	2203      	movs	r2, #3
 8005764:	701a      	strb	r2, [r3, #0]
        break;
 8005766:	e005      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005768:	4bac      	ldr	r3, [pc, #688]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	2380      	movs	r3, #128	@ 0x80
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	4013      	ands	r3, r2
 8005772:	d0ed      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005774:	2313      	movs	r3, #19
 8005776:	18fb      	adds	r3, r7, r3
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d154      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800577e:	4ba6      	ldr	r3, [pc, #664]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005780:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005782:	23c0      	movs	r3, #192	@ 0xc0
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4013      	ands	r3, r2
 8005788:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d019      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	429a      	cmp	r2, r3
 8005798:	d014      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800579a:	4b9f      	ldr	r3, [pc, #636]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800579c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579e:	4aa0      	ldr	r2, [pc, #640]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80057a0:	4013      	ands	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057a4:	4b9c      	ldr	r3, [pc, #624]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80057a8:	4b9b      	ldr	r3, [pc, #620]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057aa:	2180      	movs	r1, #128	@ 0x80
 80057ac:	0249      	lsls	r1, r1, #9
 80057ae:	430a      	orrs	r2, r1
 80057b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057b2:	4b99      	ldr	r3, [pc, #612]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80057b6:	4b98      	ldr	r3, [pc, #608]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057b8:	499a      	ldr	r1, [pc, #616]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80057ba:	400a      	ands	r2, r1
 80057bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057be:	4b96      	ldr	r3, [pc, #600]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2201      	movs	r2, #1
 80057c8:	4013      	ands	r3, r2
 80057ca:	d016      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057cc:	f7fd f812 	bl	80027f4 <HAL_GetTick>
 80057d0:	0003      	movs	r3, r0
 80057d2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057d4:	e00c      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d6:	f7fd f80d 	bl	80027f4 <HAL_GetTick>
 80057da:	0002      	movs	r2, r0
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	4a91      	ldr	r2, [pc, #580]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d904      	bls.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80057e6:	2313      	movs	r3, #19
 80057e8:	18fb      	adds	r3, r7, r3
 80057ea:	2203      	movs	r2, #3
 80057ec:	701a      	strb	r2, [r3, #0]
            break;
 80057ee:	e004      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f0:	4b89      	ldr	r3, [pc, #548]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f4:	2202      	movs	r2, #2
 80057f6:	4013      	ands	r3, r2
 80057f8:	d0ed      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80057fa:	2313      	movs	r3, #19
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005804:	4b84      	ldr	r3, [pc, #528]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005808:	4a85      	ldr	r2, [pc, #532]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800580a:	4013      	ands	r3, r2
 800580c:	0019      	movs	r1, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005812:	4b81      	ldr	r3, [pc, #516]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005814:	430a      	orrs	r2, r1
 8005816:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005818:	e00c      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800581a:	2312      	movs	r3, #18
 800581c:	18fb      	adds	r3, r7, r3
 800581e:	2213      	movs	r2, #19
 8005820:	18ba      	adds	r2, r7, r2
 8005822:	7812      	ldrb	r2, [r2, #0]
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	e005      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005828:	2312      	movs	r3, #18
 800582a:	18fb      	adds	r3, r7, r3
 800582c:	2213      	movs	r2, #19
 800582e:	18ba      	adds	r2, r7, r2
 8005830:	7812      	ldrb	r2, [r2, #0]
 8005832:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005834:	2311      	movs	r3, #17
 8005836:	18fb      	adds	r3, r7, r3
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d105      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800583e:	4b76      	ldr	r3, [pc, #472]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005840:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005842:	4b75      	ldr	r3, [pc, #468]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005844:	4979      	ldr	r1, [pc, #484]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005846:	400a      	ands	r2, r1
 8005848:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2201      	movs	r2, #1
 8005850:	4013      	ands	r3, r2
 8005852:	d009      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005854:	4b70      	ldr	r3, [pc, #448]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005858:	2203      	movs	r2, #3
 800585a:	4393      	bics	r3, r2
 800585c:	0019      	movs	r1, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	4b6d      	ldr	r3, [pc, #436]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005864:	430a      	orrs	r2, r1
 8005866:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2202      	movs	r2, #2
 800586e:	4013      	ands	r3, r2
 8005870:	d009      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005872:	4b69      	ldr	r3, [pc, #420]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005876:	220c      	movs	r2, #12
 8005878:	4393      	bics	r3, r2
 800587a:	0019      	movs	r1, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	4b65      	ldr	r3, [pc, #404]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005882:	430a      	orrs	r2, r1
 8005884:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2210      	movs	r2, #16
 800588c:	4013      	ands	r3, r2
 800588e:	d009      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005890:	4b61      	ldr	r3, [pc, #388]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005894:	4a66      	ldr	r2, [pc, #408]	@ (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005896:	4013      	ands	r3, r2
 8005898:	0019      	movs	r1, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	4b5e      	ldr	r3, [pc, #376]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058a0:	430a      	orrs	r2, r1
 80058a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	2380      	movs	r3, #128	@ 0x80
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4013      	ands	r3, r2
 80058ae:	d009      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058b0:	4b59      	ldr	r3, [pc, #356]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b4:	4a5f      	ldr	r2, [pc, #380]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	0019      	movs	r1, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	4b56      	ldr	r3, [pc, #344]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058c0:	430a      	orrs	r2, r1
 80058c2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	2380      	movs	r3, #128	@ 0x80
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	4013      	ands	r3, r2
 80058ce:	d009      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058d0:	4b51      	ldr	r3, [pc, #324]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d4:	4a58      	ldr	r2, [pc, #352]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	0019      	movs	r1, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69da      	ldr	r2, [r3, #28]
 80058de:	4b4e      	ldr	r3, [pc, #312]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058e0:	430a      	orrs	r2, r1
 80058e2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2220      	movs	r2, #32
 80058ea:	4013      	ands	r3, r2
 80058ec:	d009      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f2:	4a52      	ldr	r2, [pc, #328]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	0019      	movs	r1, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	4b46      	ldr	r3, [pc, #280]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058fe:	430a      	orrs	r2, r1
 8005900:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	2380      	movs	r3, #128	@ 0x80
 8005908:	01db      	lsls	r3, r3, #7
 800590a:	4013      	ands	r3, r2
 800590c:	d015      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800590e:	4b42      	ldr	r3, [pc, #264]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	0899      	lsrs	r1, r3, #2
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1a      	ldr	r2, [r3, #32]
 800591a:	4b3f      	ldr	r3, [pc, #252]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800591c:	430a      	orrs	r2, r1
 800591e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1a      	ldr	r2, [r3, #32]
 8005924:	2380      	movs	r3, #128	@ 0x80
 8005926:	05db      	lsls	r3, r3, #23
 8005928:	429a      	cmp	r2, r3
 800592a:	d106      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800592c:	4b3a      	ldr	r3, [pc, #232]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	4b39      	ldr	r3, [pc, #228]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005932:	2180      	movs	r1, #128	@ 0x80
 8005934:	0249      	lsls	r1, r1, #9
 8005936:	430a      	orrs	r2, r1
 8005938:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	2380      	movs	r3, #128	@ 0x80
 8005940:	031b      	lsls	r3, r3, #12
 8005942:	4013      	ands	r3, r2
 8005944:	d009      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005946:	4b34      	ldr	r3, [pc, #208]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800594a:	2240      	movs	r2, #64	@ 0x40
 800594c:	4393      	bics	r3, r2
 800594e:	0019      	movs	r1, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005954:	4b30      	ldr	r3, [pc, #192]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005956:	430a      	orrs	r2, r1
 8005958:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	2380      	movs	r3, #128	@ 0x80
 8005960:	039b      	lsls	r3, r3, #14
 8005962:	4013      	ands	r3, r2
 8005964:	d016      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005966:	4b2c      	ldr	r3, [pc, #176]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800596a:	4a35      	ldr	r2, [pc, #212]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800596c:	4013      	ands	r3, r2
 800596e:	0019      	movs	r1, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005974:	4b28      	ldr	r3, [pc, #160]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005976:	430a      	orrs	r2, r1
 8005978:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800597e:	2380      	movs	r3, #128	@ 0x80
 8005980:	03db      	lsls	r3, r3, #15
 8005982:	429a      	cmp	r2, r3
 8005984:	d106      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005986:	4b24      	ldr	r3, [pc, #144]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	4b23      	ldr	r3, [pc, #140]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800598c:	2180      	movs	r1, #128	@ 0x80
 800598e:	0449      	lsls	r1, r1, #17
 8005990:	430a      	orrs	r2, r1
 8005992:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	2380      	movs	r3, #128	@ 0x80
 800599a:	03db      	lsls	r3, r3, #15
 800599c:	4013      	ands	r3, r2
 800599e:	d016      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80059a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a4:	4a27      	ldr	r2, [pc, #156]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	0019      	movs	r1, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059b0:	430a      	orrs	r2, r1
 80059b2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b8:	2380      	movs	r3, #128	@ 0x80
 80059ba:	045b      	lsls	r3, r3, #17
 80059bc:	429a      	cmp	r2, r3
 80059be:	d106      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80059c0:	4b15      	ldr	r3, [pc, #84]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	4b14      	ldr	r3, [pc, #80]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059c6:	2180      	movs	r1, #128	@ 0x80
 80059c8:	0449      	lsls	r1, r1, #17
 80059ca:	430a      	orrs	r2, r1
 80059cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	2380      	movs	r3, #128	@ 0x80
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	4013      	ands	r3, r2
 80059d8:	d016      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80059da:	4b0f      	ldr	r3, [pc, #60]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059de:	4a1a      	ldr	r2, [pc, #104]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	0019      	movs	r1, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	695a      	ldr	r2, [r3, #20]
 80059e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059ea:	430a      	orrs	r2, r1
 80059ec:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695a      	ldr	r2, [r3, #20]
 80059f2:	2380      	movs	r3, #128	@ 0x80
 80059f4:	01db      	lsls	r3, r3, #7
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d106      	bne.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80059fa:	4b07      	ldr	r3, [pc, #28]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	4b06      	ldr	r3, [pc, #24]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a00:	2180      	movs	r1, #128	@ 0x80
 8005a02:	0249      	lsls	r1, r1, #9
 8005a04:	430a      	orrs	r2, r1
 8005a06:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005a08:	2312      	movs	r3, #18
 8005a0a:	18fb      	adds	r3, r7, r3
 8005a0c:	781b      	ldrb	r3, [r3, #0]
}
 8005a0e:	0018      	movs	r0, r3
 8005a10:	46bd      	mov	sp, r7
 8005a12:	b006      	add	sp, #24
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	46c0      	nop			@ (mov r8, r8)
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	40007000 	.word	0x40007000
 8005a20:	fffffcff 	.word	0xfffffcff
 8005a24:	fffeffff 	.word	0xfffeffff
 8005a28:	00001388 	.word	0x00001388
 8005a2c:	efffffff 	.word	0xefffffff
 8005a30:	fffff3ff 	.word	0xfffff3ff
 8005a34:	fff3ffff 	.word	0xfff3ffff
 8005a38:	ffcfffff 	.word	0xffcfffff
 8005a3c:	ffffcfff 	.word	0xffffcfff
 8005a40:	ffbfffff 	.word	0xffbfffff
 8005a44:	feffffff 	.word	0xfeffffff
 8005a48:	ffff3fff 	.word	0xffff3fff

08005a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e04a      	b.n	8005af4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	223d      	movs	r2, #61	@ 0x3d
 8005a62:	5c9b      	ldrb	r3, [r3, r2]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d107      	bne.n	8005a7a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	223c      	movs	r2, #60	@ 0x3c
 8005a6e:	2100      	movs	r1, #0
 8005a70:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	0018      	movs	r0, r3
 8005a76:	f7fc fd2f 	bl	80024d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	223d      	movs	r2, #61	@ 0x3d
 8005a7e:	2102      	movs	r1, #2
 8005a80:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3304      	adds	r3, #4
 8005a8a:	0019      	movs	r1, r3
 8005a8c:	0010      	movs	r0, r2
 8005a8e:	f000 fa8f 	bl	8005fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2248      	movs	r2, #72	@ 0x48
 8005a96:	2101      	movs	r1, #1
 8005a98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	223e      	movs	r2, #62	@ 0x3e
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	5499      	strb	r1, [r3, r2]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	223f      	movs	r2, #63	@ 0x3f
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	5499      	strb	r1, [r3, r2]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2240      	movs	r2, #64	@ 0x40
 8005aae:	2101      	movs	r1, #1
 8005ab0:	5499      	strb	r1, [r3, r2]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2241      	movs	r2, #65	@ 0x41
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	5499      	strb	r1, [r3, r2]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2242      	movs	r2, #66	@ 0x42
 8005abe:	2101      	movs	r1, #1
 8005ac0:	5499      	strb	r1, [r3, r2]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2243      	movs	r2, #67	@ 0x43
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2244      	movs	r2, #68	@ 0x44
 8005ace:	2101      	movs	r1, #1
 8005ad0:	5499      	strb	r1, [r3, r2]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2245      	movs	r2, #69	@ 0x45
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	5499      	strb	r1, [r3, r2]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2246      	movs	r2, #70	@ 0x46
 8005ade:	2101      	movs	r1, #1
 8005ae0:	5499      	strb	r1, [r3, r2]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2247      	movs	r2, #71	@ 0x47
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	223d      	movs	r2, #61	@ 0x3d
 8005aee:	2101      	movs	r1, #1
 8005af0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	0018      	movs	r0, r3
 8005af6:	46bd      	mov	sp, r7
 8005af8:	b002      	add	sp, #8
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	223d      	movs	r2, #61	@ 0x3d
 8005b08:	5c9b      	ldrb	r3, [r3, r2]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d001      	beq.n	8005b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e042      	b.n	8005b9a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	223d      	movs	r2, #61	@ 0x3d
 8005b18:	2102      	movs	r1, #2
 8005b1a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2101      	movs	r1, #1
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba4 <HAL_TIM_Base_Start_IT+0xa8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00f      	beq.n	8005b56 <HAL_TIM_Base_Start_IT+0x5a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	2380      	movs	r3, #128	@ 0x80
 8005b3c:	05db      	lsls	r3, r3, #23
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d009      	beq.n	8005b56 <HAL_TIM_Base_Start_IT+0x5a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a18      	ldr	r2, [pc, #96]	@ (8005ba8 <HAL_TIM_Base_Start_IT+0xac>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d004      	beq.n	8005b56 <HAL_TIM_Base_Start_IT+0x5a>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a16      	ldr	r2, [pc, #88]	@ (8005bac <HAL_TIM_Base_Start_IT+0xb0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d116      	bne.n	8005b84 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	4a14      	ldr	r2, [pc, #80]	@ (8005bb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005b5e:	4013      	ands	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b06      	cmp	r3, #6
 8005b66:	d016      	beq.n	8005b96 <HAL_TIM_Base_Start_IT+0x9a>
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	2380      	movs	r3, #128	@ 0x80
 8005b6c:	025b      	lsls	r3, r3, #9
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d011      	beq.n	8005b96 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b82:	e008      	b.n	8005b96 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2101      	movs	r1, #1
 8005b90:	430a      	orrs	r2, r1
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	e000      	b.n	8005b98 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b96:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	b004      	add	sp, #16
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	46c0      	nop			@ (mov r8, r8)
 8005ba4:	40012c00 	.word	0x40012c00
 8005ba8:	40000400 	.word	0x40000400
 8005bac:	40014000 	.word	0x40014000
 8005bb0:	00010007 	.word	0x00010007

08005bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d021      	beq.n	8005c18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	4013      	ands	r3, r2
 8005bda:	d01d      	beq.n	8005c18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2203      	movs	r2, #3
 8005be2:	4252      	negs	r2, r2
 8005be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	2203      	movs	r2, #3
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	d004      	beq.n	8005c02 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f000 f9c0 	bl	8005f80 <HAL_TIM_IC_CaptureCallback>
 8005c00:	e007      	b.n	8005c12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	0018      	movs	r0, r3
 8005c06:	f000 f9b3 	bl	8005f70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f000 f9bf 	bl	8005f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	d022      	beq.n	8005c66 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2204      	movs	r2, #4
 8005c24:	4013      	ands	r3, r2
 8005c26:	d01e      	beq.n	8005c66 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2205      	movs	r2, #5
 8005c2e:	4252      	negs	r2, r2
 8005c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2202      	movs	r2, #2
 8005c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	23c0      	movs	r3, #192	@ 0xc0
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4013      	ands	r3, r2
 8005c44:	d004      	beq.n	8005c50 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f000 f999 	bl	8005f80 <HAL_TIM_IC_CaptureCallback>
 8005c4e:	e007      	b.n	8005c60 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	0018      	movs	r0, r3
 8005c54:	f000 f98c 	bl	8005f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f000 f998 	bl	8005f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2208      	movs	r2, #8
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d021      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2208      	movs	r2, #8
 8005c72:	4013      	ands	r3, r2
 8005c74:	d01d      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2209      	movs	r2, #9
 8005c7c:	4252      	negs	r2, r2
 8005c7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2204      	movs	r2, #4
 8005c84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	2203      	movs	r2, #3
 8005c8e:	4013      	ands	r3, r2
 8005c90:	d004      	beq.n	8005c9c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	0018      	movs	r0, r3
 8005c96:	f000 f973 	bl	8005f80 <HAL_TIM_IC_CaptureCallback>
 8005c9a:	e007      	b.n	8005cac <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f000 f966 	bl	8005f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f000 f972 	bl	8005f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2210      	movs	r2, #16
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	d022      	beq.n	8005d00 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2210      	movs	r2, #16
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	d01e      	beq.n	8005d00 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2211      	movs	r2, #17
 8005cc8:	4252      	negs	r2, r2
 8005cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2208      	movs	r2, #8
 8005cd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69da      	ldr	r2, [r3, #28]
 8005cd8:	23c0      	movs	r3, #192	@ 0xc0
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4013      	ands	r3, r2
 8005cde:	d004      	beq.n	8005cea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	f000 f94c 	bl	8005f80 <HAL_TIM_IC_CaptureCallback>
 8005ce8:	e007      	b.n	8005cfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	0018      	movs	r0, r3
 8005cee:	f000 f93f 	bl	8005f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f000 f94b 	bl	8005f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2201      	movs	r2, #1
 8005d04:	4013      	ands	r3, r2
 8005d06:	d00c      	beq.n	8005d22 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	d008      	beq.n	8005d22 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2202      	movs	r2, #2
 8005d16:	4252      	negs	r2, r2
 8005d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f7fc f9e9 	bl	80020f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
   if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2280      	movs	r2, #128	@ 0x80
 8005d26:	4013      	ands	r3, r2
 8005d28:	d104      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	2380      	movs	r3, #128	@ 0x80
 8005d2e:	019b      	lsls	r3, r3, #6
 8005d30:	4013      	ands	r3, r2
   if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d32:	d00b      	beq.n	8005d4c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2280      	movs	r2, #128	@ 0x80
 8005d38:	4013      	ands	r3, r2
 8005d3a:	d007      	beq.n	8005d4c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a1e      	ldr	r2, [pc, #120]	@ (8005dbc <HAL_TIM_IRQHandler+0x208>)
 8005d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	0018      	movs	r0, r3
 8005d48:	f000 fad2 	bl	80062f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	2380      	movs	r3, #128	@ 0x80
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	4013      	ands	r3, r2
 8005d54:	d00b      	beq.n	8005d6e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2280      	movs	r2, #128	@ 0x80
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	d007      	beq.n	8005d6e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a17      	ldr	r2, [pc, #92]	@ (8005dc0 <HAL_TIM_IRQHandler+0x20c>)
 8005d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f000 fac9 	bl	8006300 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2240      	movs	r2, #64	@ 0x40
 8005d72:	4013      	ands	r3, r2
 8005d74:	d00c      	beq.n	8005d90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2240      	movs	r2, #64	@ 0x40
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	d008      	beq.n	8005d90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2241      	movs	r2, #65	@ 0x41
 8005d84:	4252      	negs	r2, r2
 8005d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f000 f908 	bl	8005fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2220      	movs	r2, #32
 8005d94:	4013      	ands	r3, r2
 8005d96:	d00c      	beq.n	8005db2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d008      	beq.n	8005db2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2221      	movs	r2, #33	@ 0x21
 8005da6:	4252      	negs	r2, r2
 8005da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	0018      	movs	r0, r3
 8005dae:	f000 fa97 	bl	80062e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005db2:	46c0      	nop			@ (mov r8, r8)
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b004      	add	sp, #16
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	46c0      	nop			@ (mov r8, r8)
 8005dbc:	ffffdf7f 	.word	0xffffdf7f
 8005dc0:	fffffeff 	.word	0xfffffeff

08005dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dce:	230f      	movs	r3, #15
 8005dd0:	18fb      	adds	r3, r7, r3
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	223c      	movs	r2, #60	@ 0x3c
 8005dda:	5c9b      	ldrb	r3, [r3, r2]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_TIM_ConfigClockSource+0x20>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e0bc      	b.n	8005f5e <HAL_TIM_ConfigClockSource+0x19a>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	223c      	movs	r2, #60	@ 0x3c
 8005de8:	2101      	movs	r1, #1
 8005dea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	223d      	movs	r2, #61	@ 0x3d
 8005df0:	2102      	movs	r1, #2
 8005df2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	4a5a      	ldr	r2, [pc, #360]	@ (8005f68 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4a59      	ldr	r2, [pc, #356]	@ (8005f6c <HAL_TIM_ConfigClockSource+0x1a8>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2280      	movs	r2, #128	@ 0x80
 8005e1a:	0192      	lsls	r2, r2, #6
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d040      	beq.n	8005ea2 <HAL_TIM_ConfigClockSource+0xde>
 8005e20:	2280      	movs	r2, #128	@ 0x80
 8005e22:	0192      	lsls	r2, r2, #6
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d900      	bls.n	8005e2a <HAL_TIM_ConfigClockSource+0x66>
 8005e28:	e088      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x178>
 8005e2a:	2280      	movs	r2, #128	@ 0x80
 8005e2c:	0152      	lsls	r2, r2, #5
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d100      	bne.n	8005e34 <HAL_TIM_ConfigClockSource+0x70>
 8005e32:	e088      	b.n	8005f46 <HAL_TIM_ConfigClockSource+0x182>
 8005e34:	2280      	movs	r2, #128	@ 0x80
 8005e36:	0152      	lsls	r2, r2, #5
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d900      	bls.n	8005e3e <HAL_TIM_ConfigClockSource+0x7a>
 8005e3c:	e07e      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x178>
 8005e3e:	2b70      	cmp	r3, #112	@ 0x70
 8005e40:	d018      	beq.n	8005e74 <HAL_TIM_ConfigClockSource+0xb0>
 8005e42:	d900      	bls.n	8005e46 <HAL_TIM_ConfigClockSource+0x82>
 8005e44:	e07a      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x178>
 8005e46:	2b60      	cmp	r3, #96	@ 0x60
 8005e48:	d04f      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x126>
 8005e4a:	d900      	bls.n	8005e4e <HAL_TIM_ConfigClockSource+0x8a>
 8005e4c:	e076      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x178>
 8005e4e:	2b50      	cmp	r3, #80	@ 0x50
 8005e50:	d03b      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x106>
 8005e52:	d900      	bls.n	8005e56 <HAL_TIM_ConfigClockSource+0x92>
 8005e54:	e072      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x178>
 8005e56:	2b40      	cmp	r3, #64	@ 0x40
 8005e58:	d057      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x146>
 8005e5a:	d900      	bls.n	8005e5e <HAL_TIM_ConfigClockSource+0x9a>
 8005e5c:	e06e      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x178>
 8005e5e:	2b30      	cmp	r3, #48	@ 0x30
 8005e60:	d063      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x166>
 8005e62:	d86b      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x178>
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d060      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x166>
 8005e68:	d868      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x178>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d05d      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x166>
 8005e6e:	2b10      	cmp	r3, #16
 8005e70:	d05b      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x166>
 8005e72:	e063      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e84:	f000 f99e 	bl	80061c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2277      	movs	r2, #119	@ 0x77
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	609a      	str	r2, [r3, #8]
      break;
 8005ea0:	e052      	b.n	8005f48 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005eb2:	f000 f987 	bl	80061c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2180      	movs	r1, #128	@ 0x80
 8005ec2:	01c9      	lsls	r1, r1, #7
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	609a      	str	r2, [r3, #8]
      break;
 8005ec8:	e03e      	b.n	8005f48 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ed6:	001a      	movs	r2, r3
 8005ed8:	f000 f8f8 	bl	80060cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2150      	movs	r1, #80	@ 0x50
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f000 f952 	bl	800618c <TIM_ITRx_SetConfig>
      break;
 8005ee8:	e02e      	b.n	8005f48 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ef6:	001a      	movs	r2, r3
 8005ef8:	f000 f916 	bl	8006128 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2160      	movs	r1, #96	@ 0x60
 8005f02:	0018      	movs	r0, r3
 8005f04:	f000 f942 	bl	800618c <TIM_ITRx_SetConfig>
      break;
 8005f08:	e01e      	b.n	8005f48 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f16:	001a      	movs	r2, r3
 8005f18:	f000 f8d8 	bl	80060cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2140      	movs	r1, #64	@ 0x40
 8005f22:	0018      	movs	r0, r3
 8005f24:	f000 f932 	bl	800618c <TIM_ITRx_SetConfig>
      break;
 8005f28:	e00e      	b.n	8005f48 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	0019      	movs	r1, r3
 8005f34:	0010      	movs	r0, r2
 8005f36:	f000 f929 	bl	800618c <TIM_ITRx_SetConfig>
      break;
 8005f3a:	e005      	b.n	8005f48 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005f3c:	230f      	movs	r3, #15
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	2201      	movs	r2, #1
 8005f42:	701a      	strb	r2, [r3, #0]
      break;
 8005f44:	e000      	b.n	8005f48 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005f46:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	223d      	movs	r2, #61	@ 0x3d
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	223c      	movs	r2, #60	@ 0x3c
 8005f54:	2100      	movs	r1, #0
 8005f56:	5499      	strb	r1, [r3, r2]

  return status;
 8005f58:	230f      	movs	r3, #15
 8005f5a:	18fb      	adds	r3, r7, r3
 8005f5c:	781b      	ldrb	r3, [r3, #0]
}
 8005f5e:	0018      	movs	r0, r3
 8005f60:	46bd      	mov	sp, r7
 8005f62:	b004      	add	sp, #16
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	46c0      	nop			@ (mov r8, r8)
 8005f68:	ffceff88 	.word	0xffceff88
 8005f6c:	ffff00ff 	.word	0xffff00ff

08005f70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f78:	46c0      	nop			@ (mov r8, r8)
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	b002      	add	sp, #8
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f88:	46c0      	nop			@ (mov r8, r8)
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	b002      	add	sp, #8
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f98:	46c0      	nop			@ (mov r8, r8)
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	b002      	add	sp, #8
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fa8:	46c0      	nop			@ (mov r8, r8)
 8005faa:	46bd      	mov	sp, r7
 8005fac:	b002      	add	sp, #8
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a3b      	ldr	r2, [pc, #236]	@ (80060b0 <TIM_Base_SetConfig+0x100>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d008      	beq.n	8005fda <TIM_Base_SetConfig+0x2a>
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	2380      	movs	r3, #128	@ 0x80
 8005fcc:	05db      	lsls	r3, r3, #23
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d003      	beq.n	8005fda <TIM_Base_SetConfig+0x2a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a37      	ldr	r2, [pc, #220]	@ (80060b4 <TIM_Base_SetConfig+0x104>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d108      	bne.n	8005fec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2270      	movs	r2, #112	@ 0x70
 8005fde:	4393      	bics	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a30      	ldr	r2, [pc, #192]	@ (80060b0 <TIM_Base_SetConfig+0x100>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d018      	beq.n	8006026 <TIM_Base_SetConfig+0x76>
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	2380      	movs	r3, #128	@ 0x80
 8005ff8:	05db      	lsls	r3, r3, #23
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d013      	beq.n	8006026 <TIM_Base_SetConfig+0x76>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a2c      	ldr	r2, [pc, #176]	@ (80060b4 <TIM_Base_SetConfig+0x104>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d00f      	beq.n	8006026 <TIM_Base_SetConfig+0x76>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a2b      	ldr	r2, [pc, #172]	@ (80060b8 <TIM_Base_SetConfig+0x108>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00b      	beq.n	8006026 <TIM_Base_SetConfig+0x76>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2a      	ldr	r2, [pc, #168]	@ (80060bc <TIM_Base_SetConfig+0x10c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d007      	beq.n	8006026 <TIM_Base_SetConfig+0x76>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a29      	ldr	r2, [pc, #164]	@ (80060c0 <TIM_Base_SetConfig+0x110>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d003      	beq.n	8006026 <TIM_Base_SetConfig+0x76>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a28      	ldr	r2, [pc, #160]	@ (80060c4 <TIM_Base_SetConfig+0x114>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d108      	bne.n	8006038 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4a27      	ldr	r2, [pc, #156]	@ (80060c8 <TIM_Base_SetConfig+0x118>)
 800602a:	4013      	ands	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4313      	orrs	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2280      	movs	r2, #128	@ 0x80
 800603c:	4393      	bics	r3, r2
 800603e:	001a      	movs	r2, r3
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	689a      	ldr	r2, [r3, #8]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a13      	ldr	r2, [pc, #76]	@ (80060b0 <TIM_Base_SetConfig+0x100>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00b      	beq.n	800607e <TIM_Base_SetConfig+0xce>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a14      	ldr	r2, [pc, #80]	@ (80060bc <TIM_Base_SetConfig+0x10c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d007      	beq.n	800607e <TIM_Base_SetConfig+0xce>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a13      	ldr	r2, [pc, #76]	@ (80060c0 <TIM_Base_SetConfig+0x110>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d003      	beq.n	800607e <TIM_Base_SetConfig+0xce>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a12      	ldr	r2, [pc, #72]	@ (80060c4 <TIM_Base_SetConfig+0x114>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d103      	bne.n	8006086 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	2201      	movs	r2, #1
 8006092:	4013      	ands	r3, r2
 8006094:	2b01      	cmp	r3, #1
 8006096:	d106      	bne.n	80060a6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	2201      	movs	r2, #1
 800609e:	4393      	bics	r3, r2
 80060a0:	001a      	movs	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	611a      	str	r2, [r3, #16]
  }
}
 80060a6:	46c0      	nop			@ (mov r8, r8)
 80060a8:	46bd      	mov	sp, r7
 80060aa:	b004      	add	sp, #16
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	46c0      	nop			@ (mov r8, r8)
 80060b0:	40012c00 	.word	0x40012c00
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40002000 	.word	0x40002000
 80060bc:	40014000 	.word	0x40014000
 80060c0:	40014400 	.word	0x40014400
 80060c4:	40014800 	.word	0x40014800
 80060c8:	fffffcff 	.word	0xfffffcff

080060cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	2201      	movs	r2, #1
 80060e4:	4393      	bics	r3, r2
 80060e6:	001a      	movs	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	22f0      	movs	r2, #240	@ 0xf0
 80060f6:	4393      	bics	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	220a      	movs	r2, #10
 8006108:	4393      	bics	r3, r2
 800610a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	621a      	str	r2, [r3, #32]
}
 8006120:	46c0      	nop			@ (mov r8, r8)
 8006122:	46bd      	mov	sp, r7
 8006124:	b006      	add	sp, #24
 8006126:	bd80      	pop	{r7, pc}

08006128 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	2210      	movs	r2, #16
 8006140:	4393      	bics	r3, r2
 8006142:	001a      	movs	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4a0d      	ldr	r2, [pc, #52]	@ (8006188 <TIM_TI2_ConfigInputStage+0x60>)
 8006152:	4013      	ands	r3, r2
 8006154:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	031b      	lsls	r3, r3, #12
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	22a0      	movs	r2, #160	@ 0xa0
 8006164:	4393      	bics	r3, r2
 8006166:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	621a      	str	r2, [r3, #32]
}
 800617e:	46c0      	nop			@ (mov r8, r8)
 8006180:	46bd      	mov	sp, r7
 8006182:	b006      	add	sp, #24
 8006184:	bd80      	pop	{r7, pc}
 8006186:	46c0      	nop			@ (mov r8, r8)
 8006188:	ffff0fff 	.word	0xffff0fff

0800618c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4a08      	ldr	r2, [pc, #32]	@ (80061c0 <TIM_ITRx_SetConfig+0x34>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	2207      	movs	r2, #7
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	609a      	str	r2, [r3, #8]
}
 80061b6:	46c0      	nop			@ (mov r8, r8)
 80061b8:	46bd      	mov	sp, r7
 80061ba:	b004      	add	sp, #16
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	46c0      	nop			@ (mov r8, r8)
 80061c0:	ffcfff8f 	.word	0xffcfff8f

080061c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	4a09      	ldr	r2, [pc, #36]	@ (8006200 <TIM_ETR_SetConfig+0x3c>)
 80061dc:	4013      	ands	r3, r2
 80061de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	021a      	lsls	r2, r3, #8
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	609a      	str	r2, [r3, #8]
}
 80061f8:	46c0      	nop			@ (mov r8, r8)
 80061fa:	46bd      	mov	sp, r7
 80061fc:	b006      	add	sp, #24
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	ffff00ff 	.word	0xffff00ff

08006204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	223c      	movs	r2, #60	@ 0x3c
 8006212:	5c9b      	ldrb	r3, [r3, r2]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d101      	bne.n	800621c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006218:	2302      	movs	r3, #2
 800621a:	e055      	b.n	80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	223c      	movs	r2, #60	@ 0x3c
 8006220:	2101      	movs	r1, #1
 8006222:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	223d      	movs	r2, #61	@ 0x3d
 8006228:	2102      	movs	r1, #2
 800622a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a23      	ldr	r2, [pc, #140]	@ (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d108      	bne.n	8006258 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4a22      	ldr	r2, [pc, #136]	@ (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800624a:	4013      	ands	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2270      	movs	r2, #112	@ 0x70
 800625c:	4393      	bics	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a16      	ldr	r2, [pc, #88]	@ (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00f      	beq.n	800629c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	2380      	movs	r3, #128	@ 0x80
 8006282:	05db      	lsls	r3, r3, #23
 8006284:	429a      	cmp	r2, r3
 8006286:	d009      	beq.n	800629c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a12      	ldr	r2, [pc, #72]	@ (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d004      	beq.n	800629c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a11      	ldr	r2, [pc, #68]	@ (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d10c      	bne.n	80062b6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2280      	movs	r2, #128	@ 0x80
 80062a0:	4393      	bics	r3, r2
 80062a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	223d      	movs	r2, #61	@ 0x3d
 80062ba:	2101      	movs	r1, #1
 80062bc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	223c      	movs	r2, #60	@ 0x3c
 80062c2:	2100      	movs	r1, #0
 80062c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	0018      	movs	r0, r3
 80062ca:	46bd      	mov	sp, r7
 80062cc:	b004      	add	sp, #16
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40012c00 	.word	0x40012c00
 80062d4:	ff0fffff 	.word	0xff0fffff
 80062d8:	40000400 	.word	0x40000400
 80062dc:	40014000 	.word	0x40014000

080062e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062e8:	46c0      	nop			@ (mov r8, r8)
 80062ea:	46bd      	mov	sp, r7
 80062ec:	b002      	add	sp, #8
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062f8:	46c0      	nop			@ (mov r8, r8)
 80062fa:	46bd      	mov	sp, r7
 80062fc:	b002      	add	sp, #8
 80062fe:	bd80      	pop	{r7, pc}

08006300 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006308:	46c0      	nop			@ (mov r8, r8)
 800630a:	46bd      	mov	sp, r7
 800630c:	b002      	add	sp, #8
 800630e:	bd80      	pop	{r7, pc}

08006310 <memset>:
 8006310:	0003      	movs	r3, r0
 8006312:	1882      	adds	r2, r0, r2
 8006314:	4293      	cmp	r3, r2
 8006316:	d100      	bne.n	800631a <memset+0xa>
 8006318:	4770      	bx	lr
 800631a:	7019      	strb	r1, [r3, #0]
 800631c:	3301      	adds	r3, #1
 800631e:	e7f9      	b.n	8006314 <memset+0x4>

08006320 <__libc_init_array>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	2600      	movs	r6, #0
 8006324:	4c0c      	ldr	r4, [pc, #48]	@ (8006358 <__libc_init_array+0x38>)
 8006326:	4d0d      	ldr	r5, [pc, #52]	@ (800635c <__libc_init_array+0x3c>)
 8006328:	1b64      	subs	r4, r4, r5
 800632a:	10a4      	asrs	r4, r4, #2
 800632c:	42a6      	cmp	r6, r4
 800632e:	d109      	bne.n	8006344 <__libc_init_array+0x24>
 8006330:	2600      	movs	r6, #0
 8006332:	f000 f819 	bl	8006368 <_init>
 8006336:	4c0a      	ldr	r4, [pc, #40]	@ (8006360 <__libc_init_array+0x40>)
 8006338:	4d0a      	ldr	r5, [pc, #40]	@ (8006364 <__libc_init_array+0x44>)
 800633a:	1b64      	subs	r4, r4, r5
 800633c:	10a4      	asrs	r4, r4, #2
 800633e:	42a6      	cmp	r6, r4
 8006340:	d105      	bne.n	800634e <__libc_init_array+0x2e>
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	00b3      	lsls	r3, r6, #2
 8006346:	58eb      	ldr	r3, [r5, r3]
 8006348:	4798      	blx	r3
 800634a:	3601      	adds	r6, #1
 800634c:	e7ee      	b.n	800632c <__libc_init_array+0xc>
 800634e:	00b3      	lsls	r3, r6, #2
 8006350:	58eb      	ldr	r3, [r5, r3]
 8006352:	4798      	blx	r3
 8006354:	3601      	adds	r6, #1
 8006356:	e7f2      	b.n	800633e <__libc_init_array+0x1e>
 8006358:	080063c0 	.word	0x080063c0
 800635c:	080063c0 	.word	0x080063c0
 8006360:	080063c4 	.word	0x080063c4
 8006364:	080063c0 	.word	0x080063c0

08006368 <_init>:
 8006368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636a:	46c0      	nop			@ (mov r8, r8)
 800636c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800636e:	bc08      	pop	{r3}
 8006370:	469e      	mov	lr, r3
 8006372:	4770      	bx	lr

08006374 <_fini>:
 8006374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006376:	46c0      	nop			@ (mov r8, r8)
 8006378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800637a:	bc08      	pop	{r3}
 800637c:	469e      	mov	lr, r3
 800637e:	4770      	bx	lr
