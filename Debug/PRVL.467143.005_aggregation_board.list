
PRVL.467143.005_aggregation_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006058  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006114  08006114  00007114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006154  08006154  00008070  2**0
                  CONTENTS
  4 .ARM          00000000  08006154  08006154  00008070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006154  08006154  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006154  08006154  00007154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006158  08006158  00007158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800615c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000070  080061cc  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  080061cc  000083cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eebe  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002376  00000000  00000000  00016f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  000192d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c57  00000000  00000000  0001a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fde  00000000  00000000  0001aec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012885  00000000  00000000  00032ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bc83  00000000  00000000  0004572a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e13ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038e8  00000000  00000000  000e13f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e4cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080060fc 	.word	0x080060fc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080060fc 	.word	0x080060fc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <UpdateLED>:
	// Чтение данных из регистра reg_addr устройства с адресом dev_addr
	return HAL_I2C_Mem_Read(&hi2c2, dev_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
}

void UpdateLED(LEDState *led)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	if (led->is_blinking) {
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	7d1b      	ldrb	r3, [r3, #20]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d039      	beq.n	80002a0 <UpdateLED+0x84>
		uint32_t current_time = HAL_GetTick();
 800022c:	f002 f9ac 	bl	8002588 <HAL_GetTick>
 8000230:	0003      	movs	r3, r0
 8000232:	60fb      	str	r3, [r7, #12]
		uint32_t elapsed_time = current_time - led->blink_start_time;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	68fa      	ldr	r2, [r7, #12]
 800023a:	1ad3      	subs	r3, r2, r3
 800023c:	60bb      	str	r3, [r7, #8]

		if (elapsed_time < led->blink_duration) {
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	68db      	ldr	r3, [r3, #12]
 8000242:	68ba      	ldr	r2, [r7, #8]
 8000244:	429a      	cmp	r2, r3
 8000246:	d21f      	bcs.n	8000288 <UpdateLED+0x6c>
			// Мигание
			if (elapsed_time % led->blink_period < led->blink_period / 2) {
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	691a      	ldr	r2, [r3, #16]
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	0011      	movs	r1, r2
 8000250:	0018      	movs	r0, r3
 8000252:	f7ff ffdd 	bl	8000210 <__aeabi_uidivmod>
 8000256:	000b      	movs	r3, r1
 8000258:	001a      	movs	r2, r3
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	691b      	ldr	r3, [r3, #16]
 800025e:	085b      	lsrs	r3, r3, #1
 8000260:	429a      	cmp	r2, r3
 8000262:	d208      	bcs.n	8000276 <UpdateLED+0x5a>
				HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, SET);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	6818      	ldr	r0, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	889b      	ldrh	r3, [r3, #4]
 800026c:	2201      	movs	r2, #1
 800026e:	0019      	movs	r1, r3
 8000270:	f002 fe19 	bl	8002ea6 <HAL_GPIO_WritePin>
 8000274:	e03e      	b.n	80002f4 <UpdateLED+0xd8>
			} else {
				HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	6818      	ldr	r0, [r3, #0]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	889b      	ldrh	r3, [r3, #4]
 800027e:	2200      	movs	r2, #0
 8000280:	0019      	movs	r1, r3
 8000282:	f002 fe10 	bl	8002ea6 <HAL_GPIO_WritePin>
 8000286:	e035      	b.n	80002f4 <UpdateLED+0xd8>
			}
		} else {
			// Завершение мигания
			HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	6818      	ldr	r0, [r3, #0]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	889b      	ldrh	r3, [r3, #4]
 8000290:	2200      	movs	r2, #0
 8000292:	0019      	movs	r1, r3
 8000294:	f002 fe07 	bl	8002ea6 <HAL_GPIO_WritePin>
			led->is_blinking = 0;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2200      	movs	r2, #0
 800029c:	751a      	strb	r2, [r3, #20]
 800029e:	e029      	b.n	80002f4 <UpdateLED+0xd8>
		}
	} else if (adapter1_state == 1 || adapter2_state == 1)
 80002a0:	4b27      	ldr	r3, [pc, #156]	@ (8000340 <UpdateLED+0x124>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d003      	beq.n	80002b0 <UpdateLED+0x94>
 80002a8:	4b26      	ldr	r3, [pc, #152]	@ (8000344 <UpdateLED+0x128>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d121      	bne.n	80002f4 <UpdateLED+0xd8>
	{
		if(adapter1_state == 1 && led->GPIO_Pin == FP_MB1_PWRLED_Pin) HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, SET);
 80002b0:	4b23      	ldr	r3, [pc, #140]	@ (8000340 <UpdateLED+0x124>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d10d      	bne.n	80002d4 <UpdateLED+0xb8>
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	889a      	ldrh	r2, [r3, #4]
 80002bc:	2380      	movs	r3, #128	@ 0x80
 80002be:	011b      	lsls	r3, r3, #4
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d107      	bne.n	80002d4 <UpdateLED+0xb8>
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	6818      	ldr	r0, [r3, #0]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	889b      	ldrh	r3, [r3, #4]
 80002cc:	2201      	movs	r2, #1
 80002ce:	0019      	movs	r1, r3
 80002d0:	f002 fde9 	bl	8002ea6 <HAL_GPIO_WritePin>
		if(adapter2_state == 1 && led->GPIO_Pin == FP_MB2_PWRLED_Pin) HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, SET);
 80002d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <UpdateLED+0x128>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d10b      	bne.n	80002f4 <UpdateLED+0xd8>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	889b      	ldrh	r3, [r3, #4]
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d107      	bne.n	80002f4 <UpdateLED+0xd8>
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6818      	ldr	r0, [r3, #0]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	889b      	ldrh	r3, [r3, #4]
 80002ec:	2201      	movs	r2, #1
 80002ee:	0019      	movs	r1, r3
 80002f0:	f002 fdd9 	bl	8002ea6 <HAL_GPIO_WritePin>
	}
	if (adapter1_state == 0 && led->GPIO_Pin == FP_MB1_PWRLED_Pin)
 80002f4:	4b12      	ldr	r3, [pc, #72]	@ (8000340 <UpdateLED+0x124>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d10d      	bne.n	8000318 <UpdateLED+0xfc>
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	889a      	ldrh	r2, [r3, #4]
 8000300:	2380      	movs	r3, #128	@ 0x80
 8000302:	011b      	lsls	r3, r3, #4
 8000304:	429a      	cmp	r2, r3
 8000306:	d107      	bne.n	8000318 <UpdateLED+0xfc>
	{
		HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	6818      	ldr	r0, [r3, #0]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	889b      	ldrh	r3, [r3, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	0019      	movs	r1, r3
 8000314:	f002 fdc7 	bl	8002ea6 <HAL_GPIO_WritePin>
	}
	if (adapter2_state == 0 && led->GPIO_Pin == FP_MB2_PWRLED_Pin){
 8000318:	4b0a      	ldr	r3, [pc, #40]	@ (8000344 <UpdateLED+0x128>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d10b      	bne.n	8000338 <UpdateLED+0x11c>
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	889b      	ldrh	r3, [r3, #4]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d107      	bne.n	8000338 <UpdateLED+0x11c>
		HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6818      	ldr	r0, [r3, #0]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	889b      	ldrh	r3, [r3, #4]
 8000330:	2200      	movs	r2, #0
 8000332:	0019      	movs	r1, r3
 8000334:	f002 fdb7 	bl	8002ea6 <HAL_GPIO_WritePin>
	}


}
 8000338:	46c0      	nop			@ (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	b004      	add	sp, #16
 800033e:	bd80      	pop	{r7, pc}
 8000340:	200003ac 	.word	0x200003ac
 8000344:	200003ad 	.word	0x200003ad

08000348 <StartBlinking>:

void StartBlinking(LEDState *led, uint32_t frequency, uint32_t duration)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
	led->blink_period = 1000 / frequency; // Период мигания в мс
 8000354:	68b9      	ldr	r1, [r7, #8]
 8000356:	23fa      	movs	r3, #250	@ 0xfa
 8000358:	0098      	lsls	r0, r3, #2
 800035a:	f7ff fed3 	bl	8000104 <__udivsi3>
 800035e:	0003      	movs	r3, r0
 8000360:	001a      	movs	r2, r3
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	611a      	str	r2, [r3, #16]
	led->blink_duration = duration;       // Длительность мигания
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	60da      	str	r2, [r3, #12]
	led->blink_start_time = HAL_GetTick(); // Время начала мигания
 800036c:	f002 f90c 	bl	8002588 <HAL_GetTick>
 8000370:	0002      	movs	r2, r0
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	609a      	str	r2, [r3, #8]
	led->is_blinking = 1;                 // Включить мигание
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	2201      	movs	r2, #1
 800037a:	751a      	strb	r2, [r3, #20]
}
 800037c:	46c0      	nop			@ (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	b004      	add	sp, #16
 8000382:	bd80      	pop	{r7, pc}

08000384 <HandleButtonAction>:

void HandleButtonAction(uint8_t button_number, uint32_t press_duration)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	0002      	movs	r2, r0
 800038c:	6039      	str	r1, [r7, #0]
 800038e:	1dfb      	adds	r3, r7, #7
 8000390:	701a      	strb	r2, [r3, #0]
	if (button_number == 1) {
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d12e      	bne.n	80003f8 <HandleButtonAction+0x74>
		if (press_duration <= 1000) {
 800039a:	683a      	ldr	r2, [r7, #0]
 800039c:	23fa      	movs	r3, #250	@ 0xfa
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d803      	bhi.n	80003ac <HandleButtonAction+0x28>
			// Короткое нажатие (0-1 сек) - включение адаптера 1
			PowerOnAdapter(1);
 80003a4:	2001      	movs	r0, #1
 80003a6:	f001 fc51 	bl	8001c4c <PowerOnAdapter>
		} else if (press_duration > 6000) {
			// Очень долгое нажатие (6-10 сек) - выключение адаптера 2
			PowerOffAdapter(2);
		}
	}
}
 80003aa:	e057      	b.n	800045c <HandleButtonAction+0xd8>
		} else if (press_duration <= 3000) {
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	4a2d      	ldr	r2, [pc, #180]	@ (8000464 <HandleButtonAction+0xe0>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d80a      	bhi.n	80003ca <HandleButtonAction+0x46>
			RebootAdapter(1, 0);
 80003b4:	2100      	movs	r1, #0
 80003b6:	2001      	movs	r0, #1
 80003b8:	f001 fd46 	bl	8001e48 <RebootAdapter>
			StartBlinking(&led1, 4, 5000); // Мигание 4 Гц, 5 сек
 80003bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000468 <HandleButtonAction+0xe4>)
 80003be:	4b2b      	ldr	r3, [pc, #172]	@ (800046c <HandleButtonAction+0xe8>)
 80003c0:	2104      	movs	r1, #4
 80003c2:	0018      	movs	r0, r3
 80003c4:	f7ff ffc0 	bl	8000348 <StartBlinking>
}
 80003c8:	e048      	b.n	800045c <HandleButtonAction+0xd8>
		} else if (press_duration <= 6000) {
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	4a28      	ldr	r2, [pc, #160]	@ (8000470 <HandleButtonAction+0xec>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d80a      	bhi.n	80003e8 <HandleButtonAction+0x64>
			RebootAdapter(1, 1);
 80003d2:	2101      	movs	r1, #1
 80003d4:	2001      	movs	r0, #1
 80003d6:	f001 fd37 	bl	8001e48 <RebootAdapter>
			StartBlinking(&led1, 4, 5000); // Мигание 4 Гц, 5 сек
 80003da:	4a23      	ldr	r2, [pc, #140]	@ (8000468 <HandleButtonAction+0xe4>)
 80003dc:	4b23      	ldr	r3, [pc, #140]	@ (800046c <HandleButtonAction+0xe8>)
 80003de:	2104      	movs	r1, #4
 80003e0:	0018      	movs	r0, r3
 80003e2:	f7ff ffb1 	bl	8000348 <StartBlinking>
}
 80003e6:	e039      	b.n	800045c <HandleButtonAction+0xd8>
		} else if (press_duration > 6000) {
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	4a21      	ldr	r2, [pc, #132]	@ (8000470 <HandleButtonAction+0xec>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d935      	bls.n	800045c <HandleButtonAction+0xd8>
			PowerOffAdapter(1);
 80003f0:	2001      	movs	r0, #1
 80003f2:	f001 fccf 	bl	8001d94 <PowerOffAdapter>
}
 80003f6:	e031      	b.n	800045c <HandleButtonAction+0xd8>
	} else if (button_number == 2) {
 80003f8:	1dfb      	adds	r3, r7, #7
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b02      	cmp	r3, #2
 80003fe:	d12d      	bne.n	800045c <HandleButtonAction+0xd8>
		if (press_duration <= 1000) {
 8000400:	683a      	ldr	r2, [r7, #0]
 8000402:	23fa      	movs	r3, #250	@ 0xfa
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	429a      	cmp	r2, r3
 8000408:	d803      	bhi.n	8000412 <HandleButtonAction+0x8e>
			PowerOnAdapter(2);
 800040a:	2002      	movs	r0, #2
 800040c:	f001 fc1e 	bl	8001c4c <PowerOnAdapter>
}
 8000410:	e024      	b.n	800045c <HandleButtonAction+0xd8>
		} else if (press_duration <= 3000) {
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	4a13      	ldr	r2, [pc, #76]	@ (8000464 <HandleButtonAction+0xe0>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d80a      	bhi.n	8000430 <HandleButtonAction+0xac>
			RebootAdapter(2, 0);
 800041a:	2100      	movs	r1, #0
 800041c:	2002      	movs	r0, #2
 800041e:	f001 fd13 	bl	8001e48 <RebootAdapter>
			StartBlinking(&led2, 4, 5000); // Мигание 4 Гц, 5 сек
 8000422:	4a11      	ldr	r2, [pc, #68]	@ (8000468 <HandleButtonAction+0xe4>)
 8000424:	4b13      	ldr	r3, [pc, #76]	@ (8000474 <HandleButtonAction+0xf0>)
 8000426:	2104      	movs	r1, #4
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff ff8d 	bl	8000348 <StartBlinking>
}
 800042e:	e015      	b.n	800045c <HandleButtonAction+0xd8>
		} else if (press_duration <= 6000) {
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	4a0f      	ldr	r2, [pc, #60]	@ (8000470 <HandleButtonAction+0xec>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d80a      	bhi.n	800044e <HandleButtonAction+0xca>
			RebootAdapter(2, 1);
 8000438:	2101      	movs	r1, #1
 800043a:	2002      	movs	r0, #2
 800043c:	f001 fd04 	bl	8001e48 <RebootAdapter>
			StartBlinking(&led2, 4, 5000); // Мигание 4 Гц, 5 сек
 8000440:	4a09      	ldr	r2, [pc, #36]	@ (8000468 <HandleButtonAction+0xe4>)
 8000442:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <HandleButtonAction+0xf0>)
 8000444:	2104      	movs	r1, #4
 8000446:	0018      	movs	r0, r3
 8000448:	f7ff ff7e 	bl	8000348 <StartBlinking>
}
 800044c:	e006      	b.n	800045c <HandleButtonAction+0xd8>
		} else if (press_duration > 6000) {
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	4a07      	ldr	r2, [pc, #28]	@ (8000470 <HandleButtonAction+0xec>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d902      	bls.n	800045c <HandleButtonAction+0xd8>
			PowerOffAdapter(2);
 8000456:	2002      	movs	r0, #2
 8000458:	f001 fc9c 	bl	8001d94 <PowerOffAdapter>
}
 800045c:	46c0      	nop			@ (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b002      	add	sp, #8
 8000462:	bd80      	pop	{r7, pc}
 8000464:	00000bb8 	.word	0x00000bb8
 8000468:	00001388 	.word	0x00001388
 800046c:	20000000 	.word	0x20000000
 8000470:	00001770 	.word	0x00001770
 8000474:	20000018 	.word	0x20000018

08000478 <UpdateDiskStatus>:

void UpdateDiskStatus(uint8_t diskIndex, uint8_t activity, uint8_t error, uint8_t locate) //функция для обновления данных о дисках
{
 8000478:	b5b0      	push	{r4, r5, r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	0005      	movs	r5, r0
 8000480:	000c      	movs	r4, r1
 8000482:	0010      	movs	r0, r2
 8000484:	0019      	movs	r1, r3
 8000486:	1dfb      	adds	r3, r7, #7
 8000488:	1c2a      	adds	r2, r5, #0
 800048a:	701a      	strb	r2, [r3, #0]
 800048c:	1dbb      	adds	r3, r7, #6
 800048e:	1c22      	adds	r2, r4, #0
 8000490:	701a      	strb	r2, [r3, #0]
 8000492:	1d7b      	adds	r3, r7, #5
 8000494:	1c02      	adds	r2, r0, #0
 8000496:	701a      	strb	r2, [r3, #0]
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	1c0a      	adds	r2, r1, #0
 800049c:	701a      	strb	r2, [r3, #0]
	disks[diskIndex].activity = activity;
 800049e:	1dfb      	adds	r3, r7, #7
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	4a0e      	ldr	r2, [pc, #56]	@ (80004dc <UpdateDiskStatus+0x64>)
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	18d3      	adds	r3, r2, r3
 80004a8:	3301      	adds	r3, #1
 80004aa:	1dba      	adds	r2, r7, #6
 80004ac:	7812      	ldrb	r2, [r2, #0]
 80004ae:	701a      	strb	r2, [r3, #0]
	disks[diskIndex].error = error;
 80004b0:	1dfb      	adds	r3, r7, #7
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4a09      	ldr	r2, [pc, #36]	@ (80004dc <UpdateDiskStatus+0x64>)
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	18d3      	adds	r3, r2, r3
 80004ba:	3302      	adds	r3, #2
 80004bc:	1d7a      	adds	r2, r7, #5
 80004be:	7812      	ldrb	r2, [r2, #0]
 80004c0:	701a      	strb	r2, [r3, #0]
	disks[diskIndex].locate = locate;
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	4a05      	ldr	r2, [pc, #20]	@ (80004dc <UpdateDiskStatus+0x64>)
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	18d3      	adds	r3, r2, r3
 80004cc:	3303      	adds	r3, #3
 80004ce:	1d3a      	adds	r2, r7, #4
 80004d0:	7812      	ldrb	r2, [r2, #0]
 80004d2:	701a      	strb	r2, [r3, #0]
}
 80004d4:	46c0      	nop			@ (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b002      	add	sp, #8
 80004da:	bdb0      	pop	{r4, r5, r7, pc}
 80004dc:	2000028c 	.word	0x2000028c

080004e0 <Read_Disk_Status>:

void Read_Disk_Status(uint16_t slave_address, uint8_t *data, uint16_t size) {
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af02      	add	r7, sp, #8
 80004e6:	6039      	str	r1, [r7, #0]
 80004e8:	0011      	movs	r1, r2
 80004ea:	1dbb      	adds	r3, r7, #6
 80004ec:	1c02      	adds	r2, r0, #0
 80004ee:	801a      	strh	r2, [r3, #0]
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	1c0a      	adds	r2, r1, #0
 80004f4:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_0, 1, HAL_MAX_DELAY);
 80004f6:	4b10      	ldr	r3, [pc, #64]	@ (8000538 <Read_Disk_Status+0x58>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	18db      	adds	r3, r3, r3
 80004fc:	b299      	uxth	r1, r3
 80004fe:	4a0f      	ldr	r2, [pc, #60]	@ (800053c <Read_Disk_Status+0x5c>)
 8000500:	480f      	ldr	r0, [pc, #60]	@ (8000540 <Read_Disk_Status+0x60>)
 8000502:	2301      	movs	r3, #1
 8000504:	425b      	negs	r3, r3
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	2301      	movs	r3, #1
 800050a:	f002 fdb9 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 800050e:	2032      	movs	r0, #50	@ 0x32
 8000510:	f002 f844 	bl	800259c <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, slave_address << 1, data, size, HAL_MAX_DELAY);
 8000514:	1dbb      	adds	r3, r7, #6
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	18db      	adds	r3, r3, r3
 800051a:	b299      	uxth	r1, r3
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	881c      	ldrh	r4, [r3, #0]
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	4807      	ldr	r0, [pc, #28]	@ (8000540 <Read_Disk_Status+0x60>)
 8000524:	2301      	movs	r3, #1
 8000526:	425b      	negs	r3, r3
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	0023      	movs	r3, r4
 800052c:	f002 fed2 	bl	80032d4 <HAL_I2C_Master_Receive>
}
 8000530:	46c0      	nop			@ (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b003      	add	sp, #12
 8000536:	bd90      	pop	{r4, r7, pc}
 8000538:	2000004e 	.word	0x2000004e
 800053c:	20000038 	.word	0x20000038
 8000540:	2000008c 	.word	0x2000008c

08000544 <Decode_Disk_Status>:

void Decode_Disk_Status(uint8_t *data) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	for (uint8_t disk_id = 0; disk_id < 24; disk_id++) {
 800054c:	230f      	movs	r3, #15
 800054e:	18fb      	adds	r3, r7, r3
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
 8000554:	e057      	b.n	8000606 <Decode_Disk_Status+0xc2>
		uint8_t byte_index = disk_id / 4; // �?ндекс байта
 8000556:	210e      	movs	r1, #14
 8000558:	187b      	adds	r3, r7, r1
 800055a:	200f      	movs	r0, #15
 800055c:	183a      	adds	r2, r7, r0
 800055e:	7812      	ldrb	r2, [r2, #0]
 8000560:	0892      	lsrs	r2, r2, #2
 8000562:	701a      	strb	r2, [r3, #0]
		uint8_t bit_offset = (disk_id % 4) * 2; // Смещение в байте
 8000564:	183b      	adds	r3, r7, r0
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2203      	movs	r2, #3
 800056a:	4013      	ands	r3, r2
 800056c:	b2db      	uxtb	r3, r3
 800056e:	200d      	movs	r0, #13
 8000570:	183a      	adds	r2, r7, r0
 8000572:	18db      	adds	r3, r3, r3
 8000574:	7013      	strb	r3, [r2, #0]
		uint8_t status = (data[byte_index] >> bit_offset) & 0x03; // �?звлечение статуса
 8000576:	187b      	adds	r3, r7, r1
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	18d3      	adds	r3, r2, r3
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	001a      	movs	r2, r3
 8000582:	183b      	adds	r3, r7, r0
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	411a      	asrs	r2, r3
 8000588:	0013      	movs	r3, r2
 800058a:	b2da      	uxtb	r2, r3
 800058c:	200c      	movs	r0, #12
 800058e:	183b      	adds	r3, r7, r0
 8000590:	2103      	movs	r1, #3
 8000592:	400a      	ands	r2, r1
 8000594:	701a      	strb	r2, [r3, #0]

		// Декодирование статуса
		switch (status) {
 8000596:	183b      	adds	r3, r7, r0
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b03      	cmp	r3, #3
 800059c:	d023      	beq.n	80005e6 <Decode_Disk_Status+0xa2>
 800059e:	dc2b      	bgt.n	80005f8 <Decode_Disk_Status+0xb4>
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d017      	beq.n	80005d4 <Decode_Disk_Status+0x90>
 80005a4:	dc28      	bgt.n	80005f8 <Decode_Disk_Status+0xb4>
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d002      	beq.n	80005b0 <Decode_Disk_Status+0x6c>
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d009      	beq.n	80005c2 <Decode_Disk_Status+0x7e>
			break;
		case 0x03:
			UpdateDiskStatus(disk_id, 0, 0, 1);
			break;
		default:
			break;
 80005ae:	e023      	b.n	80005f8 <Decode_Disk_Status+0xb4>
			UpdateDiskStatus(disk_id, 0, 0, 0);
 80005b0:	230f      	movs	r3, #15
 80005b2:	18fb      	adds	r3, r7, r3
 80005b4:	7818      	ldrb	r0, [r3, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2200      	movs	r2, #0
 80005ba:	2100      	movs	r1, #0
 80005bc:	f7ff ff5c 	bl	8000478 <UpdateDiskStatus>
			break;
 80005c0:	e01b      	b.n	80005fa <Decode_Disk_Status+0xb6>
			UpdateDiskStatus(disk_id, 1, 0, 0);
 80005c2:	230f      	movs	r3, #15
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	7818      	ldrb	r0, [r3, #0]
 80005c8:	2300      	movs	r3, #0
 80005ca:	2200      	movs	r2, #0
 80005cc:	2101      	movs	r1, #1
 80005ce:	f7ff ff53 	bl	8000478 <UpdateDiskStatus>
			break;
 80005d2:	e012      	b.n	80005fa <Decode_Disk_Status+0xb6>
			UpdateDiskStatus(disk_id, 0, 1, 0);
 80005d4:	230f      	movs	r3, #15
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	7818      	ldrb	r0, [r3, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	2201      	movs	r2, #1
 80005de:	2100      	movs	r1, #0
 80005e0:	f7ff ff4a 	bl	8000478 <UpdateDiskStatus>
			break;
 80005e4:	e009      	b.n	80005fa <Decode_Disk_Status+0xb6>
			UpdateDiskStatus(disk_id, 0, 0, 1);
 80005e6:	230f      	movs	r3, #15
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	7818      	ldrb	r0, [r3, #0]
 80005ec:	2301      	movs	r3, #1
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	f7ff ff41 	bl	8000478 <UpdateDiskStatus>
			break;
 80005f6:	e000      	b.n	80005fa <Decode_Disk_Status+0xb6>
			break;
 80005f8:	46c0      	nop			@ (mov r8, r8)
	for (uint8_t disk_id = 0; disk_id < 24; disk_id++) {
 80005fa:	210f      	movs	r1, #15
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	781a      	ldrb	r2, [r3, #0]
 8000600:	187b      	adds	r3, r7, r1
 8000602:	3201      	adds	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	230f      	movs	r3, #15
 8000608:	18fb      	adds	r3, r7, r3
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b17      	cmp	r3, #23
 800060e:	d9a2      	bls.n	8000556 <Decode_Disk_Status+0x12>
		}
	}
}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b004      	add	sp, #16
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f001 ff36 	bl	8002490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f842 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 fa34 	bl	8000a94 <MX_GPIO_Init>
  MX_DMA_Init();
 800062c:	f000 fa1c 	bl	8000a68 <MX_DMA_Init>
  MX_I2C2_Init();
 8000630:	f000 f8cc 	bl	80007cc <MX_I2C2_Init>
  MX_TIM3_Init();
 8000634:	f000 f9c0 	bl	80009b8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000638:	f000 f90c 	bl	8000854 <MX_TIM1_Init>
  MX_TIM2_Init();
 800063c:	f000 f966 	bl	800090c <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000640:	f000 f88e 	bl	8000760 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	ResetBus();
 8000644:	f000 fc40 	bl	8000ec8 <ResetBus>
	HAL_Delay(500);
 8000648:	23fa      	movs	r3, #250	@ 0xfa
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	0018      	movs	r0, r3
 800064e:	f001 ffa5 	bl	800259c <HAL_Delay>
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2101      	movs	r1, #1
 8000656:	2007      	movs	r0, #7
 8000658:	f002 f870 	bl	800273c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800065c:	2007      	movs	r0, #7
 800065e:	f002 f882 	bl	8002766 <HAL_NVIC_EnableIRQ>

	InitializeDiskPins();
 8000662:	f001 fa2d 	bl	8001ac0 <InitializeDiskPins>

	Initialize_Disks();
 8000666:	f000 fc01 	bl	8000e6c <Initialize_Disks>
	HAL_TIM_Base_Start_IT(&htim1);
 800066a:	4b0b      	ldr	r3, [pc, #44]	@ (8000698 <main+0x7c>)
 800066c:	0018      	movs	r0, r3
 800066e:	f005 f90f 	bl	8005890 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000672:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <main+0x80>)
 8000674:	0018      	movs	r0, r3
 8000676:	f005 f90b 	bl	8005890 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800067a:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <main+0x84>)
 800067c:	0018      	movs	r0, r3
 800067e:	f005 f907 	bl	8005890 <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */


		// Обновление состояния светодиодов
		UpdateLED(&led1);
 8000682:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <main+0x88>)
 8000684:	0018      	movs	r0, r3
 8000686:	f7ff fdc9 	bl	800021c <UpdateLED>
		UpdateLED(&led2);
 800068a:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <main+0x8c>)
 800068c:	0018      	movs	r0, r3
 800068e:	f7ff fdc5 	bl	800021c <UpdateLED>
		UpdateLED(&led1);
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	e7f5      	b.n	8000682 <main+0x66>
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	20000198 	.word	0x20000198
 800069c:	200001e4 	.word	0x200001e4
 80006a0:	20000230 	.word	0x20000230
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000018 	.word	0x20000018

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b093      	sub	sp, #76	@ 0x4c
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	2410      	movs	r4, #16
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	0018      	movs	r0, r3
 80006b8:	2338      	movs	r3, #56	@ 0x38
 80006ba:	001a      	movs	r2, r3
 80006bc:	2100      	movs	r1, #0
 80006be:	f005 fcf1 	bl	80060a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c2:	003b      	movs	r3, r7
 80006c4:	0018      	movs	r0, r3
 80006c6:	2310      	movs	r3, #16
 80006c8:	001a      	movs	r2, r3
 80006ca:	2100      	movs	r1, #0
 80006cc:	f005 fcea 	bl	80060a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2380      	movs	r3, #128	@ 0x80
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f004 f9af 	bl	8004a38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2201      	movs	r2, #1
 80006de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2280      	movs	r2, #128	@ 0x80
 80006e4:	0252      	lsls	r2, r2, #9
 80006e6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	0021      	movs	r1, r4
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2202      	movs	r2, #2
 80006ee:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2203      	movs	r2, #3
 80006f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2210      	movs	r2, #16
 8000700:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2280      	movs	r2, #128	@ 0x80
 8000706:	0292      	lsls	r2, r2, #10
 8000708:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	22c0      	movs	r2, #192	@ 0xc0
 800070e:	04d2      	lsls	r2, r2, #19
 8000710:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2280      	movs	r2, #128	@ 0x80
 8000716:	0592      	lsls	r2, r2, #22
 8000718:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	187b      	adds	r3, r7, r1
 800071c:	0018      	movs	r0, r3
 800071e:	f004 f9cb 	bl	8004ab8 <HAL_RCC_OscConfig>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000726:	f001 fcc1 	bl	80020ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	003b      	movs	r3, r7
 800072c:	2207      	movs	r2, #7
 800072e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	003b      	movs	r3, r7
 8000732:	2202      	movs	r2, #2
 8000734:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	003b      	movs	r3, r7
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	003b      	movs	r3, r7
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000742:	003b      	movs	r3, r7
 8000744:	2102      	movs	r1, #2
 8000746:	0018      	movs	r0, r3
 8000748:	f004 fcd0 	bl	80050ec <HAL_RCC_ClockConfig>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000750:	f001 fcac 	bl	80020ac <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000754:	f004 fe54 	bl	8005400 <HAL_RCC_EnableCSS>
}
 8000758:	46c0      	nop			@ (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b013      	add	sp, #76	@ 0x4c
 800075e:	bd90      	pop	{r4, r7, pc}

08000760 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2102      	movs	r1, #2
 8000768:	2009      	movs	r0, #9
 800076a:	f001 ffe7 	bl	800273c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800076e:	2009      	movs	r0, #9
 8000770:	f001 fff9 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2102      	movs	r1, #2
 8000778:	200a      	movs	r0, #10
 800077a:	f001 ffdf 	bl	800273c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800077e:	200a      	movs	r0, #10
 8000780:	f001 fff1 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_UP_TRG_COM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 2, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2102      	movs	r1, #2
 8000788:	200d      	movs	r0, #13
 800078a:	f001 ffd7 	bl	800273c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800078e:	200d      	movs	r0, #13
 8000790:	f001 ffe9 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2102      	movs	r1, #2
 8000798:	200f      	movs	r0, #15
 800079a:	f001 ffcf 	bl	800273c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800079e:	200f      	movs	r0, #15
 80007a0:	f001 ffe1 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2102      	movs	r1, #2
 80007a8:	2010      	movs	r0, #16
 80007aa:	f001 ffc7 	bl	800273c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007ae:	2010      	movs	r0, #16
 80007b0:	f001 ffd9 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* I2C2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_IRQn, 2, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2102      	movs	r1, #2
 80007b8:	2018      	movs	r0, #24
 80007ba:	f001 ffbf 	bl	800273c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_IRQn);
 80007be:	2018      	movs	r0, #24
 80007c0:	f001 ffd1 	bl	8002766 <HAL_NVIC_EnableIRQ>
}
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000848 <MX_I2C2_Init+0x7c>)
 80007d2:	4a1e      	ldr	r2, [pc, #120]	@ (800084c <MX_I2C2_Init+0x80>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C12469;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <MX_I2C2_Init+0x7c>)
 80007d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000850 <MX_I2C2_Init+0x84>)
 80007da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <MX_I2C2_Init+0x7c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e2:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <MX_I2C2_Init+0x7c>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <MX_I2C2_Init+0x7c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007ee:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <MX_I2C2_Init+0x7c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f4:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_I2C2_Init+0x7c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fa:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <MX_I2C2_Init+0x7c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000800:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_I2C2_Init+0x7c>)
 8000802:	2280      	movs	r2, #128	@ 0x80
 8000804:	0292      	lsls	r2, r2, #10
 8000806:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_I2C2_Init+0x7c>)
 800080a:	0018      	movs	r0, r3
 800080c:	f002 fb92 	bl	8002f34 <HAL_I2C_Init>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000814:	f001 fc4a 	bl	80020ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000818:	2380      	movs	r3, #128	@ 0x80
 800081a:	015a      	lsls	r2, r3, #5
 800081c:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <MX_I2C2_Init+0x7c>)
 800081e:	0011      	movs	r1, r2
 8000820:	0018      	movs	r0, r3
 8000822:	f004 f871 	bl	8004908 <HAL_I2CEx_ConfigAnalogFilter>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <MX_I2C2_Init+0x62>
  {
    Error_Handler();
 800082a:	f001 fc3f 	bl	80020ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_I2C2_Init+0x7c>)
 8000830:	2100      	movs	r1, #0
 8000832:	0018      	movs	r0, r3
 8000834:	f004 f8b4 	bl	80049a0 <HAL_I2CEx_ConfigDigitalFilter>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d001      	beq.n	8000840 <MX_I2C2_Init+0x74>
  {
    Error_Handler();
 800083c:	f001 fc36 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000840:	46c0      	nop			@ (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	2000008c 	.word	0x2000008c
 800084c:	40005800 	.word	0x40005800
 8000850:	00c12469 	.word	0x00c12469

08000854 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	2310      	movs	r3, #16
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	0018      	movs	r0, r3
 8000860:	2310      	movs	r3, #16
 8000862:	001a      	movs	r2, r3
 8000864:	2100      	movs	r1, #0
 8000866:	f005 fc1d 	bl	80060a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	0018      	movs	r0, r3
 800086e:	230c      	movs	r3, #12
 8000870:	001a      	movs	r2, r3
 8000872:	2100      	movs	r1, #0
 8000874:	f005 fc16 	bl	80060a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000878:	4b21      	ldr	r3, [pc, #132]	@ (8000900 <MX_TIM1_Init+0xac>)
 800087a:	4a22      	ldr	r2, [pc, #136]	@ (8000904 <MX_TIM1_Init+0xb0>)
 800087c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 800087e:	4b20      	ldr	r3, [pc, #128]	@ (8000900 <MX_TIM1_Init+0xac>)
 8000880:	4a21      	ldr	r2, [pc, #132]	@ (8000908 <MX_TIM1_Init+0xb4>)
 8000882:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b1e      	ldr	r3, [pc, #120]	@ (8000900 <MX_TIM1_Init+0xac>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 124;
 800088a:	4b1d      	ldr	r3, [pc, #116]	@ (8000900 <MX_TIM1_Init+0xac>)
 800088c:	227c      	movs	r2, #124	@ 0x7c
 800088e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000890:	4b1b      	ldr	r3, [pc, #108]	@ (8000900 <MX_TIM1_Init+0xac>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000896:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <MX_TIM1_Init+0xac>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089c:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <MX_TIM1_Init+0xac>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008a2:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <MX_TIM1_Init+0xac>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f004 ff9b 	bl	80057e0 <HAL_TIM_Base_Init>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80008ae:	f001 fbfd 	bl	80020ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b2:	2110      	movs	r1, #16
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2280      	movs	r2, #128	@ 0x80
 80008b8:	0152      	lsls	r2, r2, #5
 80008ba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008bc:	187a      	adds	r2, r7, r1
 80008be:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <MX_TIM1_Init+0xac>)
 80008c0:	0011      	movs	r1, r2
 80008c2:	0018      	movs	r0, r3
 80008c4:	f005 f948 	bl	8005b58 <HAL_TIM_ConfigClockSource>
 80008c8:	1e03      	subs	r3, r0, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008cc:	f001 fbee 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008e2:	1d3a      	adds	r2, r7, #4
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_TIM1_Init+0xac>)
 80008e6:	0011      	movs	r1, r2
 80008e8:	0018      	movs	r0, r3
 80008ea:	f005 fb55 	bl	8005f98 <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80008f2:	f001 fbdb 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b008      	add	sp, #32
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	20000198 	.word	0x20000198
 8000904:	40012c00 	.word	0x40012c00
 8000908:	0000f9ff 	.word	0x0000f9ff

0800090c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	2310      	movs	r3, #16
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	0018      	movs	r0, r3
 8000918:	2310      	movs	r3, #16
 800091a:	001a      	movs	r2, r3
 800091c:	2100      	movs	r1, #0
 800091e:	f005 fbc1 	bl	80060a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	0018      	movs	r0, r3
 8000926:	230c      	movs	r3, #12
 8000928:	001a      	movs	r2, r3
 800092a:	2100      	movs	r1, #0
 800092c:	f005 fbba 	bl	80060a4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000930:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <MX_TIM2_Init+0xa4>)
 8000932:	2280      	movs	r2, #128	@ 0x80
 8000934:	05d2      	lsls	r2, r2, #23
 8000936:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000938:	4b1d      	ldr	r3, [pc, #116]	@ (80009b0 <MX_TIM2_Init+0xa4>)
 800093a:	4a1e      	ldr	r2, [pc, #120]	@ (80009b4 <MX_TIM2_Init+0xa8>)
 800093c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <MX_TIM2_Init+0xa4>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8000944:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <MX_TIM2_Init+0xa4>)
 8000946:	22f4      	movs	r2, #244	@ 0xf4
 8000948:	32ff      	adds	r2, #255	@ 0xff
 800094a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094c:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <MX_TIM2_Init+0xa4>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <MX_TIM2_Init+0xa4>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000958:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <MX_TIM2_Init+0xa4>)
 800095a:	0018      	movs	r0, r3
 800095c:	f004 ff40 	bl	80057e0 <HAL_TIM_Base_Init>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000964:	f001 fba2 	bl	80020ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000968:	2110      	movs	r1, #16
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2280      	movs	r2, #128	@ 0x80
 800096e:	0152      	lsls	r2, r2, #5
 8000970:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000972:	187a      	adds	r2, r7, r1
 8000974:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_TIM2_Init+0xa4>)
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f005 f8ed 	bl	8005b58 <HAL_TIM_ConfigClockSource>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000982:	f001 fb93 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000992:	1d3a      	adds	r2, r7, #4
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <MX_TIM2_Init+0xa4>)
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f005 fafd 	bl	8005f98 <HAL_TIMEx_MasterConfigSynchronization>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80009a2:	f001 fb83 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b008      	add	sp, #32
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	200001e4 	.word	0x200001e4
 80009b4:	0000f9ff 	.word	0x0000f9ff

080009b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	2310      	movs	r3, #16
 80009c0:	18fb      	adds	r3, r7, r3
 80009c2:	0018      	movs	r0, r3
 80009c4:	2310      	movs	r3, #16
 80009c6:	001a      	movs	r2, r3
 80009c8:	2100      	movs	r1, #0
 80009ca:	f005 fb6b 	bl	80060a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	0018      	movs	r0, r3
 80009d2:	230c      	movs	r3, #12
 80009d4:	001a      	movs	r2, r3
 80009d6:	2100      	movs	r1, #0
 80009d8:	f005 fb64 	bl	80060a4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009de:	4a1f      	ldr	r2, [pc, #124]	@ (8000a5c <MX_TIM3_Init+0xa4>)
 80009e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000a60 <MX_TIM3_Init+0xa8>)
 80009e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a64 <MX_TIM3_Init+0xac>)
 80009f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f004 feec 	bl	80057e0 <HAL_TIM_Base_Init>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f001 fb4e 	bl	80020ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a10:	2110      	movs	r1, #16
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2280      	movs	r2, #128	@ 0x80
 8000a16:	0152      	lsls	r2, r2, #5
 8000a18:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a1a:	187a      	adds	r2, r7, r1
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f005 f899 	bl	8005b58 <HAL_TIM_ConfigClockSource>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a2a:	f001 fb3f 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a3a:	1d3a      	adds	r2, r7, #4
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 8000a3e:	0011      	movs	r1, r2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f005 faa9 	bl	8005f98 <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a4a:	f001 fb2f 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b008      	add	sp, #32
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	20000230 	.word	0x20000230
 8000a5c:	40000400 	.word	0x40000400
 8000a60:	0000f9ff 	.word	0x0000f9ff
 8000a64:	000003e7 	.word	0x000003e7

08000a68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a6e:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <MX_DMA_Init+0x28>)
 8000a70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a72:	4b07      	ldr	r3, [pc, #28]	@ (8000a90 <MX_DMA_Init+0x28>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	430a      	orrs	r2, r1
 8000a78:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a7a:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <MX_DMA_Init+0x28>)
 8000a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4013      	ands	r3, r2
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	40021000 	.word	0x40021000

08000a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b08b      	sub	sp, #44	@ 0x2c
 8000a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	2414      	movs	r4, #20
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	2314      	movs	r3, #20
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	f005 fafd 	bl	80060a4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	4b8b      	ldr	r3, [pc, #556]	@ (8000cd8 <MX_GPIO_Init+0x244>)
 8000aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aae:	4b8a      	ldr	r3, [pc, #552]	@ (8000cd8 <MX_GPIO_Init+0x244>)
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ab6:	4b88      	ldr	r3, [pc, #544]	@ (8000cd8 <MX_GPIO_Init+0x244>)
 8000ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aba:	2204      	movs	r2, #4
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ac2:	4b85      	ldr	r3, [pc, #532]	@ (8000cd8 <MX_GPIO_Init+0x244>)
 8000ac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ac6:	4b84      	ldr	r3, [pc, #528]	@ (8000cd8 <MX_GPIO_Init+0x244>)
 8000ac8:	2120      	movs	r1, #32
 8000aca:	430a      	orrs	r2, r1
 8000acc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ace:	4b82      	ldr	r3, [pc, #520]	@ (8000cd8 <MX_GPIO_Init+0x244>)
 8000ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ad2:	2220      	movs	r2, #32
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b7f      	ldr	r3, [pc, #508]	@ (8000cd8 <MX_GPIO_Init+0x244>)
 8000adc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ade:	4b7e      	ldr	r3, [pc, #504]	@ (8000cd8 <MX_GPIO_Init+0x244>)
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ae6:	4b7c      	ldr	r3, [pc, #496]	@ (8000cd8 <MX_GPIO_Init+0x244>)
 8000ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aea:	2201      	movs	r2, #1
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	4b79      	ldr	r3, [pc, #484]	@ (8000cd8 <MX_GPIO_Init+0x244>)
 8000af4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000af6:	4b78      	ldr	r3, [pc, #480]	@ (8000cd8 <MX_GPIO_Init+0x244>)
 8000af8:	2102      	movs	r1, #2
 8000afa:	430a      	orrs	r2, r1
 8000afc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000afe:	4b76      	ldr	r3, [pc, #472]	@ (8000cd8 <MX_GPIO_Init+0x244>)
 8000b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b02:	2202      	movs	r2, #2
 8000b04:	4013      	ands	r3, r2
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0a:	4b73      	ldr	r3, [pc, #460]	@ (8000cd8 <MX_GPIO_Init+0x244>)
 8000b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b0e:	4b72      	ldr	r3, [pc, #456]	@ (8000cd8 <MX_GPIO_Init+0x244>)
 8000b10:	2108      	movs	r1, #8
 8000b12:	430a      	orrs	r2, r1
 8000b14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b16:	4b70      	ldr	r3, [pc, #448]	@ (8000cd8 <MX_GPIO_Init+0x244>)
 8000b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b1a:	2208      	movs	r2, #8
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FP_MB1_PWRLED_Pin|FP_MB2_PWRLED_Pin|CPU_PSON_Pin, GPIO_PIN_RESET);
 8000b22:	496e      	ldr	r1, [pc, #440]	@ (8000cdc <MX_GPIO_Init+0x248>)
 8000b24:	4b6e      	ldr	r3, [pc, #440]	@ (8000ce0 <MX_GPIO_Init+0x24c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f002 f9bc 	bl	8002ea6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SGPIO_I2C2_RES_G_Pin|SGPIO_I2C2_RES_Pin|SGPIO_I2C1_RES_Pin, GPIO_PIN_SET);
 8000b2e:	23c4      	movs	r3, #196	@ 0xc4
 8000b30:	01db      	lsls	r3, r3, #7
 8000b32:	486b      	ldr	r0, [pc, #428]	@ (8000ce0 <MX_GPIO_Init+0x24c>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	0019      	movs	r1, r3
 8000b38:	f002 f9b5 	bl	8002ea6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB1_STATUS_LED_Pin|MB2_STATUS_LED_Pin, GPIO_PIN_SET);
 8000b3c:	23a0      	movs	r3, #160	@ 0xa0
 8000b3e:	05db      	lsls	r3, r3, #23
 8000b40:	2201      	movs	r2, #1
 8000b42:	2150      	movs	r1, #80	@ 0x50
 8000b44:	0018      	movs	r0, r3
 8000b46:	f002 f9ae 	bl	8002ea6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SGPIO_I2C3_RES_Pin|SGPIO_I2C3RES_G_Pin, GPIO_PIN_SET);
 8000b4a:	4b66      	ldr	r3, [pc, #408]	@ (8000ce4 <MX_GPIO_Init+0x250>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2106      	movs	r1, #6
 8000b50:	0018      	movs	r0, r3
 8000b52:	f002 f9a8 	bl	8002ea6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SGPIO_I2C1_RES_G_Pin|TEMP_I2C2_RES_Pin|TEMP_I2C1_RES_Pin, GPIO_PIN_SET);
 8000b56:	4b64      	ldr	r3, [pc, #400]	@ (8000ce8 <MX_GPIO_Init+0x254>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2107      	movs	r1, #7
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f002 f9a2 	bl	8002ea6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FP_MB1_PWRLED_Pin SGPIO_I2C2_RES_G_Pin SGPIO_I2C2_RES_Pin FP_MB2_PWRLED_Pin
                           CPU_PSON_Pin SGPIO_I2C1_RES_Pin */
  GPIO_InitStruct.Pin = FP_MB1_PWRLED_Pin|SGPIO_I2C2_RES_G_Pin|SGPIO_I2C2_RES_Pin|FP_MB2_PWRLED_Pin
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	4a61      	ldr	r2, [pc, #388]	@ (8000cec <MX_GPIO_Init+0x258>)
 8000b66:	601a      	str	r2, [r3, #0]
                          |CPU_PSON_Pin|SGPIO_I2C1_RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	4a58      	ldr	r2, [pc, #352]	@ (8000ce0 <MX_GPIO_Init+0x24c>)
 8000b7e:	0019      	movs	r1, r3
 8000b80:	0010      	movs	r0, r2
 8000b82:	f002 f80f 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_DRIVE4_ACTIVITY_Pin B_DRIVE4_ACTIVITY_Pin B_DRIVE3_ACTIVITY_Pin B_DRIVE2_ACTIVITY_Pin
                           MB1_PWR_SW_Pin C_DRIVE1_ACTIVITY_Pin C_DRIVE2_ACTIVITY_Pin E_DRIVE1_ACTIVITY_Pin */
  GPIO_InitStruct.Pin = D_DRIVE4_ACTIVITY_Pin|B_DRIVE4_ACTIVITY_Pin|B_DRIVE3_ACTIVITY_Pin|B_DRIVE2_ACTIVITY_Pin
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	4a59      	ldr	r2, [pc, #356]	@ (8000cf0 <MX_GPIO_Init+0x25c>)
 8000b8a:	601a      	str	r2, [r3, #0]
                          |MB1_PWR_SW_Pin|C_DRIVE1_ACTIVITY_Pin|C_DRIVE2_ACTIVITY_Pin|E_DRIVE1_ACTIVITY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	4a51      	ldr	r2, [pc, #324]	@ (8000ce0 <MX_GPIO_Init+0x24c>)
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	0010      	movs	r0, r2
 8000ba0:	f002 f800 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB1_BITCH_Pin MB2_BITCH_Pin CPU_PWROK_Pin A_DRIVE4_ACTIVITY_Pin
                           B_DRIVE1_ACTIVITY_Pin D_DRIVE1_ACTIVITY_Pin D_DRIVE2_ACTIVITY_Pin D_DRIVE3_ACTIVITY_Pin */
  GPIO_InitStruct.Pin = MB1_BITCH_Pin|MB2_BITCH_Pin|CPU_PWROK_Pin|A_DRIVE4_ACTIVITY_Pin
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	4a53      	ldr	r2, [pc, #332]	@ (8000cf4 <MX_GPIO_Init+0x260>)
 8000ba8:	601a      	str	r2, [r3, #0]
                          |B_DRIVE1_ACTIVITY_Pin|D_DRIVE1_ACTIVITY_Pin|D_DRIVE2_ACTIVITY_Pin|D_DRIVE3_ACTIVITY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	193a      	adds	r2, r7, r4
 8000bb8:	23a0      	movs	r3, #160	@ 0xa0
 8000bba:	05db      	lsls	r3, r3, #23
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f001 fff0 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB1_STATUS_LED_Pin MB2_STATUS_LED_Pin */
  GPIO_InitStruct.Pin = MB1_STATUS_LED_Pin|MB2_STATUS_LED_Pin;
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	2250      	movs	r2, #80	@ 0x50
 8000bc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	2201      	movs	r2, #1
 8000bce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	193b      	adds	r3, r7, r4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	193b      	adds	r3, r7, r4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	193a      	adds	r2, r7, r4
 8000bde:	23a0      	movs	r3, #160	@ 0xa0
 8000be0:	05db      	lsls	r3, r3, #23
 8000be2:	0011      	movs	r1, r2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f001 ffdd 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB1_ATTACH_Pin A_DRIVE1_ACTIVITY_Pin A_DRIVE2_ACTIVITY_Pin A_DRIVE3_ACTIVITY_Pin
                           F_DRIVE4_ACTIVITY_Pin F_DRIVE3_ACTIVITY_Pin F_DRIVE2_ACTIVITY_Pin F_DRIVE1_ACTIVITY_Pin
                           E_DRIVE4_ACTIVITY_Pin E_DRIVE3_ACTIVITY_Pin E_DRIVE2_ACTIVITY_Pin */
  GPIO_InitStruct.Pin = MB1_ATTACH_Pin|A_DRIVE1_ACTIVITY_Pin|A_DRIVE2_ACTIVITY_Pin|A_DRIVE3_ACTIVITY_Pin
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	4a42      	ldr	r2, [pc, #264]	@ (8000cf8 <MX_GPIO_Init+0x264>)
 8000bee:	601a      	str	r2, [r3, #0]
                          |F_DRIVE4_ACTIVITY_Pin|F_DRIVE3_ACTIVITY_Pin|F_DRIVE2_ACTIVITY_Pin|F_DRIVE1_ACTIVITY_Pin
                          |E_DRIVE4_ACTIVITY_Pin|E_DRIVE3_ACTIVITY_Pin|E_DRIVE2_ACTIVITY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	4a39      	ldr	r2, [pc, #228]	@ (8000ce4 <MX_GPIO_Init+0x250>)
 8000c00:	0019      	movs	r1, r3
 8000c02:	0010      	movs	r0, r2
 8000c04:	f001 ffce 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SGPIO_I2C3_RES_Pin SGPIO_I2C3RES_G_Pin */
  GPIO_InitStruct.Pin = SGPIO_I2C3_RES_Pin|SGPIO_I2C3RES_G_Pin;
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	2206      	movs	r2, #6
 8000c0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	193b      	adds	r3, r7, r4
 8000c10:	2201      	movs	r2, #1
 8000c12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	4a30      	ldr	r2, [pc, #192]	@ (8000ce4 <MX_GPIO_Init+0x250>)
 8000c24:	0019      	movs	r1, r3
 8000c26:	0010      	movs	r0, r2
 8000c28:	f001 ffbc 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_DRIVE3_ACTIVITY_Pin C_DRIVE4_ACTIVITY_Pin MB2_ATTACH_Pin MB2_PWR_SW_Pin */
  GPIO_InitStruct.Pin = C_DRIVE3_ACTIVITY_Pin|C_DRIVE4_ACTIVITY_Pin|MB2_ATTACH_Pin|MB2_PWR_SW_Pin;
 8000c2c:	0021      	movs	r1, r4
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	22d8      	movs	r2, #216	@ 0xd8
 8000c32:	0092      	lsls	r2, r2, #2
 8000c34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	000c      	movs	r4, r1
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	4a28      	ldr	r2, [pc, #160]	@ (8000ce8 <MX_GPIO_Init+0x254>)
 8000c48:	0019      	movs	r1, r3
 8000c4a:	0010      	movs	r0, r2
 8000c4c:	f001 ffaa 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FP_MB1_PWR_SW_Pin */
  GPIO_InitStruct.Pin = FP_MB1_PWR_SW_Pin;
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	0212      	lsls	r2, r2, #8
 8000c56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	22c4      	movs	r2, #196	@ 0xc4
 8000c5c:	0392      	lsls	r2, r2, #14
 8000c5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	2201      	movs	r2, #1
 8000c64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FP_MB1_PWR_SW_GPIO_Port, &GPIO_InitStruct);
 8000c66:	193a      	adds	r2, r7, r4
 8000c68:	23a0      	movs	r3, #160	@ 0xa0
 8000c6a:	05db      	lsls	r3, r3, #23
 8000c6c:	0011      	movs	r1, r2
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f001 ff98 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FP_MB2_PWR_SW_Pin */
  GPIO_InitStruct.Pin = FP_MB2_PWR_SW_Pin;
 8000c74:	0021      	movs	r1, r4
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	0052      	lsls	r2, r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	22c4      	movs	r2, #196	@ 0xc4
 8000c82:	0392      	lsls	r2, r2, #14
 8000c84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2201      	movs	r2, #1
 8000c8a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FP_MB2_PWR_SW_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	000c      	movs	r4, r1
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	4a13      	ldr	r2, [pc, #76]	@ (8000ce0 <MX_GPIO_Init+0x24c>)
 8000c92:	0019      	movs	r1, r3
 8000c94:	0010      	movs	r0, r2
 8000c96:	f001 ff85 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SGPIO_I2C1_RES_G_Pin TEMP_I2C2_RES_Pin TEMP_I2C1_RES_Pin */
  GPIO_InitStruct.Pin = SGPIO_I2C1_RES_G_Pin|TEMP_I2C2_RES_Pin|TEMP_I2C1_RES_Pin;
 8000c9a:	0021      	movs	r1, r4
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2207      	movs	r2, #7
 8000ca0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce8 <MX_GPIO_Init+0x254>)
 8000cb8:	0019      	movs	r1, r3
 8000cba:	0010      	movs	r0, r2
 8000cbc:	f001 ff72 	bl	8002ba4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	2007      	movs	r0, #7
 8000cc6:	f001 fd39 	bl	800273c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f001 fd4b 	bl	8002766 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b00b      	add	sp, #44	@ 0x2c
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	00000811 	.word	0x00000811
 8000ce0:	50000800 	.word	0x50000800
 8000ce4:	50000400 	.word	0x50000400
 8000ce8:	50000c00 	.word	0x50000c00
 8000cec:	00006a11 	.word	0x00006a11
 8000cf0:	000084ee 	.word	0x000084ee
 8000cf4:	00001fa8 	.word	0x00001fa8
 8000cf8:	0000e3f9 	.word	0x0000e3f9

08000cfc <Set_devslp>:

/* USER CODE BEGIN 4 */
void Set_devslp()
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af02      	add	r7, sp, #8
	while (HAL_I2C_IsDeviceReady(&hi2c2, I2C_EXPAND_adr << 1, 3, 100) != HAL_OK);
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	4b51      	ldr	r3, [pc, #324]	@ (8000e4c <Set_devslp+0x150>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	18db      	adds	r3, r3, r3
 8000d0a:	b299      	uxth	r1, r3
 8000d0c:	4850      	ldr	r0, [pc, #320]	@ (8000e50 <Set_devslp+0x154>)
 8000d0e:	2364      	movs	r3, #100	@ 0x64
 8000d10:	2203      	movs	r2, #3
 8000d12:	f002 fbe7 	bl	80034e4 <HAL_I2C_IsDeviceReady>
 8000d16:	1e03      	subs	r3, r0, #0
 8000d18:	d1f4      	bne.n	8000d04 <Set_devslp+0x8>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 1); //DevSLP  0 канал (E/F)
 8000d1a:	4b4c      	ldr	r3, [pc, #304]	@ (8000e4c <Set_devslp+0x150>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	18db      	adds	r3, r3, r3
 8000d20:	b299      	uxth	r1, r3
 8000d22:	4a4c      	ldr	r2, [pc, #304]	@ (8000e54 <Set_devslp+0x158>)
 8000d24:	484a      	ldr	r0, [pc, #296]	@ (8000e50 <Set_devslp+0x154>)
 8000d26:	2301      	movs	r3, #1
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f002 f9a8 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000d30:	2005      	movs	r0, #5
 8000d32:	f001 fc33 	bl	800259c <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&hi2c2, Dev_SLP_adr << 1, 3, 100) != HAL_OK);
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	4b47      	ldr	r3, [pc, #284]	@ (8000e58 <Set_devslp+0x15c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	18db      	adds	r3, r3, r3
 8000d3e:	b299      	uxth	r1, r3
 8000d40:	4843      	ldr	r0, [pc, #268]	@ (8000e50 <Set_devslp+0x154>)
 8000d42:	2364      	movs	r3, #100	@ 0x64
 8000d44:	2203      	movs	r2, #3
 8000d46:	f002 fbcd 	bl	80034e4 <HAL_I2C_IsDeviceReady>
 8000d4a:	1e03      	subs	r3, r0, #0
 8000d4c:	d1f4      	bne.n	8000d38 <Set_devslp+0x3c>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), i2cbuff_IN, 3, 1); // init input
 8000d4e:	4b42      	ldr	r3, [pc, #264]	@ (8000e58 <Set_devslp+0x15c>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	18db      	adds	r3, r3, r3
 8000d54:	b299      	uxth	r1, r3
 8000d56:	4a41      	ldr	r2, [pc, #260]	@ (8000e5c <Set_devslp+0x160>)
 8000d58:	483d      	ldr	r0, [pc, #244]	@ (8000e50 <Set_devslp+0x154>)
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2303      	movs	r3, #3
 8000d60:	f002 f98e 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000d64:	2005      	movs	r0, #5
 8000d66:	f001 fc19 	bl	800259c <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&hi2c2, Dev_SLP_adr << 1, 3, 100) != HAL_OK);
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000e58 <Set_devslp+0x15c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	18db      	adds	r3, r3, r3
 8000d72:	b299      	uxth	r1, r3
 8000d74:	4836      	ldr	r0, [pc, #216]	@ (8000e50 <Set_devslp+0x154>)
 8000d76:	2364      	movs	r3, #100	@ 0x64
 8000d78:	2203      	movs	r2, #3
 8000d7a:	f002 fbb3 	bl	80034e4 <HAL_I2C_IsDeviceReady>
 8000d7e:	1e03      	subs	r3, r0, #0
 8000d80:	d1f4      	bne.n	8000d6c <Set_devslp+0x70>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), Dev_SLP_ON, 3, 1); //write
 8000d82:	4b35      	ldr	r3, [pc, #212]	@ (8000e58 <Set_devslp+0x15c>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	18db      	adds	r3, r3, r3
 8000d88:	b299      	uxth	r1, r3
 8000d8a:	4a35      	ldr	r2, [pc, #212]	@ (8000e60 <Set_devslp+0x164>)
 8000d8c:	4830      	ldr	r0, [pc, #192]	@ (8000e50 <Set_devslp+0x154>)
 8000d8e:	2301      	movs	r3, #1
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2303      	movs	r3, #3
 8000d94:	f002 f974 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000d98:	2005      	movs	r0, #5
 8000d9a:	f001 fbff 	bl	800259c <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 1); //DevSLP  1 канал (C/D)
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e4c <Set_devslp+0x150>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	18db      	adds	r3, r3, r3
 8000da4:	b299      	uxth	r1, r3
 8000da6:	4a2f      	ldr	r2, [pc, #188]	@ (8000e64 <Set_devslp+0x168>)
 8000da8:	4829      	ldr	r0, [pc, #164]	@ (8000e50 <Set_devslp+0x154>)
 8000daa:	2301      	movs	r3, #1
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2301      	movs	r3, #1
 8000db0:	f002 f966 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000db4:	2005      	movs	r0, #5
 8000db6:	f001 fbf1 	bl	800259c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), i2cbuff_IN, 3, 1);
 8000dba:	4b27      	ldr	r3, [pc, #156]	@ (8000e58 <Set_devslp+0x15c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	18db      	adds	r3, r3, r3
 8000dc0:	b299      	uxth	r1, r3
 8000dc2:	4a26      	ldr	r2, [pc, #152]	@ (8000e5c <Set_devslp+0x160>)
 8000dc4:	4822      	ldr	r0, [pc, #136]	@ (8000e50 <Set_devslp+0x154>)
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	2303      	movs	r3, #3
 8000dcc:	f002 f958 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000dd0:	2005      	movs	r0, #5
 8000dd2:	f001 fbe3 	bl	800259c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), Dev_SLP_ON, 3, 1);
 8000dd6:	4b20      	ldr	r3, [pc, #128]	@ (8000e58 <Set_devslp+0x15c>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	18db      	adds	r3, r3, r3
 8000ddc:	b299      	uxth	r1, r3
 8000dde:	4a20      	ldr	r2, [pc, #128]	@ (8000e60 <Set_devslp+0x164>)
 8000de0:	481b      	ldr	r0, [pc, #108]	@ (8000e50 <Set_devslp+0x154>)
 8000de2:	2301      	movs	r3, #1
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2303      	movs	r3, #3
 8000de8:	f002 f94a 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000dec:	2005      	movs	r0, #5
 8000dee:	f001 fbd5 	bl	800259c <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 1); //DevSLP  2 канал (A/B)
 8000df2:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <Set_devslp+0x150>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	18db      	adds	r3, r3, r3
 8000df8:	b299      	uxth	r1, r3
 8000dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8000e68 <Set_devslp+0x16c>)
 8000dfc:	4814      	ldr	r0, [pc, #80]	@ (8000e50 <Set_devslp+0x154>)
 8000dfe:	2301      	movs	r3, #1
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2301      	movs	r3, #1
 8000e04:	f002 f93c 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000e08:	2005      	movs	r0, #5
 8000e0a:	f001 fbc7 	bl	800259c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), i2cbuff_IN, 3, 1);
 8000e0e:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <Set_devslp+0x15c>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	18db      	adds	r3, r3, r3
 8000e14:	b299      	uxth	r1, r3
 8000e16:	4a11      	ldr	r2, [pc, #68]	@ (8000e5c <Set_devslp+0x160>)
 8000e18:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <Set_devslp+0x154>)
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2303      	movs	r3, #3
 8000e20:	f002 f92e 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000e24:	2005      	movs	r0, #5
 8000e26:	f001 fbb9 	bl	800259c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), Dev_SLP_ON, 3, 1);
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <Set_devslp+0x15c>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	18db      	adds	r3, r3, r3
 8000e30:	b299      	uxth	r1, r3
 8000e32:	4a0b      	ldr	r2, [pc, #44]	@ (8000e60 <Set_devslp+0x164>)
 8000e34:	4806      	ldr	r0, [pc, #24]	@ (8000e50 <Set_devslp+0x154>)
 8000e36:	2301      	movs	r3, #1
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	f002 f920 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000e40:	2005      	movs	r0, #5
 8000e42:	f001 fbab 	bl	800259c <HAL_Delay>
}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2000004d 	.word	0x2000004d
 8000e50:	2000008c 	.word	0x2000008c
 8000e54:	20000038 	.word	0x20000038
 8000e58:	2000004c 	.word	0x2000004c
 8000e5c:	20000034 	.word	0x20000034
 8000e60:	20000050 	.word	0x20000050
 8000e64:	2000003c 	.word	0x2000003c
 8000e68:	20000040 	.word	0x20000040

08000e6c <Initialize_Disks>:

void Initialize_Disks()
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_DISKS; ++i) {
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	e01c      	b.n	8000eb2 <Initialize_Disks+0x46>
		disks[i].isConnected = 0;
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <Initialize_Disks+0x58>)
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	2100      	movs	r1, #0
 8000e80:	54d1      	strb	r1, [r2, r3]
		disks[i].activity = 0;
 8000e82:	4a10      	ldr	r2, [pc, #64]	@ (8000ec4 <Initialize_Disks+0x58>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	18d3      	adds	r3, r2, r3
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
		disks[i].error = 0;
 8000e90:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec4 <Initialize_Disks+0x58>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	18d3      	adds	r3, r2, r3
 8000e98:	3302      	adds	r3, #2
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
		disks[i].locate = 0;
 8000e9e:	4a09      	ldr	r2, [pc, #36]	@ (8000ec4 <Initialize_Disks+0x58>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	18d3      	adds	r3, r2, r3
 8000ea6:	3303      	adds	r3, #3
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_DISKS; ++i) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b17      	cmp	r3, #23
 8000eb6:	dddf      	ble.n	8000e78 <Initialize_Disks+0xc>
	}
}
 8000eb8:	46c0      	nop			@ (mov r8, r8)
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	2000028c 	.word	0x2000028c

08000ec8 <ResetBus>:

	}
}

void ResetBus()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	flag_update = 10;
 8000ecc:	4b37      	ldr	r3, [pc, #220]	@ (8000fac <ResetBus+0xe4>)
 8000ece:	220a      	movs	r2, #10
 8000ed0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TEMP_I2C1_RES_GPIO_Port, TEMP_I2C1_RES_Pin, RESET);
 8000ed2:	4b37      	ldr	r3, [pc, #220]	@ (8000fb0 <ResetBus+0xe8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f001 ffe4 	bl	8002ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_G_GPIO_Port, SGPIO_I2C1_RES_G_Pin, RESET);
 8000ede:	4b34      	ldr	r3, [pc, #208]	@ (8000fb0 <ResetBus+0xe8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f001 ffde 	bl	8002ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_GPIO_Port, SGPIO_I2C1_RES_Pin, RESET);
 8000eea:	2380      	movs	r3, #128	@ 0x80
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4831      	ldr	r0, [pc, #196]	@ (8000fb4 <ResetBus+0xec>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	0019      	movs	r1, r3
 8000ef4:	f001 ffd7 	bl	8002ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3RES_G_GPIO_Port, SGPIO_I2C3RES_G_Pin, RESET);
 8000ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb8 <ResetBus+0xf0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	2104      	movs	r1, #4
 8000efe:	0018      	movs	r0, r3
 8000f00:	f001 ffd1 	bl	8002ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3_RES_GPIO_Port, SGPIO_I2C3_RES_Pin, RESET);
 8000f04:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb8 <ResetBus+0xf0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	2102      	movs	r1, #2
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f001 ffcb 	bl	8002ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_GPIO_Port, SGPIO_I2C2_RES_Pin, RESET);
 8000f10:	2380      	movs	r3, #128	@ 0x80
 8000f12:	01db      	lsls	r3, r3, #7
 8000f14:	4827      	ldr	r0, [pc, #156]	@ (8000fb4 <ResetBus+0xec>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	0019      	movs	r1, r3
 8000f1a:	f001 ffc4 	bl	8002ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_G_GPIO_Port, SGPIO_I2C2_RES_G_Pin, RESET);
 8000f1e:	2380      	movs	r3, #128	@ 0x80
 8000f20:	019b      	lsls	r3, r3, #6
 8000f22:	4824      	ldr	r0, [pc, #144]	@ (8000fb4 <ResetBus+0xec>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	0019      	movs	r1, r3
 8000f28:	f001 ffbd 	bl	8002ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_I2C2_RES_GPIO_Port, TEMP_I2C2_RES_Pin, RESET);
 8000f2c:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <ResetBus+0xe8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2102      	movs	r1, #2
 8000f32:	0018      	movs	r0, r3
 8000f34:	f001 ffb7 	bl	8002ea6 <HAL_GPIO_WritePin>

	flag_update = 11;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <ResetBus+0xe4>)
 8000f3a:	220b      	movs	r2, #11
 8000f3c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TEMP_I2C1_RES_GPIO_Port, TEMP_I2C1_RES_Pin, SET);
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <ResetBus+0xe8>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	2104      	movs	r1, #4
 8000f44:	0018      	movs	r0, r3
 8000f46:	f001 ffae 	bl	8002ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_G_GPIO_Port, SGPIO_I2C1_RES_G_Pin, SET);
 8000f4a:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <ResetBus+0xe8>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2101      	movs	r1, #1
 8000f50:	0018      	movs	r0, r3
 8000f52:	f001 ffa8 	bl	8002ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_GPIO_Port, SGPIO_I2C1_RES_Pin, SET);
 8000f56:	2380      	movs	r3, #128	@ 0x80
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4816      	ldr	r0, [pc, #88]	@ (8000fb4 <ResetBus+0xec>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	0019      	movs	r1, r3
 8000f60:	f001 ffa1 	bl	8002ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3RES_G_GPIO_Port, SGPIO_I2C3RES_G_Pin, SET);
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <ResetBus+0xf0>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	2104      	movs	r1, #4
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f001 ff9b 	bl	8002ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3_RES_GPIO_Port, SGPIO_I2C3_RES_Pin, SET);
 8000f70:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <ResetBus+0xf0>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	2102      	movs	r1, #2
 8000f76:	0018      	movs	r0, r3
 8000f78:	f001 ff95 	bl	8002ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_GPIO_Port, SGPIO_I2C2_RES_Pin, SET);
 8000f7c:	2380      	movs	r3, #128	@ 0x80
 8000f7e:	01db      	lsls	r3, r3, #7
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <ResetBus+0xec>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	0019      	movs	r1, r3
 8000f86:	f001 ff8e 	bl	8002ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_G_GPIO_Port, SGPIO_I2C2_RES_G_Pin, SET);
 8000f8a:	2380      	movs	r3, #128	@ 0x80
 8000f8c:	019b      	lsls	r3, r3, #6
 8000f8e:	4809      	ldr	r0, [pc, #36]	@ (8000fb4 <ResetBus+0xec>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	0019      	movs	r1, r3
 8000f94:	f001 ff87 	bl	8002ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_I2C2_RES_GPIO_Port, TEMP_I2C2_RES_Pin, SET);
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <ResetBus+0xe8>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f001 ff81 	bl	8002ea6 <HAL_GPIO_WritePin>

}
 8000fa4:	46c0      	nop			@ (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	2000027d 	.word	0x2000027d
 8000fb0:	50000c00 	.word	0x50000c00
 8000fb4:	50000800 	.word	0x50000800
 8000fb8:	50000400 	.word	0x50000400

08000fbc <Set_Led>:

void Set_Led()
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 8000fc2:	4b33      	ldr	r3, [pc, #204]	@ (8001090 <Set_Led+0xd4>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	18db      	adds	r3, r3, r3
 8000fc8:	b299      	uxth	r1, r3
 8000fca:	4a32      	ldr	r2, [pc, #200]	@ (8001094 <Set_Led+0xd8>)
 8000fcc:	4832      	ldr	r0, [pc, #200]	@ (8001098 <Set_Led+0xdc>)
 8000fce:	230a      	movs	r3, #10
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	f002 f854 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 8000fd8:	4b30      	ldr	r3, [pc, #192]	@ (800109c <Set_Led+0xe0>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	18db      	adds	r3, r3, r3
 8000fde:	b299      	uxth	r1, r3
 8000fe0:	4a2f      	ldr	r2, [pc, #188]	@ (80010a0 <Set_Led+0xe4>)
 8000fe2:	482d      	ldr	r0, [pc, #180]	@ (8001098 <Set_Led+0xdc>)
 8000fe4:	230a      	movs	r3, #10
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2303      	movs	r3, #3
 8000fea:	f002 f849 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), channel_one, 3, 10);
 8000fee:	4b2b      	ldr	r3, [pc, #172]	@ (800109c <Set_Led+0xe0>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	18db      	adds	r3, r3, r3
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	4a2b      	ldr	r2, [pc, #172]	@ (80010a4 <Set_Led+0xe8>)
 8000ff8:	4827      	ldr	r0, [pc, #156]	@ (8001098 <Set_Led+0xdc>)
 8000ffa:	230a      	movs	r3, #10
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2303      	movs	r3, #3
 8001000:	f002 f83e 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 8001004:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <Set_Led+0xd4>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	18db      	adds	r3, r3, r3
 800100a:	b299      	uxth	r1, r3
 800100c:	4a26      	ldr	r2, [pc, #152]	@ (80010a8 <Set_Led+0xec>)
 800100e:	4822      	ldr	r0, [pc, #136]	@ (8001098 <Set_Led+0xdc>)
 8001010:	230a      	movs	r3, #10
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2301      	movs	r3, #1
 8001016:	f002 f833 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 800101a:	4b20      	ldr	r3, [pc, #128]	@ (800109c <Set_Led+0xe0>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	18db      	adds	r3, r3, r3
 8001020:	b299      	uxth	r1, r3
 8001022:	4a1f      	ldr	r2, [pc, #124]	@ (80010a0 <Set_Led+0xe4>)
 8001024:	481c      	ldr	r0, [pc, #112]	@ (8001098 <Set_Led+0xdc>)
 8001026:	230a      	movs	r3, #10
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2303      	movs	r3, #3
 800102c:	f002 f828 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), channel_two, 3, 10);
 8001030:	4b1a      	ldr	r3, [pc, #104]	@ (800109c <Set_Led+0xe0>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	18db      	adds	r3, r3, r3
 8001036:	b299      	uxth	r1, r3
 8001038:	4a1c      	ldr	r2, [pc, #112]	@ (80010ac <Set_Led+0xf0>)
 800103a:	4817      	ldr	r0, [pc, #92]	@ (8001098 <Set_Led+0xdc>)
 800103c:	230a      	movs	r3, #10
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2303      	movs	r3, #3
 8001042:	f002 f81d 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 8001046:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <Set_Led+0xd4>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	18db      	adds	r3, r3, r3
 800104c:	b299      	uxth	r1, r3
 800104e:	4a18      	ldr	r2, [pc, #96]	@ (80010b0 <Set_Led+0xf4>)
 8001050:	4811      	ldr	r0, [pc, #68]	@ (8001098 <Set_Led+0xdc>)
 8001052:	230a      	movs	r3, #10
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2301      	movs	r3, #1
 8001058:	f002 f812 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 800105c:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <Set_Led+0xe0>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	18db      	adds	r3, r3, r3
 8001062:	b299      	uxth	r1, r3
 8001064:	4a0e      	ldr	r2, [pc, #56]	@ (80010a0 <Set_Led+0xe4>)
 8001066:	480c      	ldr	r0, [pc, #48]	@ (8001098 <Set_Led+0xdc>)
 8001068:	230a      	movs	r3, #10
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2303      	movs	r3, #3
 800106e:	f002 f807 	bl	8003080 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), channel_three, 3, 10);
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <Set_Led+0xe0>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	18db      	adds	r3, r3, r3
 8001078:	b299      	uxth	r1, r3
 800107a:	4a0e      	ldr	r2, [pc, #56]	@ (80010b4 <Set_Led+0xf8>)
 800107c:	4806      	ldr	r0, [pc, #24]	@ (8001098 <Set_Led+0xdc>)
 800107e:	230a      	movs	r3, #10
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2303      	movs	r3, #3
 8001084:	f001 fffc 	bl	8003080 <HAL_I2C_Master_Transmit>
}
 8001088:	46c0      	nop			@ (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	2000004d 	.word	0x2000004d
 8001094:	20000038 	.word	0x20000038
 8001098:	2000008c 	.word	0x2000008c
 800109c:	2000004b 	.word	0x2000004b
 80010a0:	20000030 	.word	0x20000030
 80010a4:	20000054 	.word	0x20000054
 80010a8:	2000003c 	.word	0x2000003c
 80010ac:	20000058 	.word	0x20000058
 80010b0:	20000040 	.word	0x20000040
 80010b4:	2000005c 	.word	0x2000005c

080010b8 <Set_Led_On>:

void Set_Led_On()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af02      	add	r7, sp, #8
	flag_update = 5;
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <Set_Led_On+0x5c>)
 80010c0:	2205      	movs	r2, #5
 80010c2:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_IsDeviceReady(&hi2c2, LED_adr << 1, 3, 100) == HAL_OK) {
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <Set_Led_On+0x60>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	18db      	adds	r3, r3, r3
 80010ca:	b299      	uxth	r1, r3
 80010cc:	4813      	ldr	r0, [pc, #76]	@ (800111c <Set_Led_On+0x64>)
 80010ce:	2364      	movs	r3, #100	@ 0x64
 80010d0:	2203      	movs	r2, #3
 80010d2:	f002 fa07 	bl	80034e4 <HAL_I2C_IsDeviceReady>
 80010d6:	1e03      	subs	r3, r0, #0
 80010d8:	d10b      	bne.n	80010f2 <Set_Led_On+0x3a>
		HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <Set_Led_On+0x60>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	18db      	adds	r3, r3, r3
 80010e0:	b299      	uxth	r1, r3
 80010e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001120 <Set_Led_On+0x68>)
 80010e4:	480d      	ldr	r0, [pc, #52]	@ (800111c <Set_Led_On+0x64>)
 80010e6:	230a      	movs	r3, #10
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2303      	movs	r3, #3
 80010ec:	f001 ffc8 	bl	8003080 <HAL_I2C_Master_Transmit>
 80010f0:	e002      	b.n	80010f8 <Set_Led_On+0x40>
	} else {
		flag_update = 7;
 80010f2:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <Set_Led_On+0x5c>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	701a      	strb	r2, [r3, #0]
	}


	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), ledbufON, 3, 10);
 80010f8:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <Set_Led_On+0x60>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	18db      	adds	r3, r3, r3
 80010fe:	b299      	uxth	r1, r3
 8001100:	4a08      	ldr	r2, [pc, #32]	@ (8001124 <Set_Led_On+0x6c>)
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <Set_Led_On+0x64>)
 8001104:	230a      	movs	r3, #10
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2303      	movs	r3, #3
 800110a:	f001 ffb9 	bl	8003080 <HAL_I2C_Master_Transmit>
}
 800110e:	46c0      	nop			@ (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000027d 	.word	0x2000027d
 8001118:	2000004b 	.word	0x2000004b
 800111c:	2000008c 	.word	0x2000008c
 8001120:	20000030 	.word	0x20000030
 8001124:	20000044 	.word	0x20000044

08001128 <Set_Led_Off>:

void Set_Led_Off()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 800112e:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <Set_Led_Off+0x38>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	18db      	adds	r3, r3, r3
 8001134:	b299      	uxth	r1, r3
 8001136:	4a0b      	ldr	r2, [pc, #44]	@ (8001164 <Set_Led_Off+0x3c>)
 8001138:	480b      	ldr	r0, [pc, #44]	@ (8001168 <Set_Led_Off+0x40>)
 800113a:	230a      	movs	r3, #10
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2303      	movs	r3, #3
 8001140:	f001 ff9e 	bl	8003080 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), ledbufOFF, 3, 10);
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <Set_Led_Off+0x38>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	18db      	adds	r3, r3, r3
 800114a:	b299      	uxth	r1, r3
 800114c:	4a07      	ldr	r2, [pc, #28]	@ (800116c <Set_Led_Off+0x44>)
 800114e:	4806      	ldr	r0, [pc, #24]	@ (8001168 <Set_Led_Off+0x40>)
 8001150:	230a      	movs	r3, #10
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2303      	movs	r3, #3
 8001156:	f001 ff93 	bl	8003080 <HAL_I2C_Master_Transmit>

}
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000004b 	.word	0x2000004b
 8001164:	20000030 	.word	0x20000030
 8001168:	2000008c 	.word	0x2000008c
 800116c:	20000048 	.word	0x20000048

08001170 <Led_Init>:
void Led_Init()
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af02      	add	r7, sp, #8
	flag_update = 1;
 8001176:	4b36      	ldr	r3, [pc, #216]	@ (8001250 <Led_Init+0xe0>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 800117c:	4b35      	ldr	r3, [pc, #212]	@ (8001254 <Led_Init+0xe4>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	18db      	adds	r3, r3, r3
 8001182:	b299      	uxth	r1, r3
 8001184:	4a34      	ldr	r2, [pc, #208]	@ (8001258 <Led_Init+0xe8>)
 8001186:	4835      	ldr	r0, [pc, #212]	@ (800125c <Led_Init+0xec>)
 8001188:	230a      	movs	r3, #10
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2301      	movs	r3, #1
 800118e:	f001 ff77 	bl	8003080 <HAL_I2C_Master_Transmit>
	flag_update = 3;
 8001192:	4b2f      	ldr	r3, [pc, #188]	@ (8001250 <Led_Init+0xe0>)
 8001194:	2203      	movs	r2, #3
 8001196:	701a      	strb	r2, [r3, #0]
	Set_Led_On();
 8001198:	f7ff ff8e 	bl	80010b8 <Set_Led_On>
	HAL_Delay(250);
 800119c:	20fa      	movs	r0, #250	@ 0xfa
 800119e:	f001 f9fd 	bl	800259c <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 80011a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001254 <Led_Init+0xe4>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	18db      	adds	r3, r3, r3
 80011a8:	b299      	uxth	r1, r3
 80011aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001260 <Led_Init+0xf0>)
 80011ac:	482b      	ldr	r0, [pc, #172]	@ (800125c <Led_Init+0xec>)
 80011ae:	230a      	movs	r3, #10
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2301      	movs	r3, #1
 80011b4:	f001 ff64 	bl	8003080 <HAL_I2C_Master_Transmit>
	Set_Led_On();
 80011b8:	f7ff ff7e 	bl	80010b8 <Set_Led_On>
	HAL_Delay(250);
 80011bc:	20fa      	movs	r0, #250	@ 0xfa
 80011be:	f001 f9ed 	bl	800259c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 80011c2:	4b24      	ldr	r3, [pc, #144]	@ (8001254 <Led_Init+0xe4>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	18db      	adds	r3, r3, r3
 80011c8:	b299      	uxth	r1, r3
 80011ca:	4a26      	ldr	r2, [pc, #152]	@ (8001264 <Led_Init+0xf4>)
 80011cc:	4823      	ldr	r0, [pc, #140]	@ (800125c <Led_Init+0xec>)
 80011ce:	230a      	movs	r3, #10
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2301      	movs	r3, #1
 80011d4:	f001 ff54 	bl	8003080 <HAL_I2C_Master_Transmit>
	Set_Led_On();
 80011d8:	f7ff ff6e 	bl	80010b8 <Set_Led_On>
	HAL_Delay(250);
 80011dc:	20fa      	movs	r0, #250	@ 0xfa
 80011de:	f001 f9dd 	bl	800259c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 80011e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <Led_Init+0xe4>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	18db      	adds	r3, r3, r3
 80011e8:	b299      	uxth	r1, r3
 80011ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001258 <Led_Init+0xe8>)
 80011ec:	481b      	ldr	r0, [pc, #108]	@ (800125c <Led_Init+0xec>)
 80011ee:	230a      	movs	r3, #10
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	f001 ff44 	bl	8003080 <HAL_I2C_Master_Transmit>
	Set_Led_Off();
 80011f8:	f7ff ff96 	bl	8001128 <Set_Led_Off>
	HAL_Delay(250);
 80011fc:	20fa      	movs	r0, #250	@ 0xfa
 80011fe:	f001 f9cd 	bl	800259c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 8001202:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <Led_Init+0xe4>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	18db      	adds	r3, r3, r3
 8001208:	b299      	uxth	r1, r3
 800120a:	4a15      	ldr	r2, [pc, #84]	@ (8001260 <Led_Init+0xf0>)
 800120c:	4813      	ldr	r0, [pc, #76]	@ (800125c <Led_Init+0xec>)
 800120e:	230a      	movs	r3, #10
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2301      	movs	r3, #1
 8001214:	f001 ff34 	bl	8003080 <HAL_I2C_Master_Transmit>
	Set_Led_Off();
 8001218:	f7ff ff86 	bl	8001128 <Set_Led_Off>
	HAL_Delay(250);
 800121c:	20fa      	movs	r0, #250	@ 0xfa
 800121e:	f001 f9bd 	bl	800259c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 8001222:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <Led_Init+0xe4>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	18db      	adds	r3, r3, r3
 8001228:	b299      	uxth	r1, r3
 800122a:	4a0e      	ldr	r2, [pc, #56]	@ (8001264 <Led_Init+0xf4>)
 800122c:	480b      	ldr	r0, [pc, #44]	@ (800125c <Led_Init+0xec>)
 800122e:	230a      	movs	r3, #10
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	f001 ff24 	bl	8003080 <HAL_I2C_Master_Transmit>
	Set_Led_Off();
 8001238:	f7ff ff76 	bl	8001128 <Set_Led_Off>
	HAL_Delay(250);
 800123c:	20fa      	movs	r0, #250	@ 0xfa
 800123e:	f001 f9ad 	bl	800259c <HAL_Delay>
	flag_update = 2;
 8001242:	4b03      	ldr	r3, [pc, #12]	@ (8001250 <Led_Init+0xe0>)
 8001244:	2202      	movs	r2, #2
 8001246:	701a      	strb	r2, [r3, #0]
}
 8001248:	46c0      	nop			@ (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			@ (mov r8, r8)
 8001250:	2000027d 	.word	0x2000027d
 8001254:	2000004d 	.word	0x2000004d
 8001258:	20000038 	.word	0x20000038
 800125c:	2000008c 	.word	0x2000008c
 8001260:	2000003c 	.word	0x2000003c
 8001264:	20000040 	.word	0x20000040

08001268 <Read_disks_connected>:
}



void Read_disks_connected()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af02      	add	r7, sp, #8

	ResetBus();
 800126e:	f7ff fe2b 	bl	8000ec8 <ResetBus>
	HAL_Delay(10);
 8001272:	200a      	movs	r0, #10
 8001274:	f001 f992 	bl	800259c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 8001278:	4bcf      	ldr	r3, [pc, #828]	@ (80015b8 <Read_disks_connected+0x350>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	18db      	adds	r3, r3, r3
 800127e:	b299      	uxth	r1, r3
 8001280:	4ace      	ldr	r2, [pc, #824]	@ (80015bc <Read_disks_connected+0x354>)
 8001282:	48cf      	ldr	r0, [pc, #828]	@ (80015c0 <Read_disks_connected+0x358>)
 8001284:	230a      	movs	r3, #10
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	f001 fef9 	bl	8003080 <HAL_I2C_Master_Transmit>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 800128e:	4bcd      	ldr	r3, [pc, #820]	@ (80015c4 <Read_disks_connected+0x35c>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	001a      	movs	r2, r3
 8001294:	4bcc      	ldr	r3, [pc, #816]	@ (80015c8 <Read_disks_connected+0x360>)
 8001296:	0019      	movs	r1, r3
 8001298:	2001      	movs	r0, #1
 800129a:	f000 f9a7 	bl	80015ec <Read_Register>


	if (~Buf_PRSTN[0] & 0x02)		//PRSTN F1
 800129e:	4bca      	ldr	r3, [pc, #808]	@ (80015c8 <Read_disks_connected+0x360>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	001a      	movs	r2, r3
 80012a4:	2302      	movs	r3, #2
 80012a6:	4013      	ands	r3, r2
 80012a8:	d103      	bne.n	80012b2 <Read_disks_connected+0x4a>
	{
		disks[0].isConnected = 1;
 80012aa:	4bc8      	ldr	r3, [pc, #800]	@ (80015cc <Read_disks_connected+0x364>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	e002      	b.n	80012b8 <Read_disks_connected+0x50>
	} else {
		disks[0].isConnected = 0;
 80012b2:	4bc6      	ldr	r3, [pc, #792]	@ (80015cc <Read_disks_connected+0x364>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN F2
 80012b8:	4bc3      	ldr	r3, [pc, #780]	@ (80015c8 <Read_disks_connected+0x360>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	001a      	movs	r2, r3
 80012be:	2308      	movs	r3, #8
 80012c0:	4013      	ands	r3, r2
 80012c2:	d103      	bne.n	80012cc <Read_disks_connected+0x64>
	{
		disks[1].isConnected = 1;
 80012c4:	4bc1      	ldr	r3, [pc, #772]	@ (80015cc <Read_disks_connected+0x364>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	711a      	strb	r2, [r3, #4]
 80012ca:	e002      	b.n	80012d2 <Read_disks_connected+0x6a>
	} else {
		disks[1].isConnected = 0;
 80012cc:	4bbf      	ldr	r3, [pc, #764]	@ (80015cc <Read_disks_connected+0x364>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	711a      	strb	r2, [r3, #4]
	}

	if (~Buf_PRSTN[0] & 0x20)		//PRSTN F3
 80012d2:	4bbd      	ldr	r3, [pc, #756]	@ (80015c8 <Read_disks_connected+0x360>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	001a      	movs	r2, r3
 80012d8:	2320      	movs	r3, #32
 80012da:	4013      	ands	r3, r2
 80012dc:	d103      	bne.n	80012e6 <Read_disks_connected+0x7e>
	{
		disks[2].isConnected = 1;
 80012de:	4bbb      	ldr	r3, [pc, #748]	@ (80015cc <Read_disks_connected+0x364>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	721a      	strb	r2, [r3, #8]
 80012e4:	e002      	b.n	80012ec <Read_disks_connected+0x84>
	} else {
		disks[2].isConnected = 0;
 80012e6:	4bb9      	ldr	r3, [pc, #740]	@ (80015cc <Read_disks_connected+0x364>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	721a      	strb	r2, [r3, #8]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN F4
 80012ec:	4bb6      	ldr	r3, [pc, #728]	@ (80015c8 <Read_disks_connected+0x360>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db03      	blt.n	80012fe <Read_disks_connected+0x96>
	{
		disks[3].isConnected = 1;
 80012f6:	4bb5      	ldr	r3, [pc, #724]	@ (80015cc <Read_disks_connected+0x364>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	731a      	strb	r2, [r3, #12]
 80012fc:	e002      	b.n	8001304 <Read_disks_connected+0x9c>
	} else {
		disks[3].isConnected = 0;
 80012fe:	4bb3      	ldr	r3, [pc, #716]	@ (80015cc <Read_disks_connected+0x364>)
 8001300:	2200      	movs	r2, #0
 8001302:	731a      	strb	r2, [r3, #12]
	}

	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 8001304:	4baf      	ldr	r3, [pc, #700]	@ (80015c4 <Read_disks_connected+0x35c>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	001a      	movs	r2, r3
 800130a:	4baf      	ldr	r3, [pc, #700]	@ (80015c8 <Read_disks_connected+0x360>)
 800130c:	0019      	movs	r1, r3
 800130e:	2000      	movs	r0, #0
 8001310:	f000 f96c 	bl	80015ec <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN E1
 8001314:	4bac      	ldr	r3, [pc, #688]	@ (80015c8 <Read_disks_connected+0x360>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	001a      	movs	r2, r3
 800131a:	2302      	movs	r3, #2
 800131c:	4013      	ands	r3, r2
 800131e:	d103      	bne.n	8001328 <Read_disks_connected+0xc0>
	{
		disks[4].isConnected = 1;
 8001320:	4baa      	ldr	r3, [pc, #680]	@ (80015cc <Read_disks_connected+0x364>)
 8001322:	2201      	movs	r2, #1
 8001324:	741a      	strb	r2, [r3, #16]
 8001326:	e002      	b.n	800132e <Read_disks_connected+0xc6>
	} else {
		disks[4].isConnected = 0;
 8001328:	4ba8      	ldr	r3, [pc, #672]	@ (80015cc <Read_disks_connected+0x364>)
 800132a:	2200      	movs	r2, #0
 800132c:	741a      	strb	r2, [r3, #16]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN E2
 800132e:	4ba6      	ldr	r3, [pc, #664]	@ (80015c8 <Read_disks_connected+0x360>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	001a      	movs	r2, r3
 8001334:	2308      	movs	r3, #8
 8001336:	4013      	ands	r3, r2
 8001338:	d103      	bne.n	8001342 <Read_disks_connected+0xda>
	{
		disks[5].isConnected = 1;
 800133a:	4ba4      	ldr	r3, [pc, #656]	@ (80015cc <Read_disks_connected+0x364>)
 800133c:	2201      	movs	r2, #1
 800133e:	751a      	strb	r2, [r3, #20]
 8001340:	e002      	b.n	8001348 <Read_disks_connected+0xe0>
	} else {
		disks[5].isConnected = 0;
 8001342:	4ba2      	ldr	r3, [pc, #648]	@ (80015cc <Read_disks_connected+0x364>)
 8001344:	2200      	movs	r2, #0
 8001346:	751a      	strb	r2, [r3, #20]
	}

	if (~Buf_PRSTN[0] & 0x20)		//PRSTN E3
 8001348:	4b9f      	ldr	r3, [pc, #636]	@ (80015c8 <Read_disks_connected+0x360>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	001a      	movs	r2, r3
 800134e:	2320      	movs	r3, #32
 8001350:	4013      	ands	r3, r2
 8001352:	d103      	bne.n	800135c <Read_disks_connected+0xf4>
	{
		disks[6].isConnected = 1;
 8001354:	4b9d      	ldr	r3, [pc, #628]	@ (80015cc <Read_disks_connected+0x364>)
 8001356:	2201      	movs	r2, #1
 8001358:	761a      	strb	r2, [r3, #24]
 800135a:	e002      	b.n	8001362 <Read_disks_connected+0xfa>
	} else {
		disks[6].isConnected = 0;
 800135c:	4b9b      	ldr	r3, [pc, #620]	@ (80015cc <Read_disks_connected+0x364>)
 800135e:	2200      	movs	r2, #0
 8001360:	761a      	strb	r2, [r3, #24]
	}

	if (~Buf_PRSTN[0] & 0x80)		//PRSTN E4
 8001362:	4b99      	ldr	r3, [pc, #612]	@ (80015c8 <Read_disks_connected+0x360>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	b25b      	sxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	db03      	blt.n	8001374 <Read_disks_connected+0x10c>

	{
		disks[7].isConnected = 1;
 800136c:	4b97      	ldr	r3, [pc, #604]	@ (80015cc <Read_disks_connected+0x364>)
 800136e:	2201      	movs	r2, #1
 8001370:	771a      	strb	r2, [r3, #28]
 8001372:	e002      	b.n	800137a <Read_disks_connected+0x112>
	} else {
		disks[7].isConnected = 0;
 8001374:	4b95      	ldr	r3, [pc, #596]	@ (80015cc <Read_disks_connected+0x364>)
 8001376:	2200      	movs	r2, #0
 8001378:	771a      	strb	r2, [r3, #28]
	}

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 800137a:	4b8f      	ldr	r3, [pc, #572]	@ (80015b8 <Read_disks_connected+0x350>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	18db      	adds	r3, r3, r3
 8001380:	b299      	uxth	r1, r3
 8001382:	4a93      	ldr	r2, [pc, #588]	@ (80015d0 <Read_disks_connected+0x368>)
 8001384:	488e      	ldr	r0, [pc, #568]	@ (80015c0 <Read_disks_connected+0x358>)
 8001386:	230a      	movs	r3, #10
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	f001 fe78 	bl	8003080 <HAL_I2C_Master_Transmit>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 8001390:	4b8c      	ldr	r3, [pc, #560]	@ (80015c4 <Read_disks_connected+0x35c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	001a      	movs	r2, r3
 8001396:	4b8c      	ldr	r3, [pc, #560]	@ (80015c8 <Read_disks_connected+0x360>)
 8001398:	0019      	movs	r1, r3
 800139a:	2001      	movs	r0, #1
 800139c:	f000 f926 	bl	80015ec <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN D1
 80013a0:	4b89      	ldr	r3, [pc, #548]	@ (80015c8 <Read_disks_connected+0x360>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	001a      	movs	r2, r3
 80013a6:	2302      	movs	r3, #2
 80013a8:	4013      	ands	r3, r2
 80013aa:	d104      	bne.n	80013b6 <Read_disks_connected+0x14e>
	{
		disks[8].isConnected = 1;
 80013ac:	4b87      	ldr	r3, [pc, #540]	@ (80015cc <Read_disks_connected+0x364>)
 80013ae:	2220      	movs	r2, #32
 80013b0:	2101      	movs	r1, #1
 80013b2:	5499      	strb	r1, [r3, r2]
 80013b4:	e003      	b.n	80013be <Read_disks_connected+0x156>
	} else {
		disks[8].isConnected = 0;
 80013b6:	4b85      	ldr	r3, [pc, #532]	@ (80015cc <Read_disks_connected+0x364>)
 80013b8:	2220      	movs	r2, #32
 80013ba:	2100      	movs	r1, #0
 80013bc:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN D2
 80013be:	4b82      	ldr	r3, [pc, #520]	@ (80015c8 <Read_disks_connected+0x360>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	001a      	movs	r2, r3
 80013c4:	2308      	movs	r3, #8
 80013c6:	4013      	ands	r3, r2
 80013c8:	d104      	bne.n	80013d4 <Read_disks_connected+0x16c>
	{
		disks[9].isConnected = 1;
 80013ca:	4b80      	ldr	r3, [pc, #512]	@ (80015cc <Read_disks_connected+0x364>)
 80013cc:	2224      	movs	r2, #36	@ 0x24
 80013ce:	2101      	movs	r1, #1
 80013d0:	5499      	strb	r1, [r3, r2]
 80013d2:	e003      	b.n	80013dc <Read_disks_connected+0x174>
	} else {
		disks[9].isConnected = 0;
 80013d4:	4b7d      	ldr	r3, [pc, #500]	@ (80015cc <Read_disks_connected+0x364>)
 80013d6:	2224      	movs	r2, #36	@ 0x24
 80013d8:	2100      	movs	r1, #0
 80013da:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN D3
 80013dc:	4b7a      	ldr	r3, [pc, #488]	@ (80015c8 <Read_disks_connected+0x360>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	001a      	movs	r2, r3
 80013e2:	2320      	movs	r3, #32
 80013e4:	4013      	ands	r3, r2
 80013e6:	d104      	bne.n	80013f2 <Read_disks_connected+0x18a>
	{
		disks[10].isConnected = 1;
 80013e8:	4b78      	ldr	r3, [pc, #480]	@ (80015cc <Read_disks_connected+0x364>)
 80013ea:	2228      	movs	r2, #40	@ 0x28
 80013ec:	2101      	movs	r1, #1
 80013ee:	5499      	strb	r1, [r3, r2]
 80013f0:	e003      	b.n	80013fa <Read_disks_connected+0x192>
	} else {
		disks[10].isConnected = 0;
 80013f2:	4b76      	ldr	r3, [pc, #472]	@ (80015cc <Read_disks_connected+0x364>)
 80013f4:	2228      	movs	r2, #40	@ 0x28
 80013f6:	2100      	movs	r1, #0
 80013f8:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN D4
 80013fa:	4b73      	ldr	r3, [pc, #460]	@ (80015c8 <Read_disks_connected+0x360>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	db04      	blt.n	800140e <Read_disks_connected+0x1a6>
	{
		disks[11].isConnected = 1;
 8001404:	4b71      	ldr	r3, [pc, #452]	@ (80015cc <Read_disks_connected+0x364>)
 8001406:	222c      	movs	r2, #44	@ 0x2c
 8001408:	2101      	movs	r1, #1
 800140a:	5499      	strb	r1, [r3, r2]
 800140c:	e003      	b.n	8001416 <Read_disks_connected+0x1ae>
	} else {
		disks[11].isConnected = 0;
 800140e:	4b6f      	ldr	r3, [pc, #444]	@ (80015cc <Read_disks_connected+0x364>)
 8001410:	222c      	movs	r2, #44	@ 0x2c
 8001412:	2100      	movs	r1, #0
 8001414:	5499      	strb	r1, [r3, r2]
	}
	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 8001416:	4b6b      	ldr	r3, [pc, #428]	@ (80015c4 <Read_disks_connected+0x35c>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	001a      	movs	r2, r3
 800141c:	4b6a      	ldr	r3, [pc, #424]	@ (80015c8 <Read_disks_connected+0x360>)
 800141e:	0019      	movs	r1, r3
 8001420:	2000      	movs	r0, #0
 8001422:	f000 f8e3 	bl	80015ec <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN C1
 8001426:	4b68      	ldr	r3, [pc, #416]	@ (80015c8 <Read_disks_connected+0x360>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	001a      	movs	r2, r3
 800142c:	2302      	movs	r3, #2
 800142e:	4013      	ands	r3, r2
 8001430:	d104      	bne.n	800143c <Read_disks_connected+0x1d4>
	{
		disks[12].isConnected = 1;
 8001432:	4b66      	ldr	r3, [pc, #408]	@ (80015cc <Read_disks_connected+0x364>)
 8001434:	2230      	movs	r2, #48	@ 0x30
 8001436:	2101      	movs	r1, #1
 8001438:	5499      	strb	r1, [r3, r2]
 800143a:	e003      	b.n	8001444 <Read_disks_connected+0x1dc>
	} else {
		disks[12].isConnected = 0;
 800143c:	4b63      	ldr	r3, [pc, #396]	@ (80015cc <Read_disks_connected+0x364>)
 800143e:	2230      	movs	r2, #48	@ 0x30
 8001440:	2100      	movs	r1, #0
 8001442:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN C2
 8001444:	4b60      	ldr	r3, [pc, #384]	@ (80015c8 <Read_disks_connected+0x360>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	001a      	movs	r2, r3
 800144a:	2308      	movs	r3, #8
 800144c:	4013      	ands	r3, r2
 800144e:	d104      	bne.n	800145a <Read_disks_connected+0x1f2>
	{
		disks[13].isConnected = 1;
 8001450:	4b5e      	ldr	r3, [pc, #376]	@ (80015cc <Read_disks_connected+0x364>)
 8001452:	2234      	movs	r2, #52	@ 0x34
 8001454:	2101      	movs	r1, #1
 8001456:	5499      	strb	r1, [r3, r2]
 8001458:	e003      	b.n	8001462 <Read_disks_connected+0x1fa>
	} else {
		disks[13].isConnected = 0;
 800145a:	4b5c      	ldr	r3, [pc, #368]	@ (80015cc <Read_disks_connected+0x364>)
 800145c:	2234      	movs	r2, #52	@ 0x34
 800145e:	2100      	movs	r1, #0
 8001460:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN C3
 8001462:	4b59      	ldr	r3, [pc, #356]	@ (80015c8 <Read_disks_connected+0x360>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	001a      	movs	r2, r3
 8001468:	2320      	movs	r3, #32
 800146a:	4013      	ands	r3, r2
 800146c:	d104      	bne.n	8001478 <Read_disks_connected+0x210>
	{
		disks[14].isConnected = 1;
 800146e:	4b57      	ldr	r3, [pc, #348]	@ (80015cc <Read_disks_connected+0x364>)
 8001470:	2238      	movs	r2, #56	@ 0x38
 8001472:	2101      	movs	r1, #1
 8001474:	5499      	strb	r1, [r3, r2]
 8001476:	e003      	b.n	8001480 <Read_disks_connected+0x218>
	} else {
		disks[14].isConnected = 0;
 8001478:	4b54      	ldr	r3, [pc, #336]	@ (80015cc <Read_disks_connected+0x364>)
 800147a:	2238      	movs	r2, #56	@ 0x38
 800147c:	2100      	movs	r1, #0
 800147e:	5499      	strb	r1, [r3, r2]
	}

	if (~Buf_PRSTN[0] & 0x80)		//PRSTN C4
 8001480:	4b51      	ldr	r3, [pc, #324]	@ (80015c8 <Read_disks_connected+0x360>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b25b      	sxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	db04      	blt.n	8001494 <Read_disks_connected+0x22c>
	{
		disks[15].isConnected = 1;
 800148a:	4b50      	ldr	r3, [pc, #320]	@ (80015cc <Read_disks_connected+0x364>)
 800148c:	223c      	movs	r2, #60	@ 0x3c
 800148e:	2101      	movs	r1, #1
 8001490:	5499      	strb	r1, [r3, r2]
 8001492:	e003      	b.n	800149c <Read_disks_connected+0x234>
	} else {
		disks[15].isConnected = 0;
 8001494:	4b4d      	ldr	r3, [pc, #308]	@ (80015cc <Read_disks_connected+0x364>)
 8001496:	223c      	movs	r2, #60	@ 0x3c
 8001498:	2100      	movs	r1, #0
 800149a:	5499      	strb	r1, [r3, r2]
	}

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 800149c:	4b46      	ldr	r3, [pc, #280]	@ (80015b8 <Read_disks_connected+0x350>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	18db      	adds	r3, r3, r3
 80014a2:	b299      	uxth	r1, r3
 80014a4:	4a4b      	ldr	r2, [pc, #300]	@ (80015d4 <Read_disks_connected+0x36c>)
 80014a6:	4846      	ldr	r0, [pc, #280]	@ (80015c0 <Read_disks_connected+0x358>)
 80014a8:	230a      	movs	r3, #10
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	f001 fde7 	bl	8003080 <HAL_I2C_Master_Transmit>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 80014b2:	4b44      	ldr	r3, [pc, #272]	@ (80015c4 <Read_disks_connected+0x35c>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	001a      	movs	r2, r3
 80014b8:	4b43      	ldr	r3, [pc, #268]	@ (80015c8 <Read_disks_connected+0x360>)
 80014ba:	0019      	movs	r1, r3
 80014bc:	2001      	movs	r0, #1
 80014be:	f000 f895 	bl	80015ec <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN B1
 80014c2:	4b41      	ldr	r3, [pc, #260]	@ (80015c8 <Read_disks_connected+0x360>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	001a      	movs	r2, r3
 80014c8:	2302      	movs	r3, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d104      	bne.n	80014d8 <Read_disks_connected+0x270>
	{
		disks[16].isConnected = 1;
 80014ce:	4b3f      	ldr	r3, [pc, #252]	@ (80015cc <Read_disks_connected+0x364>)
 80014d0:	2240      	movs	r2, #64	@ 0x40
 80014d2:	2101      	movs	r1, #1
 80014d4:	5499      	strb	r1, [r3, r2]
 80014d6:	e003      	b.n	80014e0 <Read_disks_connected+0x278>
	} else {
		disks[16].isConnected = 0;
 80014d8:	4b3c      	ldr	r3, [pc, #240]	@ (80015cc <Read_disks_connected+0x364>)
 80014da:	2240      	movs	r2, #64	@ 0x40
 80014dc:	2100      	movs	r1, #0
 80014de:	5499      	strb	r1, [r3, r2]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN B2
 80014e0:	4b39      	ldr	r3, [pc, #228]	@ (80015c8 <Read_disks_connected+0x360>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	001a      	movs	r2, r3
 80014e6:	2308      	movs	r3, #8
 80014e8:	4013      	ands	r3, r2
 80014ea:	d104      	bne.n	80014f6 <Read_disks_connected+0x28e>
	{
		disks[17].isConnected = 1;
 80014ec:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <Read_disks_connected+0x364>)
 80014ee:	2244      	movs	r2, #68	@ 0x44
 80014f0:	2101      	movs	r1, #1
 80014f2:	5499      	strb	r1, [r3, r2]
 80014f4:	e003      	b.n	80014fe <Read_disks_connected+0x296>
	} else {
		disks[17].isConnected = 0;
 80014f6:	4b35      	ldr	r3, [pc, #212]	@ (80015cc <Read_disks_connected+0x364>)
 80014f8:	2244      	movs	r2, #68	@ 0x44
 80014fa:	2100      	movs	r1, #0
 80014fc:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN B3
 80014fe:	4b32      	ldr	r3, [pc, #200]	@ (80015c8 <Read_disks_connected+0x360>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	001a      	movs	r2, r3
 8001504:	2320      	movs	r3, #32
 8001506:	4013      	ands	r3, r2
 8001508:	d104      	bne.n	8001514 <Read_disks_connected+0x2ac>
	{
		disks[18].isConnected = 1;
 800150a:	4b30      	ldr	r3, [pc, #192]	@ (80015cc <Read_disks_connected+0x364>)
 800150c:	2248      	movs	r2, #72	@ 0x48
 800150e:	2101      	movs	r1, #1
 8001510:	5499      	strb	r1, [r3, r2]
 8001512:	e003      	b.n	800151c <Read_disks_connected+0x2b4>
	} else {
		disks[18].isConnected = 0;
 8001514:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <Read_disks_connected+0x364>)
 8001516:	2248      	movs	r2, #72	@ 0x48
 8001518:	2100      	movs	r1, #0
 800151a:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN B4
 800151c:	4b2a      	ldr	r3, [pc, #168]	@ (80015c8 <Read_disks_connected+0x360>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b25b      	sxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	db04      	blt.n	8001530 <Read_disks_connected+0x2c8>
	{
		disks[19].isConnected = 1;
 8001526:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <Read_disks_connected+0x364>)
 8001528:	224c      	movs	r2, #76	@ 0x4c
 800152a:	2101      	movs	r1, #1
 800152c:	5499      	strb	r1, [r3, r2]
 800152e:	e003      	b.n	8001538 <Read_disks_connected+0x2d0>
	} else {
		disks[19].isConnected = 0;
 8001530:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <Read_disks_connected+0x364>)
 8001532:	224c      	movs	r2, #76	@ 0x4c
 8001534:	2100      	movs	r1, #0
 8001536:	5499      	strb	r1, [r3, r2]
	}
	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 8001538:	4b22      	ldr	r3, [pc, #136]	@ (80015c4 <Read_disks_connected+0x35c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	001a      	movs	r2, r3
 800153e:	4b22      	ldr	r3, [pc, #136]	@ (80015c8 <Read_disks_connected+0x360>)
 8001540:	0019      	movs	r1, r3
 8001542:	2000      	movs	r0, #0
 8001544:	f000 f852 	bl	80015ec <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN A1
 8001548:	4b1f      	ldr	r3, [pc, #124]	@ (80015c8 <Read_disks_connected+0x360>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	001a      	movs	r2, r3
 800154e:	2302      	movs	r3, #2
 8001550:	4013      	ands	r3, r2
 8001552:	d104      	bne.n	800155e <Read_disks_connected+0x2f6>
	{
		disks[20].isConnected = 1;
 8001554:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <Read_disks_connected+0x364>)
 8001556:	2250      	movs	r2, #80	@ 0x50
 8001558:	2101      	movs	r1, #1
 800155a:	5499      	strb	r1, [r3, r2]
 800155c:	e003      	b.n	8001566 <Read_disks_connected+0x2fe>
	} else {
		disks[20].isConnected = 0;
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <Read_disks_connected+0x364>)
 8001560:	2250      	movs	r2, #80	@ 0x50
 8001562:	2100      	movs	r1, #0
 8001564:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN A2
 8001566:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <Read_disks_connected+0x360>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	001a      	movs	r2, r3
 800156c:	2308      	movs	r3, #8
 800156e:	4013      	ands	r3, r2
 8001570:	d104      	bne.n	800157c <Read_disks_connected+0x314>
	{
		disks[21].isConnected = 1;
 8001572:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <Read_disks_connected+0x364>)
 8001574:	2254      	movs	r2, #84	@ 0x54
 8001576:	2101      	movs	r1, #1
 8001578:	5499      	strb	r1, [r3, r2]
 800157a:	e003      	b.n	8001584 <Read_disks_connected+0x31c>
	} else {
		disks[21].isConnected = 0;
 800157c:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <Read_disks_connected+0x364>)
 800157e:	2254      	movs	r2, #84	@ 0x54
 8001580:	2100      	movs	r1, #0
 8001582:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN A3
 8001584:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <Read_disks_connected+0x360>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	001a      	movs	r2, r3
 800158a:	2320      	movs	r3, #32
 800158c:	4013      	ands	r3, r2
 800158e:	d104      	bne.n	800159a <Read_disks_connected+0x332>
	{
		disks[22].isConnected = 1;
 8001590:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <Read_disks_connected+0x364>)
 8001592:	2258      	movs	r2, #88	@ 0x58
 8001594:	2101      	movs	r1, #1
 8001596:	5499      	strb	r1, [r3, r2]
 8001598:	e003      	b.n	80015a2 <Read_disks_connected+0x33a>
	} else {
		disks[22].isConnected = 0;
 800159a:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <Read_disks_connected+0x364>)
 800159c:	2258      	movs	r2, #88	@ 0x58
 800159e:	2100      	movs	r1, #0
 80015a0:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN A4
 80015a2:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <Read_disks_connected+0x360>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db15      	blt.n	80015d8 <Read_disks_connected+0x370>
	{
		disks[23].isConnected = 1;
 80015ac:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <Read_disks_connected+0x364>)
 80015ae:	225c      	movs	r2, #92	@ 0x5c
 80015b0:	2101      	movs	r1, #1
 80015b2:	5499      	strb	r1, [r3, r2]
	} else {
		disks[23].isConnected = 0;
	}
}
 80015b4:	e014      	b.n	80015e0 <Read_disks_connected+0x378>
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	2000004d 	.word	0x2000004d
 80015bc:	20000038 	.word	0x20000038
 80015c0:	2000008c 	.word	0x2000008c
 80015c4:	2000004c 	.word	0x2000004c
 80015c8:	20000288 	.word	0x20000288
 80015cc:	2000028c 	.word	0x2000028c
 80015d0:	2000003c 	.word	0x2000003c
 80015d4:	20000040 	.word	0x20000040
		disks[23].isConnected = 0;
 80015d8:	4b03      	ldr	r3, [pc, #12]	@ (80015e8 <Read_disks_connected+0x380>)
 80015da:	225c      	movs	r2, #92	@ 0x5c
 80015dc:	2100      	movs	r1, #0
 80015de:	5499      	strb	r1, [r3, r2]
}
 80015e0:	46c0      	nop			@ (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			@ (mov r8, r8)
 80015e8:	2000028c 	.word	0x2000028c

080015ec <Read_Register>:

void Read_Register(uint8_t register_pointer, uint8_t* receive_buffer, uint16_t adr_rep)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	6039      	str	r1, [r7, #0]
 80015f4:	0011      	movs	r1, r2
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	1c02      	adds	r2, r0, #0
 80015fa:	701a      	strb	r2, [r3, #0]
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	1c0a      	adds	r2, r1, #0
 8001600:	801a      	strh	r2, [r3, #0]
	//set pointer to register

	HAL_I2C_Master_Transmit(&hi2c2, (adr_rep << 1), &register_pointer, 1, 10);
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	18db      	adds	r3, r3, r3
 8001608:	b299      	uxth	r1, r3
 800160a:	1dfa      	adds	r2, r7, #7
 800160c:	480a      	ldr	r0, [pc, #40]	@ (8001638 <Read_Register+0x4c>)
 800160e:	230a      	movs	r3, #10
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2301      	movs	r3, #1
 8001614:	f001 fd34 	bl	8003080 <HAL_I2C_Master_Transmit>
	//receive data to receive_buffer
	HAL_I2C_Master_Receive(&hi2c2, (adr_rep << 1), receive_buffer, 1, 10);
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	18db      	adds	r3, r3, r3
 800161e:	b299      	uxth	r1, r3
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	4805      	ldr	r0, [pc, #20]	@ (8001638 <Read_Register+0x4c>)
 8001624:	230a      	movs	r3, #10
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2301      	movs	r3, #1
 800162a:	f001 fe53 	bl	80032d4 <HAL_I2C_Master_Receive>

}
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	b002      	add	sp, #8
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	2000008c 	.word	0x2000008c

0800163c <UpdateLEDStates>:

void UpdateLEDStates()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
	static uint8_t blinkState = 0; // Состояние мигания (0 или 1)
	blinkState = !blinkState;     // �?нвертируем состояние каждые 125 мс (4 Гц)
 8001642:	4b9c      	ldr	r3, [pc, #624]	@ (80018b4 <UpdateLEDStates+0x278>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	425a      	negs	r2, r3
 8001648:	4153      	adcs	r3, r2
 800164a:	b2db      	uxtb	r3, r3
 800164c:	001a      	movs	r2, r3
 800164e:	4b99      	ldr	r3, [pc, #612]	@ (80018b4 <UpdateLEDStates+0x278>)
 8001650:	701a      	strb	r2, [r3, #0]

	// Очищаем буферы каналов


	// Обновляем состояние светодиодов для каждого диска
	for (int i = 0; i < MAX_DISKS; ++i) {
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	e224      	b.n	8001aa2 <UpdateLEDStates+0x466>
		if (disks[i].isConnected) {
 8001658:	4b97      	ldr	r3, [pc, #604]	@ (80018b8 <UpdateLEDStates+0x27c>)
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	5cd3      	ldrb	r3, [r2, r3]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d100      	bne.n	8001666 <UpdateLEDStates+0x2a>
 8001664:	e21a      	b.n	8001a9c <UpdateLEDStates+0x460>
			// Определяем, какой канал использовать
			uint8_t *channel;
			uint8_t greenBit;
			uint8_t redBit;

			if (i < 8) {
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b07      	cmp	r3, #7
 800166a:	dc4e      	bgt.n	800170a <UpdateLEDStates+0xce>
				channel = channel_one;
 800166c:	4b93      	ldr	r3, [pc, #588]	@ (80018bc <UpdateLEDStates+0x280>)
 800166e:	60bb      	str	r3, [r7, #8]
				if (i < 4) {
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b03      	cmp	r3, #3
 8001674:	dc24      	bgt.n	80016c0 <UpdateLEDStates+0x84>
					// Диски 0-3: первый байт
					greenBit = (i == 0) ? 6 : (i == 1) ? 4 : (i == 2) ? 2 : 1;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00b      	beq.n	8001694 <UpdateLEDStates+0x58>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d006      	beq.n	8001690 <UpdateLEDStates+0x54>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d101      	bne.n	800168c <UpdateLEDStates+0x50>
 8001688:	2302      	movs	r3, #2
 800168a:	e004      	b.n	8001696 <UpdateLEDStates+0x5a>
 800168c:	2301      	movs	r3, #1
 800168e:	e002      	b.n	8001696 <UpdateLEDStates+0x5a>
 8001690:	2304      	movs	r3, #4
 8001692:	e000      	b.n	8001696 <UpdateLEDStates+0x5a>
 8001694:	2306      	movs	r3, #6
 8001696:	1dfa      	adds	r2, r7, #7
 8001698:	7013      	strb	r3, [r2, #0]
					redBit = (i == 0) ? 7 : (i == 1) ? 5 : (i == 2) ? 3 : 0;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00b      	beq.n	80016b8 <UpdateLEDStates+0x7c>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d006      	beq.n	80016b4 <UpdateLEDStates+0x78>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d101      	bne.n	80016b0 <UpdateLEDStates+0x74>
 80016ac:	2303      	movs	r3, #3
 80016ae:	e004      	b.n	80016ba <UpdateLEDStates+0x7e>
 80016b0:	2300      	movs	r3, #0
 80016b2:	e002      	b.n	80016ba <UpdateLEDStates+0x7e>
 80016b4:	2305      	movs	r3, #5
 80016b6:	e000      	b.n	80016ba <UpdateLEDStates+0x7e>
 80016b8:	2307      	movs	r3, #7
 80016ba:	1dba      	adds	r2, r7, #6
 80016bc:	7013      	strb	r3, [r2, #0]
 80016be:	e0c4      	b.n	800184a <UpdateLEDStates+0x20e>
				} else {
					// Диски 4-7: второй байт
					greenBit = (i == 4) ? 7 : (i == 5) ? 4 : (i == 6) ? 3 : 1;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d00b      	beq.n	80016de <UpdateLEDStates+0xa2>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	d006      	beq.n	80016da <UpdateLEDStates+0x9e>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b06      	cmp	r3, #6
 80016d0:	d101      	bne.n	80016d6 <UpdateLEDStates+0x9a>
 80016d2:	2303      	movs	r3, #3
 80016d4:	e004      	b.n	80016e0 <UpdateLEDStates+0xa4>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e002      	b.n	80016e0 <UpdateLEDStates+0xa4>
 80016da:	2304      	movs	r3, #4
 80016dc:	e000      	b.n	80016e0 <UpdateLEDStates+0xa4>
 80016de:	2307      	movs	r3, #7
 80016e0:	1dfa      	adds	r2, r7, #7
 80016e2:	7013      	strb	r3, [r2, #0]
					redBit = (i == 4) ? 6 : (i == 5) ? 5 : (i == 6) ? 2 : 0;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d00b      	beq.n	8001702 <UpdateLEDStates+0xc6>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d006      	beq.n	80016fe <UpdateLEDStates+0xc2>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d101      	bne.n	80016fa <UpdateLEDStates+0xbe>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e004      	b.n	8001704 <UpdateLEDStates+0xc8>
 80016fa:	2300      	movs	r3, #0
 80016fc:	e002      	b.n	8001704 <UpdateLEDStates+0xc8>
 80016fe:	2305      	movs	r3, #5
 8001700:	e000      	b.n	8001704 <UpdateLEDStates+0xc8>
 8001702:	2306      	movs	r3, #6
 8001704:	1dba      	adds	r2, r7, #6
 8001706:	7013      	strb	r3, [r2, #0]
 8001708:	e09f      	b.n	800184a <UpdateLEDStates+0x20e>
				}
			} else if (i < 16) {
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	dc4e      	bgt.n	80017ae <UpdateLEDStates+0x172>
				channel = channel_two;
 8001710:	4b6b      	ldr	r3, [pc, #428]	@ (80018c0 <UpdateLEDStates+0x284>)
 8001712:	60bb      	str	r3, [r7, #8]
				if (i < 12) {
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b0b      	cmp	r3, #11
 8001718:	dc24      	bgt.n	8001764 <UpdateLEDStates+0x128>
					// Диски 8-11: первый байт
					greenBit = (i == 8) ? 6 : (i == 9) ? 5 : (i == 10) ? 2 : 1;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2b08      	cmp	r3, #8
 800171e:	d00b      	beq.n	8001738 <UpdateLEDStates+0xfc>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b09      	cmp	r3, #9
 8001724:	d006      	beq.n	8001734 <UpdateLEDStates+0xf8>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b0a      	cmp	r3, #10
 800172a:	d101      	bne.n	8001730 <UpdateLEDStates+0xf4>
 800172c:	2302      	movs	r3, #2
 800172e:	e004      	b.n	800173a <UpdateLEDStates+0xfe>
 8001730:	2301      	movs	r3, #1
 8001732:	e002      	b.n	800173a <UpdateLEDStates+0xfe>
 8001734:	2305      	movs	r3, #5
 8001736:	e000      	b.n	800173a <UpdateLEDStates+0xfe>
 8001738:	2306      	movs	r3, #6
 800173a:	1dfa      	adds	r2, r7, #7
 800173c:	7013      	strb	r3, [r2, #0]
					redBit = (i == 8) ? 7 : (i == 9) ? 4 : (i == 10) ? 3 : 0;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2b08      	cmp	r3, #8
 8001742:	d00b      	beq.n	800175c <UpdateLEDStates+0x120>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b09      	cmp	r3, #9
 8001748:	d006      	beq.n	8001758 <UpdateLEDStates+0x11c>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b0a      	cmp	r3, #10
 800174e:	d101      	bne.n	8001754 <UpdateLEDStates+0x118>
 8001750:	2303      	movs	r3, #3
 8001752:	e004      	b.n	800175e <UpdateLEDStates+0x122>
 8001754:	2300      	movs	r3, #0
 8001756:	e002      	b.n	800175e <UpdateLEDStates+0x122>
 8001758:	2304      	movs	r3, #4
 800175a:	e000      	b.n	800175e <UpdateLEDStates+0x122>
 800175c:	2307      	movs	r3, #7
 800175e:	1dba      	adds	r2, r7, #6
 8001760:	7013      	strb	r3, [r2, #0]
 8001762:	e072      	b.n	800184a <UpdateLEDStates+0x20e>
				} else {
					// Диски 12-15: второй байт
					greenBit = (i == 12) ? 6 : (i == 13) ? 4 : (i == 14) ? 2 : 1;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b0c      	cmp	r3, #12
 8001768:	d00b      	beq.n	8001782 <UpdateLEDStates+0x146>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2b0d      	cmp	r3, #13
 800176e:	d006      	beq.n	800177e <UpdateLEDStates+0x142>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b0e      	cmp	r3, #14
 8001774:	d101      	bne.n	800177a <UpdateLEDStates+0x13e>
 8001776:	2302      	movs	r3, #2
 8001778:	e004      	b.n	8001784 <UpdateLEDStates+0x148>
 800177a:	2301      	movs	r3, #1
 800177c:	e002      	b.n	8001784 <UpdateLEDStates+0x148>
 800177e:	2304      	movs	r3, #4
 8001780:	e000      	b.n	8001784 <UpdateLEDStates+0x148>
 8001782:	2306      	movs	r3, #6
 8001784:	1dfa      	adds	r2, r7, #7
 8001786:	7013      	strb	r3, [r2, #0]
					redBit = (i == 12) ? 7 : (i == 13) ? 5 : (i == 14) ? 3 : 0;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b0c      	cmp	r3, #12
 800178c:	d00b      	beq.n	80017a6 <UpdateLEDStates+0x16a>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b0d      	cmp	r3, #13
 8001792:	d006      	beq.n	80017a2 <UpdateLEDStates+0x166>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b0e      	cmp	r3, #14
 8001798:	d101      	bne.n	800179e <UpdateLEDStates+0x162>
 800179a:	2303      	movs	r3, #3
 800179c:	e004      	b.n	80017a8 <UpdateLEDStates+0x16c>
 800179e:	2300      	movs	r3, #0
 80017a0:	e002      	b.n	80017a8 <UpdateLEDStates+0x16c>
 80017a2:	2305      	movs	r3, #5
 80017a4:	e000      	b.n	80017a8 <UpdateLEDStates+0x16c>
 80017a6:	2307      	movs	r3, #7
 80017a8:	1dba      	adds	r2, r7, #6
 80017aa:	7013      	strb	r3, [r2, #0]
 80017ac:	e04d      	b.n	800184a <UpdateLEDStates+0x20e>
				}
			} else {
				channel = channel_three;
 80017ae:	4b45      	ldr	r3, [pc, #276]	@ (80018c4 <UpdateLEDStates+0x288>)
 80017b0:	60bb      	str	r3, [r7, #8]
				if (i < 20) {
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b13      	cmp	r3, #19
 80017b6:	dc24      	bgt.n	8001802 <UpdateLEDStates+0x1c6>
					// Диски 16-19: первый байт
					greenBit = (i == 16) ? 7 : (i == 17) ? 5 : (i == 18) ? 3 : 1;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b10      	cmp	r3, #16
 80017bc:	d00b      	beq.n	80017d6 <UpdateLEDStates+0x19a>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2b11      	cmp	r3, #17
 80017c2:	d006      	beq.n	80017d2 <UpdateLEDStates+0x196>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b12      	cmp	r3, #18
 80017c8:	d101      	bne.n	80017ce <UpdateLEDStates+0x192>
 80017ca:	2303      	movs	r3, #3
 80017cc:	e004      	b.n	80017d8 <UpdateLEDStates+0x19c>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e002      	b.n	80017d8 <UpdateLEDStates+0x19c>
 80017d2:	2305      	movs	r3, #5
 80017d4:	e000      	b.n	80017d8 <UpdateLEDStates+0x19c>
 80017d6:	2307      	movs	r3, #7
 80017d8:	1dfa      	adds	r2, r7, #7
 80017da:	7013      	strb	r3, [r2, #0]
					redBit = (i == 16) ? 6 : (i == 17) ? 4 : (i == 18) ? 2 : 0;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b10      	cmp	r3, #16
 80017e0:	d00b      	beq.n	80017fa <UpdateLEDStates+0x1be>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2b11      	cmp	r3, #17
 80017e6:	d006      	beq.n	80017f6 <UpdateLEDStates+0x1ba>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b12      	cmp	r3, #18
 80017ec:	d101      	bne.n	80017f2 <UpdateLEDStates+0x1b6>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e004      	b.n	80017fc <UpdateLEDStates+0x1c0>
 80017f2:	2300      	movs	r3, #0
 80017f4:	e002      	b.n	80017fc <UpdateLEDStates+0x1c0>
 80017f6:	2304      	movs	r3, #4
 80017f8:	e000      	b.n	80017fc <UpdateLEDStates+0x1c0>
 80017fa:	2306      	movs	r3, #6
 80017fc:	1dba      	adds	r2, r7, #6
 80017fe:	7013      	strb	r3, [r2, #0]
 8001800:	e023      	b.n	800184a <UpdateLEDStates+0x20e>
				} else {
					// Диски 20-23: второй байт
					greenBit = (i == 20) ? 6 : (i == 21) ? 4 : (i == 22) ? 2 : 1;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2b14      	cmp	r3, #20
 8001806:	d00b      	beq.n	8001820 <UpdateLEDStates+0x1e4>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b15      	cmp	r3, #21
 800180c:	d006      	beq.n	800181c <UpdateLEDStates+0x1e0>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2b16      	cmp	r3, #22
 8001812:	d101      	bne.n	8001818 <UpdateLEDStates+0x1dc>
 8001814:	2302      	movs	r3, #2
 8001816:	e004      	b.n	8001822 <UpdateLEDStates+0x1e6>
 8001818:	2301      	movs	r3, #1
 800181a:	e002      	b.n	8001822 <UpdateLEDStates+0x1e6>
 800181c:	2304      	movs	r3, #4
 800181e:	e000      	b.n	8001822 <UpdateLEDStates+0x1e6>
 8001820:	2306      	movs	r3, #6
 8001822:	1dfa      	adds	r2, r7, #7
 8001824:	7013      	strb	r3, [r2, #0]
					redBit = (i == 20) ? 7 : (i == 21) ? 5 : (i == 22) ? 3 : 0;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b14      	cmp	r3, #20
 800182a:	d00b      	beq.n	8001844 <UpdateLEDStates+0x208>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b15      	cmp	r3, #21
 8001830:	d006      	beq.n	8001840 <UpdateLEDStates+0x204>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2b16      	cmp	r3, #22
 8001836:	d101      	bne.n	800183c <UpdateLEDStates+0x200>
 8001838:	2303      	movs	r3, #3
 800183a:	e004      	b.n	8001846 <UpdateLEDStates+0x20a>
 800183c:	2300      	movs	r3, #0
 800183e:	e002      	b.n	8001846 <UpdateLEDStates+0x20a>
 8001840:	2305      	movs	r3, #5
 8001842:	e000      	b.n	8001846 <UpdateLEDStates+0x20a>
 8001844:	2307      	movs	r3, #7
 8001846:	1dba      	adds	r2, r7, #6
 8001848:	7013      	strb	r3, [r2, #0]
				}
			}
			uint8_t byteIndex = (i < 4 || (i >= 8 && i < 12) || (i >= 16 && i < 20)) ? 2 : 1;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b03      	cmp	r3, #3
 800184e:	dd0b      	ble.n	8001868 <UpdateLEDStates+0x22c>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b07      	cmp	r3, #7
 8001854:	dd02      	ble.n	800185c <UpdateLEDStates+0x220>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2b0b      	cmp	r3, #11
 800185a:	dd05      	ble.n	8001868 <UpdateLEDStates+0x22c>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b0f      	cmp	r3, #15
 8001860:	dd04      	ble.n	800186c <UpdateLEDStates+0x230>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2b13      	cmp	r3, #19
 8001866:	dc01      	bgt.n	800186c <UpdateLEDStates+0x230>
 8001868:	2202      	movs	r2, #2
 800186a:	e000      	b.n	800186e <UpdateLEDStates+0x232>
 800186c:	2201      	movs	r2, #1
 800186e:	1d7b      	adds	r3, r7, #5
 8001870:	701a      	strb	r2, [r3, #0]
			// Управление светодиодами
			if (disks[i].error) {
 8001872:	4a11      	ldr	r2, [pc, #68]	@ (80018b8 <UpdateLEDStates+0x27c>)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	18d3      	adds	r3, r2, r3
 800187a:	3302      	adds	r3, #2
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d022      	beq.n	80018c8 <UpdateLEDStates+0x28c>
				// Ошибка: красный светодиод горит постоянно
				channel[byteIndex] &= ~(1 << (redBit % 8)); // Включаем красный светодиод
 8001882:	1d7b      	adds	r3, r7, #5
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	18d3      	adds	r3, r2, r3
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b25b      	sxtb	r3, r3
 800188e:	1dba      	adds	r2, r7, #6
 8001890:	7812      	ldrb	r2, [r2, #0]
 8001892:	2107      	movs	r1, #7
 8001894:	400a      	ands	r2, r1
 8001896:	2101      	movs	r1, #1
 8001898:	4091      	lsls	r1, r2
 800189a:	000a      	movs	r2, r1
 800189c:	b252      	sxtb	r2, r2
 800189e:	43d2      	mvns	r2, r2
 80018a0:	b252      	sxtb	r2, r2
 80018a2:	4013      	ands	r3, r2
 80018a4:	b259      	sxtb	r1, r3
 80018a6:	1d7b      	adds	r3, r7, #5
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	18d3      	adds	r3, r2, r3
 80018ae:	b2ca      	uxtb	r2, r1
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	e0f3      	b.n	8001a9c <UpdateLEDStates+0x460>
 80018b4:	200003c4 	.word	0x200003c4
 80018b8:	2000028c 	.word	0x2000028c
 80018bc:	20000054 	.word	0x20000054
 80018c0:	20000058 	.word	0x20000058
 80018c4:	2000005c 	.word	0x2000005c
			} else if (disks[i].locate) {
 80018c8:	4a7b      	ldr	r2, [pc, #492]	@ (8001ab8 <UpdateLEDStates+0x47c>)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	18d3      	adds	r3, r2, r3
 80018d0:	3303      	adds	r3, #3
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d061      	beq.n	800199c <UpdateLEDStates+0x360>
				// Локация: зеленый и красный светодиоды мигают
				if (blinkState) {
 80018d8:	4b78      	ldr	r3, [pc, #480]	@ (8001abc <UpdateLEDStates+0x480>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d030      	beq.n	8001942 <UpdateLEDStates+0x306>
					channel[byteIndex] &= ~(1 << (greenBit % 8)); // Включаем зеленый светодиод
 80018e0:	1d7b      	adds	r3, r7, #5
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	18d3      	adds	r3, r2, r3
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	1dfa      	adds	r2, r7, #7
 80018ee:	7812      	ldrb	r2, [r2, #0]
 80018f0:	2107      	movs	r1, #7
 80018f2:	400a      	ands	r2, r1
 80018f4:	2101      	movs	r1, #1
 80018f6:	4091      	lsls	r1, r2
 80018f8:	000a      	movs	r2, r1
 80018fa:	b252      	sxtb	r2, r2
 80018fc:	43d2      	mvns	r2, r2
 80018fe:	b252      	sxtb	r2, r2
 8001900:	4013      	ands	r3, r2
 8001902:	b259      	sxtb	r1, r3
 8001904:	1d7b      	adds	r3, r7, #5
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	18d3      	adds	r3, r2, r3
 800190c:	b2ca      	uxtb	r2, r1
 800190e:	701a      	strb	r2, [r3, #0]
					channel[byteIndex] &= ~(1 << (redBit % 8)); // Включаем красный светодиод
 8001910:	1d7b      	adds	r3, r7, #5
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	18d3      	adds	r3, r2, r3
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b25b      	sxtb	r3, r3
 800191c:	1dba      	adds	r2, r7, #6
 800191e:	7812      	ldrb	r2, [r2, #0]
 8001920:	2107      	movs	r1, #7
 8001922:	400a      	ands	r2, r1
 8001924:	2101      	movs	r1, #1
 8001926:	4091      	lsls	r1, r2
 8001928:	000a      	movs	r2, r1
 800192a:	b252      	sxtb	r2, r2
 800192c:	43d2      	mvns	r2, r2
 800192e:	b252      	sxtb	r2, r2
 8001930:	4013      	ands	r3, r2
 8001932:	b259      	sxtb	r1, r3
 8001934:	1d7b      	adds	r3, r7, #5
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	18d3      	adds	r3, r2, r3
 800193c:	b2ca      	uxtb	r2, r1
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e0ac      	b.n	8001a9c <UpdateLEDStates+0x460>
				} else {
					channel[byteIndex] |= (1 << (greenBit % 8));  // Выключаем зеленый светодиод
 8001942:	1d7b      	adds	r3, r7, #5
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	18d3      	adds	r3, r2, r3
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b25a      	sxtb	r2, r3
 800194e:	1dfb      	adds	r3, r7, #7
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2107      	movs	r1, #7
 8001954:	400b      	ands	r3, r1
 8001956:	2101      	movs	r1, #1
 8001958:	4099      	lsls	r1, r3
 800195a:	000b      	movs	r3, r1
 800195c:	b25b      	sxtb	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b259      	sxtb	r1, r3
 8001962:	1d7b      	adds	r3, r7, #5
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	18d3      	adds	r3, r2, r3
 800196a:	b2ca      	uxtb	r2, r1
 800196c:	701a      	strb	r2, [r3, #0]
					channel[byteIndex] |= (1 << (redBit % 8));  // Выключаем красный светодиод
 800196e:	1d7b      	adds	r3, r7, #5
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	18d3      	adds	r3, r2, r3
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b25a      	sxtb	r2, r3
 800197a:	1dbb      	adds	r3, r7, #6
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2107      	movs	r1, #7
 8001980:	400b      	ands	r3, r1
 8001982:	2101      	movs	r1, #1
 8001984:	4099      	lsls	r1, r3
 8001986:	000b      	movs	r3, r1
 8001988:	b25b      	sxtb	r3, r3
 800198a:	4313      	orrs	r3, r2
 800198c:	b259      	sxtb	r1, r3
 800198e:	1d7b      	adds	r3, r7, #5
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	18d3      	adds	r3, r2, r3
 8001996:	b2ca      	uxtb	r2, r1
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	e07f      	b.n	8001a9c <UpdateLEDStates+0x460>
				}
			} else if (disks[i].activity) {
 800199c:	4a46      	ldr	r2, [pc, #280]	@ (8001ab8 <UpdateLEDStates+0x47c>)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	18d3      	adds	r3, r2, r3
 80019a4:	3301      	adds	r3, #1
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d033      	beq.n	8001a14 <UpdateLEDStates+0x3d8>
				// Активность: зеленый светодиод мигает
				if (blinkState) {
 80019ac:	4b43      	ldr	r3, [pc, #268]	@ (8001abc <UpdateLEDStates+0x480>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d018      	beq.n	80019e6 <UpdateLEDStates+0x3aa>
					channel[byteIndex] &= ~(1 << (greenBit % 8)); // Включаем зеленый светодиод
 80019b4:	1d7b      	adds	r3, r7, #5
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	18d3      	adds	r3, r2, r3
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b25b      	sxtb	r3, r3
 80019c0:	1dfa      	adds	r2, r7, #7
 80019c2:	7812      	ldrb	r2, [r2, #0]
 80019c4:	2107      	movs	r1, #7
 80019c6:	400a      	ands	r2, r1
 80019c8:	2101      	movs	r1, #1
 80019ca:	4091      	lsls	r1, r2
 80019cc:	000a      	movs	r2, r1
 80019ce:	b252      	sxtb	r2, r2
 80019d0:	43d2      	mvns	r2, r2
 80019d2:	b252      	sxtb	r2, r2
 80019d4:	4013      	ands	r3, r2
 80019d6:	b259      	sxtb	r1, r3
 80019d8:	1d7b      	adds	r3, r7, #5
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	18d3      	adds	r3, r2, r3
 80019e0:	b2ca      	uxtb	r2, r1
 80019e2:	701a      	strb	r2, [r3, #0]
 80019e4:	e05a      	b.n	8001a9c <UpdateLEDStates+0x460>
				} else {
					channel[byteIndex] |= (1 << (greenBit % 8));  // Выключаем зеленый светодиод
 80019e6:	1d7b      	adds	r3, r7, #5
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	18d3      	adds	r3, r2, r3
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b25a      	sxtb	r2, r3
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2107      	movs	r1, #7
 80019f8:	400b      	ands	r3, r1
 80019fa:	2101      	movs	r1, #1
 80019fc:	4099      	lsls	r1, r3
 80019fe:	000b      	movs	r3, r1
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	4313      	orrs	r3, r2
 8001a04:	b259      	sxtb	r1, r3
 8001a06:	1d7b      	adds	r3, r7, #5
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	18d3      	adds	r3, r2, r3
 8001a0e:	b2ca      	uxtb	r2, r1
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	e043      	b.n	8001a9c <UpdateLEDStates+0x460>
				}
			} else if (disks[i].error == 0 && disks[i].locate == 0 && disks[i].activity == 0)
 8001a14:	4a28      	ldr	r2, [pc, #160]	@ (8001ab8 <UpdateLEDStates+0x47c>)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	18d3      	adds	r3, r2, r3
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d13b      	bne.n	8001a9c <UpdateLEDStates+0x460>
 8001a24:	4a24      	ldr	r2, [pc, #144]	@ (8001ab8 <UpdateLEDStates+0x47c>)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	18d3      	adds	r3, r2, r3
 8001a2c:	3303      	adds	r3, #3
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d133      	bne.n	8001a9c <UpdateLEDStates+0x460>
 8001a34:	4a20      	ldr	r2, [pc, #128]	@ (8001ab8 <UpdateLEDStates+0x47c>)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	18d3      	adds	r3, r2, r3
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d12b      	bne.n	8001a9c <UpdateLEDStates+0x460>
			{
				channel[byteIndex] |= (1 << (greenBit % 8));  // Выключаем зеленый светодиод
 8001a44:	1d7b      	adds	r3, r7, #5
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	18d3      	adds	r3, r2, r3
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b25a      	sxtb	r2, r3
 8001a50:	1dfb      	adds	r3, r7, #7
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2107      	movs	r1, #7
 8001a56:	400b      	ands	r3, r1
 8001a58:	2101      	movs	r1, #1
 8001a5a:	4099      	lsls	r1, r3
 8001a5c:	000b      	movs	r3, r1
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b259      	sxtb	r1, r3
 8001a64:	1d7b      	adds	r3, r7, #5
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	18d3      	adds	r3, r2, r3
 8001a6c:	b2ca      	uxtb	r2, r1
 8001a6e:	701a      	strb	r2, [r3, #0]
				channel[byteIndex] |= (1 << (redBit % 8));  // Выключаем красный светодиод
 8001a70:	1d7b      	adds	r3, r7, #5
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	18d3      	adds	r3, r2, r3
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b25a      	sxtb	r2, r3
 8001a7c:	1dbb      	adds	r3, r7, #6
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2107      	movs	r1, #7
 8001a82:	400b      	ands	r3, r1
 8001a84:	2101      	movs	r1, #1
 8001a86:	4099      	lsls	r1, r3
 8001a88:	000b      	movs	r3, r1
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	b259      	sxtb	r1, r3
 8001a90:	1d7b      	adds	r3, r7, #5
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	18d3      	adds	r3, r2, r3
 8001a98:	b2ca      	uxtb	r2, r1
 8001a9a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_DISKS; ++i) {
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b17      	cmp	r3, #23
 8001aa6:	dc00      	bgt.n	8001aaa <UpdateLEDStates+0x46e>
 8001aa8:	e5d6      	b.n	8001658 <UpdateLEDStates+0x1c>
			}
		}
	}

	// Обновляем светодиоды на расширителе
	Set_Led();
 8001aaa:	f7ff fa87 	bl	8000fbc <Set_Led>
}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b004      	add	sp, #16
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	2000028c 	.word	0x2000028c
 8001abc:	200003c4 	.word	0x200003c4

08001ac0 <InitializeDiskPins>:

void InitializeDiskPins()

{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	// Диск 0
	diskPins[0].activPort = F_DRIVE1_ACTIVITY_GPIO_Port;
 8001ac4:	4b5c      	ldr	r3, [pc, #368]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001ac6:	4a5d      	ldr	r2, [pc, #372]	@ (8001c3c <InitializeDiskPins+0x17c>)
 8001ac8:	601a      	str	r2, [r3, #0]
	diskPins[0].activPin = F_DRIVE1_ACTIVITY_Pin;
 8001aca:	4b5b      	ldr	r3, [pc, #364]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001acc:	2240      	movs	r2, #64	@ 0x40
 8001ace:	809a      	strh	r2, [r3, #4]
	// Диск 1
	diskPins[1].activPort = F_DRIVE2_ACTIVITY_GPIO_Port;
 8001ad0:	4b59      	ldr	r3, [pc, #356]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001ad2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c3c <InitializeDiskPins+0x17c>)
 8001ad4:	609a      	str	r2, [r3, #8]
	diskPins[1].activPin = F_DRIVE2_ACTIVITY_Pin;
 8001ad6:	4b58      	ldr	r3, [pc, #352]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001ad8:	2220      	movs	r2, #32
 8001ada:	819a      	strh	r2, [r3, #12]
	// Диск 2
	diskPins[2].activPort = F_DRIVE3_ACTIVITY_GPIO_Port;
 8001adc:	4b56      	ldr	r3, [pc, #344]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001ade:	4a57      	ldr	r2, [pc, #348]	@ (8001c3c <InitializeDiskPins+0x17c>)
 8001ae0:	611a      	str	r2, [r3, #16]
	diskPins[2].activPin = F_DRIVE3_ACTIVITY_Pin;
 8001ae2:	4b55      	ldr	r3, [pc, #340]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001ae4:	2210      	movs	r2, #16
 8001ae6:	829a      	strh	r2, [r3, #20]
	// �? так далее для остальных дисков...
	diskPins[3].activPort = F_DRIVE4_ACTIVITY_GPIO_Port;
 8001ae8:	4b53      	ldr	r3, [pc, #332]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001aea:	4a54      	ldr	r2, [pc, #336]	@ (8001c3c <InitializeDiskPins+0x17c>)
 8001aec:	619a      	str	r2, [r3, #24]
	diskPins[3].activPin = F_DRIVE4_ACTIVITY_Pin;
 8001aee:	4b52      	ldr	r3, [pc, #328]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001af0:	2208      	movs	r2, #8
 8001af2:	839a      	strh	r2, [r3, #28]
	diskPins[4].activPort = E_DRIVE1_ACTIVITY_GPIO_Port;
 8001af4:	4b50      	ldr	r3, [pc, #320]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001af6:	4a52      	ldr	r2, [pc, #328]	@ (8001c40 <InitializeDiskPins+0x180>)
 8001af8:	621a      	str	r2, [r3, #32]
	diskPins[4].activPin = E_DRIVE1_ACTIVITY_Pin;
 8001afa:	4b4f      	ldr	r3, [pc, #316]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001afc:	2280      	movs	r2, #128	@ 0x80
 8001afe:	00d2      	lsls	r2, r2, #3
 8001b00:	849a      	strh	r2, [r3, #36]	@ 0x24
	diskPins[5].activPort = E_DRIVE2_ACTIVITY_GPIO_Port;
 8001b02:	4b4d      	ldr	r3, [pc, #308]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b04:	4a4d      	ldr	r2, [pc, #308]	@ (8001c3c <InitializeDiskPins+0x17c>)
 8001b06:	629a      	str	r2, [r3, #40]	@ 0x28
	diskPins[5].activPin = E_DRIVE2_ACTIVITY_Pin;
 8001b08:	4b4b      	ldr	r3, [pc, #300]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b0a:	2280      	movs	r2, #128	@ 0x80
 8001b0c:	0092      	lsls	r2, r2, #2
 8001b0e:	859a      	strh	r2, [r3, #44]	@ 0x2c
	diskPins[6].activPort = E_DRIVE3_ACTIVITY_GPIO_Port;
 8001b10:	4b49      	ldr	r3, [pc, #292]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b12:	4a4a      	ldr	r2, [pc, #296]	@ (8001c3c <InitializeDiskPins+0x17c>)
 8001b14:	631a      	str	r2, [r3, #48]	@ 0x30
	diskPins[6].activPin = E_DRIVE3_ACTIVITY_Pin;
 8001b16:	4b48      	ldr	r3, [pc, #288]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b18:	2280      	movs	r2, #128	@ 0x80
 8001b1a:	0052      	lsls	r2, r2, #1
 8001b1c:	869a      	strh	r2, [r3, #52]	@ 0x34
	diskPins[7].activPort = E_DRIVE4_ACTIVITY_GPIO_Port;
 8001b1e:	4b46      	ldr	r3, [pc, #280]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b20:	4a46      	ldr	r2, [pc, #280]	@ (8001c3c <InitializeDiskPins+0x17c>)
 8001b22:	639a      	str	r2, [r3, #56]	@ 0x38
	diskPins[7].activPin = E_DRIVE4_ACTIVITY_Pin;
 8001b24:	4b44      	ldr	r3, [pc, #272]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b26:	2280      	movs	r2, #128	@ 0x80
 8001b28:	879a      	strh	r2, [r3, #60]	@ 0x3c
	diskPins[8].activPort = D_DRIVE1_ACTIVITY_GPIO_Port;
 8001b2a:	4b43      	ldr	r3, [pc, #268]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b2c:	22a0      	movs	r2, #160	@ 0xa0
 8001b2e:	05d2      	lsls	r2, r2, #23
 8001b30:	641a      	str	r2, [r3, #64]	@ 0x40
	diskPins[8].activPin = D_DRIVE1_ACTIVITY_Pin;
 8001b32:	4b41      	ldr	r3, [pc, #260]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b34:	2244      	movs	r2, #68	@ 0x44
 8001b36:	2180      	movs	r1, #128	@ 0x80
 8001b38:	00c9      	lsls	r1, r1, #3
 8001b3a:	5299      	strh	r1, [r3, r2]
	diskPins[9].activPort = D_DRIVE2_ACTIVITY_GPIO_Port;
 8001b3c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b3e:	22a0      	movs	r2, #160	@ 0xa0
 8001b40:	05d2      	lsls	r2, r2, #23
 8001b42:	649a      	str	r2, [r3, #72]	@ 0x48
	diskPins[9].activPin = D_DRIVE2_ACTIVITY_Pin;
 8001b44:	4b3c      	ldr	r3, [pc, #240]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b46:	224c      	movs	r2, #76	@ 0x4c
 8001b48:	2180      	movs	r1, #128	@ 0x80
 8001b4a:	0109      	lsls	r1, r1, #4
 8001b4c:	5299      	strh	r1, [r3, r2]
	diskPins[10].activPort = D_DRIVE3_ACTIVITY_GPIO_Port;
 8001b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b50:	22a0      	movs	r2, #160	@ 0xa0
 8001b52:	05d2      	lsls	r2, r2, #23
 8001b54:	651a      	str	r2, [r3, #80]	@ 0x50
	diskPins[10].activPin = D_DRIVE3_ACTIVITY_Pin;
 8001b56:	4b38      	ldr	r3, [pc, #224]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b58:	2254      	movs	r2, #84	@ 0x54
 8001b5a:	2180      	movs	r1, #128	@ 0x80
 8001b5c:	0149      	lsls	r1, r1, #5
 8001b5e:	5299      	strh	r1, [r3, r2]
	diskPins[11].activPort = D_DRIVE4_ACTIVITY_GPIO_Port;
 8001b60:	4b35      	ldr	r3, [pc, #212]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b62:	4a37      	ldr	r2, [pc, #220]	@ (8001c40 <InitializeDiskPins+0x180>)
 8001b64:	659a      	str	r2, [r3, #88]	@ 0x58
	diskPins[11].activPin = D_DRIVE4_ACTIVITY_Pin;
 8001b66:	4b34      	ldr	r3, [pc, #208]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b68:	225c      	movs	r2, #92	@ 0x5c
 8001b6a:	4936      	ldr	r1, [pc, #216]	@ (8001c44 <InitializeDiskPins+0x184>)
 8001b6c:	5299      	strh	r1, [r3, r2]
	diskPins[12].activPort = C_DRIVE1_ACTIVITY_GPIO_Port;
 8001b6e:	4b32      	ldr	r3, [pc, #200]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b70:	4a33      	ldr	r2, [pc, #204]	@ (8001c40 <InitializeDiskPins+0x180>)
 8001b72:	661a      	str	r2, [r3, #96]	@ 0x60
	diskPins[12].activPin = C_DRIVE1_ACTIVITY_Pin;
 8001b74:	4b30      	ldr	r3, [pc, #192]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b76:	2264      	movs	r2, #100	@ 0x64
 8001b78:	2140      	movs	r1, #64	@ 0x40
 8001b7a:	5299      	strh	r1, [r3, r2]
	diskPins[13].activPort = C_DRIVE2_ACTIVITY_GPIO_Port;
 8001b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b7e:	4a30      	ldr	r2, [pc, #192]	@ (8001c40 <InitializeDiskPins+0x180>)
 8001b80:	669a      	str	r2, [r3, #104]	@ 0x68
	diskPins[13].activPin = C_DRIVE2_ACTIVITY_Pin;
 8001b82:	4b2d      	ldr	r3, [pc, #180]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b84:	226c      	movs	r2, #108	@ 0x6c
 8001b86:	2180      	movs	r1, #128	@ 0x80
 8001b88:	5299      	strh	r1, [r3, r2]
	diskPins[14].activPort = C_DRIVE3_ACTIVITY_GPIO_Port;
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b8c:	4a2e      	ldr	r2, [pc, #184]	@ (8001c48 <InitializeDiskPins+0x188>)
 8001b8e:	671a      	str	r2, [r3, #112]	@ 0x70
	diskPins[14].activPin = C_DRIVE3_ACTIVITY_Pin;
 8001b90:	4b29      	ldr	r3, [pc, #164]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b92:	2274      	movs	r2, #116	@ 0x74
 8001b94:	2180      	movs	r1, #128	@ 0x80
 8001b96:	0049      	lsls	r1, r1, #1
 8001b98:	5299      	strh	r1, [r3, r2]
	diskPins[15].activPort = C_DRIVE4_ACTIVITY_GPIO_Port;
 8001b9a:	4b27      	ldr	r3, [pc, #156]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001b9c:	4a2a      	ldr	r2, [pc, #168]	@ (8001c48 <InitializeDiskPins+0x188>)
 8001b9e:	679a      	str	r2, [r3, #120]	@ 0x78
	diskPins[15].activPin = C_DRIVE4_ACTIVITY_Pin;
 8001ba0:	4b25      	ldr	r3, [pc, #148]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001ba2:	227c      	movs	r2, #124	@ 0x7c
 8001ba4:	2180      	movs	r1, #128	@ 0x80
 8001ba6:	0089      	lsls	r1, r1, #2
 8001ba8:	5299      	strh	r1, [r3, r2]
	diskPins[16].activPort = B_DRIVE1_ACTIVITY_GPIO_Port;
 8001baa:	4b23      	ldr	r3, [pc, #140]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001bac:	2180      	movs	r1, #128	@ 0x80
 8001bae:	22a0      	movs	r2, #160	@ 0xa0
 8001bb0:	05d2      	lsls	r2, r2, #23
 8001bb2:	505a      	str	r2, [r3, r1]
	diskPins[16].activPin = B_DRIVE1_ACTIVITY_Pin;
 8001bb4:	4b20      	ldr	r3, [pc, #128]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001bb6:	2284      	movs	r2, #132	@ 0x84
 8001bb8:	2180      	movs	r1, #128	@ 0x80
 8001bba:	0089      	lsls	r1, r1, #2
 8001bbc:	5299      	strh	r1, [r3, r2]
	diskPins[17].activPort = B_DRIVE2_ACTIVITY_GPIO_Port;
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001bc0:	2288      	movs	r2, #136	@ 0x88
 8001bc2:	491f      	ldr	r1, [pc, #124]	@ (8001c40 <InitializeDiskPins+0x180>)
 8001bc4:	5099      	str	r1, [r3, r2]
	diskPins[17].activPin = B_DRIVE2_ACTIVITY_Pin;
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001bc8:	228c      	movs	r2, #140	@ 0x8c
 8001bca:	2108      	movs	r1, #8
 8001bcc:	5299      	strh	r1, [r3, r2]
	diskPins[18].activPort = B_DRIVE3_ACTIVITY_GPIO_Port;
 8001bce:	4b1a      	ldr	r3, [pc, #104]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001bd0:	2290      	movs	r2, #144	@ 0x90
 8001bd2:	491b      	ldr	r1, [pc, #108]	@ (8001c40 <InitializeDiskPins+0x180>)
 8001bd4:	5099      	str	r1, [r3, r2]
	diskPins[18].activPin = B_DRIVE3_ACTIVITY_Pin;
 8001bd6:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001bd8:	2294      	movs	r2, #148	@ 0x94
 8001bda:	2104      	movs	r1, #4
 8001bdc:	5299      	strh	r1, [r3, r2]
	diskPins[19].activPort = B_DRIVE4_ACTIVITY_GPIO_Port;
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001be0:	2298      	movs	r2, #152	@ 0x98
 8001be2:	4917      	ldr	r1, [pc, #92]	@ (8001c40 <InitializeDiskPins+0x180>)
 8001be4:	5099      	str	r1, [r3, r2]
	diskPins[19].activPin = B_DRIVE4_ACTIVITY_Pin;
 8001be6:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001be8:	229c      	movs	r2, #156	@ 0x9c
 8001bea:	2102      	movs	r1, #2
 8001bec:	5299      	strh	r1, [r3, r2]
	diskPins[20].activPort = A_DRIVE1_ACTIVITY_GPIO_Port;
 8001bee:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001bf0:	22a0      	movs	r2, #160	@ 0xa0
 8001bf2:	4912      	ldr	r1, [pc, #72]	@ (8001c3c <InitializeDiskPins+0x17c>)
 8001bf4:	5099      	str	r1, [r3, r2]
	diskPins[20].activPin = A_DRIVE1_ACTIVITY_Pin;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001bf8:	22a4      	movs	r2, #164	@ 0xa4
 8001bfa:	2180      	movs	r1, #128	@ 0x80
 8001bfc:	0189      	lsls	r1, r1, #6
 8001bfe:	5299      	strh	r1, [r3, r2]
	diskPins[21].activPort = A_DRIVE2_ACTIVITY_GPIO_Port;
 8001c00:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001c02:	22a8      	movs	r2, #168	@ 0xa8
 8001c04:	490d      	ldr	r1, [pc, #52]	@ (8001c3c <InitializeDiskPins+0x17c>)
 8001c06:	5099      	str	r1, [r3, r2]
	diskPins[21].activPin = A_DRIVE2_ACTIVITY_Pin;
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001c0a:	22ac      	movs	r2, #172	@ 0xac
 8001c0c:	2180      	movs	r1, #128	@ 0x80
 8001c0e:	01c9      	lsls	r1, r1, #7
 8001c10:	5299      	strh	r1, [r3, r2]
	diskPins[22].activPort = A_DRIVE3_ACTIVITY_GPIO_Port;
 8001c12:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001c14:	22b0      	movs	r2, #176	@ 0xb0
 8001c16:	4909      	ldr	r1, [pc, #36]	@ (8001c3c <InitializeDiskPins+0x17c>)
 8001c18:	5099      	str	r1, [r3, r2]
	diskPins[22].activPin = A_DRIVE3_ACTIVITY_Pin;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001c1c:	22b4      	movs	r2, #180	@ 0xb4
 8001c1e:	4909      	ldr	r1, [pc, #36]	@ (8001c44 <InitializeDiskPins+0x184>)
 8001c20:	5299      	strh	r1, [r3, r2]
	diskPins[23].activPort = A_DRIVE3_ACTIVITY_GPIO_Port;
 8001c22:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001c24:	22b8      	movs	r2, #184	@ 0xb8
 8001c26:	4905      	ldr	r1, [pc, #20]	@ (8001c3c <InitializeDiskPins+0x17c>)
 8001c28:	5099      	str	r1, [r3, r2]
	diskPins[23].activPin = A_DRIVE3_ACTIVITY_Pin;
 8001c2a:	4b03      	ldr	r3, [pc, #12]	@ (8001c38 <InitializeDiskPins+0x178>)
 8001c2c:	22bc      	movs	r2, #188	@ 0xbc
 8001c2e:	4905      	ldr	r1, [pc, #20]	@ (8001c44 <InitializeDiskPins+0x184>)
 8001c30:	5299      	strh	r1, [r3, r2]

}
 8001c32:	46c0      	nop			@ (mov r8, r8)
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200002ec 	.word	0x200002ec
 8001c3c:	50000400 	.word	0x50000400
 8001c40:	50000800 	.word	0x50000800
 8001c44:	ffff8000 	.word	0xffff8000
 8001c48:	50000c00 	.word	0x50000c00

08001c4c <PowerOnAdapter>:
	}
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET); // Выключить светодиод после мигания
}

void PowerOnAdapter(uint8_t adapter_number)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	0002      	movs	r2, r0
 8001c54:	1dfb      	adds	r3, r7, #7
 8001c56:	701a      	strb	r2, [r3, #0]


	if (adapter_number == 1 && adapter1_state != 1) {
 8001c58:	1dfb      	adds	r3, r7, #7
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d13e      	bne.n	8001cde <PowerOnAdapter+0x92>
 8001c60:	4b40      	ldr	r3, [pc, #256]	@ (8001d64 <PowerOnAdapter+0x118>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d03a      	beq.n	8001cde <PowerOnAdapter+0x92>
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 8001c68:	4b3f      	ldr	r3, [pc, #252]	@ (8001d68 <PowerOnAdapter+0x11c>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f001 f919 	bl	8002ea6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MB1_PWR_SW_GPIO_Port, MB1_PWR_SW_Pin, SET);
 8001c74:	4b3c      	ldr	r3, [pc, #240]	@ (8001d68 <PowerOnAdapter+0x11c>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	2120      	movs	r1, #32
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f001 f913 	bl	8002ea6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MB1_STATUS_LED_GPIO_Port, MB1_STATUS_LED_Pin, SET);
 8001c80:	23a0      	movs	r3, #160	@ 0xa0
 8001c82:	05db      	lsls	r3, r3, #23
 8001c84:	2201      	movs	r2, #1
 8001c86:	2110      	movs	r1, #16
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f001 f90c 	bl	8002ea6 <HAL_GPIO_WritePin>
		adapter1_state = 1;
 8001c8e:	4b35      	ldr	r3, [pc, #212]	@ (8001d64 <PowerOnAdapter+0x118>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8001c94:	2064      	movs	r0, #100	@ 0x64
 8001c96:	f000 fc81 	bl	800259c <HAL_Delay>
		flag_update = 13;
 8001c9a:	4b34      	ldr	r3, [pc, #208]	@ (8001d6c <PowerOnAdapter+0x120>)
 8001c9c:	220d      	movs	r2, #13
 8001c9e:	701a      	strb	r2, [r3, #0]
		ResetBus();
 8001ca0:	f7ff f912 	bl	8000ec8 <ResetBus>
		flag_update = 14;
 8001ca4:	4b31      	ldr	r3, [pc, #196]	@ (8001d6c <PowerOnAdapter+0x120>)
 8001ca6:	220e      	movs	r2, #14
 8001ca8:	701a      	strb	r2, [r3, #0]
		if(BP_ON == 0) Led_Init();
 8001caa:	4b31      	ldr	r3, [pc, #196]	@ (8001d70 <PowerOnAdapter+0x124>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <PowerOnAdapter+0x6a>
 8001cb2:	f7ff fa5d 	bl	8001170 <Led_Init>
		Set_devslp();
 8001cb6:	f7ff f821 	bl	8000cfc <Set_devslp>

		HAL_TIM_Base_Start_IT(&htim2);
 8001cba:	4b2e      	ldr	r3, [pc, #184]	@ (8001d74 <PowerOnAdapter+0x128>)
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f003 fde7 	bl	8005890 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d78 <PowerOnAdapter+0x12c>)
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f003 fde3 	bl	8005890 <HAL_TIM_Base_Start_IT>
		Counter_sgpio_timeout = 0;
 8001cca:	4b2c      	ldr	r3, [pc, #176]	@ (8001d7c <PowerOnAdapter+0x130>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
		StartBlinking(&led1, 2, 10000); // Мигание 2 Гц, 10 сек
 8001cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8001d80 <PowerOnAdapter+0x134>)
 8001cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d84 <PowerOnAdapter+0x138>)
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f7fe fb36 	bl	8000348 <StartBlinking>
 8001cdc:	e03b      	b.n	8001d56 <PowerOnAdapter+0x10a>
	} else if (adapter_number == 2 && adapter2_state != 1 ) {
 8001cde:	1dfb      	adds	r3, r7, #7
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d137      	bne.n	8001d56 <PowerOnAdapter+0x10a>
 8001ce6:	4b28      	ldr	r3, [pc, #160]	@ (8001d88 <PowerOnAdapter+0x13c>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d033      	beq.n	8001d56 <PowerOnAdapter+0x10a>
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 8001cee:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <PowerOnAdapter+0x11c>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	2110      	movs	r1, #16
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f001 f8d6 	bl	8002ea6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MB2_PWR_SW_GPIO_Port, MB2_PWR_SW_Pin, SET);
 8001cfa:	4b24      	ldr	r3, [pc, #144]	@ (8001d8c <PowerOnAdapter+0x140>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	2140      	movs	r1, #64	@ 0x40
 8001d00:	0018      	movs	r0, r3
 8001d02:	f001 f8d0 	bl	8002ea6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MB2_STATUS_LED_GPIO_Port, MB2_STATUS_LED_Pin, SET);
 8001d06:	23a0      	movs	r3, #160	@ 0xa0
 8001d08:	05db      	lsls	r3, r3, #23
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	2140      	movs	r1, #64	@ 0x40
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f001 f8c9 	bl	8002ea6 <HAL_GPIO_WritePin>
		adapter2_state = 1;
 8001d14:	4b1c      	ldr	r3, [pc, #112]	@ (8001d88 <PowerOnAdapter+0x13c>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8001d1a:	2064      	movs	r0, #100	@ 0x64
 8001d1c:	f000 fc3e 	bl	800259c <HAL_Delay>
		ResetBus();
 8001d20:	f7ff f8d2 	bl	8000ec8 <ResetBus>
		if(BP_ON == 0) Led_Init();
 8001d24:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <PowerOnAdapter+0x124>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <PowerOnAdapter+0xe4>
 8001d2c:	f7ff fa20 	bl	8001170 <Led_Init>
		Set_devslp();
 8001d30:	f7fe ffe4 	bl	8000cfc <Set_devslp>

		HAL_TIM_Base_Start_IT(&htim2);
 8001d34:	4b0f      	ldr	r3, [pc, #60]	@ (8001d74 <PowerOnAdapter+0x128>)
 8001d36:	0018      	movs	r0, r3
 8001d38:	f003 fdaa 	bl	8005890 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <PowerOnAdapter+0x12c>)
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f003 fda6 	bl	8005890 <HAL_TIM_Base_Start_IT>
		Counter_sgpio_timeout = 0;
 8001d44:	4b0d      	ldr	r3, [pc, #52]	@ (8001d7c <PowerOnAdapter+0x130>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
		StartBlinking(&led2, 2, 10000); // Мигание 2 Гц, 10 сек
 8001d4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001d80 <PowerOnAdapter+0x134>)
 8001d4c:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <PowerOnAdapter+0x144>)
 8001d4e:	2102      	movs	r1, #2
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7fe faf9 	bl	8000348 <StartBlinking>
	}
	UpdateCPU_PSON(); // Обновляем состояние CPU_PSON
 8001d56:	f000 f84d 	bl	8001df4 <UpdateCPU_PSON>
}
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b002      	add	sp, #8
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	200003ac 	.word	0x200003ac
 8001d68:	50000800 	.word	0x50000800
 8001d6c:	2000027d 	.word	0x2000027d
 8001d70:	200003ae 	.word	0x200003ae
 8001d74:	200001e4 	.word	0x200001e4
 8001d78:	20000230 	.word	0x20000230
 8001d7c:	200003b0 	.word	0x200003b0
 8001d80:	00002710 	.word	0x00002710
 8001d84:	20000000 	.word	0x20000000
 8001d88:	200003ad 	.word	0x200003ad
 8001d8c:	50000c00 	.word	0x50000c00
 8001d90:	20000018 	.word	0x20000018

08001d94 <PowerOffAdapter>:

void PowerOffAdapter(uint8_t adapter_number)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	1dfb      	adds	r3, r7, #7
 8001d9e:	701a      	strb	r2, [r3, #0]
	if (adapter_number == 1) {
 8001da0:	1dfb      	adds	r3, r7, #7
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d109      	bne.n	8001dbc <PowerOffAdapter+0x28>
		HAL_GPIO_WritePin(MB1_PWR_SW_GPIO_Port, MB1_PWR_SW_Pin, RESET);
 8001da8:	4b0e      	ldr	r3, [pc, #56]	@ (8001de4 <PowerOffAdapter+0x50>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	2120      	movs	r1, #32
 8001dae:	0018      	movs	r0, r3
 8001db0:	f001 f879 	bl	8002ea6 <HAL_GPIO_WritePin>
		adapter1_state = 0;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <PowerOffAdapter+0x54>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
 8001dba:	e00c      	b.n	8001dd6 <PowerOffAdapter+0x42>
	} else if (adapter_number == 2) {
 8001dbc:	1dfb      	adds	r3, r7, #7
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d108      	bne.n	8001dd6 <PowerOffAdapter+0x42>
		HAL_GPIO_WritePin(MB2_PWR_SW_GPIO_Port, MB2_PWR_SW_Pin, RESET);
 8001dc4:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <PowerOffAdapter+0x58>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2140      	movs	r1, #64	@ 0x40
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f001 f86b 	bl	8002ea6 <HAL_GPIO_WritePin>
		adapter2_state = 0;
 8001dd0:	4b07      	ldr	r3, [pc, #28]	@ (8001df0 <PowerOffAdapter+0x5c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
	}
	UpdateCPU_PSON(); // Обновляем состояние CPU_PSON
 8001dd6:	f000 f80d 	bl	8001df4 <UpdateCPU_PSON>
}
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			@ (mov r8, r8)
 8001de4:	50000800 	.word	0x50000800
 8001de8:	200003ac 	.word	0x200003ac
 8001dec:	50000c00 	.word	0x50000c00
 8001df0:	200003ad 	.word	0x200003ad

08001df4 <UpdateCPU_PSON>:

void UpdateCPU_PSON()
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	if (adapter1_state == 1 || adapter2_state == 1) {
 8001df8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <UpdateCPU_PSON+0x44>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d003      	beq.n	8001e08 <UpdateCPU_PSON+0x14>
 8001e00:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <UpdateCPU_PSON+0x48>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d109      	bne.n	8001e1c <UpdateCPU_PSON+0x28>
		// Если хотя бы один адаптер включен, выставляем CPU_PSON в 1
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 8001e08:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <UpdateCPU_PSON+0x4c>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	2110      	movs	r1, #16
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f001 f849 	bl	8002ea6 <HAL_GPIO_WritePin>
		BP_ON = 1;
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <UpdateCPU_PSON+0x50>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
 8001e1a:	e009      	b.n	8001e30 <UpdateCPU_PSON+0x3c>
	} else {
		// Если оба адаптера выключены, выставляем CPU_PSON в 0
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, RESET);
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <UpdateCPU_PSON+0x4c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2110      	movs	r1, #16
 8001e22:	0018      	movs	r0, r3
 8001e24:	f001 f83f 	bl	8002ea6 <HAL_GPIO_WritePin>
		BP_ON = 0;
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <UpdateCPU_PSON+0x50>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
	}
}
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	46c0      	nop			@ (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	200003ac 	.word	0x200003ac
 8001e3c:	200003ad 	.word	0x200003ad
 8001e40:	50000800 	.word	0x50000800
 8001e44:	200003ae 	.word	0x200003ae

08001e48 <RebootAdapter>:

void RebootAdapter(uint8_t adapter_number, uint8_t is_hard_reboot)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	0002      	movs	r2, r0
 8001e50:	1dfb      	adds	r3, r7, #7
 8001e52:	701a      	strb	r2, [r3, #0]
 8001e54:	1dbb      	adds	r3, r7, #6
 8001e56:	1c0a      	adds	r2, r1, #0
 8001e58:	701a      	strb	r2, [r3, #0]

	PowerOffAdapter(adapter_number);
 8001e5a:	1dfb      	adds	r3, r7, #7
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f7ff ff98 	bl	8001d94 <PowerOffAdapter>
	if (adapter_number == 1)StartBlinking(&led1, 4, 5000);
 8001e64:	1dfb      	adds	r3, r7, #7
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d106      	bne.n	8001e7a <RebootAdapter+0x32>
 8001e6c:	4a10      	ldr	r2, [pc, #64]	@ (8001eb0 <RebootAdapter+0x68>)
 8001e6e:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <RebootAdapter+0x6c>)
 8001e70:	2104      	movs	r1, #4
 8001e72:	0018      	movs	r0, r3
 8001e74:	f7fe fa68 	bl	8000348 <StartBlinking>
 8001e78:	e005      	b.n	8001e86 <RebootAdapter+0x3e>
	else StartBlinking(&led2, 4, 5000);// Мигание 4 Гц, 5 сек
 8001e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb0 <RebootAdapter+0x68>)
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <RebootAdapter+0x70>)
 8001e7e:	2104      	movs	r1, #4
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7fe fa61 	bl	8000348 <StartBlinking>
	HAL_Delay(is_hard_reboot ? 1000 : 500); // Задержка для hard/soft reboot
 8001e86:	1dbb      	adds	r3, r7, #6
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <RebootAdapter+0x4c>
 8001e8e:	23fa      	movs	r3, #250	@ 0xfa
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	e001      	b.n	8001e98 <RebootAdapter+0x50>
 8001e94:	23fa      	movs	r3, #250	@ 0xfa
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f000 fb7f 	bl	800259c <HAL_Delay>
	PowerOnAdapter(adapter_number);
 8001e9e:	1dfb      	adds	r3, r7, #7
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7ff fed2 	bl	8001c4c <PowerOnAdapter>
}
 8001ea8:	46c0      	nop			@ (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b002      	add	sp, #8
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	00001388 	.word	0x00001388
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	20000018 	.word	0x20000018

08001ebc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) // 8 раз в секунду
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a28      	ldr	r2, [pc, #160]	@ (8001f6c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d114      	bne.n	8001ef8 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		UpdateLEDStates();
 8001ece:	f7ff fbb5 	bl	800163c <UpdateLEDStates>
		MB1_attach = HAL_GPIO_ReadPin(MB1_ATTACH_GPIO_Port, MB1_ATTACH_Pin);
 8001ed2:	4b27      	ldr	r3, [pc, #156]	@ (8001f70 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f000 ffc8 	bl	8002e6c <HAL_GPIO_ReadPin>
 8001edc:	0003      	movs	r3, r0
 8001ede:	001a      	movs	r2, r3
 8001ee0:	4b24      	ldr	r3, [pc, #144]	@ (8001f74 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001ee2:	701a      	strb	r2, [r3, #0]
		MB2_attach = HAL_GPIO_ReadPin(MB2_ATTACH_GPIO_Port, MB2_ATTACH_Pin);
 8001ee4:	4b24      	ldr	r3, [pc, #144]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001ee6:	2120      	movs	r1, #32
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f000 ffbf 	bl	8002e6c <HAL_GPIO_ReadPin>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	001a      	movs	r2, r3
 8001ef2:	4b22      	ldr	r3, [pc, #136]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001ef4:	701a      	strb	r2, [r3, #0]


					}
				}
			}
}
 8001ef6:	e034      	b.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0xa6>
		if (htim->Instance == TIM2) // 4 раза в секунду
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	@ 0x80
 8001efe:	05db      	lsls	r3, r3, #23
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d10a      	bne.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x5e>
			Read_Disk_Status(0x24, disk_status, 6);
 8001f04:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001f06:	2206      	movs	r2, #6
 8001f08:	0019      	movs	r1, r3
 8001f0a:	2024      	movs	r0, #36	@ 0x24
 8001f0c:	f7fe fae8 	bl	80004e0 <Read_Disk_Status>
			Decode_Disk_Status(disk_status);
 8001f10:	4b1b      	ldr	r3, [pc, #108]	@ (8001f80 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001f12:	0018      	movs	r0, r3
 8001f14:	f7fe fb16 	bl	8000544 <Decode_Disk_Status>
}
 8001f18:	e023      	b.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0xa6>
			if (htim->Instance == TIM3) // 1 раз в секунду
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a19      	ldr	r2, [pc, #100]	@ (8001f84 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d11e      	bne.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0xa6>
				Read_disks_connected();
 8001f24:	f7ff f9a0 	bl	8001268 <Read_disks_connected>
				if(sgpio_started == 0 && (adapter1_state == 1 || adapter2_state == 1))
 8001f28:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d118      	bne.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0xa6>
 8001f30:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d003      	beq.n	8001f40 <HAL_TIM_PeriodElapsedCallback+0x84>
 8001f38:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d110      	bne.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0xa6>
					++Counter_sgpio_timeout;
 8001f40:	4b14      	ldr	r3, [pc, #80]	@ (8001f94 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	3301      	adds	r3, #1
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	4b12      	ldr	r3, [pc, #72]	@ (8001f94 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001f4a:	701a      	strb	r2, [r3, #0]
					if (Counter_sgpio_timeout > 250 && sgpio_started == 0)
 8001f4c:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2bfa      	cmp	r3, #250	@ 0xfa
 8001f52:	d906      	bls.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0xa6>
 8001f54:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0xa6>
						sgpio_timeout = 1;
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b002      	add	sp, #8
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	40012c00 	.word	0x40012c00
 8001f70:	50000400 	.word	0x50000400
 8001f74:	2000005f 	.word	0x2000005f
 8001f78:	50000c00 	.word	0x50000c00
 8001f7c:	20000060 	.word	0x20000060
 8001f80:	20000280 	.word	0x20000280
 8001f84:	40000400 	.word	0x40000400
 8001f88:	200003af 	.word	0x200003af
 8001f8c:	200003ac 	.word	0x200003ac
 8001f90:	200003ad 	.word	0x200003ad
 8001f94:	200003b0 	.word	0x200003b0
 8001f98:	200003b1 	.word	0x200003b1

08001f9c <HAL_GPIO_EXTI_Rising_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	1dbb      	adds	r3, r7, #6
 8001fa6:	801a      	strh	r2, [r3, #0]
	uint32_t current_time = HAL_GetTick();
 8001fa8:	f000 faee 	bl	8002588 <HAL_GetTick>
 8001fac:	0003      	movs	r3, r0
 8001fae:	60fb      	str	r3, [r7, #12]

	if (GPIO_Pin == FP_MB1_PWR_SW_Pin)
 8001fb0:	1dbb      	adds	r3, r7, #6
 8001fb2:	881a      	ldrh	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d113      	bne.n	8001fe4 <HAL_GPIO_EXTI_Rising_Callback+0x48>
	{
		if (current_time - button1_debounce_time >= DEBOUNCE_DELAY)
 8001fbc:	4b18      	ldr	r3, [pc, #96]	@ (8002020 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b63      	cmp	r3, #99	@ 0x63
 8001fc6:	d90d      	bls.n	8001fe4 <HAL_GPIO_EXTI_Rising_Callback+0x48>
		{
			//  button1_pressed = 0; // Кнопка отпущена
			HandleButtonAction(1, current_time - button1_press_time);
 8001fc8:	4b16      	ldr	r3, [pc, #88]	@ (8002024 <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f7fe f9d6 	bl	8000384 <HandleButtonAction>
			button1_press_time = 0;
 8001fd8:	4b12      	ldr	r3, [pc, #72]	@ (8002024 <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
			button1_debounce_time = current_time; // Обновляем время для обработки дребезга
 8001fde:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	601a      	str	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == FP_MB2_PWR_SW_Pin)
 8001fe4:	1dbb      	adds	r3, r7, #6
 8001fe6:	881a      	ldrh	r2, [r3, #0]
 8001fe8:	2380      	movs	r3, #128	@ 0x80
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d113      	bne.n	8002018 <HAL_GPIO_EXTI_Rising_Callback+0x7c>
	{
		if (current_time - button2_debounce_time >= DEBOUNCE_DELAY)
 8001ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8002028 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b63      	cmp	r3, #99	@ 0x63
 8001ffa:	d90d      	bls.n	8002018 <HAL_GPIO_EXTI_Rising_Callback+0x7c>
		{
			//  button2_pressed = 0; // Кнопка отпущена
			HandleButtonAction(2, current_time - button2_press_time);
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	0019      	movs	r1, r3
 8002006:	2002      	movs	r0, #2
 8002008:	f7fe f9bc 	bl	8000384 <HandleButtonAction>
			button2_press_time = 0;
 800200c:	4b07      	ldr	r3, [pc, #28]	@ (800202c <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
			button2_debounce_time = current_time; // Обновляем время для обработки дребезга
 8002012:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002018:	46c0      	nop			@ (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	b004      	add	sp, #16
 800201e:	bd80      	pop	{r7, pc}
 8002020:	200003bc 	.word	0x200003bc
 8002024:	200003b4 	.word	0x200003b4
 8002028:	200003c0 	.word	0x200003c0
 800202c:	200003b8 	.word	0x200003b8

08002030 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	0002      	movs	r2, r0
 8002038:	1dbb      	adds	r3, r7, #6
 800203a:	801a      	strh	r2, [r3, #0]


	if (GPIO_Pin == FP_MB1_PWR_SW_Pin)
 800203c:	1dbb      	adds	r3, r7, #6
 800203e:	881a      	ldrh	r2, [r3, #0]
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	429a      	cmp	r2, r3
 8002046:	d10f      	bne.n	8002068 <HAL_GPIO_EXTI_Falling_Callback+0x38>
	{uint32_t current_time = HAL_GetTick();
 8002048:	f000 fa9e 	bl	8002588 <HAL_GetTick>
 800204c:	0003      	movs	r3, r0
 800204e:	60fb      	str	r3, [r7, #12]
	if (current_time - button1_debounce_time >= DEBOUNCE_DELAY)
 8002050:	4b12      	ldr	r3, [pc, #72]	@ (800209c <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b63      	cmp	r3, #99	@ 0x63
 800205a:	d905      	bls.n	8002068 <HAL_GPIO_EXTI_Falling_Callback+0x38>
	{
		// button1_pressed = 1; // Кнопка нажата
		button1_press_time = current_time;
 800205c:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	601a      	str	r2, [r3, #0]
		button1_debounce_time = current_time; // Обновляем время для обработки дребезга
 8002062:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	601a      	str	r2, [r3, #0]
	}
	}

	if (GPIO_Pin == FP_MB2_PWR_SW_Pin)
 8002068:	1dbb      	adds	r3, r7, #6
 800206a:	881a      	ldrh	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	429a      	cmp	r2, r3
 8002072:	d10f      	bne.n	8002094 <HAL_GPIO_EXTI_Falling_Callback+0x64>
	{uint32_t current_time = HAL_GetTick();
 8002074:	f000 fa88 	bl	8002588 <HAL_GetTick>
 8002078:	0003      	movs	r3, r0
 800207a:	60bb      	str	r3, [r7, #8]
	if (current_time - button2_debounce_time >= DEBOUNCE_DELAY)
 800207c:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <HAL_GPIO_EXTI_Falling_Callback+0x74>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b63      	cmp	r3, #99	@ 0x63
 8002086:	d905      	bls.n	8002094 <HAL_GPIO_EXTI_Falling_Callback+0x64>
	{
		//  button2_pressed = 1; // Кнопка нажата
		button2_press_time = current_time;
 8002088:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <HAL_GPIO_EXTI_Falling_Callback+0x78>)
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	601a      	str	r2, [r3, #0]
		button2_debounce_time = current_time; // Обновляем время для обработки дребезга
 800208e:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <HAL_GPIO_EXTI_Falling_Callback+0x74>)
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	601a      	str	r2, [r3, #0]
	}
	}


}
 8002094:	46c0      	nop			@ (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b004      	add	sp, #16
 800209a:	bd80      	pop	{r7, pc}
 800209c:	200003bc 	.word	0x200003bc
 80020a0:	200003b4 	.word	0x200003b4
 80020a4:	200003c0 	.word	0x200003c0
 80020a8:	200003b8 	.word	0x200003b8

080020ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b0:	b672      	cpsid	i
}
 80020b2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	flag_error = 1;
 80020b4:	4b02      	ldr	r3, [pc, #8]	@ (80020c0 <Error_Handler+0x14>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
	while (1)
 80020ba:	46c0      	nop			@ (mov r8, r8)
 80020bc:	e7fd      	b.n	80020ba <Error_Handler+0xe>
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	2000027c 	.word	0x2000027c

080020c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <HAL_MspInit+0x54>)
 80020cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020ce:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <HAL_MspInit+0x54>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	430a      	orrs	r2, r1
 80020d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80020d6:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <HAL_MspInit+0x54>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	2201      	movs	r2, #1
 80020dc:	4013      	ands	r3, r2
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002118 <HAL_MspInit+0x54>)
 80020e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <HAL_MspInit+0x54>)
 80020e8:	2180      	movs	r1, #128	@ 0x80
 80020ea:	0549      	lsls	r1, r1, #21
 80020ec:	430a      	orrs	r2, r1
 80020ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020f0:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <HAL_MspInit+0x54>)
 80020f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020f4:	2380      	movs	r3, #128	@ 0x80
 80020f6:	055b      	lsls	r3, r3, #21
 80020f8:	4013      	ands	r3, r2
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	2004      	movs	r0, #4
 8002104:	f000 fb1a 	bl	800273c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002108:	2004      	movs	r0, #4
 800210a:	f000 fb2c 	bl	8002766 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800210e:	46c0      	nop			@ (mov r8, r8)
 8002110:	46bd      	mov	sp, r7
 8002112:	b002      	add	sp, #8
 8002114:	bd80      	pop	{r7, pc}
 8002116:	46c0      	nop			@ (mov r8, r8)
 8002118:	40021000 	.word	0x40021000

0800211c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b08b      	sub	sp, #44	@ 0x2c
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	2414      	movs	r4, #20
 8002126:	193b      	adds	r3, r7, r4
 8002128:	0018      	movs	r0, r3
 800212a:	2314      	movs	r3, #20
 800212c:	001a      	movs	r2, r3
 800212e:	2100      	movs	r1, #0
 8002130:	f003 ffb8 	bl	80060a4 <memset>
  if(hi2c->Instance==I2C2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a45      	ldr	r2, [pc, #276]	@ (8002250 <HAL_I2C_MspInit+0x134>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d000      	beq.n	8002140 <HAL_I2C_MspInit+0x24>
 800213e:	e082      	b.n	8002246 <HAL_I2C_MspInit+0x12a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002140:	4b44      	ldr	r3, [pc, #272]	@ (8002254 <HAL_I2C_MspInit+0x138>)
 8002142:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002144:	4b43      	ldr	r3, [pc, #268]	@ (8002254 <HAL_I2C_MspInit+0x138>)
 8002146:	2102      	movs	r1, #2
 8002148:	430a      	orrs	r2, r1
 800214a:	635a      	str	r2, [r3, #52]	@ 0x34
 800214c:	4b41      	ldr	r3, [pc, #260]	@ (8002254 <HAL_I2C_MspInit+0x138>)
 800214e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002150:	2202      	movs	r2, #2
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = TEMP_I2C1_SCL_Pin|TEMP_I2C1_SDA_Pin;
 8002158:	193b      	adds	r3, r7, r4
 800215a:	22c0      	movs	r2, #192	@ 0xc0
 800215c:	0112      	lsls	r2, r2, #4
 800215e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002160:	0021      	movs	r1, r4
 8002162:	187b      	adds	r3, r7, r1
 8002164:	2212      	movs	r2, #18
 8002166:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	187b      	adds	r3, r7, r1
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	187b      	adds	r3, r7, r1
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002174:	187b      	adds	r3, r7, r1
 8002176:	2206      	movs	r2, #6
 8002178:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217a:	187b      	adds	r3, r7, r1
 800217c:	4a36      	ldr	r2, [pc, #216]	@ (8002258 <HAL_I2C_MspInit+0x13c>)
 800217e:	0019      	movs	r1, r3
 8002180:	0010      	movs	r0, r2
 8002182:	f000 fd0f 	bl	8002ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002186:	4b33      	ldr	r3, [pc, #204]	@ (8002254 <HAL_I2C_MspInit+0x138>)
 8002188:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800218a:	4b32      	ldr	r3, [pc, #200]	@ (8002254 <HAL_I2C_MspInit+0x138>)
 800218c:	2180      	movs	r1, #128	@ 0x80
 800218e:	03c9      	lsls	r1, r1, #15
 8002190:	430a      	orrs	r2, r1
 8002192:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002194:	4b2f      	ldr	r3, [pc, #188]	@ (8002254 <HAL_I2C_MspInit+0x138>)
 8002196:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002198:	2380      	movs	r3, #128	@ 0x80
 800219a:	03db      	lsls	r3, r3, #15
 800219c:	4013      	ands	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel1;
 80021a2:	4b2e      	ldr	r3, [pc, #184]	@ (800225c <HAL_I2C_MspInit+0x140>)
 80021a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002260 <HAL_I2C_MspInit+0x144>)
 80021a6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 80021a8:	4b2c      	ldr	r3, [pc, #176]	@ (800225c <HAL_I2C_MspInit+0x140>)
 80021aa:	220c      	movs	r2, #12
 80021ac:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ae:	4b2b      	ldr	r3, [pc, #172]	@ (800225c <HAL_I2C_MspInit+0x140>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b4:	4b29      	ldr	r3, [pc, #164]	@ (800225c <HAL_I2C_MspInit+0x140>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021ba:	4b28      	ldr	r3, [pc, #160]	@ (800225c <HAL_I2C_MspInit+0x140>)
 80021bc:	2280      	movs	r2, #128	@ 0x80
 80021be:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021c0:	4b26      	ldr	r3, [pc, #152]	@ (800225c <HAL_I2C_MspInit+0x140>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021c6:	4b25      	ldr	r3, [pc, #148]	@ (800225c <HAL_I2C_MspInit+0x140>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80021cc:	4b23      	ldr	r3, [pc, #140]	@ (800225c <HAL_I2C_MspInit+0x140>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021d2:	4b22      	ldr	r3, [pc, #136]	@ (800225c <HAL_I2C_MspInit+0x140>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80021d8:	4b20      	ldr	r3, [pc, #128]	@ (800225c <HAL_I2C_MspInit+0x140>)
 80021da:	0018      	movs	r0, r3
 80021dc:	f000 fae0 	bl	80027a0 <HAL_DMA_Init>
 80021e0:	1e03      	subs	r3, r0, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80021e4:	f7ff ff62 	bl	80020ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a1c      	ldr	r2, [pc, #112]	@ (800225c <HAL_I2C_MspInit+0x140>)
 80021ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021ee:	4b1b      	ldr	r3, [pc, #108]	@ (800225c <HAL_I2C_MspInit+0x140>)
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel2;
 80021f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <HAL_I2C_MspInit+0x148>)
 80021f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002268 <HAL_I2C_MspInit+0x14c>)
 80021f8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 80021fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002264 <HAL_I2C_MspInit+0x148>)
 80021fc:	220d      	movs	r2, #13
 80021fe:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002200:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <HAL_I2C_MspInit+0x148>)
 8002202:	2210      	movs	r2, #16
 8002204:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002206:	4b17      	ldr	r3, [pc, #92]	@ (8002264 <HAL_I2C_MspInit+0x148>)
 8002208:	2200      	movs	r2, #0
 800220a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800220c:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <HAL_I2C_MspInit+0x148>)
 800220e:	2280      	movs	r2, #128	@ 0x80
 8002210:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002212:	4b14      	ldr	r3, [pc, #80]	@ (8002264 <HAL_I2C_MspInit+0x148>)
 8002214:	2200      	movs	r2, #0
 8002216:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002218:	4b12      	ldr	r3, [pc, #72]	@ (8002264 <HAL_I2C_MspInit+0x148>)
 800221a:	2200      	movs	r2, #0
 800221c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800221e:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <HAL_I2C_MspInit+0x148>)
 8002220:	2200      	movs	r2, #0
 8002222:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002224:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <HAL_I2C_MspInit+0x148>)
 8002226:	2200      	movs	r2, #0
 8002228:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800222a:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <HAL_I2C_MspInit+0x148>)
 800222c:	0018      	movs	r0, r3
 800222e:	f000 fab7 	bl	80027a0 <HAL_DMA_Init>
 8002232:	1e03      	subs	r3, r0, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 8002236:	f7ff ff39 	bl	80020ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a09      	ldr	r2, [pc, #36]	@ (8002264 <HAL_I2C_MspInit+0x148>)
 800223e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002240:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <HAL_I2C_MspInit+0x148>)
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	46bd      	mov	sp, r7
 800224a:	b00b      	add	sp, #44	@ 0x2c
 800224c:	bd90      	pop	{r4, r7, pc}
 800224e:	46c0      	nop			@ (mov r8, r8)
 8002250:	40005800 	.word	0x40005800
 8002254:	40021000 	.word	0x40021000
 8002258:	50000400 	.word	0x50000400
 800225c:	200000e0 	.word	0x200000e0
 8002260:	40020008 	.word	0x40020008
 8002264:	2000013c 	.word	0x2000013c
 8002268:	4002001c 	.word	0x4002001c

0800226c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800226c:	b590      	push	{r4, r7, lr}
 800226e:	b093      	sub	sp, #76	@ 0x4c
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002274:	2414      	movs	r4, #20
 8002276:	193b      	adds	r3, r7, r4
 8002278:	0018      	movs	r0, r3
 800227a:	2334      	movs	r3, #52	@ 0x34
 800227c:	001a      	movs	r2, r3
 800227e:	2100      	movs	r1, #0
 8002280:	f003 ff10 	bl	80060a4 <memset>
  if(htim_base->Instance==TIM1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a24      	ldr	r2, [pc, #144]	@ (800231c <HAL_TIM_Base_MspInit+0xb0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d11d      	bne.n	80022ca <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800228e:	193b      	adds	r3, r7, r4
 8002290:	2280      	movs	r2, #128	@ 0x80
 8002292:	0392      	lsls	r2, r2, #14
 8002294:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8002296:	193b      	adds	r3, r7, r4
 8002298:	2200      	movs	r2, #0
 800229a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800229c:	193b      	adds	r3, r7, r4
 800229e:	0018      	movs	r0, r3
 80022a0:	f003 f8e6 	bl	8005470 <HAL_RCCEx_PeriphCLKConfig>
 80022a4:	1e03      	subs	r3, r0, #0
 80022a6:	d001      	beq.n	80022ac <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80022a8:	f7ff ff00 	bl	80020ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002320 <HAL_TIM_Base_MspInit+0xb4>)
 80022ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002320 <HAL_TIM_Base_MspInit+0xb4>)
 80022b2:	2180      	movs	r1, #128	@ 0x80
 80022b4:	0109      	lsls	r1, r1, #4
 80022b6:	430a      	orrs	r2, r1
 80022b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80022ba:	4b19      	ldr	r3, [pc, #100]	@ (8002320 <HAL_TIM_Base_MspInit+0xb4>)
 80022bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022be:	2380      	movs	r3, #128	@ 0x80
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022c8:	e023      	b.n	8002312 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	2380      	movs	r3, #128	@ 0x80
 80022d0:	05db      	lsls	r3, r3, #23
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d10c      	bne.n	80022f0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022d6:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <HAL_TIM_Base_MspInit+0xb4>)
 80022d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022da:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_TIM_Base_MspInit+0xb4>)
 80022dc:	2101      	movs	r1, #1
 80022de:	430a      	orrs	r2, r1
 80022e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80022e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002320 <HAL_TIM_Base_MspInit+0xb4>)
 80022e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e6:	2201      	movs	r2, #1
 80022e8:	4013      	ands	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
}
 80022ee:	e010      	b.n	8002312 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002324 <HAL_TIM_Base_MspInit+0xb8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d10b      	bne.n	8002312 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022fa:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <HAL_TIM_Base_MspInit+0xb4>)
 80022fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022fe:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <HAL_TIM_Base_MspInit+0xb4>)
 8002300:	2102      	movs	r1, #2
 8002302:	430a      	orrs	r2, r1
 8002304:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002306:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_TIM_Base_MspInit+0xb4>)
 8002308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800230a:	2202      	movs	r2, #2
 800230c:	4013      	ands	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
}
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b013      	add	sp, #76	@ 0x4c
 8002318:	bd90      	pop	{r4, r7, pc}
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	40012c00 	.word	0x40012c00
 8002320:	40021000 	.word	0x40021000
 8002324:	40000400 	.word	0x40000400

08002328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800232c:	f003 f876 	bl	800541c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002330:	46c0      	nop			@ (mov r8, r8)
 8002332:	e7fd      	b.n	8002330 <NMI_Handler+0x8>

08002334 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002338:	46c0      	nop			@ (mov r8, r8)
 800233a:	e7fd      	b.n	8002338 <HardFault_Handler+0x4>

0800233c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002340:	46c0      	nop			@ (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234a:	46c0      	nop			@ (mov r8, r8)
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002354:	f000 f906 	bl	8002564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002358:	46c0      	nop			@ (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002362:	46c0      	nop			@ (mov r8, r8)
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FP_MB2_PWR_SW_Pin);
 800236c:	2380      	movs	r3, #128	@ 0x80
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	0018      	movs	r0, r3
 8002372:	f000 fdb5 	bl	8002ee0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FP_MB1_PWR_SW_Pin);
 8002376:	2380      	movs	r3, #128	@ 0x80
 8002378:	021b      	lsls	r3, r3, #8
 800237a:	0018      	movs	r0, r3
 800237c:	f000 fdb0 	bl	8002ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002380:	46c0      	nop			@ (mov r8, r8)
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800238c:	4b03      	ldr	r3, [pc, #12]	@ (800239c <DMA1_Channel1_IRQHandler+0x14>)
 800238e:	0018      	movs	r0, r3
 8002390:	f000 fafa 	bl	8002988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002394:	46c0      	nop			@ (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	200000e0 	.word	0x200000e0

080023a0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80023a4:	4b03      	ldr	r3, [pc, #12]	@ (80023b4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80023a6:	0018      	movs	r0, r3
 80023a8:	f000 faee 	bl	8002988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80023ac:	46c0      	nop			@ (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	2000013c 	.word	0x2000013c

080023b8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023bc:	4b03      	ldr	r3, [pc, #12]	@ (80023cc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80023be:	0018      	movs	r0, r3
 80023c0:	f003 fac2 	bl	8005948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80023c4:	46c0      	nop			@ (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			@ (mov r8, r8)
 80023cc:	20000198 	.word	0x20000198

080023d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023d4:	4b03      	ldr	r3, [pc, #12]	@ (80023e4 <TIM2_IRQHandler+0x14>)
 80023d6:	0018      	movs	r0, r3
 80023d8:	f003 fab6 	bl	8005948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023dc:	46c0      	nop			@ (mov r8, r8)
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	200001e4 	.word	0x200001e4

080023e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023ec:	4b03      	ldr	r3, [pc, #12]	@ (80023fc <TIM3_IRQHandler+0x14>)
 80023ee:	0018      	movs	r0, r3
 80023f0:	f003 faaa 	bl	8005948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023f4:	46c0      	nop			@ (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	20000230 	.word	0x20000230

08002400 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002404:	4b09      	ldr	r3, [pc, #36]	@ (800242c <I2C2_IRQHandler+0x2c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699a      	ldr	r2, [r3, #24]
 800240a:	23e0      	movs	r3, #224	@ 0xe0
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4013      	ands	r3, r2
 8002410:	d004      	beq.n	800241c <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8002412:	4b06      	ldr	r3, [pc, #24]	@ (800242c <I2C2_IRQHandler+0x2c>)
 8002414:	0018      	movs	r0, r3
 8002416:	f001 f97b 	bl	8003710 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 800241a:	e003      	b.n	8002424 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 800241c:	4b03      	ldr	r3, [pc, #12]	@ (800242c <I2C2_IRQHandler+0x2c>)
 800241e:	0018      	movs	r0, r3
 8002420:	f001 f95c 	bl	80036dc <HAL_I2C_EV_IRQHandler>
}
 8002424:	46c0      	nop			@ (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	2000008c 	.word	0x2000008c

08002430 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002434:	46c0      	nop			@ (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800243c:	480d      	ldr	r0, [pc, #52]	@ (8002474 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800243e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002440:	f7ff fff6 	bl	8002430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002444:	480c      	ldr	r0, [pc, #48]	@ (8002478 <LoopForever+0x6>)
  ldr r1, =_edata
 8002446:	490d      	ldr	r1, [pc, #52]	@ (800247c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002448:	4a0d      	ldr	r2, [pc, #52]	@ (8002480 <LoopForever+0xe>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800244c:	e002      	b.n	8002454 <LoopCopyDataInit>

0800244e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002452:	3304      	adds	r3, #4

08002454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002458:	d3f9      	bcc.n	800244e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245a:	4a0a      	ldr	r2, [pc, #40]	@ (8002484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800245c:	4c0a      	ldr	r4, [pc, #40]	@ (8002488 <LoopForever+0x16>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002460:	e001      	b.n	8002466 <LoopFillZerobss>

08002462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002464:	3204      	adds	r2, #4

08002466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002468:	d3fb      	bcc.n	8002462 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800246a:	f003 fe23 	bl	80060b4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800246e:	f7fe f8d5 	bl	800061c <main>

08002472 <LoopForever>:

LoopForever:
  b LoopForever
 8002472:	e7fe      	b.n	8002472 <LoopForever>
  ldr   r0, =_estack
 8002474:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800247c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002480:	0800615c 	.word	0x0800615c
  ldr r2, =_sbss
 8002484:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002488:	200003cc 	.word	0x200003cc

0800248c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC1_COMP_IRQHandler>
	...

08002490 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002496:	1dfb      	adds	r3, r7, #7
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800249c:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <HAL_Init+0x3c>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <HAL_Init+0x3c>)
 80024a2:	2180      	movs	r1, #128	@ 0x80
 80024a4:	0049      	lsls	r1, r1, #1
 80024a6:	430a      	orrs	r2, r1
 80024a8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024aa:	2000      	movs	r0, #0
 80024ac:	f000 f810 	bl	80024d0 <HAL_InitTick>
 80024b0:	1e03      	subs	r3, r0, #0
 80024b2:	d003      	beq.n	80024bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80024b4:	1dfb      	adds	r3, r7, #7
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e001      	b.n	80024c0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80024bc:	f7ff fe02 	bl	80020c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024c0:	1dfb      	adds	r3, r7, #7
 80024c2:	781b      	ldrb	r3, [r3, #0]
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40022000 	.word	0x40022000

080024d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024d8:	230f      	movs	r3, #15
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80024e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002558 <HAL_InitTick+0x88>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d02b      	beq.n	8002540 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80024e8:	4b1c      	ldr	r3, [pc, #112]	@ (800255c <HAL_InitTick+0x8c>)
 80024ea:	681c      	ldr	r4, [r3, #0]
 80024ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002558 <HAL_InitTick+0x88>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	0019      	movs	r1, r3
 80024f2:	23fa      	movs	r3, #250	@ 0xfa
 80024f4:	0098      	lsls	r0, r3, #2
 80024f6:	f7fd fe05 	bl	8000104 <__udivsi3>
 80024fa:	0003      	movs	r3, r0
 80024fc:	0019      	movs	r1, r3
 80024fe:	0020      	movs	r0, r4
 8002500:	f7fd fe00 	bl	8000104 <__udivsi3>
 8002504:	0003      	movs	r3, r0
 8002506:	0018      	movs	r0, r3
 8002508:	f000 f93d 	bl	8002786 <HAL_SYSTICK_Config>
 800250c:	1e03      	subs	r3, r0, #0
 800250e:	d112      	bne.n	8002536 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d80a      	bhi.n	800252c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	2301      	movs	r3, #1
 800251a:	425b      	negs	r3, r3
 800251c:	2200      	movs	r2, #0
 800251e:	0018      	movs	r0, r3
 8002520:	f000 f90c 	bl	800273c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002524:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <HAL_InitTick+0x90>)
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e00d      	b.n	8002548 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800252c:	230f      	movs	r3, #15
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	2201      	movs	r2, #1
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	e008      	b.n	8002548 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002536:	230f      	movs	r3, #15
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	2201      	movs	r2, #1
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	e003      	b.n	8002548 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002540:	230f      	movs	r3, #15
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002548:	230f      	movs	r3, #15
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	781b      	ldrb	r3, [r3, #0]
}
 800254e:	0018      	movs	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	b005      	add	sp, #20
 8002554:	bd90      	pop	{r4, r7, pc}
 8002556:	46c0      	nop			@ (mov r8, r8)
 8002558:	2000006c 	.word	0x2000006c
 800255c:	20000064 	.word	0x20000064
 8002560:	20000068 	.word	0x20000068

08002564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002568:	4b05      	ldr	r3, [pc, #20]	@ (8002580 <HAL_IncTick+0x1c>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	001a      	movs	r2, r3
 800256e:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <HAL_IncTick+0x20>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	18d2      	adds	r2, r2, r3
 8002574:	4b03      	ldr	r3, [pc, #12]	@ (8002584 <HAL_IncTick+0x20>)
 8002576:	601a      	str	r2, [r3, #0]
}
 8002578:	46c0      	nop			@ (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	2000006c 	.word	0x2000006c
 8002584:	200003c8 	.word	0x200003c8

08002588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  return uwTick;
 800258c:	4b02      	ldr	r3, [pc, #8]	@ (8002598 <HAL_GetTick+0x10>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	0018      	movs	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	200003c8 	.word	0x200003c8

0800259c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7ff fff0 	bl	8002588 <HAL_GetTick>
 80025a8:	0003      	movs	r3, r0
 80025aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3301      	adds	r3, #1
 80025b4:	d005      	beq.n	80025c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025b6:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <HAL_Delay+0x44>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	001a      	movs	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	189b      	adds	r3, r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	f7ff ffe0 	bl	8002588 <HAL_GetTick>
 80025c8:	0002      	movs	r2, r0
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d8f7      	bhi.n	80025c4 <HAL_Delay+0x28>
  {
  }
}
 80025d4:	46c0      	nop			@ (mov r8, r8)
 80025d6:	46c0      	nop			@ (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b004      	add	sp, #16
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			@ (mov r8, r8)
 80025e0:	2000006c 	.word	0x2000006c

080025e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	0002      	movs	r2, r0
 80025ec:	1dfb      	adds	r3, r7, #7
 80025ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025f0:	1dfb      	adds	r3, r7, #7
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80025f6:	d809      	bhi.n	800260c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f8:	1dfb      	adds	r3, r7, #7
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	001a      	movs	r2, r3
 80025fe:	231f      	movs	r3, #31
 8002600:	401a      	ands	r2, r3
 8002602:	4b04      	ldr	r3, [pc, #16]	@ (8002614 <__NVIC_EnableIRQ+0x30>)
 8002604:	2101      	movs	r1, #1
 8002606:	4091      	lsls	r1, r2
 8002608:	000a      	movs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800260c:	46c0      	nop			@ (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}
 8002614:	e000e100 	.word	0xe000e100

08002618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	0002      	movs	r2, r0
 8002620:	6039      	str	r1, [r7, #0]
 8002622:	1dfb      	adds	r3, r7, #7
 8002624:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002626:	1dfb      	adds	r3, r7, #7
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b7f      	cmp	r3, #127	@ 0x7f
 800262c:	d828      	bhi.n	8002680 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800262e:	4a2f      	ldr	r2, [pc, #188]	@ (80026ec <__NVIC_SetPriority+0xd4>)
 8002630:	1dfb      	adds	r3, r7, #7
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	b25b      	sxtb	r3, r3
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	33c0      	adds	r3, #192	@ 0xc0
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	589b      	ldr	r3, [r3, r2]
 800263e:	1dfa      	adds	r2, r7, #7
 8002640:	7812      	ldrb	r2, [r2, #0]
 8002642:	0011      	movs	r1, r2
 8002644:	2203      	movs	r2, #3
 8002646:	400a      	ands	r2, r1
 8002648:	00d2      	lsls	r2, r2, #3
 800264a:	21ff      	movs	r1, #255	@ 0xff
 800264c:	4091      	lsls	r1, r2
 800264e:	000a      	movs	r2, r1
 8002650:	43d2      	mvns	r2, r2
 8002652:	401a      	ands	r2, r3
 8002654:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	019b      	lsls	r3, r3, #6
 800265a:	22ff      	movs	r2, #255	@ 0xff
 800265c:	401a      	ands	r2, r3
 800265e:	1dfb      	adds	r3, r7, #7
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	0018      	movs	r0, r3
 8002664:	2303      	movs	r3, #3
 8002666:	4003      	ands	r3, r0
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800266c:	481f      	ldr	r0, [pc, #124]	@ (80026ec <__NVIC_SetPriority+0xd4>)
 800266e:	1dfb      	adds	r3, r7, #7
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	b25b      	sxtb	r3, r3
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	430a      	orrs	r2, r1
 8002678:	33c0      	adds	r3, #192	@ 0xc0
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800267e:	e031      	b.n	80026e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002680:	4a1b      	ldr	r2, [pc, #108]	@ (80026f0 <__NVIC_SetPriority+0xd8>)
 8002682:	1dfb      	adds	r3, r7, #7
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	0019      	movs	r1, r3
 8002688:	230f      	movs	r3, #15
 800268a:	400b      	ands	r3, r1
 800268c:	3b08      	subs	r3, #8
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3306      	adds	r3, #6
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	18d3      	adds	r3, r2, r3
 8002696:	3304      	adds	r3, #4
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	1dfa      	adds	r2, r7, #7
 800269c:	7812      	ldrb	r2, [r2, #0]
 800269e:	0011      	movs	r1, r2
 80026a0:	2203      	movs	r2, #3
 80026a2:	400a      	ands	r2, r1
 80026a4:	00d2      	lsls	r2, r2, #3
 80026a6:	21ff      	movs	r1, #255	@ 0xff
 80026a8:	4091      	lsls	r1, r2
 80026aa:	000a      	movs	r2, r1
 80026ac:	43d2      	mvns	r2, r2
 80026ae:	401a      	ands	r2, r3
 80026b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	019b      	lsls	r3, r3, #6
 80026b6:	22ff      	movs	r2, #255	@ 0xff
 80026b8:	401a      	ands	r2, r3
 80026ba:	1dfb      	adds	r3, r7, #7
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	0018      	movs	r0, r3
 80026c0:	2303      	movs	r3, #3
 80026c2:	4003      	ands	r3, r0
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026c8:	4809      	ldr	r0, [pc, #36]	@ (80026f0 <__NVIC_SetPriority+0xd8>)
 80026ca:	1dfb      	adds	r3, r7, #7
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	001c      	movs	r4, r3
 80026d0:	230f      	movs	r3, #15
 80026d2:	4023      	ands	r3, r4
 80026d4:	3b08      	subs	r3, #8
 80026d6:	089b      	lsrs	r3, r3, #2
 80026d8:	430a      	orrs	r2, r1
 80026da:	3306      	adds	r3, #6
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	18c3      	adds	r3, r0, r3
 80026e0:	3304      	adds	r3, #4
 80026e2:	601a      	str	r2, [r3, #0]
}
 80026e4:	46c0      	nop			@ (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b003      	add	sp, #12
 80026ea:	bd90      	pop	{r4, r7, pc}
 80026ec:	e000e100 	.word	0xe000e100
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	1e5a      	subs	r2, r3, #1
 8002700:	2380      	movs	r3, #128	@ 0x80
 8002702:	045b      	lsls	r3, r3, #17
 8002704:	429a      	cmp	r2, r3
 8002706:	d301      	bcc.n	800270c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002708:	2301      	movs	r3, #1
 800270a:	e010      	b.n	800272e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270c:	4b0a      	ldr	r3, [pc, #40]	@ (8002738 <SysTick_Config+0x44>)
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	3a01      	subs	r2, #1
 8002712:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002714:	2301      	movs	r3, #1
 8002716:	425b      	negs	r3, r3
 8002718:	2103      	movs	r1, #3
 800271a:	0018      	movs	r0, r3
 800271c:	f7ff ff7c 	bl	8002618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002720:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <SysTick_Config+0x44>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002726:	4b04      	ldr	r3, [pc, #16]	@ (8002738 <SysTick_Config+0x44>)
 8002728:	2207      	movs	r2, #7
 800272a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800272c:	2300      	movs	r3, #0
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b002      	add	sp, #8
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			@ (mov r8, r8)
 8002738:	e000e010 	.word	0xe000e010

0800273c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	210f      	movs	r1, #15
 8002748:	187b      	adds	r3, r7, r1
 800274a:	1c02      	adds	r2, r0, #0
 800274c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	187b      	adds	r3, r7, r1
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	b25b      	sxtb	r3, r3
 8002756:	0011      	movs	r1, r2
 8002758:	0018      	movs	r0, r3
 800275a:	f7ff ff5d 	bl	8002618 <__NVIC_SetPriority>
}
 800275e:	46c0      	nop			@ (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	b004      	add	sp, #16
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	0002      	movs	r2, r0
 800276e:	1dfb      	adds	r3, r7, #7
 8002770:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002772:	1dfb      	adds	r3, r7, #7
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	b25b      	sxtb	r3, r3
 8002778:	0018      	movs	r0, r3
 800277a:	f7ff ff33 	bl	80025e4 <__NVIC_EnableIRQ>
}
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	46bd      	mov	sp, r7
 8002782:	b002      	add	sp, #8
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	0018      	movs	r0, r3
 8002792:	f7ff ffaf 	bl	80026f4 <SysTick_Config>
 8002796:	0003      	movs	r3, r0
}
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	b002      	add	sp, #8
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e077      	b.n	80028a2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a3d      	ldr	r2, [pc, #244]	@ (80028ac <HAL_DMA_Init+0x10c>)
 80027b8:	4694      	mov	ip, r2
 80027ba:	4463      	add	r3, ip
 80027bc:	2114      	movs	r1, #20
 80027be:	0018      	movs	r0, r3
 80027c0:	f7fd fca0 	bl	8000104 <__udivsi3>
 80027c4:	0003      	movs	r3, r0
 80027c6:	009a      	lsls	r2, r3, #2
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2225      	movs	r2, #37	@ 0x25
 80027d0:	2102      	movs	r1, #2
 80027d2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4934      	ldr	r1, [pc, #208]	@ (80028b0 <HAL_DMA_Init+0x110>)
 80027e0:	400a      	ands	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6819      	ldr	r1, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	0018      	movs	r0, r3
 800281e:	f000 f971 	bl	8002b04 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	2380      	movs	r3, #128	@ 0x80
 8002828:	01db      	lsls	r3, r3, #7
 800282a:	429a      	cmp	r2, r3
 800282c:	d102      	bne.n	8002834 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283c:	213f      	movs	r1, #63	@ 0x3f
 800283e:	400a      	ands	r2, r1
 8002840:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800284a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d011      	beq.n	8002878 <HAL_DMA_Init+0xd8>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b04      	cmp	r3, #4
 800285a:	d80d      	bhi.n	8002878 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	0018      	movs	r0, r3
 8002860:	f000 f97c 	bl	8002b5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	e008      	b.n	800288a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2225      	movs	r2, #37	@ 0x25
 8002894:	2101      	movs	r1, #1
 8002896:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2224      	movs	r2, #36	@ 0x24
 800289c:	2100      	movs	r1, #0
 800289e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	0018      	movs	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	b002      	add	sp, #8
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	46c0      	nop			@ (mov r8, r8)
 80028ac:	bffdfff8 	.word	0xbffdfff8
 80028b0:	ffff800f 	.word	0xffff800f

080028b4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028bc:	210f      	movs	r1, #15
 80028be:	187b      	adds	r3, r7, r1
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2225      	movs	r2, #37	@ 0x25
 80028c8:	5c9b      	ldrb	r3, [r3, r2]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d006      	beq.n	80028de <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2204      	movs	r2, #4
 80028d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80028d6:	187b      	adds	r3, r7, r1
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e049      	b.n	8002972 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	210e      	movs	r1, #14
 80028ea:	438a      	bics	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2101      	movs	r1, #1
 80028fa:	438a      	bics	r2, r1
 80028fc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002908:	491d      	ldr	r1, [pc, #116]	@ (8002980 <HAL_DMA_Abort_IT+0xcc>)
 800290a:	400a      	ands	r2, r1
 800290c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800290e:	4b1d      	ldr	r3, [pc, #116]	@ (8002984 <HAL_DMA_Abort_IT+0xd0>)
 8002910:	6859      	ldr	r1, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	221c      	movs	r2, #28
 8002918:	4013      	ands	r3, r2
 800291a:	2201      	movs	r2, #1
 800291c:	409a      	lsls	r2, r3
 800291e:	4b19      	ldr	r3, [pc, #100]	@ (8002984 <HAL_DMA_Abort_IT+0xd0>)
 8002920:	430a      	orrs	r2, r1
 8002922:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800292c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00c      	beq.n	8002950 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002940:	490f      	ldr	r1, [pc, #60]	@ (8002980 <HAL_DMA_Abort_IT+0xcc>)
 8002942:	400a      	ands	r2, r1
 8002944:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800294e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2225      	movs	r2, #37	@ 0x25
 8002954:	2101      	movs	r1, #1
 8002956:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2224      	movs	r2, #36	@ 0x24
 800295c:	2100      	movs	r1, #0
 800295e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002964:	2b00      	cmp	r3, #0
 8002966:	d004      	beq.n	8002972 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	0010      	movs	r0, r2
 8002970:	4798      	blx	r3
    }
  }
  return status;
 8002972:	230f      	movs	r3, #15
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	781b      	ldrb	r3, [r3, #0]
}
 8002978:	0018      	movs	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	b004      	add	sp, #16
 800297e:	bd80      	pop	{r7, pc}
 8002980:	fffffeff 	.word	0xfffffeff
 8002984:	40020000 	.word	0x40020000

08002988 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002990:	4b55      	ldr	r3, [pc, #340]	@ (8002ae8 <HAL_DMA_IRQHandler+0x160>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	221c      	movs	r2, #28
 80029a4:	4013      	ands	r3, r2
 80029a6:	2204      	movs	r2, #4
 80029a8:	409a      	lsls	r2, r3
 80029aa:	0013      	movs	r3, r2
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4013      	ands	r3, r2
 80029b0:	d027      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x7a>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2204      	movs	r2, #4
 80029b6:	4013      	ands	r3, r2
 80029b8:	d023      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2220      	movs	r2, #32
 80029c2:	4013      	ands	r3, r2
 80029c4:	d107      	bne.n	80029d6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2104      	movs	r1, #4
 80029d2:	438a      	bics	r2, r1
 80029d4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80029d6:	4b44      	ldr	r3, [pc, #272]	@ (8002ae8 <HAL_DMA_IRQHandler+0x160>)
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	221c      	movs	r2, #28
 80029e0:	4013      	ands	r3, r2
 80029e2:	2204      	movs	r2, #4
 80029e4:	409a      	lsls	r2, r3
 80029e6:	4b40      	ldr	r3, [pc, #256]	@ (8002ae8 <HAL_DMA_IRQHandler+0x160>)
 80029e8:	430a      	orrs	r2, r1
 80029ea:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d100      	bne.n	80029f6 <HAL_DMA_IRQHandler+0x6e>
 80029f4:	e073      	b.n	8002ade <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	0010      	movs	r0, r2
 80029fe:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002a00:	e06d      	b.n	8002ade <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	221c      	movs	r2, #28
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4013      	ands	r3, r2
 8002a14:	d02e      	beq.n	8002a74 <HAL_DMA_IRQHandler+0xec>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d02a      	beq.n	8002a74 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2220      	movs	r2, #32
 8002a26:	4013      	ands	r3, r2
 8002a28:	d10b      	bne.n	8002a42 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	210a      	movs	r1, #10
 8002a36:	438a      	bics	r2, r1
 8002a38:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2225      	movs	r2, #37	@ 0x25
 8002a3e:	2101      	movs	r1, #1
 8002a40:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002a42:	4b29      	ldr	r3, [pc, #164]	@ (8002ae8 <HAL_DMA_IRQHandler+0x160>)
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	221c      	movs	r2, #28
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2202      	movs	r2, #2
 8002a50:	409a      	lsls	r2, r3
 8002a52:	4b25      	ldr	r3, [pc, #148]	@ (8002ae8 <HAL_DMA_IRQHandler+0x160>)
 8002a54:	430a      	orrs	r2, r1
 8002a56:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2224      	movs	r2, #36	@ 0x24
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d03a      	beq.n	8002ade <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	0010      	movs	r0, r2
 8002a70:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002a72:	e034      	b.n	8002ade <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a78:	221c      	movs	r2, #28
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	0013      	movs	r3, r2
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4013      	ands	r3, r2
 8002a86:	d02b      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x158>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d027      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	210e      	movs	r1, #14
 8002a9c:	438a      	bics	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002aa0:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <HAL_DMA_IRQHandler+0x160>)
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	221c      	movs	r2, #28
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2201      	movs	r2, #1
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae8 <HAL_DMA_IRQHandler+0x160>)
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2225      	movs	r2, #37	@ 0x25
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2224      	movs	r2, #36	@ 0x24
 8002ac8:	2100      	movs	r1, #0
 8002aca:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	0010      	movs	r0, r2
 8002adc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ade:	46c0      	nop			@ (mov r8, r8)
 8002ae0:	46c0      	nop			@ (mov r8, r8)
}
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b004      	add	sp, #16
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40020000 	.word	0x40020000

08002aec <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2225      	movs	r2, #37	@ 0x25
 8002af8:	5c9b      	ldrb	r3, [r3, r2]
 8002afa:	b2db      	uxtb	r3, r3
}
 8002afc:	0018      	movs	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b002      	add	sp, #8
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	4a10      	ldr	r2, [pc, #64]	@ (8002b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002b14:	4694      	mov	ip, r2
 8002b16:	4463      	add	r3, ip
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	001a      	movs	r2, r3
 8002b26:	23ff      	movs	r3, #255	@ 0xff
 8002b28:	4013      	ands	r3, r2
 8002b2a:	3b08      	subs	r3, #8
 8002b2c:	2114      	movs	r1, #20
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f7fd fae8 	bl	8000104 <__udivsi3>
 8002b34:	0003      	movs	r3, r0
 8002b36:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a07      	ldr	r2, [pc, #28]	@ (8002b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002b3c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	221f      	movs	r2, #31
 8002b42:	4013      	ands	r3, r2
 8002b44:	2201      	movs	r2, #1
 8002b46:	409a      	lsls	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002b4c:	46c0      	nop			@ (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b004      	add	sp, #16
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	10008200 	.word	0x10008200
 8002b58:	40020880 	.word	0x40020880

08002b5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	223f      	movs	r2, #63	@ 0x3f
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4a0a      	ldr	r2, [pc, #40]	@ (8002b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002b72:	4694      	mov	ip, r2
 8002b74:	4463      	add	r3, ip
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	001a      	movs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a07      	ldr	r2, [pc, #28]	@ (8002ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002b82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	2203      	movs	r2, #3
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002b94:	46c0      	nop			@ (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b004      	add	sp, #16
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	1000823f 	.word	0x1000823f
 8002ba0:	40020940 	.word	0x40020940

08002ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bb2:	e147      	b.n	8002e44 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2101      	movs	r1, #1
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4091      	lsls	r1, r2
 8002bbe:	000a      	movs	r2, r1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d100      	bne.n	8002bcc <HAL_GPIO_Init+0x28>
 8002bca:	e138      	b.n	8002e3e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d005      	beq.n	8002be4 <HAL_GPIO_Init+0x40>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2203      	movs	r2, #3
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d130      	bne.n	8002c46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	0013      	movs	r3, r2
 8002bf4:	43da      	mvns	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	409a      	lsls	r2, r3
 8002c06:	0013      	movs	r3, r2
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	0013      	movs	r3, r2
 8002c22:	43da      	mvns	r2, r3
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	2201      	movs	r2, #1
 8002c32:	401a      	ands	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	409a      	lsls	r2, r3
 8002c38:	0013      	movs	r3, r2
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d017      	beq.n	8002c82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	0013      	movs	r3, r2
 8002c62:	43da      	mvns	r2, r3
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	409a      	lsls	r2, r3
 8002c74:	0013      	movs	r3, r2
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2203      	movs	r2, #3
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d123      	bne.n	8002cd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	08da      	lsrs	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3208      	adds	r2, #8
 8002c96:	0092      	lsls	r2, r2, #2
 8002c98:	58d3      	ldr	r3, [r2, r3]
 8002c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2207      	movs	r2, #7
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	220f      	movs	r2, #15
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	0013      	movs	r3, r2
 8002caa:	43da      	mvns	r2, r3
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2107      	movs	r1, #7
 8002cba:	400b      	ands	r3, r1
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	0013      	movs	r3, r2
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	08da      	lsrs	r2, r3, #3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3208      	adds	r2, #8
 8002cd0:	0092      	lsls	r2, r2, #2
 8002cd2:	6939      	ldr	r1, [r7, #16]
 8002cd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	0013      	movs	r3, r2
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	401a      	ands	r2, r3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	0013      	movs	r3, r2
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	23c0      	movs	r3, #192	@ 0xc0
 8002d10:	029b      	lsls	r3, r3, #10
 8002d12:	4013      	ands	r3, r2
 8002d14:	d100      	bne.n	8002d18 <HAL_GPIO_Init+0x174>
 8002d16:	e092      	b.n	8002e3e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002d18:	4a50      	ldr	r2, [pc, #320]	@ (8002e5c <HAL_GPIO_Init+0x2b8>)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	089b      	lsrs	r3, r3, #2
 8002d1e:	3318      	adds	r3, #24
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	589b      	ldr	r3, [r3, r2]
 8002d24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2203      	movs	r2, #3
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	220f      	movs	r2, #15
 8002d30:	409a      	lsls	r2, r3
 8002d32:	0013      	movs	r3, r2
 8002d34:	43da      	mvns	r2, r3
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	23a0      	movs	r3, #160	@ 0xa0
 8002d40:	05db      	lsls	r3, r3, #23
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d013      	beq.n	8002d6e <HAL_GPIO_Init+0x1ca>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a45      	ldr	r2, [pc, #276]	@ (8002e60 <HAL_GPIO_Init+0x2bc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00d      	beq.n	8002d6a <HAL_GPIO_Init+0x1c6>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a44      	ldr	r2, [pc, #272]	@ (8002e64 <HAL_GPIO_Init+0x2c0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d007      	beq.n	8002d66 <HAL_GPIO_Init+0x1c2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a43      	ldr	r2, [pc, #268]	@ (8002e68 <HAL_GPIO_Init+0x2c4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d101      	bne.n	8002d62 <HAL_GPIO_Init+0x1be>
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e006      	b.n	8002d70 <HAL_GPIO_Init+0x1cc>
 8002d62:	2305      	movs	r3, #5
 8002d64:	e004      	b.n	8002d70 <HAL_GPIO_Init+0x1cc>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e002      	b.n	8002d70 <HAL_GPIO_Init+0x1cc>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_GPIO_Init+0x1cc>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	2103      	movs	r1, #3
 8002d74:	400a      	ands	r2, r1
 8002d76:	00d2      	lsls	r2, r2, #3
 8002d78:	4093      	lsls	r3, r2
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002d80:	4936      	ldr	r1, [pc, #216]	@ (8002e5c <HAL_GPIO_Init+0x2b8>)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	089b      	lsrs	r3, r3, #2
 8002d86:	3318      	adds	r3, #24
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d8e:	4b33      	ldr	r3, [pc, #204]	@ (8002e5c <HAL_GPIO_Init+0x2b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	43da      	mvns	r2, r3
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	2380      	movs	r3, #128	@ 0x80
 8002da4:	035b      	lsls	r3, r3, #13
 8002da6:	4013      	ands	r3, r2
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002db2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e5c <HAL_GPIO_Init+0x2b8>)
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002db8:	4b28      	ldr	r3, [pc, #160]	@ (8002e5c <HAL_GPIO_Init+0x2b8>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	43da      	mvns	r2, r3
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	2380      	movs	r3, #128	@ 0x80
 8002dce:	039b      	lsls	r3, r3, #14
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8002e5c <HAL_GPIO_Init+0x2b8>)
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002de2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e5c <HAL_GPIO_Init+0x2b8>)
 8002de4:	2384      	movs	r3, #132	@ 0x84
 8002de6:	58d3      	ldr	r3, [r2, r3]
 8002de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	43da      	mvns	r2, r3
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	2380      	movs	r3, #128	@ 0x80
 8002dfa:	029b      	lsls	r3, r3, #10
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e08:	4914      	ldr	r1, [pc, #80]	@ (8002e5c <HAL_GPIO_Init+0x2b8>)
 8002e0a:	2284      	movs	r2, #132	@ 0x84
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002e10:	4a12      	ldr	r2, [pc, #72]	@ (8002e5c <HAL_GPIO_Init+0x2b8>)
 8002e12:	2380      	movs	r3, #128	@ 0x80
 8002e14:	58d3      	ldr	r3, [r2, r3]
 8002e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	2380      	movs	r3, #128	@ 0x80
 8002e28:	025b      	lsls	r3, r3, #9
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e36:	4909      	ldr	r1, [pc, #36]	@ (8002e5c <HAL_GPIO_Init+0x2b8>)
 8002e38:	2280      	movs	r2, #128	@ 0x80
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3301      	adds	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	40da      	lsrs	r2, r3
 8002e4c:	1e13      	subs	r3, r2, #0
 8002e4e:	d000      	beq.n	8002e52 <HAL_GPIO_Init+0x2ae>
 8002e50:	e6b0      	b.n	8002bb4 <HAL_GPIO_Init+0x10>
  }
}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	46c0      	nop			@ (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b006      	add	sp, #24
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021800 	.word	0x40021800
 8002e60:	50000400 	.word	0x50000400
 8002e64:	50000800 	.word	0x50000800
 8002e68:	50000c00 	.word	0x50000c00

08002e6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	000a      	movs	r2, r1
 8002e76:	1cbb      	adds	r3, r7, #2
 8002e78:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	1cba      	adds	r2, r7, #2
 8002e80:	8812      	ldrh	r2, [r2, #0]
 8002e82:	4013      	ands	r3, r2
 8002e84:	d004      	beq.n	8002e90 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002e86:	230f      	movs	r3, #15
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e003      	b.n	8002e98 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e90:	230f      	movs	r3, #15
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002e98:	230f      	movs	r3, #15
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	781b      	ldrb	r3, [r3, #0]
}
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b004      	add	sp, #16
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	0008      	movs	r0, r1
 8002eb0:	0011      	movs	r1, r2
 8002eb2:	1cbb      	adds	r3, r7, #2
 8002eb4:	1c02      	adds	r2, r0, #0
 8002eb6:	801a      	strh	r2, [r3, #0]
 8002eb8:	1c7b      	adds	r3, r7, #1
 8002eba:	1c0a      	adds	r2, r1, #0
 8002ebc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ebe:	1c7b      	adds	r3, r7, #1
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d004      	beq.n	8002ed0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ec6:	1cbb      	adds	r3, r7, #2
 8002ec8:	881a      	ldrh	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ece:	e003      	b.n	8002ed8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ed0:	1cbb      	adds	r3, r7, #2
 8002ed2:	881a      	ldrh	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ed8:	46c0      	nop			@ (mov r8, r8)
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b002      	add	sp, #8
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	0002      	movs	r2, r0
 8002ee8:	1dbb      	adds	r3, r7, #6
 8002eea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002eec:	4b10      	ldr	r3, [pc, #64]	@ (8002f30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	1dba      	adds	r2, r7, #6
 8002ef2:	8812      	ldrh	r2, [r2, #0]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d008      	beq.n	8002f0a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002efa:	1dba      	adds	r2, r7, #6
 8002efc:	8812      	ldrh	r2, [r2, #0]
 8002efe:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002f00:	1dbb      	adds	r3, r7, #6
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	0018      	movs	r0, r3
 8002f06:	f7ff f849 	bl	8001f9c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002f0a:	4b09      	ldr	r3, [pc, #36]	@ (8002f30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	1dba      	adds	r2, r7, #6
 8002f10:	8812      	ldrh	r2, [r2, #0]
 8002f12:	4013      	ands	r3, r2
 8002f14:	d008      	beq.n	8002f28 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002f16:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002f18:	1dba      	adds	r2, r7, #6
 8002f1a:	8812      	ldrh	r2, [r2, #0]
 8002f1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002f1e:	1dbb      	adds	r3, r7, #6
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7ff f884 	bl	8002030 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002f28:	46c0      	nop			@ (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b002      	add	sp, #8
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021800 	.word	0x40021800

08002f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e08f      	b.n	8003066 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2241      	movs	r2, #65	@ 0x41
 8002f4a:	5c9b      	ldrb	r3, [r3, r2]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d107      	bne.n	8002f62 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2240      	movs	r2, #64	@ 0x40
 8002f56:	2100      	movs	r1, #0
 8002f58:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f7ff f8dd 	bl	800211c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2241      	movs	r2, #65	@ 0x41
 8002f66:	2124      	movs	r1, #36	@ 0x24
 8002f68:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2101      	movs	r1, #1
 8002f76:	438a      	bics	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	493b      	ldr	r1, [pc, #236]	@ (8003070 <HAL_I2C_Init+0x13c>)
 8002f84:	400a      	ands	r2, r1
 8002f86:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4938      	ldr	r1, [pc, #224]	@ (8003074 <HAL_I2C_Init+0x140>)
 8002f94:	400a      	ands	r2, r1
 8002f96:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d108      	bne.n	8002fb2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2180      	movs	r1, #128	@ 0x80
 8002faa:	0209      	lsls	r1, r1, #8
 8002fac:	430a      	orrs	r2, r1
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	e007      	b.n	8002fc2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2184      	movs	r1, #132	@ 0x84
 8002fbc:	0209      	lsls	r1, r1, #8
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d109      	bne.n	8002fde <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2180      	movs	r1, #128	@ 0x80
 8002fd6:	0109      	lsls	r1, r1, #4
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	e007      	b.n	8002fee <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4923      	ldr	r1, [pc, #140]	@ (8003078 <HAL_I2C_Init+0x144>)
 8002fea:	400a      	ands	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4920      	ldr	r1, [pc, #128]	@ (800307c <HAL_I2C_Init+0x148>)
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	491a      	ldr	r1, [pc, #104]	@ (8003074 <HAL_I2C_Init+0x140>)
 800300a:	400a      	ands	r2, r1
 800300c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	431a      	orrs	r2, r3
 8003018:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69d9      	ldr	r1, [r3, #28]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1a      	ldr	r2, [r3, #32]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2101      	movs	r1, #1
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2241      	movs	r2, #65	@ 0x41
 8003052:	2120      	movs	r1, #32
 8003054:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2242      	movs	r2, #66	@ 0x42
 8003060:	2100      	movs	r1, #0
 8003062:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	0018      	movs	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	b002      	add	sp, #8
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			@ (mov r8, r8)
 8003070:	f0ffffff 	.word	0xf0ffffff
 8003074:	ffff7fff 	.word	0xffff7fff
 8003078:	fffff7ff 	.word	0xfffff7ff
 800307c:	02008000 	.word	0x02008000

08003080 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b089      	sub	sp, #36	@ 0x24
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	0008      	movs	r0, r1
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	0019      	movs	r1, r3
 800308e:	230a      	movs	r3, #10
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	1c02      	adds	r2, r0, #0
 8003094:	801a      	strh	r2, [r3, #0]
 8003096:	2308      	movs	r3, #8
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	1c0a      	adds	r2, r1, #0
 800309c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2241      	movs	r2, #65	@ 0x41
 80030a2:	5c9b      	ldrb	r3, [r3, r2]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	d000      	beq.n	80030ac <HAL_I2C_Master_Transmit+0x2c>
 80030aa:	e10a      	b.n	80032c2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2240      	movs	r2, #64	@ 0x40
 80030b0:	5c9b      	ldrb	r3, [r3, r2]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_I2C_Master_Transmit+0x3a>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e104      	b.n	80032c4 <HAL_I2C_Master_Transmit+0x244>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2240      	movs	r2, #64	@ 0x40
 80030be:	2101      	movs	r1, #1
 80030c0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030c2:	f7ff fa61 	bl	8002588 <HAL_GetTick>
 80030c6:	0003      	movs	r3, r0
 80030c8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030ca:	2380      	movs	r3, #128	@ 0x80
 80030cc:	0219      	lsls	r1, r3, #8
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	2319      	movs	r3, #25
 80030d6:	2201      	movs	r2, #1
 80030d8:	f001 f900 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 80030dc:	1e03      	subs	r3, r0, #0
 80030de:	d001      	beq.n	80030e4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0ef      	b.n	80032c4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2241      	movs	r2, #65	@ 0x41
 80030e8:	2121      	movs	r1, #33	@ 0x21
 80030ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2242      	movs	r2, #66	@ 0x42
 80030f0:	2110      	movs	r1, #16
 80030f2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2208      	movs	r2, #8
 8003104:	18ba      	adds	r2, r7, r2
 8003106:	8812      	ldrh	r2, [r2, #0]
 8003108:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2bff      	cmp	r3, #255	@ 0xff
 8003118:	d906      	bls.n	8003128 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	22ff      	movs	r2, #255	@ 0xff
 800311e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003120:	2380      	movs	r3, #128	@ 0x80
 8003122:	045b      	lsls	r3, r3, #17
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	e007      	b.n	8003138 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003132:	2380      	movs	r3, #128	@ 0x80
 8003134:	049b      	lsls	r3, r3, #18
 8003136:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313c:	2b00      	cmp	r3, #0
 800313e:	d027      	beq.n	8003190 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003144:	781a      	ldrb	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003174:	b2db      	uxtb	r3, r3
 8003176:	3301      	adds	r3, #1
 8003178:	b2da      	uxtb	r2, r3
 800317a:	697c      	ldr	r4, [r7, #20]
 800317c:	230a      	movs	r3, #10
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	8819      	ldrh	r1, [r3, #0]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	4b51      	ldr	r3, [pc, #324]	@ (80032cc <HAL_I2C_Master_Transmit+0x24c>)
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	0023      	movs	r3, r4
 800318a:	f001 fb1f 	bl	80047cc <I2C_TransferConfig>
 800318e:	e06f      	b.n	8003270 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003194:	b2da      	uxtb	r2, r3
 8003196:	697c      	ldr	r4, [r7, #20]
 8003198:	230a      	movs	r3, #10
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	8819      	ldrh	r1, [r3, #0]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	4b4a      	ldr	r3, [pc, #296]	@ (80032cc <HAL_I2C_Master_Transmit+0x24c>)
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	0023      	movs	r3, r4
 80031a6:	f001 fb11 	bl	80047cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80031aa:	e061      	b.n	8003270 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	0018      	movs	r0, r3
 80031b4:	f001 f8ea 	bl	800438c <I2C_WaitOnTXISFlagUntilTimeout>
 80031b8:	1e03      	subs	r3, r0, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e081      	b.n	80032c4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c4:	781a      	ldrb	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d03a      	beq.n	8003270 <HAL_I2C_Master_Transmit+0x1f0>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d136      	bne.n	8003270 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003202:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	0013      	movs	r3, r2
 800320c:	2200      	movs	r2, #0
 800320e:	2180      	movs	r1, #128	@ 0x80
 8003210:	f001 f864 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8003214:	1e03      	subs	r3, r0, #0
 8003216:	d001      	beq.n	800321c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e053      	b.n	80032c4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	2bff      	cmp	r3, #255	@ 0xff
 8003224:	d911      	bls.n	800324a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	22ff      	movs	r2, #255	@ 0xff
 800322a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003230:	b2da      	uxtb	r2, r3
 8003232:	2380      	movs	r3, #128	@ 0x80
 8003234:	045c      	lsls	r4, r3, #17
 8003236:	230a      	movs	r3, #10
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	8819      	ldrh	r1, [r3, #0]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	2300      	movs	r3, #0
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	0023      	movs	r3, r4
 8003244:	f001 fac2 	bl	80047cc <I2C_TransferConfig>
 8003248:	e012      	b.n	8003270 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003258:	b2da      	uxtb	r2, r3
 800325a:	2380      	movs	r3, #128	@ 0x80
 800325c:	049c      	lsls	r4, r3, #18
 800325e:	230a      	movs	r3, #10
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	8819      	ldrh	r1, [r3, #0]
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	2300      	movs	r3, #0
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	0023      	movs	r3, r4
 800326c:	f001 faae 	bl	80047cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d198      	bne.n	80031ac <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	0018      	movs	r0, r3
 8003282:	f001 f8c9 	bl	8004418 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003286:	1e03      	subs	r3, r0, #0
 8003288:	d001      	beq.n	800328e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e01a      	b.n	80032c4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2220      	movs	r2, #32
 8003294:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	490b      	ldr	r1, [pc, #44]	@ (80032d0 <HAL_I2C_Master_Transmit+0x250>)
 80032a2:	400a      	ands	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2241      	movs	r2, #65	@ 0x41
 80032aa:	2120      	movs	r1, #32
 80032ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2242      	movs	r2, #66	@ 0x42
 80032b2:	2100      	movs	r1, #0
 80032b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2240      	movs	r2, #64	@ 0x40
 80032ba:	2100      	movs	r1, #0
 80032bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
  }
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b007      	add	sp, #28
 80032ca:	bd90      	pop	{r4, r7, pc}
 80032cc:	80002000 	.word	0x80002000
 80032d0:	fe00e800 	.word	0xfe00e800

080032d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b089      	sub	sp, #36	@ 0x24
 80032d8:	af02      	add	r7, sp, #8
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	0008      	movs	r0, r1
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	0019      	movs	r1, r3
 80032e2:	230a      	movs	r3, #10
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	1c02      	adds	r2, r0, #0
 80032e8:	801a      	strh	r2, [r3, #0]
 80032ea:	2308      	movs	r3, #8
 80032ec:	18fb      	adds	r3, r7, r3
 80032ee:	1c0a      	adds	r2, r1, #0
 80032f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2241      	movs	r2, #65	@ 0x41
 80032f6:	5c9b      	ldrb	r3, [r3, r2]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	d000      	beq.n	8003300 <HAL_I2C_Master_Receive+0x2c>
 80032fe:	e0e8      	b.n	80034d2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2240      	movs	r2, #64	@ 0x40
 8003304:	5c9b      	ldrb	r3, [r3, r2]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_I2C_Master_Receive+0x3a>
 800330a:	2302      	movs	r3, #2
 800330c:	e0e2      	b.n	80034d4 <HAL_I2C_Master_Receive+0x200>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2240      	movs	r2, #64	@ 0x40
 8003312:	2101      	movs	r1, #1
 8003314:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003316:	f7ff f937 	bl	8002588 <HAL_GetTick>
 800331a:	0003      	movs	r3, r0
 800331c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800331e:	2380      	movs	r3, #128	@ 0x80
 8003320:	0219      	lsls	r1, r3, #8
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	2319      	movs	r3, #25
 800332a:	2201      	movs	r2, #1
 800332c:	f000 ffd6 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8003330:	1e03      	subs	r3, r0, #0
 8003332:	d001      	beq.n	8003338 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0cd      	b.n	80034d4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2241      	movs	r2, #65	@ 0x41
 800333c:	2122      	movs	r1, #34	@ 0x22
 800333e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2242      	movs	r2, #66	@ 0x42
 8003344:	2110      	movs	r1, #16
 8003346:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2208      	movs	r2, #8
 8003358:	18ba      	adds	r2, r7, r2
 800335a:	8812      	ldrh	r2, [r2, #0]
 800335c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	2bff      	cmp	r3, #255	@ 0xff
 800336c:	d911      	bls.n	8003392 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	22ff      	movs	r2, #255	@ 0xff
 8003372:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003378:	b2da      	uxtb	r2, r3
 800337a:	2380      	movs	r3, #128	@ 0x80
 800337c:	045c      	lsls	r4, r3, #17
 800337e:	230a      	movs	r3, #10
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	8819      	ldrh	r1, [r3, #0]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	4b55      	ldr	r3, [pc, #340]	@ (80034dc <HAL_I2C_Master_Receive+0x208>)
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	0023      	movs	r3, r4
 800338c:	f001 fa1e 	bl	80047cc <I2C_TransferConfig>
 8003390:	e076      	b.n	8003480 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	2380      	movs	r3, #128	@ 0x80
 80033a4:	049c      	lsls	r4, r3, #18
 80033a6:	230a      	movs	r3, #10
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	8819      	ldrh	r1, [r3, #0]
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	4b4b      	ldr	r3, [pc, #300]	@ (80034dc <HAL_I2C_Master_Receive+0x208>)
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	0023      	movs	r3, r4
 80033b4:	f001 fa0a 	bl	80047cc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80033b8:	e062      	b.n	8003480 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	0018      	movs	r0, r3
 80033c2:	f001 f86d 	bl	80044a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033c6:	1e03      	subs	r3, r0, #0
 80033c8:	d001      	beq.n	80033ce <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e082      	b.n	80034d4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d03a      	beq.n	8003480 <HAL_I2C_Master_Receive+0x1ac>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800340e:	2b00      	cmp	r3, #0
 8003410:	d136      	bne.n	8003480 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003412:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	0013      	movs	r3, r2
 800341c:	2200      	movs	r2, #0
 800341e:	2180      	movs	r1, #128	@ 0x80
 8003420:	f000 ff5c 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8003424:	1e03      	subs	r3, r0, #0
 8003426:	d001      	beq.n	800342c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e053      	b.n	80034d4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	2bff      	cmp	r3, #255	@ 0xff
 8003434:	d911      	bls.n	800345a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	22ff      	movs	r2, #255	@ 0xff
 800343a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003440:	b2da      	uxtb	r2, r3
 8003442:	2380      	movs	r3, #128	@ 0x80
 8003444:	045c      	lsls	r4, r3, #17
 8003446:	230a      	movs	r3, #10
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	8819      	ldrh	r1, [r3, #0]
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	2300      	movs	r3, #0
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	0023      	movs	r3, r4
 8003454:	f001 f9ba 	bl	80047cc <I2C_TransferConfig>
 8003458:	e012      	b.n	8003480 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003468:	b2da      	uxtb	r2, r3
 800346a:	2380      	movs	r3, #128	@ 0x80
 800346c:	049c      	lsls	r4, r3, #18
 800346e:	230a      	movs	r3, #10
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	8819      	ldrh	r1, [r3, #0]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	2300      	movs	r3, #0
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	0023      	movs	r3, r4
 800347c:	f001 f9a6 	bl	80047cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d197      	bne.n	80033ba <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	0018      	movs	r0, r3
 8003492:	f000 ffc1 	bl	8004418 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003496:	1e03      	subs	r3, r0, #0
 8003498:	d001      	beq.n	800349e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e01a      	b.n	80034d4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2220      	movs	r2, #32
 80034a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	490b      	ldr	r1, [pc, #44]	@ (80034e0 <HAL_I2C_Master_Receive+0x20c>)
 80034b2:	400a      	ands	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2241      	movs	r2, #65	@ 0x41
 80034ba:	2120      	movs	r1, #32
 80034bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2242      	movs	r2, #66	@ 0x42
 80034c2:	2100      	movs	r1, #0
 80034c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2240      	movs	r2, #64	@ 0x40
 80034ca:	2100      	movs	r1, #0
 80034cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	e000      	b.n	80034d4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
  }
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b007      	add	sp, #28
 80034da:	bd90      	pop	{r4, r7, pc}
 80034dc:	80002400 	.word	0x80002400
 80034e0:	fe00e800 	.word	0xfe00e800

080034e4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	@ 0x28
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	230a      	movs	r3, #10
 80034f2:	18fb      	adds	r3, r7, r3
 80034f4:	1c0a      	adds	r2, r1, #0
 80034f6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2241      	movs	r2, #65	@ 0x41
 8003500:	5c9b      	ldrb	r3, [r3, r2]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b20      	cmp	r3, #32
 8003506:	d000      	beq.n	800350a <HAL_I2C_IsDeviceReady+0x26>
 8003508:	e0df      	b.n	80036ca <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699a      	ldr	r2, [r3, #24]
 8003510:	2380      	movs	r3, #128	@ 0x80
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	401a      	ands	r2, r3
 8003516:	2380      	movs	r3, #128	@ 0x80
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	429a      	cmp	r2, r3
 800351c:	d101      	bne.n	8003522 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800351e:	2302      	movs	r3, #2
 8003520:	e0d4      	b.n	80036cc <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2240      	movs	r2, #64	@ 0x40
 8003526:	5c9b      	ldrb	r3, [r3, r2]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_I2C_IsDeviceReady+0x4c>
 800352c:	2302      	movs	r3, #2
 800352e:	e0cd      	b.n	80036cc <HAL_I2C_IsDeviceReady+0x1e8>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2240      	movs	r2, #64	@ 0x40
 8003534:	2101      	movs	r1, #1
 8003536:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2241      	movs	r2, #65	@ 0x41
 800353c:	2124      	movs	r1, #36	@ 0x24
 800353e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d107      	bne.n	800355e <HAL_I2C_IsDeviceReady+0x7a>
 800354e:	230a      	movs	r3, #10
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	059b      	lsls	r3, r3, #22
 8003556:	0d9b      	lsrs	r3, r3, #22
 8003558:	4a5e      	ldr	r2, [pc, #376]	@ (80036d4 <HAL_I2C_IsDeviceReady+0x1f0>)
 800355a:	431a      	orrs	r2, r3
 800355c:	e006      	b.n	800356c <HAL_I2C_IsDeviceReady+0x88>
 800355e:	230a      	movs	r3, #10
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	059b      	lsls	r3, r3, #22
 8003566:	0d9b      	lsrs	r3, r3, #22
 8003568:	4a5b      	ldr	r2, [pc, #364]	@ (80036d8 <HAL_I2C_IsDeviceReady+0x1f4>)
 800356a:	431a      	orrs	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003572:	f7ff f809 	bl	8002588 <HAL_GetTick>
 8003576:	0003      	movs	r3, r0
 8003578:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2220      	movs	r2, #32
 8003582:	4013      	ands	r3, r2
 8003584:	3b20      	subs	r3, #32
 8003586:	425a      	negs	r2, r3
 8003588:	4153      	adcs	r3, r2
 800358a:	b2da      	uxtb	r2, r3
 800358c:	231f      	movs	r3, #31
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2210      	movs	r2, #16
 800359a:	4013      	ands	r3, r2
 800359c:	3b10      	subs	r3, #16
 800359e:	425a      	negs	r2, r3
 80035a0:	4153      	adcs	r3, r2
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	231e      	movs	r3, #30
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80035aa:	e035      	b.n	8003618 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	3301      	adds	r3, #1
 80035b0:	d01a      	beq.n	80035e8 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7fe ffe9 	bl	8002588 <HAL_GetTick>
 80035b6:	0002      	movs	r2, r0
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d302      	bcc.n	80035c8 <HAL_I2C_IsDeviceReady+0xe4>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10f      	bne.n	80035e8 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2241      	movs	r2, #65	@ 0x41
 80035cc:	2120      	movs	r1, #32
 80035ce:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d4:	2220      	movs	r2, #32
 80035d6:	431a      	orrs	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2240      	movs	r2, #64	@ 0x40
 80035e0:	2100      	movs	r1, #0
 80035e2:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e071      	b.n	80036cc <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2220      	movs	r2, #32
 80035f0:	4013      	ands	r3, r2
 80035f2:	3b20      	subs	r3, #32
 80035f4:	425a      	negs	r2, r3
 80035f6:	4153      	adcs	r3, r2
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	231f      	movs	r3, #31
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2210      	movs	r2, #16
 8003608:	4013      	ands	r3, r2
 800360a:	3b10      	subs	r3, #16
 800360c:	425a      	negs	r2, r3
 800360e:	4153      	adcs	r3, r2
 8003610:	b2da      	uxtb	r2, r3
 8003612:	231e      	movs	r3, #30
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003618:	231f      	movs	r3, #31
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <HAL_I2C_IsDeviceReady+0x148>
 8003622:	231e      	movs	r3, #30
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0bf      	beq.n	80035ac <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2210      	movs	r2, #16
 8003634:	4013      	ands	r3, r2
 8003636:	2b10      	cmp	r3, #16
 8003638:	d01a      	beq.n	8003670 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	0013      	movs	r3, r2
 8003644:	2200      	movs	r2, #0
 8003646:	2120      	movs	r1, #32
 8003648:	f000 fe48 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 800364c:	1e03      	subs	r3, r0, #0
 800364e:	d001      	beq.n	8003654 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e03b      	b.n	80036cc <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2220      	movs	r2, #32
 800365a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2241      	movs	r2, #65	@ 0x41
 8003660:	2120      	movs	r1, #32
 8003662:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2240      	movs	r2, #64	@ 0x40
 8003668:	2100      	movs	r1, #0
 800366a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	e02d      	b.n	80036cc <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	0013      	movs	r3, r2
 800367a:	2200      	movs	r2, #0
 800367c:	2120      	movs	r1, #32
 800367e:	f000 fe2d 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8003682:	1e03      	subs	r3, r0, #0
 8003684:	d001      	beq.n	800368a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e020      	b.n	80036cc <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2210      	movs	r2, #16
 8003690:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2220      	movs	r2, #32
 8003698:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	3301      	adds	r3, #1
 800369e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d900      	bls.n	80036aa <HAL_I2C_IsDeviceReady+0x1c6>
 80036a8:	e74d      	b.n	8003546 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2241      	movs	r2, #65	@ 0x41
 80036ae:	2120      	movs	r1, #32
 80036b0:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b6:	2220      	movs	r2, #32
 80036b8:	431a      	orrs	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2240      	movs	r2, #64	@ 0x40
 80036c2:	2100      	movs	r1, #0
 80036c4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80036ca:	2302      	movs	r3, #2
  }
}
 80036cc:	0018      	movs	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b008      	add	sp, #32
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	02002000 	.word	0x02002000
 80036d8:	02002800 	.word	0x02002800

080036dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	68f9      	ldr	r1, [r7, #12]
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4798      	blx	r3
  }
}
 8003708:	46c0      	nop			@ (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b004      	add	sp, #16
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	2380      	movs	r3, #128	@ 0x80
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	4013      	ands	r3, r2
 8003730:	d00e      	beq.n	8003750 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2280      	movs	r2, #128	@ 0x80
 8003736:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003738:	d00a      	beq.n	8003750 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373e:	2201      	movs	r2, #1
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2280      	movs	r2, #128	@ 0x80
 800374c:	0052      	lsls	r2, r2, #1
 800374e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	2380      	movs	r3, #128	@ 0x80
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4013      	ands	r3, r2
 8003758:	d00e      	beq.n	8003778 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2280      	movs	r2, #128	@ 0x80
 800375e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003760:	d00a      	beq.n	8003778 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003766:	2208      	movs	r2, #8
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2280      	movs	r2, #128	@ 0x80
 8003774:	00d2      	lsls	r2, r2, #3
 8003776:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	2380      	movs	r3, #128	@ 0x80
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4013      	ands	r3, r2
 8003780:	d00e      	beq.n	80037a0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2280      	movs	r2, #128	@ 0x80
 8003786:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003788:	d00a      	beq.n	80037a0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378e:	2202      	movs	r2, #2
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2280      	movs	r2, #128	@ 0x80
 800379c:	0092      	lsls	r2, r2, #2
 800379e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	220b      	movs	r2, #11
 80037aa:	4013      	ands	r3, r2
 80037ac:	d005      	beq.n	80037ba <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	0011      	movs	r1, r2
 80037b4:	0018      	movs	r0, r3
 80037b6:	f000 fc25 	bl	8004004 <I2C_ITError>
  }
}
 80037ba:	46c0      	nop			@ (mov r8, r8)
 80037bc:	46bd      	mov	sp, r7
 80037be:	b006      	add	sp, #24
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80037ca:	46c0      	nop			@ (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b002      	add	sp, #8
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80037da:	46c0      	nop			@ (mov r8, r8)
 80037dc:	46bd      	mov	sp, r7
 80037de:	b002      	add	sp, #8
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	0008      	movs	r0, r1
 80037ec:	0011      	movs	r1, r2
 80037ee:	1cfb      	adds	r3, r7, #3
 80037f0:	1c02      	adds	r2, r0, #0
 80037f2:	701a      	strb	r2, [r3, #0]
 80037f4:	003b      	movs	r3, r7
 80037f6:	1c0a      	adds	r2, r1, #0
 80037f8:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80037fa:	46c0      	nop			@ (mov r8, r8)
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b002      	add	sp, #8
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800380a:	46c0      	nop			@ (mov r8, r8)
 800380c:	46bd      	mov	sp, r7
 800380e:	b002      	add	sp, #8
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	46bd      	mov	sp, r7
 800381e:	b002      	add	sp, #8
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800382a:	46c0      	nop			@ (mov r8, r8)
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2240      	movs	r2, #64	@ 0x40
 800384e:	5c9b      	ldrb	r3, [r3, r2]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <I2C_Slave_ISR_IT+0x24>
 8003854:	2302      	movs	r3, #2
 8003856:	e0e7      	b.n	8003a28 <I2C_Slave_ISR_IT+0x1f4>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2240      	movs	r2, #64	@ 0x40
 800385c:	2101      	movs	r1, #1
 800385e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2220      	movs	r2, #32
 8003864:	4013      	ands	r3, r2
 8003866:	d00a      	beq.n	800387e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800386e:	d006      	beq.n	800387e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	0011      	movs	r1, r2
 8003876:	0018      	movs	r0, r3
 8003878:	f000 f9e4 	bl	8003c44 <I2C_ITSlaveCplt>
 800387c:	e0cf      	b.n	8003a1e <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2210      	movs	r2, #16
 8003882:	4013      	ands	r3, r2
 8003884:	d052      	beq.n	800392c <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2210      	movs	r2, #16
 800388a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800388c:	d04e      	beq.n	800392c <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d12d      	bne.n	80038f4 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2241      	movs	r2, #65	@ 0x41
 800389c:	5c9b      	ldrb	r3, [r3, r2]
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b28      	cmp	r3, #40	@ 0x28
 80038a2:	d10b      	bne.n	80038bc <I2C_Slave_ISR_IT+0x88>
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	2380      	movs	r3, #128	@ 0x80
 80038a8:	049b      	lsls	r3, r3, #18
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d106      	bne.n	80038bc <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	0011      	movs	r1, r2
 80038b4:	0018      	movs	r0, r3
 80038b6:	f000 fb4d 	bl	8003f54 <I2C_ITListenCplt>
 80038ba:	e036      	b.n	800392a <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2241      	movs	r2, #65	@ 0x41
 80038c0:	5c9b      	ldrb	r3, [r3, r2]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b29      	cmp	r3, #41	@ 0x29
 80038c6:	d110      	bne.n	80038ea <I2C_Slave_ISR_IT+0xb6>
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	4a59      	ldr	r2, [pc, #356]	@ (8003a30 <I2C_Slave_ISR_IT+0x1fc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00c      	beq.n	80038ea <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2210      	movs	r2, #16
 80038d6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	0018      	movs	r0, r3
 80038dc:	f000 fcbd 	bl	800425a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	0018      	movs	r0, r3
 80038e4:	f000 f94a 	bl	8003b7c <I2C_ITSlaveSeqCplt>
 80038e8:	e01f      	b.n	800392a <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2210      	movs	r2, #16
 80038f0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80038f2:	e091      	b.n	8003a18 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2210      	movs	r2, #16
 80038fa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003900:	2204      	movs	r2, #4
 8003902:	431a      	orrs	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <I2C_Slave_ISR_IT+0xe6>
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	2380      	movs	r3, #128	@ 0x80
 8003912:	045b      	lsls	r3, r3, #17
 8003914:	429a      	cmp	r2, r3
 8003916:	d000      	beq.n	800391a <I2C_Slave_ISR_IT+0xe6>
 8003918:	e07e      	b.n	8003a18 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	0011      	movs	r1, r2
 8003922:	0018      	movs	r0, r3
 8003924:	f000 fb6e 	bl	8004004 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003928:	e076      	b.n	8003a18 <I2C_Slave_ISR_IT+0x1e4>
 800392a:	e075      	b.n	8003a18 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2204      	movs	r2, #4
 8003930:	4013      	ands	r3, r2
 8003932:	d02f      	beq.n	8003994 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2204      	movs	r2, #4
 8003938:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800393a:	d02b      	beq.n	8003994 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d018      	beq.n	8003978 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d14c      	bne.n	8003a1c <I2C_Slave_ISR_IT+0x1e8>
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	4a2a      	ldr	r2, [pc, #168]	@ (8003a30 <I2C_Slave_ISR_IT+0x1fc>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d048      	beq.n	8003a1c <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	0018      	movs	r0, r3
 800398e:	f000 f8f5 	bl	8003b7c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003992:	e043      	b.n	8003a1c <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	2208      	movs	r2, #8
 8003998:	4013      	ands	r3, r2
 800399a:	d00a      	beq.n	80039b2 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2208      	movs	r2, #8
 80039a0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039a2:	d006      	beq.n	80039b2 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	0011      	movs	r1, r2
 80039aa:	0018      	movs	r0, r3
 80039ac:	f000 f842 	bl	8003a34 <I2C_ITAddrCplt>
 80039b0:	e035      	b.n	8003a1e <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2202      	movs	r2, #2
 80039b6:	4013      	ands	r3, r2
 80039b8:	d031      	beq.n	8003a1e <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80039c0:	d02d      	beq.n	8003a1e <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d018      	beq.n	80039fe <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	781a      	ldrb	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	851a      	strh	r2, [r3, #40]	@ 0x28
 80039fc:	e00f      	b.n	8003a1e <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	2380      	movs	r3, #128	@ 0x80
 8003a02:	045b      	lsls	r3, r3, #17
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d002      	beq.n	8003a0e <I2C_Slave_ISR_IT+0x1da>
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d107      	bne.n	8003a1e <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	0018      	movs	r0, r3
 8003a12:	f000 f8b3 	bl	8003b7c <I2C_ITSlaveSeqCplt>
 8003a16:	e002      	b.n	8003a1e <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8003a18:	46c0      	nop			@ (mov r8, r8)
 8003a1a:	e000      	b.n	8003a1e <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8003a1c:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2240      	movs	r2, #64	@ 0x40
 8003a22:	2100      	movs	r1, #0
 8003a24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b006      	add	sp, #24
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	ffff0000 	.word	0xffff0000

08003a34 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a34:	b5b0      	push	{r4, r5, r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2241      	movs	r2, #65	@ 0x41
 8003a42:	5c9b      	ldrb	r3, [r3, r2]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	001a      	movs	r2, r3
 8003a48:	2328      	movs	r3, #40	@ 0x28
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b28      	cmp	r3, #40	@ 0x28
 8003a4e:	d000      	beq.n	8003a52 <I2C_ITAddrCplt+0x1e>
 8003a50:	e088      	b.n	8003b64 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	250f      	movs	r5, #15
 8003a5e:	197b      	adds	r3, r7, r5
 8003a60:	2101      	movs	r1, #1
 8003a62:	400a      	ands	r2, r1
 8003a64:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	0c1b      	lsrs	r3, r3, #16
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	200c      	movs	r0, #12
 8003a72:	183b      	adds	r3, r7, r0
 8003a74:	21fe      	movs	r1, #254	@ 0xfe
 8003a76:	400a      	ands	r2, r1
 8003a78:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	240a      	movs	r4, #10
 8003a84:	193b      	adds	r3, r7, r4
 8003a86:	0592      	lsls	r2, r2, #22
 8003a88:	0d92      	lsrs	r2, r2, #22
 8003a8a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	2308      	movs	r3, #8
 8003a96:	18fb      	adds	r3, r7, r3
 8003a98:	21fe      	movs	r1, #254	@ 0xfe
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d148      	bne.n	8003b38 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003aa6:	0021      	movs	r1, r4
 8003aa8:	187b      	adds	r3, r7, r1
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	09db      	lsrs	r3, r3, #7
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	183b      	adds	r3, r7, r0
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	4053      	eors	r3, r2
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	001a      	movs	r2, r3
 8003aba:	2306      	movs	r3, #6
 8003abc:	4013      	ands	r3, r2
 8003abe:	d120      	bne.n	8003b02 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003ac0:	183b      	adds	r3, r7, r0
 8003ac2:	187a      	adds	r2, r7, r1
 8003ac4:	8812      	ldrh	r2, [r2, #0]
 8003ac6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d14c      	bne.n	8003b74 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2240      	movs	r2, #64	@ 0x40
 8003aec:	2100      	movs	r1, #0
 8003aee:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003af0:	183b      	adds	r3, r7, r0
 8003af2:	881a      	ldrh	r2, [r3, #0]
 8003af4:	197b      	adds	r3, r7, r5
 8003af6:	7819      	ldrb	r1, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	0018      	movs	r0, r3
 8003afc:	f7ff fe71 	bl	80037e2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b00:	e038      	b.n	8003b74 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8003b02:	240c      	movs	r4, #12
 8003b04:	193b      	adds	r3, r7, r4
 8003b06:	2208      	movs	r2, #8
 8003b08:	18ba      	adds	r2, r7, r2
 8003b0a:	8812      	ldrh	r2, [r2, #0]
 8003b0c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003b0e:	2380      	movs	r3, #128	@ 0x80
 8003b10:	021a      	lsls	r2, r3, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	0011      	movs	r1, r2
 8003b16:	0018      	movs	r0, r3
 8003b18:	f000 fe92 	bl	8004840 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2240      	movs	r2, #64	@ 0x40
 8003b20:	2100      	movs	r1, #0
 8003b22:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b24:	193b      	adds	r3, r7, r4
 8003b26:	881a      	ldrh	r2, [r3, #0]
 8003b28:	230f      	movs	r3, #15
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	7819      	ldrb	r1, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7ff fe56 	bl	80037e2 <HAL_I2C_AddrCallback>
}
 8003b36:	e01d      	b.n	8003b74 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003b38:	2380      	movs	r3, #128	@ 0x80
 8003b3a:	021a      	lsls	r2, r3, #8
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	0011      	movs	r1, r2
 8003b40:	0018      	movs	r0, r3
 8003b42:	f000 fe7d 	bl	8004840 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2240      	movs	r2, #64	@ 0x40
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b4e:	230c      	movs	r3, #12
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	881a      	ldrh	r2, [r3, #0]
 8003b54:	230f      	movs	r3, #15
 8003b56:	18fb      	adds	r3, r7, r3
 8003b58:	7819      	ldrb	r1, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f7ff fe40 	bl	80037e2 <HAL_I2C_AddrCallback>
}
 8003b62:	e007      	b.n	8003b74 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2208      	movs	r2, #8
 8003b6a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2240      	movs	r2, #64	@ 0x40
 8003b70:	2100      	movs	r1, #0
 8003b72:	5499      	strb	r1, [r3, r2]
}
 8003b74:	46c0      	nop			@ (mov r8, r8)
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b004      	add	sp, #16
 8003b7a:	bdb0      	pop	{r4, r5, r7, pc}

08003b7c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2242      	movs	r2, #66	@ 0x42
 8003b90:	2100      	movs	r1, #0
 8003b92:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	2380      	movs	r3, #128	@ 0x80
 8003b98:	01db      	lsls	r3, r3, #7
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d008      	beq.n	8003bb0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4924      	ldr	r1, [pc, #144]	@ (8003c3c <I2C_ITSlaveSeqCplt+0xc0>)
 8003baa:	400a      	ands	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	e00c      	b.n	8003bca <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	2380      	movs	r3, #128	@ 0x80
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d007      	beq.n	8003bca <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	491e      	ldr	r1, [pc, #120]	@ (8003c40 <I2C_ITSlaveSeqCplt+0xc4>)
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2241      	movs	r2, #65	@ 0x41
 8003bce:	5c9b      	ldrb	r3, [r3, r2]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b29      	cmp	r3, #41	@ 0x29
 8003bd4:	d114      	bne.n	8003c00 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2241      	movs	r2, #65	@ 0x41
 8003bda:	2128      	movs	r1, #40	@ 0x28
 8003bdc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2221      	movs	r2, #33	@ 0x21
 8003be2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2101      	movs	r1, #1
 8003be8:	0018      	movs	r0, r3
 8003bea:	f000 fe29 	bl	8004840 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2240      	movs	r2, #64	@ 0x40
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f7ff fde2 	bl	80037c2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003bfe:	e019      	b.n	8003c34 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2241      	movs	r2, #65	@ 0x41
 8003c04:	5c9b      	ldrb	r3, [r3, r2]
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c0a:	d113      	bne.n	8003c34 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2241      	movs	r2, #65	@ 0x41
 8003c10:	2128      	movs	r1, #40	@ 0x28
 8003c12:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2222      	movs	r2, #34	@ 0x22
 8003c18:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2102      	movs	r1, #2
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f000 fe0e 	bl	8004840 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2240      	movs	r2, #64	@ 0x40
 8003c28:	2100      	movs	r1, #0
 8003c2a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f7ff fdcf 	bl	80037d2 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c34:	46c0      	nop			@ (mov r8, r8)
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b004      	add	sp, #16
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	ffffbfff 	.word	0xffffbfff
 8003c40:	ffff7fff 	.word	0xffff7fff

08003c44 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003c60:	200b      	movs	r0, #11
 8003c62:	183b      	adds	r3, r7, r0
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	2141      	movs	r1, #65	@ 0x41
 8003c68:	5c52      	ldrb	r2, [r2, r1]
 8003c6a:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2220      	movs	r2, #32
 8003c72:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c74:	183b      	adds	r3, r7, r0
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b21      	cmp	r3, #33	@ 0x21
 8003c7a:	d003      	beq.n	8003c84 <I2C_ITSlaveCplt+0x40>
 8003c7c:	183b      	adds	r3, r7, r0
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b29      	cmp	r3, #41	@ 0x29
 8003c82:	d109      	bne.n	8003c98 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003c84:	4aac      	ldr	r2, [pc, #688]	@ (8003f38 <I2C_ITSlaveCplt+0x2f4>)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	0011      	movs	r1, r2
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f000 fdd8 	bl	8004840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2221      	movs	r2, #33	@ 0x21
 8003c94:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c96:	e020      	b.n	8003cda <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c98:	220b      	movs	r2, #11
 8003c9a:	18bb      	adds	r3, r7, r2
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b22      	cmp	r3, #34	@ 0x22
 8003ca0:	d003      	beq.n	8003caa <I2C_ITSlaveCplt+0x66>
 8003ca2:	18bb      	adds	r3, r7, r2
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ca8:	d109      	bne.n	8003cbe <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003caa:	4aa4      	ldr	r2, [pc, #656]	@ (8003f3c <I2C_ITSlaveCplt+0x2f8>)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	0011      	movs	r1, r2
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f000 fdc5 	bl	8004840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2222      	movs	r2, #34	@ 0x22
 8003cba:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cbc:	e00d      	b.n	8003cda <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003cbe:	230b      	movs	r3, #11
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b28      	cmp	r3, #40	@ 0x28
 8003cc6:	d108      	bne.n	8003cda <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003cc8:	4a9d      	ldr	r2, [pc, #628]	@ (8003f40 <I2C_ITSlaveCplt+0x2fc>)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	0011      	movs	r1, r2
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f000 fdb6 	bl	8004840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2180      	movs	r1, #128	@ 0x80
 8003ce6:	0209      	lsls	r1, r1, #8
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4993      	ldr	r1, [pc, #588]	@ (8003f44 <I2C_ITSlaveCplt+0x300>)
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f000 faab 	bl	800425a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	2380      	movs	r3, #128	@ 0x80
 8003d08:	01db      	lsls	r3, r3, #7
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	498b      	ldr	r1, [pc, #556]	@ (8003f48 <I2C_ITSlaveCplt+0x304>)
 8003d1a:	400a      	ands	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d01f      	beq.n	8003d66 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d34:	e017      	b.n	8003d66 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	2380      	movs	r3, #128	@ 0x80
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d012      	beq.n	8003d66 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4980      	ldr	r1, [pc, #512]	@ (8003f4c <I2C_ITSlaveCplt+0x308>)
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d006      	beq.n	8003d66 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2204      	movs	r2, #4
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d020      	beq.n	8003db0 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2204      	movs	r2, #4
 8003d72:	4393      	bics	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00c      	beq.n	8003db0 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2210      	movs	r2, #16
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d04f      	beq.n	8003e6e <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	2210      	movs	r2, #16
 8003dd2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003dd4:	d04b      	beq.n	8003e6e <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d12d      	bne.n	8003e3c <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2241      	movs	r2, #65	@ 0x41
 8003de4:	5c9b      	ldrb	r3, [r3, r2]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b28      	cmp	r3, #40	@ 0x28
 8003dea:	d10b      	bne.n	8003e04 <I2C_ITSlaveCplt+0x1c0>
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	2380      	movs	r3, #128	@ 0x80
 8003df0:	049b      	lsls	r3, r3, #18
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d106      	bne.n	8003e04 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	0011      	movs	r1, r2
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f000 f8a9 	bl	8003f54 <I2C_ITListenCplt>
 8003e02:	e034      	b.n	8003e6e <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2241      	movs	r2, #65	@ 0x41
 8003e08:	5c9b      	ldrb	r3, [r3, r2]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b29      	cmp	r3, #41	@ 0x29
 8003e0e:	d110      	bne.n	8003e32 <I2C_ITSlaveCplt+0x1ee>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4a4f      	ldr	r2, [pc, #316]	@ (8003f50 <I2C_ITSlaveCplt+0x30c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00c      	beq.n	8003e32 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2210      	movs	r2, #16
 8003e1e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	0018      	movs	r0, r3
 8003e24:	f000 fa19 	bl	800425a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f7ff fea6 	bl	8003b7c <I2C_ITSlaveSeqCplt>
 8003e30:	e01d      	b.n	8003e6e <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2210      	movs	r2, #16
 8003e38:	61da      	str	r2, [r3, #28]
 8003e3a:	e018      	b.n	8003e6e <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2210      	movs	r2, #16
 8003e42:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e48:	2204      	movs	r2, #4
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d004      	beq.n	8003e60 <I2C_ITSlaveCplt+0x21c>
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	2380      	movs	r3, #128	@ 0x80
 8003e5a:	045b      	lsls	r3, r3, #17
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d106      	bne.n	8003e6e <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	0011      	movs	r1, r2
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f000 f8cb 	bl	8004004 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2242      	movs	r2, #66	@ 0x42
 8003e72:	2100      	movs	r1, #0
 8003e74:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d013      	beq.n	8003eac <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	0011      	movs	r1, r2
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f000 f8b9 	bl	8004004 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2241      	movs	r2, #65	@ 0x41
 8003e96:	5c9b      	ldrb	r3, [r3, r2]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b28      	cmp	r3, #40	@ 0x28
 8003e9c:	d147      	bne.n	8003f2e <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	0011      	movs	r1, r2
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f000 f855 	bl	8003f54 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003eaa:	e040      	b.n	8003f2e <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb0:	4a27      	ldr	r2, [pc, #156]	@ (8003f50 <I2C_ITSlaveCplt+0x30c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d016      	beq.n	8003ee4 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f7ff fe5f 	bl	8003b7c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a23      	ldr	r2, [pc, #140]	@ (8003f50 <I2C_ITSlaveCplt+0x30c>)
 8003ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2241      	movs	r2, #65	@ 0x41
 8003ec8:	2120      	movs	r1, #32
 8003eca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2240      	movs	r2, #64	@ 0x40
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7ff fc90 	bl	8003802 <HAL_I2C_ListenCpltCallback>
}
 8003ee2:	e024      	b.n	8003f2e <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2241      	movs	r2, #65	@ 0x41
 8003ee8:	5c9b      	ldrb	r3, [r3, r2]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b22      	cmp	r3, #34	@ 0x22
 8003eee:	d10f      	bne.n	8003f10 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2241      	movs	r2, #65	@ 0x41
 8003ef4:	2120      	movs	r1, #32
 8003ef6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2240      	movs	r2, #64	@ 0x40
 8003f02:	2100      	movs	r1, #0
 8003f04:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f7ff fc62 	bl	80037d2 <HAL_I2C_SlaveRxCpltCallback>
}
 8003f0e:	e00e      	b.n	8003f2e <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2241      	movs	r2, #65	@ 0x41
 8003f14:	2120      	movs	r1, #32
 8003f16:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2240      	movs	r2, #64	@ 0x40
 8003f22:	2100      	movs	r1, #0
 8003f24:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f7ff fc4a 	bl	80037c2 <HAL_I2C_SlaveTxCpltCallback>
}
 8003f2e:	46c0      	nop			@ (mov r8, r8)
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b006      	add	sp, #24
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	00008001 	.word	0x00008001
 8003f3c:	00008002 	.word	0x00008002
 8003f40:	00008003 	.word	0x00008003
 8003f44:	fe00e800 	.word	0xfe00e800
 8003f48:	ffffbfff 	.word	0xffffbfff
 8003f4c:	ffff7fff 	.word	0xffff7fff
 8003f50:	ffff0000 	.word	0xffff0000

08003f54 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a26      	ldr	r2, [pc, #152]	@ (8003ffc <I2C_ITListenCplt+0xa8>)
 8003f62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2241      	movs	r2, #65	@ 0x41
 8003f6e:	2120      	movs	r1, #32
 8003f70:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2242      	movs	r2, #66	@ 0x42
 8003f76:	2100      	movs	r1, #0
 8003f78:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2204      	movs	r2, #4
 8003f84:	4013      	ands	r3, r2
 8003f86:	d022      	beq.n	8003fce <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d012      	beq.n	8003fce <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003fce:	4a0c      	ldr	r2, [pc, #48]	@ (8004000 <I2C_ITListenCplt+0xac>)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	0011      	movs	r1, r2
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f000 fc33 	bl	8004840 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2210      	movs	r2, #16
 8003fe0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2240      	movs	r2, #64	@ 0x40
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	0018      	movs	r0, r3
 8003fee:	f7ff fc08 	bl	8003802 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b002      	add	sp, #8
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			@ (mov r8, r8)
 8003ffc:	ffff0000 	.word	0xffff0000
 8004000:	00008003 	.word	0x00008003

08004004 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800400e:	200f      	movs	r0, #15
 8004010:	183b      	adds	r3, r7, r0
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	2141      	movs	r1, #65	@ 0x41
 8004016:	5c52      	ldrb	r2, [r2, r1]
 8004018:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2242      	movs	r2, #66	@ 0x42
 800401e:	2100      	movs	r1, #0
 8004020:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a72      	ldr	r2, [pc, #456]	@ (80041f0 <I2C_ITError+0x1ec>)
 8004026:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800403a:	183b      	adds	r3, r7, r0
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b28      	cmp	r3, #40	@ 0x28
 8004040:	d007      	beq.n	8004052 <I2C_ITError+0x4e>
 8004042:	183b      	adds	r3, r7, r0
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b29      	cmp	r3, #41	@ 0x29
 8004048:	d003      	beq.n	8004052 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800404a:	183b      	adds	r3, r7, r0
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004050:	d10c      	bne.n	800406c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2103      	movs	r1, #3
 8004056:	0018      	movs	r0, r3
 8004058:	f000 fbf2 	bl	8004840 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2241      	movs	r2, #65	@ 0x41
 8004060:	2128      	movs	r1, #40	@ 0x28
 8004062:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a63      	ldr	r2, [pc, #396]	@ (80041f4 <I2C_ITError+0x1f0>)
 8004068:	635a      	str	r2, [r3, #52]	@ 0x34
 800406a:	e032      	b.n	80040d2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800406c:	4a62      	ldr	r2, [pc, #392]	@ (80041f8 <I2C_ITError+0x1f4>)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	0011      	movs	r1, r2
 8004072:	0018      	movs	r0, r3
 8004074:	f000 fbe4 	bl	8004840 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	0018      	movs	r0, r3
 800407c:	f000 f8ed 	bl	800425a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2241      	movs	r2, #65	@ 0x41
 8004084:	5c9b      	ldrb	r3, [r3, r2]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b60      	cmp	r3, #96	@ 0x60
 800408a:	d01f      	beq.n	80040cc <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2241      	movs	r2, #65	@ 0x41
 8004090:	2120      	movs	r1, #32
 8004092:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	2220      	movs	r2, #32
 800409c:	4013      	ands	r3, r2
 800409e:	2b20      	cmp	r3, #32
 80040a0:	d114      	bne.n	80040cc <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2210      	movs	r2, #16
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d109      	bne.n	80040c4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2210      	movs	r2, #16
 80040b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040bc:	2204      	movs	r2, #4
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2220      	movs	r2, #32
 80040ca:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d03b      	beq.n	8004158 <I2C_ITError+0x154>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b11      	cmp	r3, #17
 80040e4:	d002      	beq.n	80040ec <I2C_ITError+0xe8>
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b21      	cmp	r3, #33	@ 0x21
 80040ea:	d135      	bne.n	8004158 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	2380      	movs	r3, #128	@ 0x80
 80040f4:	01db      	lsls	r3, r3, #7
 80040f6:	401a      	ands	r2, r3
 80040f8:	2380      	movs	r3, #128	@ 0x80
 80040fa:	01db      	lsls	r3, r3, #7
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d107      	bne.n	8004110 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	493c      	ldr	r1, [pc, #240]	@ (80041fc <I2C_ITError+0x1f8>)
 800410c:	400a      	ands	r2, r1
 800410e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004114:	0018      	movs	r0, r3
 8004116:	f7fe fce9 	bl	8002aec <HAL_DMA_GetState>
 800411a:	0003      	movs	r3, r0
 800411c:	2b01      	cmp	r3, #1
 800411e:	d016      	beq.n	800414e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004124:	4a36      	ldr	r2, [pc, #216]	@ (8004200 <I2C_ITError+0x1fc>)
 8004126:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2240      	movs	r2, #64	@ 0x40
 800412c:	2100      	movs	r1, #0
 800412e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004134:	0018      	movs	r0, r3
 8004136:	f7fe fbbd 	bl	80028b4 <HAL_DMA_Abort_IT>
 800413a:	1e03      	subs	r3, r0, #0
 800413c:	d051      	beq.n	80041e2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004142:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004148:	0018      	movs	r0, r3
 800414a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800414c:	e049      	b.n	80041e2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	0018      	movs	r0, r3
 8004152:	f000 f859 	bl	8004208 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004156:	e044      	b.n	80041e2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d03b      	beq.n	80041d8 <I2C_ITError+0x1d4>
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b12      	cmp	r3, #18
 8004164:	d002      	beq.n	800416c <I2C_ITError+0x168>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b22      	cmp	r3, #34	@ 0x22
 800416a:	d135      	bne.n	80041d8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	2380      	movs	r3, #128	@ 0x80
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	401a      	ands	r2, r3
 8004178:	2380      	movs	r3, #128	@ 0x80
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	429a      	cmp	r2, r3
 800417e:	d107      	bne.n	8004190 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	491e      	ldr	r1, [pc, #120]	@ (8004204 <I2C_ITError+0x200>)
 800418c:	400a      	ands	r2, r1
 800418e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004194:	0018      	movs	r0, r3
 8004196:	f7fe fca9 	bl	8002aec <HAL_DMA_GetState>
 800419a:	0003      	movs	r3, r0
 800419c:	2b01      	cmp	r3, #1
 800419e:	d016      	beq.n	80041ce <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a4:	4a16      	ldr	r2, [pc, #88]	@ (8004200 <I2C_ITError+0x1fc>)
 80041a6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2240      	movs	r2, #64	@ 0x40
 80041ac:	2100      	movs	r1, #0
 80041ae:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b4:	0018      	movs	r0, r3
 80041b6:	f7fe fb7d 	bl	80028b4 <HAL_DMA_Abort_IT>
 80041ba:	1e03      	subs	r3, r0, #0
 80041bc:	d013      	beq.n	80041e6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c8:	0018      	movs	r0, r3
 80041ca:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041cc:	e00b      	b.n	80041e6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	0018      	movs	r0, r3
 80041d2:	f000 f819 	bl	8004208 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041d6:	e006      	b.n	80041e6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	0018      	movs	r0, r3
 80041dc:	f000 f814 	bl	8004208 <I2C_TreatErrorCallback>
  }
}
 80041e0:	e002      	b.n	80041e8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041e2:	46c0      	nop			@ (mov r8, r8)
 80041e4:	e000      	b.n	80041e8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041e6:	46c0      	nop			@ (mov r8, r8)
}
 80041e8:	46c0      	nop			@ (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b004      	add	sp, #16
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	ffff0000 	.word	0xffff0000
 80041f4:	08003835 	.word	0x08003835
 80041f8:	00008003 	.word	0x00008003
 80041fc:	ffffbfff 	.word	0xffffbfff
 8004200:	0800429f 	.word	0x0800429f
 8004204:	ffff7fff 	.word	0xffff7fff

08004208 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2241      	movs	r2, #65	@ 0x41
 8004214:	5c9b      	ldrb	r3, [r3, r2]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b60      	cmp	r3, #96	@ 0x60
 800421a:	d10f      	bne.n	800423c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2241      	movs	r2, #65	@ 0x41
 8004220:	2120      	movs	r1, #32
 8004222:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2240      	movs	r2, #64	@ 0x40
 800422e:	2100      	movs	r1, #0
 8004230:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	0018      	movs	r0, r3
 8004236:	f7ff faf4 	bl	8003822 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800423a:	e00a      	b.n	8004252 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2240      	movs	r2, #64	@ 0x40
 8004246:	2100      	movs	r1, #0
 8004248:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	0018      	movs	r0, r3
 800424e:	f7ff fae0 	bl	8003812 <HAL_I2C_ErrorCallback>
}
 8004252:	46c0      	nop			@ (mov r8, r8)
 8004254:	46bd      	mov	sp, r7
 8004256:	b002      	add	sp, #8
 8004258:	bd80      	pop	{r7, pc}

0800425a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2202      	movs	r2, #2
 800426a:	4013      	ands	r3, r2
 800426c:	2b02      	cmp	r3, #2
 800426e:	d103      	bne.n	8004278 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2200      	movs	r2, #0
 8004276:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2201      	movs	r2, #1
 8004280:	4013      	ands	r3, r2
 8004282:	2b01      	cmp	r3, #1
 8004284:	d007      	beq.n	8004296 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2101      	movs	r1, #1
 8004292:	430a      	orrs	r2, r1
 8004294:	619a      	str	r2, [r3, #24]
  }
}
 8004296:	46c0      	nop			@ (mov r8, r8)
 8004298:	46bd      	mov	sp, r7
 800429a:	b002      	add	sp, #8
 800429c:	bd80      	pop	{r7, pc}

0800429e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b8:	2200      	movs	r2, #0
 80042ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c8:	2200      	movs	r2, #0
 80042ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7ff ff9a 	bl	8004208 <I2C_TreatErrorCallback>
}
 80042d4:	46c0      	nop			@ (mov r8, r8)
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b004      	add	sp, #16
 80042da:	bd80      	pop	{r7, pc}

080042dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	1dfb      	adds	r3, r7, #7
 80042ea:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ec:	e03a      	b.n	8004364 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	6839      	ldr	r1, [r7, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	0018      	movs	r0, r3
 80042f6:	f000 f971 	bl	80045dc <I2C_IsErrorOccurred>
 80042fa:	1e03      	subs	r3, r0, #0
 80042fc:	d001      	beq.n	8004302 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e040      	b.n	8004384 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	3301      	adds	r3, #1
 8004306:	d02d      	beq.n	8004364 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004308:	f7fe f93e 	bl	8002588 <HAL_GetTick>
 800430c:	0002      	movs	r2, r0
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d302      	bcc.n	800431e <I2C_WaitOnFlagUntilTimeout+0x42>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d122      	bne.n	8004364 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	4013      	ands	r3, r2
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	425a      	negs	r2, r3
 800432e:	4153      	adcs	r3, r2
 8004330:	b2db      	uxtb	r3, r3
 8004332:	001a      	movs	r2, r3
 8004334:	1dfb      	adds	r3, r7, #7
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d113      	bne.n	8004364 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004340:	2220      	movs	r2, #32
 8004342:	431a      	orrs	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2241      	movs	r2, #65	@ 0x41
 800434c:	2120      	movs	r1, #32
 800434e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2242      	movs	r2, #66	@ 0x42
 8004354:	2100      	movs	r1, #0
 8004356:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2240      	movs	r2, #64	@ 0x40
 800435c:	2100      	movs	r1, #0
 800435e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e00f      	b.n	8004384 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	4013      	ands	r3, r2
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	425a      	negs	r2, r3
 8004374:	4153      	adcs	r3, r2
 8004376:	b2db      	uxtb	r3, r3
 8004378:	001a      	movs	r2, r3
 800437a:	1dfb      	adds	r3, r7, #7
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d0b5      	beq.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	0018      	movs	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	b004      	add	sp, #16
 800438a:	bd80      	pop	{r7, pc}

0800438c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004398:	e032      	b.n	8004400 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	0018      	movs	r0, r3
 80043a2:	f000 f91b 	bl	80045dc <I2C_IsErrorOccurred>
 80043a6:	1e03      	subs	r3, r0, #0
 80043a8:	d001      	beq.n	80043ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e030      	b.n	8004410 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	3301      	adds	r3, #1
 80043b2:	d025      	beq.n	8004400 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b4:	f7fe f8e8 	bl	8002588 <HAL_GetTick>
 80043b8:	0002      	movs	r2, r0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d302      	bcc.n	80043ca <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d11a      	bne.n	8004400 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2202      	movs	r2, #2
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d013      	beq.n	8004400 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043dc:	2220      	movs	r2, #32
 80043de:	431a      	orrs	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2241      	movs	r2, #65	@ 0x41
 80043e8:	2120      	movs	r1, #32
 80043ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2242      	movs	r2, #66	@ 0x42
 80043f0:	2100      	movs	r1, #0
 80043f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2240      	movs	r2, #64	@ 0x40
 80043f8:	2100      	movs	r1, #0
 80043fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e007      	b.n	8004410 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	2202      	movs	r2, #2
 8004408:	4013      	ands	r3, r2
 800440a:	2b02      	cmp	r3, #2
 800440c:	d1c5      	bne.n	800439a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	0018      	movs	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	b004      	add	sp, #16
 8004416:	bd80      	pop	{r7, pc}

08004418 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004424:	e02f      	b.n	8004486 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	0018      	movs	r0, r3
 800442e:	f000 f8d5 	bl	80045dc <I2C_IsErrorOccurred>
 8004432:	1e03      	subs	r3, r0, #0
 8004434:	d001      	beq.n	800443a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e02d      	b.n	8004496 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443a:	f7fe f8a5 	bl	8002588 <HAL_GetTick>
 800443e:	0002      	movs	r2, r0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	429a      	cmp	r2, r3
 8004448:	d302      	bcc.n	8004450 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d11a      	bne.n	8004486 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	2220      	movs	r2, #32
 8004458:	4013      	ands	r3, r2
 800445a:	2b20      	cmp	r3, #32
 800445c:	d013      	beq.n	8004486 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004462:	2220      	movs	r2, #32
 8004464:	431a      	orrs	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2241      	movs	r2, #65	@ 0x41
 800446e:	2120      	movs	r1, #32
 8004470:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2242      	movs	r2, #66	@ 0x42
 8004476:	2100      	movs	r1, #0
 8004478:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2240      	movs	r2, #64	@ 0x40
 800447e:	2100      	movs	r1, #0
 8004480:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e007      	b.n	8004496 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	2220      	movs	r2, #32
 800448e:	4013      	ands	r3, r2
 8004490:	2b20      	cmp	r3, #32
 8004492:	d1c8      	bne.n	8004426 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	0018      	movs	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	b004      	add	sp, #16
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ac:	2317      	movs	r3, #23
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80044b4:	e07b      	b.n	80045ae <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	0018      	movs	r0, r3
 80044be:	f000 f88d 	bl	80045dc <I2C_IsErrorOccurred>
 80044c2:	1e03      	subs	r3, r0, #0
 80044c4:	d003      	beq.n	80044ce <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80044c6:	2317      	movs	r3, #23
 80044c8:	18fb      	adds	r3, r7, r3
 80044ca:	2201      	movs	r2, #1
 80044cc:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2220      	movs	r2, #32
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d140      	bne.n	800455e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80044dc:	2117      	movs	r1, #23
 80044de:	187b      	adds	r3, r7, r1
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d13b      	bne.n	800455e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2204      	movs	r2, #4
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d106      	bne.n	8004502 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80044fc:	187b      	adds	r3, r7, r1
 80044fe:	2200      	movs	r2, #0
 8004500:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	2210      	movs	r2, #16
 800450a:	4013      	ands	r3, r2
 800450c:	2b10      	cmp	r3, #16
 800450e:	d123      	bne.n	8004558 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2210      	movs	r2, #16
 8004516:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2204      	movs	r2, #4
 800451c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2220      	movs	r2, #32
 8004524:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4929      	ldr	r1, [pc, #164]	@ (80045d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004532:	400a      	ands	r2, r1
 8004534:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2241      	movs	r2, #65	@ 0x41
 800453a:	2120      	movs	r1, #32
 800453c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2242      	movs	r2, #66	@ 0x42
 8004542:	2100      	movs	r1, #0
 8004544:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2240      	movs	r2, #64	@ 0x40
 800454a:	2100      	movs	r1, #0
 800454c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800454e:	2317      	movs	r3, #23
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	2201      	movs	r2, #1
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	e002      	b.n	800455e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800455e:	f7fe f813 	bl	8002588 <HAL_GetTick>
 8004562:	0002      	movs	r2, r0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	429a      	cmp	r2, r3
 800456c:	d302      	bcc.n	8004574 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d11c      	bne.n	80045ae <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004574:	2017      	movs	r0, #23
 8004576:	183b      	adds	r3, r7, r0
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d117      	bne.n	80045ae <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2204      	movs	r2, #4
 8004586:	4013      	ands	r3, r2
 8004588:	2b04      	cmp	r3, #4
 800458a:	d010      	beq.n	80045ae <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004590:	2220      	movs	r2, #32
 8004592:	431a      	orrs	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2241      	movs	r2, #65	@ 0x41
 800459c:	2120      	movs	r1, #32
 800459e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2240      	movs	r2, #64	@ 0x40
 80045a4:	2100      	movs	r1, #0
 80045a6:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80045a8:	183b      	adds	r3, r7, r0
 80045aa:	2201      	movs	r2, #1
 80045ac:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	2204      	movs	r2, #4
 80045b6:	4013      	ands	r3, r2
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d005      	beq.n	80045c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80045bc:	2317      	movs	r3, #23
 80045be:	18fb      	adds	r3, r7, r3
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d100      	bne.n	80045c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80045c6:	e776      	b.n	80044b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80045c8:	2317      	movs	r3, #23
 80045ca:	18fb      	adds	r3, r7, r3
 80045cc:	781b      	ldrb	r3, [r3, #0]
}
 80045ce:	0018      	movs	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b006      	add	sp, #24
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	46c0      	nop			@ (mov r8, r8)
 80045d8:	fe00e800 	.word	0xfe00e800

080045dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08a      	sub	sp, #40	@ 0x28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e8:	2327      	movs	r3, #39	@ 0x27
 80045ea:	18fb      	adds	r3, r7, r3
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2210      	movs	r2, #16
 8004604:	4013      	ands	r3, r2
 8004606:	d100      	bne.n	800460a <I2C_IsErrorOccurred+0x2e>
 8004608:	e079      	b.n	80046fe <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2210      	movs	r2, #16
 8004610:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004612:	e057      	b.n	80046c4 <I2C_IsErrorOccurred+0xe8>
 8004614:	2227      	movs	r2, #39	@ 0x27
 8004616:	18bb      	adds	r3, r7, r2
 8004618:	18ba      	adds	r2, r7, r2
 800461a:	7812      	ldrb	r2, [r2, #0]
 800461c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	3301      	adds	r3, #1
 8004622:	d04f      	beq.n	80046c4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004624:	f7fd ffb0 	bl	8002588 <HAL_GetTick>
 8004628:	0002      	movs	r2, r0
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	429a      	cmp	r2, r3
 8004632:	d302      	bcc.n	800463a <I2C_IsErrorOccurred+0x5e>
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d144      	bne.n	80046c4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	2380      	movs	r3, #128	@ 0x80
 8004642:	01db      	lsls	r3, r3, #7
 8004644:	4013      	ands	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004648:	2013      	movs	r0, #19
 800464a:	183b      	adds	r3, r7, r0
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	2142      	movs	r1, #66	@ 0x42
 8004650:	5c52      	ldrb	r2, [r2, r1]
 8004652:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	2380      	movs	r3, #128	@ 0x80
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	401a      	ands	r2, r3
 8004660:	2380      	movs	r3, #128	@ 0x80
 8004662:	021b      	lsls	r3, r3, #8
 8004664:	429a      	cmp	r2, r3
 8004666:	d126      	bne.n	80046b6 <I2C_IsErrorOccurred+0xda>
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	2380      	movs	r3, #128	@ 0x80
 800466c:	01db      	lsls	r3, r3, #7
 800466e:	429a      	cmp	r2, r3
 8004670:	d021      	beq.n	80046b6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004672:	183b      	adds	r3, r7, r0
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b20      	cmp	r3, #32
 8004678:	d01d      	beq.n	80046b6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2180      	movs	r1, #128	@ 0x80
 8004686:	01c9      	lsls	r1, r1, #7
 8004688:	430a      	orrs	r2, r1
 800468a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800468c:	f7fd ff7c 	bl	8002588 <HAL_GetTick>
 8004690:	0003      	movs	r3, r0
 8004692:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004694:	e00f      	b.n	80046b6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004696:	f7fd ff77 	bl	8002588 <HAL_GetTick>
 800469a:	0002      	movs	r2, r0
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b19      	cmp	r3, #25
 80046a2:	d908      	bls.n	80046b6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	2220      	movs	r2, #32
 80046a8:	4313      	orrs	r3, r2
 80046aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80046ac:	2327      	movs	r3, #39	@ 0x27
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	2201      	movs	r2, #1
 80046b2:	701a      	strb	r2, [r3, #0]

              break;
 80046b4:	e006      	b.n	80046c4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2220      	movs	r2, #32
 80046be:	4013      	ands	r3, r2
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d1e8      	bne.n	8004696 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2220      	movs	r2, #32
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d004      	beq.n	80046dc <I2C_IsErrorOccurred+0x100>
 80046d2:	2327      	movs	r3, #39	@ 0x27
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d09b      	beq.n	8004614 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046dc:	2327      	movs	r3, #39	@ 0x27
 80046de:	18fb      	adds	r3, r7, r3
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d103      	bne.n	80046ee <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2220      	movs	r2, #32
 80046ec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	2204      	movs	r2, #4
 80046f2:	4313      	orrs	r3, r2
 80046f4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046f6:	2327      	movs	r3, #39	@ 0x27
 80046f8:	18fb      	adds	r3, r7, r3
 80046fa:	2201      	movs	r2, #1
 80046fc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	2380      	movs	r3, #128	@ 0x80
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	4013      	ands	r3, r2
 800470e:	d00c      	beq.n	800472a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	2201      	movs	r2, #1
 8004714:	4313      	orrs	r3, r2
 8004716:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2280      	movs	r2, #128	@ 0x80
 800471e:	0052      	lsls	r2, r2, #1
 8004720:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004722:	2327      	movs	r3, #39	@ 0x27
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	2201      	movs	r2, #1
 8004728:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	2380      	movs	r3, #128	@ 0x80
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4013      	ands	r3, r2
 8004732:	d00c      	beq.n	800474e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	2208      	movs	r2, #8
 8004738:	4313      	orrs	r3, r2
 800473a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2280      	movs	r2, #128	@ 0x80
 8004742:	00d2      	lsls	r2, r2, #3
 8004744:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004746:	2327      	movs	r3, #39	@ 0x27
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	2201      	movs	r2, #1
 800474c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	2380      	movs	r3, #128	@ 0x80
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4013      	ands	r3, r2
 8004756:	d00c      	beq.n	8004772 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	2202      	movs	r2, #2
 800475c:	4313      	orrs	r3, r2
 800475e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2280      	movs	r2, #128	@ 0x80
 8004766:	0092      	lsls	r2, r2, #2
 8004768:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800476a:	2327      	movs	r3, #39	@ 0x27
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	2201      	movs	r2, #1
 8004770:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004772:	2327      	movs	r3, #39	@ 0x27
 8004774:	18fb      	adds	r3, r7, r3
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01d      	beq.n	80047b8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	0018      	movs	r0, r3
 8004780:	f7ff fd6b 	bl	800425a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	490e      	ldr	r1, [pc, #56]	@ (80047c8 <I2C_IsErrorOccurred+0x1ec>)
 8004790:	400a      	ands	r2, r1
 8004792:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	431a      	orrs	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2241      	movs	r2, #65	@ 0x41
 80047a4:	2120      	movs	r1, #32
 80047a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2242      	movs	r2, #66	@ 0x42
 80047ac:	2100      	movs	r1, #0
 80047ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2240      	movs	r2, #64	@ 0x40
 80047b4:	2100      	movs	r1, #0
 80047b6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80047b8:	2327      	movs	r3, #39	@ 0x27
 80047ba:	18fb      	adds	r3, r7, r3
 80047bc:	781b      	ldrb	r3, [r3, #0]
}
 80047be:	0018      	movs	r0, r3
 80047c0:	46bd      	mov	sp, r7
 80047c2:	b00a      	add	sp, #40	@ 0x28
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	46c0      	nop			@ (mov r8, r8)
 80047c8:	fe00e800 	.word	0xfe00e800

080047cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047cc:	b590      	push	{r4, r7, lr}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	0008      	movs	r0, r1
 80047d6:	0011      	movs	r1, r2
 80047d8:	607b      	str	r3, [r7, #4]
 80047da:	240a      	movs	r4, #10
 80047dc:	193b      	adds	r3, r7, r4
 80047de:	1c02      	adds	r2, r0, #0
 80047e0:	801a      	strh	r2, [r3, #0]
 80047e2:	2009      	movs	r0, #9
 80047e4:	183b      	adds	r3, r7, r0
 80047e6:	1c0a      	adds	r2, r1, #0
 80047e8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047ea:	193b      	adds	r3, r7, r4
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	059b      	lsls	r3, r3, #22
 80047f0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047f2:	183b      	adds	r3, r7, r0
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	0419      	lsls	r1, r3, #16
 80047f8:	23ff      	movs	r3, #255	@ 0xff
 80047fa:	041b      	lsls	r3, r3, #16
 80047fc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047fe:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004806:	4313      	orrs	r3, r2
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	085b      	lsrs	r3, r3, #1
 800480c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004816:	0d51      	lsrs	r1, r2, #21
 8004818:	2280      	movs	r2, #128	@ 0x80
 800481a:	00d2      	lsls	r2, r2, #3
 800481c:	400a      	ands	r2, r1
 800481e:	4907      	ldr	r1, [pc, #28]	@ (800483c <I2C_TransferConfig+0x70>)
 8004820:	430a      	orrs	r2, r1
 8004822:	43d2      	mvns	r2, r2
 8004824:	401a      	ands	r2, r3
 8004826:	0011      	movs	r1, r2
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004832:	46c0      	nop			@ (mov r8, r8)
 8004834:	46bd      	mov	sp, r7
 8004836:	b007      	add	sp, #28
 8004838:	bd90      	pop	{r4, r7, pc}
 800483a:	46c0      	nop			@ (mov r8, r8)
 800483c:	03ff63ff 	.word	0x03ff63ff

08004840 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	000a      	movs	r2, r1
 800484a:	1cbb      	adds	r3, r7, #2
 800484c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004852:	1cbb      	adds	r3, r7, #2
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	2201      	movs	r2, #1
 8004858:	4013      	ands	r3, r2
 800485a:	d010      	beq.n	800487e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2242      	movs	r2, #66	@ 0x42
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2241      	movs	r2, #65	@ 0x41
 8004868:	5c9b      	ldrb	r3, [r3, r2]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	001a      	movs	r2, r3
 800486e:	2328      	movs	r3, #40	@ 0x28
 8004870:	4013      	ands	r3, r2
 8004872:	2b28      	cmp	r3, #40	@ 0x28
 8004874:	d003      	beq.n	800487e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	22b0      	movs	r2, #176	@ 0xb0
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800487e:	1cbb      	adds	r3, r7, #2
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	2202      	movs	r2, #2
 8004884:	4013      	ands	r3, r2
 8004886:	d010      	beq.n	80048aa <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2244      	movs	r2, #68	@ 0x44
 800488c:	4313      	orrs	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2241      	movs	r2, #65	@ 0x41
 8004894:	5c9b      	ldrb	r3, [r3, r2]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	001a      	movs	r2, r3
 800489a:	2328      	movs	r3, #40	@ 0x28
 800489c:	4013      	ands	r3, r2
 800489e:	2b28      	cmp	r3, #40	@ 0x28
 80048a0:	d003      	beq.n	80048aa <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	22b0      	movs	r2, #176	@ 0xb0
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80048aa:	1cbb      	adds	r3, r7, #2
 80048ac:	2200      	movs	r2, #0
 80048ae:	5e9b      	ldrsh	r3, [r3, r2]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	da03      	bge.n	80048bc <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	22b8      	movs	r2, #184	@ 0xb8
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80048bc:	1cbb      	adds	r3, r7, #2
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d103      	bne.n	80048cc <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2290      	movs	r2, #144	@ 0x90
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80048cc:	1cbb      	adds	r3, r7, #2
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	2b20      	cmp	r3, #32
 80048d2:	d103      	bne.n	80048dc <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	4313      	orrs	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80048dc:	1cbb      	adds	r3, r7, #2
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	2b40      	cmp	r3, #64	@ 0x40
 80048e2:	d103      	bne.n	80048ec <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2240      	movs	r2, #64	@ 0x40
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	43d9      	mvns	r1, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	400a      	ands	r2, r1
 80048fc:	601a      	str	r2, [r3, #0]
}
 80048fe:	46c0      	nop			@ (mov r8, r8)
 8004900:	46bd      	mov	sp, r7
 8004902:	b004      	add	sp, #16
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2241      	movs	r2, #65	@ 0x41
 8004916:	5c9b      	ldrb	r3, [r3, r2]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b20      	cmp	r3, #32
 800491c:	d138      	bne.n	8004990 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2240      	movs	r2, #64	@ 0x40
 8004922:	5c9b      	ldrb	r3, [r3, r2]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004928:	2302      	movs	r3, #2
 800492a:	e032      	b.n	8004992 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2240      	movs	r2, #64	@ 0x40
 8004930:	2101      	movs	r1, #1
 8004932:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2241      	movs	r2, #65	@ 0x41
 8004938:	2124      	movs	r1, #36	@ 0x24
 800493a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2101      	movs	r1, #1
 8004948:	438a      	bics	r2, r1
 800494a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4911      	ldr	r1, [pc, #68]	@ (800499c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004958:	400a      	ands	r2, r1
 800495a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6819      	ldr	r1, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2101      	movs	r1, #1
 8004978:	430a      	orrs	r2, r1
 800497a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2241      	movs	r2, #65	@ 0x41
 8004980:	2120      	movs	r1, #32
 8004982:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2240      	movs	r2, #64	@ 0x40
 8004988:	2100      	movs	r1, #0
 800498a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	e000      	b.n	8004992 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004990:	2302      	movs	r3, #2
  }
}
 8004992:	0018      	movs	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	b002      	add	sp, #8
 8004998:	bd80      	pop	{r7, pc}
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	ffffefff 	.word	0xffffefff

080049a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2241      	movs	r2, #65	@ 0x41
 80049ae:	5c9b      	ldrb	r3, [r3, r2]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d139      	bne.n	8004a2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2240      	movs	r2, #64	@ 0x40
 80049ba:	5c9b      	ldrb	r3, [r3, r2]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e033      	b.n	8004a2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2240      	movs	r2, #64	@ 0x40
 80049c8:	2101      	movs	r1, #1
 80049ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2241      	movs	r2, #65	@ 0x41
 80049d0:	2124      	movs	r1, #36	@ 0x24
 80049d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2101      	movs	r1, #1
 80049e0:	438a      	bics	r2, r1
 80049e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4a11      	ldr	r2, [pc, #68]	@ (8004a34 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	021b      	lsls	r3, r3, #8
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2101      	movs	r1, #1
 8004a12:	430a      	orrs	r2, r1
 8004a14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2241      	movs	r2, #65	@ 0x41
 8004a1a:	2120      	movs	r1, #32
 8004a1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2240      	movs	r2, #64	@ 0x40
 8004a22:	2100      	movs	r1, #0
 8004a24:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e000      	b.n	8004a2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a2a:	2302      	movs	r3, #2
  }
}
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	b004      	add	sp, #16
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	fffff0ff 	.word	0xfffff0ff

08004a38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004a40:	4b19      	ldr	r3, [pc, #100]	@ (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a19      	ldr	r2, [pc, #100]	@ (8004aac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	0019      	movs	r1, r3
 8004a4a:	4b17      	ldr	r3, [pc, #92]	@ (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	2380      	movs	r3, #128	@ 0x80
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d11f      	bne.n	8004a9c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004a5c:	4b14      	ldr	r3, [pc, #80]	@ (8004ab0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	0013      	movs	r3, r2
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	189b      	adds	r3, r3, r2
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	4912      	ldr	r1, [pc, #72]	@ (8004ab4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f7fb fb4a 	bl	8000104 <__udivsi3>
 8004a70:	0003      	movs	r3, r0
 8004a72:	3301      	adds	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a76:	e008      	b.n	8004a8a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3b01      	subs	r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	e001      	b.n	8004a8a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e009      	b.n	8004a9e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a8a:	4b07      	ldr	r3, [pc, #28]	@ (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a8c:	695a      	ldr	r2, [r3, #20]
 8004a8e:	2380      	movs	r3, #128	@ 0x80
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	401a      	ands	r2, r3
 8004a94:	2380      	movs	r3, #128	@ 0x80
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d0ed      	beq.n	8004a78 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b004      	add	sp, #16
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	40007000 	.word	0x40007000
 8004aac:	fffff9ff 	.word	0xfffff9ff
 8004ab0:	20000064 	.word	0x20000064
 8004ab4:	000f4240 	.word	0x000f4240

08004ab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e2fe      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d100      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x1e>
 8004ad4:	e07c      	b.n	8004bd0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ad6:	4bc3      	ldr	r3, [pc, #780]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2238      	movs	r2, #56	@ 0x38
 8004adc:	4013      	ands	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ae0:	4bc0      	ldr	r3, [pc, #768]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	2203      	movs	r2, #3
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d102      	bne.n	8004af6 <HAL_RCC_OscConfig+0x3e>
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d002      	beq.n	8004afc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d10b      	bne.n	8004b14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004afc:	4bb9      	ldr	r3, [pc, #740]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	2380      	movs	r3, #128	@ 0x80
 8004b02:	029b      	lsls	r3, r3, #10
 8004b04:	4013      	ands	r3, r2
 8004b06:	d062      	beq.n	8004bce <HAL_RCC_OscConfig+0x116>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d15e      	bne.n	8004bce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e2d9      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	2380      	movs	r3, #128	@ 0x80
 8004b1a:	025b      	lsls	r3, r3, #9
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d107      	bne.n	8004b30 <HAL_RCC_OscConfig+0x78>
 8004b20:	4bb0      	ldr	r3, [pc, #704]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	4baf      	ldr	r3, [pc, #700]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004b26:	2180      	movs	r1, #128	@ 0x80
 8004b28:	0249      	lsls	r1, r1, #9
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	e020      	b.n	8004b72 <HAL_RCC_OscConfig+0xba>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	23a0      	movs	r3, #160	@ 0xa0
 8004b36:	02db      	lsls	r3, r3, #11
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d10e      	bne.n	8004b5a <HAL_RCC_OscConfig+0xa2>
 8004b3c:	4ba9      	ldr	r3, [pc, #676]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4ba8      	ldr	r3, [pc, #672]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004b42:	2180      	movs	r1, #128	@ 0x80
 8004b44:	02c9      	lsls	r1, r1, #11
 8004b46:	430a      	orrs	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	4ba6      	ldr	r3, [pc, #664]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4ba5      	ldr	r3, [pc, #660]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004b50:	2180      	movs	r1, #128	@ 0x80
 8004b52:	0249      	lsls	r1, r1, #9
 8004b54:	430a      	orrs	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e00b      	b.n	8004b72 <HAL_RCC_OscConfig+0xba>
 8004b5a:	4ba2      	ldr	r3, [pc, #648]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	4ba1      	ldr	r3, [pc, #644]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004b60:	49a1      	ldr	r1, [pc, #644]	@ (8004de8 <HAL_RCC_OscConfig+0x330>)
 8004b62:	400a      	ands	r2, r1
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	4b9f      	ldr	r3, [pc, #636]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b9e      	ldr	r3, [pc, #632]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004b6c:	499f      	ldr	r1, [pc, #636]	@ (8004dec <HAL_RCC_OscConfig+0x334>)
 8004b6e:	400a      	ands	r2, r1
 8004b70:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d014      	beq.n	8004ba4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7a:	f7fd fd05 	bl	8002588 <HAL_GetTick>
 8004b7e:	0003      	movs	r3, r0
 8004b80:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fd fd00 	bl	8002588 <HAL_GetTick>
 8004b88:	0002      	movs	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	@ 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e298      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b96:	4b93      	ldr	r3, [pc, #588]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	2380      	movs	r3, #128	@ 0x80
 8004b9c:	029b      	lsls	r3, r3, #10
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0xcc>
 8004ba2:	e015      	b.n	8004bd0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fd fcf0 	bl	8002588 <HAL_GetTick>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bae:	f7fd fceb 	bl	8002588 <HAL_GetTick>
 8004bb2:	0002      	movs	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b64      	cmp	r3, #100	@ 0x64
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e283      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bc0:	4b88      	ldr	r3, [pc, #544]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	2380      	movs	r3, #128	@ 0x80
 8004bc6:	029b      	lsls	r3, r3, #10
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d1f0      	bne.n	8004bae <HAL_RCC_OscConfig+0xf6>
 8004bcc:	e000      	b.n	8004bd0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d100      	bne.n	8004bdc <HAL_RCC_OscConfig+0x124>
 8004bda:	e099      	b.n	8004d10 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bdc:	4b81      	ldr	r3, [pc, #516]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2238      	movs	r2, #56	@ 0x38
 8004be2:	4013      	ands	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004be6:	4b7f      	ldr	r3, [pc, #508]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	2203      	movs	r2, #3
 8004bec:	4013      	ands	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2b10      	cmp	r3, #16
 8004bf4:	d102      	bne.n	8004bfc <HAL_RCC_OscConfig+0x144>
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d002      	beq.n	8004c02 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d135      	bne.n	8004c6e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c02:	4b78      	ldr	r3, [pc, #480]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	2380      	movs	r3, #128	@ 0x80
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d005      	beq.n	8004c1a <HAL_RCC_OscConfig+0x162>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e256      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1a:	4b72      	ldr	r3, [pc, #456]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	4a74      	ldr	r2, [pc, #464]	@ (8004df0 <HAL_RCC_OscConfig+0x338>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	0019      	movs	r1, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	021a      	lsls	r2, r3, #8
 8004c2a:	4b6e      	ldr	r3, [pc, #440]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d112      	bne.n	8004c5c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c36:	4b6b      	ldr	r3, [pc, #428]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a6e      	ldr	r2, [pc, #440]	@ (8004df4 <HAL_RCC_OscConfig+0x33c>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	0019      	movs	r1, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	4b67      	ldr	r3, [pc, #412]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004c46:	430a      	orrs	r2, r1
 8004c48:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004c4a:	4b66      	ldr	r3, [pc, #408]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	0adb      	lsrs	r3, r3, #11
 8004c50:	2207      	movs	r2, #7
 8004c52:	4013      	ands	r3, r2
 8004c54:	4a68      	ldr	r2, [pc, #416]	@ (8004df8 <HAL_RCC_OscConfig+0x340>)
 8004c56:	40da      	lsrs	r2, r3
 8004c58:	4b68      	ldr	r3, [pc, #416]	@ (8004dfc <HAL_RCC_OscConfig+0x344>)
 8004c5a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c5c:	4b68      	ldr	r3, [pc, #416]	@ (8004e00 <HAL_RCC_OscConfig+0x348>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	0018      	movs	r0, r3
 8004c62:	f7fd fc35 	bl	80024d0 <HAL_InitTick>
 8004c66:	1e03      	subs	r3, r0, #0
 8004c68:	d051      	beq.n	8004d0e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e22c      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d030      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c76:	4b5b      	ldr	r3, [pc, #364]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a5e      	ldr	r2, [pc, #376]	@ (8004df4 <HAL_RCC_OscConfig+0x33c>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	0019      	movs	r1, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	4b57      	ldr	r3, [pc, #348]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004c86:	430a      	orrs	r2, r1
 8004c88:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004c8a:	4b56      	ldr	r3, [pc, #344]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4b55      	ldr	r3, [pc, #340]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004c90:	2180      	movs	r1, #128	@ 0x80
 8004c92:	0049      	lsls	r1, r1, #1
 8004c94:	430a      	orrs	r2, r1
 8004c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c98:	f7fd fc76 	bl	8002588 <HAL_GetTick>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca2:	f7fd fc71 	bl	8002588 <HAL_GetTick>
 8004ca6:	0002      	movs	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e209      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cb4:	4b4b      	ldr	r3, [pc, #300]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	2380      	movs	r3, #128	@ 0x80
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc0:	4b48      	ldr	r3, [pc, #288]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	4a4a      	ldr	r2, [pc, #296]	@ (8004df0 <HAL_RCC_OscConfig+0x338>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	0019      	movs	r1, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	021a      	lsls	r2, r3, #8
 8004cd0:	4b44      	ldr	r3, [pc, #272]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
 8004cd6:	e01b      	b.n	8004d10 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004cd8:	4b42      	ldr	r3, [pc, #264]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	4b41      	ldr	r3, [pc, #260]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004cde:	4949      	ldr	r1, [pc, #292]	@ (8004e04 <HAL_RCC_OscConfig+0x34c>)
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7fd fc50 	bl	8002588 <HAL_GetTick>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cee:	f7fd fc4b 	bl	8002588 <HAL_GetTick>
 8004cf2:	0002      	movs	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e1e3      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d00:	4b38      	ldr	r3, [pc, #224]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	2380      	movs	r3, #128	@ 0x80
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	4013      	ands	r3, r2
 8004d0a:	d1f0      	bne.n	8004cee <HAL_RCC_OscConfig+0x236>
 8004d0c:	e000      	b.n	8004d10 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d0e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2208      	movs	r2, #8
 8004d16:	4013      	ands	r3, r2
 8004d18:	d047      	beq.n	8004daa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004d1a:	4b32      	ldr	r3, [pc, #200]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	2238      	movs	r2, #56	@ 0x38
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b18      	cmp	r3, #24
 8004d24:	d10a      	bne.n	8004d3c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004d26:	4b2f      	ldr	r3, [pc, #188]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d03c      	beq.n	8004daa <HAL_RCC_OscConfig+0x2f2>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d138      	bne.n	8004daa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e1c5      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d019      	beq.n	8004d78 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004d44:	4b27      	ldr	r3, [pc, #156]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004d46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004d48:	4b26      	ldr	r3, [pc, #152]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d50:	f7fd fc1a 	bl	8002588 <HAL_GetTick>
 8004d54:	0003      	movs	r3, r0
 8004d56:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d5a:	f7fd fc15 	bl	8002588 <HAL_GetTick>
 8004d5e:	0002      	movs	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e1ad      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d70:	2202      	movs	r2, #2
 8004d72:	4013      	ands	r3, r2
 8004d74:	d0f1      	beq.n	8004d5a <HAL_RCC_OscConfig+0x2a2>
 8004d76:	e018      	b.n	8004daa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004d78:	4b1a      	ldr	r3, [pc, #104]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004d7a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004d7c:	4b19      	ldr	r3, [pc, #100]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004d7e:	2101      	movs	r1, #1
 8004d80:	438a      	bics	r2, r1
 8004d82:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d84:	f7fd fc00 	bl	8002588 <HAL_GetTick>
 8004d88:	0003      	movs	r3, r0
 8004d8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d8c:	e008      	b.n	8004da0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d8e:	f7fd fbfb 	bl	8002588 <HAL_GetTick>
 8004d92:	0002      	movs	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e193      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004da0:	4b10      	ldr	r3, [pc, #64]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da4:	2202      	movs	r2, #2
 8004da6:	4013      	ands	r3, r2
 8004da8:	d1f1      	bne.n	8004d8e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2204      	movs	r2, #4
 8004db0:	4013      	ands	r3, r2
 8004db2:	d100      	bne.n	8004db6 <HAL_RCC_OscConfig+0x2fe>
 8004db4:	e0c6      	b.n	8004f44 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004db6:	231f      	movs	r3, #31
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	2200      	movs	r2, #0
 8004dbc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004dbe:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2238      	movs	r2, #56	@ 0x38
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d11e      	bne.n	8004e08 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004dca:	4b06      	ldr	r3, [pc, #24]	@ (8004de4 <HAL_RCC_OscConfig+0x32c>)
 8004dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dce:	2202      	movs	r2, #2
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d100      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x31e>
 8004dd4:	e0b6      	b.n	8004f44 <HAL_RCC_OscConfig+0x48c>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d000      	beq.n	8004de0 <HAL_RCC_OscConfig+0x328>
 8004dde:	e0b1      	b.n	8004f44 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e171      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
 8004de4:	40021000 	.word	0x40021000
 8004de8:	fffeffff 	.word	0xfffeffff
 8004dec:	fffbffff 	.word	0xfffbffff
 8004df0:	ffff80ff 	.word	0xffff80ff
 8004df4:	ffffc7ff 	.word	0xffffc7ff
 8004df8:	00f42400 	.word	0x00f42400
 8004dfc:	20000064 	.word	0x20000064
 8004e00:	20000068 	.word	0x20000068
 8004e04:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e08:	4bb1      	ldr	r3, [pc, #708]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004e0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e0c:	2380      	movs	r3, #128	@ 0x80
 8004e0e:	055b      	lsls	r3, r3, #21
 8004e10:	4013      	ands	r3, r2
 8004e12:	d101      	bne.n	8004e18 <HAL_RCC_OscConfig+0x360>
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <HAL_RCC_OscConfig+0x362>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d011      	beq.n	8004e42 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004e1e:	4bac      	ldr	r3, [pc, #688]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004e20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e22:	4bab      	ldr	r3, [pc, #684]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004e24:	2180      	movs	r1, #128	@ 0x80
 8004e26:	0549      	lsls	r1, r1, #21
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004e2c:	4ba8      	ldr	r3, [pc, #672]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004e2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e30:	2380      	movs	r3, #128	@ 0x80
 8004e32:	055b      	lsls	r3, r3, #21
 8004e34:	4013      	ands	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004e3a:	231f      	movs	r3, #31
 8004e3c:	18fb      	adds	r3, r7, r3
 8004e3e:	2201      	movs	r2, #1
 8004e40:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e42:	4ba4      	ldr	r3, [pc, #656]	@ (80050d4 <HAL_RCC_OscConfig+0x61c>)
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	2380      	movs	r3, #128	@ 0x80
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d11a      	bne.n	8004e84 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e4e:	4ba1      	ldr	r3, [pc, #644]	@ (80050d4 <HAL_RCC_OscConfig+0x61c>)
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	4ba0      	ldr	r3, [pc, #640]	@ (80050d4 <HAL_RCC_OscConfig+0x61c>)
 8004e54:	2180      	movs	r1, #128	@ 0x80
 8004e56:	0049      	lsls	r1, r1, #1
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004e5c:	f7fd fb94 	bl	8002588 <HAL_GetTick>
 8004e60:	0003      	movs	r3, r0
 8004e62:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e66:	f7fd fb8f 	bl	8002588 <HAL_GetTick>
 8004e6a:	0002      	movs	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e127      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e78:	4b96      	ldr	r3, [pc, #600]	@ (80050d4 <HAL_RCC_OscConfig+0x61c>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	2380      	movs	r3, #128	@ 0x80
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	4013      	ands	r3, r2
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d106      	bne.n	8004e9a <HAL_RCC_OscConfig+0x3e2>
 8004e8c:	4b90      	ldr	r3, [pc, #576]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004e8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e90:	4b8f      	ldr	r3, [pc, #572]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004e92:	2101      	movs	r1, #1
 8004e94:	430a      	orrs	r2, r1
 8004e96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e98:	e01c      	b.n	8004ed4 <HAL_RCC_OscConfig+0x41c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b05      	cmp	r3, #5
 8004ea0:	d10c      	bne.n	8004ebc <HAL_RCC_OscConfig+0x404>
 8004ea2:	4b8b      	ldr	r3, [pc, #556]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004ea4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ea6:	4b8a      	ldr	r3, [pc, #552]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004ea8:	2104      	movs	r1, #4
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004eae:	4b88      	ldr	r3, [pc, #544]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004eb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004eb2:	4b87      	ldr	r3, [pc, #540]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004eba:	e00b      	b.n	8004ed4 <HAL_RCC_OscConfig+0x41c>
 8004ebc:	4b84      	ldr	r3, [pc, #528]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004ebe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ec0:	4b83      	ldr	r3, [pc, #524]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	438a      	bics	r2, r1
 8004ec6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ec8:	4b81      	ldr	r3, [pc, #516]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004eca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ecc:	4b80      	ldr	r3, [pc, #512]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004ece:	2104      	movs	r1, #4
 8004ed0:	438a      	bics	r2, r1
 8004ed2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d014      	beq.n	8004f06 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004edc:	f7fd fb54 	bl	8002588 <HAL_GetTick>
 8004ee0:	0003      	movs	r3, r0
 8004ee2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ee4:	e009      	b.n	8004efa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee6:	f7fd fb4f 	bl	8002588 <HAL_GetTick>
 8004eea:	0002      	movs	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	4a79      	ldr	r2, [pc, #484]	@ (80050d8 <HAL_RCC_OscConfig+0x620>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e0e6      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004efa:	4b75      	ldr	r3, [pc, #468]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004efe:	2202      	movs	r2, #2
 8004f00:	4013      	ands	r3, r2
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x42e>
 8004f04:	e013      	b.n	8004f2e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f06:	f7fd fb3f 	bl	8002588 <HAL_GetTick>
 8004f0a:	0003      	movs	r3, r0
 8004f0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f0e:	e009      	b.n	8004f24 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f10:	f7fd fb3a 	bl	8002588 <HAL_GetTick>
 8004f14:	0002      	movs	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	4a6f      	ldr	r2, [pc, #444]	@ (80050d8 <HAL_RCC_OscConfig+0x620>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e0d1      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f24:	4b6a      	ldr	r3, [pc, #424]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f28:	2202      	movs	r2, #2
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004f2e:	231f      	movs	r3, #31
 8004f30:	18fb      	adds	r3, r7, r3
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d105      	bne.n	8004f44 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004f38:	4b65      	ldr	r3, [pc, #404]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004f3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f3c:	4b64      	ldr	r3, [pc, #400]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004f3e:	4967      	ldr	r1, [pc, #412]	@ (80050dc <HAL_RCC_OscConfig+0x624>)
 8004f40:	400a      	ands	r2, r1
 8004f42:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d100      	bne.n	8004f4e <HAL_RCC_OscConfig+0x496>
 8004f4c:	e0bb      	b.n	80050c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f4e:	4b60      	ldr	r3, [pc, #384]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	2238      	movs	r2, #56	@ 0x38
 8004f54:	4013      	ands	r3, r2
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d100      	bne.n	8004f5c <HAL_RCC_OscConfig+0x4a4>
 8004f5a:	e07b      	b.n	8005054 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d156      	bne.n	8005012 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f64:	4b5a      	ldr	r3, [pc, #360]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b59      	ldr	r3, [pc, #356]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004f6a:	495d      	ldr	r1, [pc, #372]	@ (80050e0 <HAL_RCC_OscConfig+0x628>)
 8004f6c:	400a      	ands	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f70:	f7fd fb0a 	bl	8002588 <HAL_GetTick>
 8004f74:	0003      	movs	r3, r0
 8004f76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7a:	f7fd fb05 	bl	8002588 <HAL_GetTick>
 8004f7e:	0002      	movs	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e09d      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f8c:	4b50      	ldr	r3, [pc, #320]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	2380      	movs	r3, #128	@ 0x80
 8004f92:	049b      	lsls	r3, r3, #18
 8004f94:	4013      	ands	r3, r2
 8004f96:	d1f0      	bne.n	8004f7a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f98:	4b4d      	ldr	r3, [pc, #308]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4a51      	ldr	r2, [pc, #324]	@ (80050e4 <HAL_RCC_OscConfig+0x62c>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	0019      	movs	r1, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1a      	ldr	r2, [r3, #32]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	4b42      	ldr	r3, [pc, #264]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fcc:	4b40      	ldr	r3, [pc, #256]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	4b3f      	ldr	r3, [pc, #252]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004fd2:	2180      	movs	r1, #128	@ 0x80
 8004fd4:	0449      	lsls	r1, r1, #17
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004fda:	4b3d      	ldr	r3, [pc, #244]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	4b3c      	ldr	r3, [pc, #240]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8004fe0:	2180      	movs	r1, #128	@ 0x80
 8004fe2:	0549      	lsls	r1, r1, #21
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe8:	f7fd face 	bl	8002588 <HAL_GetTick>
 8004fec:	0003      	movs	r3, r0
 8004fee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff2:	f7fd fac9 	bl	8002588 <HAL_GetTick>
 8004ff6:	0002      	movs	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e061      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005004:	4b32      	ldr	r3, [pc, #200]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	2380      	movs	r3, #128	@ 0x80
 800500a:	049b      	lsls	r3, r3, #18
 800500c:	4013      	ands	r3, r2
 800500e:	d0f0      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x53a>
 8005010:	e059      	b.n	80050c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005012:	4b2f      	ldr	r3, [pc, #188]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4b2e      	ldr	r3, [pc, #184]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8005018:	4931      	ldr	r1, [pc, #196]	@ (80050e0 <HAL_RCC_OscConfig+0x628>)
 800501a:	400a      	ands	r2, r1
 800501c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7fd fab3 	bl	8002588 <HAL_GetTick>
 8005022:	0003      	movs	r3, r0
 8005024:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005028:	f7fd faae 	bl	8002588 <HAL_GetTick>
 800502c:	0002      	movs	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e046      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800503a:	4b25      	ldr	r3, [pc, #148]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	2380      	movs	r3, #128	@ 0x80
 8005040:	049b      	lsls	r3, r3, #18
 8005042:	4013      	ands	r3, r2
 8005044:	d1f0      	bne.n	8005028 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005046:	4b22      	ldr	r3, [pc, #136]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	4b21      	ldr	r3, [pc, #132]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 800504c:	4926      	ldr	r1, [pc, #152]	@ (80050e8 <HAL_RCC_OscConfig+0x630>)
 800504e:	400a      	ands	r2, r1
 8005050:	60da      	str	r2, [r3, #12]
 8005052:	e038      	b.n	80050c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e033      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005060:	4b1b      	ldr	r3, [pc, #108]	@ (80050d0 <HAL_RCC_OscConfig+0x618>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2203      	movs	r2, #3
 800506a:	401a      	ands	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	429a      	cmp	r2, r3
 8005072:	d126      	bne.n	80050c2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2270      	movs	r2, #112	@ 0x70
 8005078:	401a      	ands	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800507e:	429a      	cmp	r2, r3
 8005080:	d11f      	bne.n	80050c2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	23fe      	movs	r3, #254	@ 0xfe
 8005086:	01db      	lsls	r3, r3, #7
 8005088:	401a      	ands	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005090:	429a      	cmp	r2, r3
 8005092:	d116      	bne.n	80050c2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	23f8      	movs	r3, #248	@ 0xf8
 8005098:	039b      	lsls	r3, r3, #14
 800509a:	401a      	ands	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d10e      	bne.n	80050c2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	23e0      	movs	r3, #224	@ 0xe0
 80050a8:	051b      	lsls	r3, r3, #20
 80050aa:	401a      	ands	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d106      	bne.n	80050c2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	0f5b      	lsrs	r3, r3, #29
 80050b8:	075a      	lsls	r2, r3, #29
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80050be:	429a      	cmp	r2, r3
 80050c0:	d001      	beq.n	80050c6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	0018      	movs	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	b008      	add	sp, #32
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40021000 	.word	0x40021000
 80050d4:	40007000 	.word	0x40007000
 80050d8:	00001388 	.word	0x00001388
 80050dc:	efffffff 	.word	0xefffffff
 80050e0:	feffffff 	.word	0xfeffffff
 80050e4:	11c1808c 	.word	0x11c1808c
 80050e8:	eefefffc 	.word	0xeefefffc

080050ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0e9      	b.n	80052d4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005100:	4b76      	ldr	r3, [pc, #472]	@ (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2207      	movs	r2, #7
 8005106:	4013      	ands	r3, r2
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d91e      	bls.n	800514c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510e:	4b73      	ldr	r3, [pc, #460]	@ (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2207      	movs	r2, #7
 8005114:	4393      	bics	r3, r2
 8005116:	0019      	movs	r1, r3
 8005118:	4b70      	ldr	r3, [pc, #448]	@ (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005120:	f7fd fa32 	bl	8002588 <HAL_GetTick>
 8005124:	0003      	movs	r3, r0
 8005126:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005128:	e009      	b.n	800513e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800512a:	f7fd fa2d 	bl	8002588 <HAL_GetTick>
 800512e:	0002      	movs	r2, r0
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	4a6a      	ldr	r2, [pc, #424]	@ (80052e0 <HAL_RCC_ClockConfig+0x1f4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e0ca      	b.n	80052d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800513e:	4b67      	ldr	r3, [pc, #412]	@ (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2207      	movs	r2, #7
 8005144:	4013      	ands	r3, r2
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d1ee      	bne.n	800512a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2202      	movs	r2, #2
 8005152:	4013      	ands	r3, r2
 8005154:	d015      	beq.n	8005182 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2204      	movs	r2, #4
 800515c:	4013      	ands	r3, r2
 800515e:	d006      	beq.n	800516e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005160:	4b60      	ldr	r3, [pc, #384]	@ (80052e4 <HAL_RCC_ClockConfig+0x1f8>)
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	4b5f      	ldr	r3, [pc, #380]	@ (80052e4 <HAL_RCC_ClockConfig+0x1f8>)
 8005166:	21e0      	movs	r1, #224	@ 0xe0
 8005168:	01c9      	lsls	r1, r1, #7
 800516a:	430a      	orrs	r2, r1
 800516c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800516e:	4b5d      	ldr	r3, [pc, #372]	@ (80052e4 <HAL_RCC_ClockConfig+0x1f8>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	4a5d      	ldr	r2, [pc, #372]	@ (80052e8 <HAL_RCC_ClockConfig+0x1fc>)
 8005174:	4013      	ands	r3, r2
 8005176:	0019      	movs	r1, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	4b59      	ldr	r3, [pc, #356]	@ (80052e4 <HAL_RCC_ClockConfig+0x1f8>)
 800517e:	430a      	orrs	r2, r1
 8005180:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2201      	movs	r2, #1
 8005188:	4013      	ands	r3, r2
 800518a:	d057      	beq.n	800523c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d107      	bne.n	80051a4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005194:	4b53      	ldr	r3, [pc, #332]	@ (80052e4 <HAL_RCC_ClockConfig+0x1f8>)
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	2380      	movs	r3, #128	@ 0x80
 800519a:	029b      	lsls	r3, r3, #10
 800519c:	4013      	ands	r3, r2
 800519e:	d12b      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e097      	b.n	80052d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d107      	bne.n	80051bc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ac:	4b4d      	ldr	r3, [pc, #308]	@ (80052e4 <HAL_RCC_ClockConfig+0x1f8>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	2380      	movs	r3, #128	@ 0x80
 80051b2:	049b      	lsls	r3, r3, #18
 80051b4:	4013      	ands	r3, r2
 80051b6:	d11f      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e08b      	b.n	80052d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d107      	bne.n	80051d4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051c4:	4b47      	ldr	r3, [pc, #284]	@ (80052e4 <HAL_RCC_ClockConfig+0x1f8>)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	2380      	movs	r3, #128	@ 0x80
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	4013      	ands	r3, r2
 80051ce:	d113      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e07f      	b.n	80052d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d106      	bne.n	80051ea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051dc:	4b41      	ldr	r3, [pc, #260]	@ (80052e4 <HAL_RCC_ClockConfig+0x1f8>)
 80051de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051e0:	2202      	movs	r2, #2
 80051e2:	4013      	ands	r3, r2
 80051e4:	d108      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e074      	b.n	80052d4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ea:	4b3e      	ldr	r3, [pc, #248]	@ (80052e4 <HAL_RCC_ClockConfig+0x1f8>)
 80051ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ee:	2202      	movs	r2, #2
 80051f0:	4013      	ands	r3, r2
 80051f2:	d101      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e06d      	b.n	80052d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051f8:	4b3a      	ldr	r3, [pc, #232]	@ (80052e4 <HAL_RCC_ClockConfig+0x1f8>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	2207      	movs	r2, #7
 80051fe:	4393      	bics	r3, r2
 8005200:	0019      	movs	r1, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	4b37      	ldr	r3, [pc, #220]	@ (80052e4 <HAL_RCC_ClockConfig+0x1f8>)
 8005208:	430a      	orrs	r2, r1
 800520a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520c:	f7fd f9bc 	bl	8002588 <HAL_GetTick>
 8005210:	0003      	movs	r3, r0
 8005212:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005214:	e009      	b.n	800522a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005216:	f7fd f9b7 	bl	8002588 <HAL_GetTick>
 800521a:	0002      	movs	r2, r0
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	4a2f      	ldr	r2, [pc, #188]	@ (80052e0 <HAL_RCC_ClockConfig+0x1f4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d901      	bls.n	800522a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e054      	b.n	80052d4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522a:	4b2e      	ldr	r3, [pc, #184]	@ (80052e4 <HAL_RCC_ClockConfig+0x1f8>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2238      	movs	r2, #56	@ 0x38
 8005230:	401a      	ands	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	429a      	cmp	r2, r3
 800523a:	d1ec      	bne.n	8005216 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800523c:	4b27      	ldr	r3, [pc, #156]	@ (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2207      	movs	r2, #7
 8005242:	4013      	ands	r3, r2
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d21e      	bcs.n	8005288 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524a:	4b24      	ldr	r3, [pc, #144]	@ (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2207      	movs	r2, #7
 8005250:	4393      	bics	r3, r2
 8005252:	0019      	movs	r1, r3
 8005254:	4b21      	ldr	r3, [pc, #132]	@ (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800525c:	f7fd f994 	bl	8002588 <HAL_GetTick>
 8005260:	0003      	movs	r3, r0
 8005262:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005264:	e009      	b.n	800527a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005266:	f7fd f98f 	bl	8002588 <HAL_GetTick>
 800526a:	0002      	movs	r2, r0
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	4a1b      	ldr	r2, [pc, #108]	@ (80052e0 <HAL_RCC_ClockConfig+0x1f4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d901      	bls.n	800527a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e02c      	b.n	80052d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800527a:	4b18      	ldr	r3, [pc, #96]	@ (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2207      	movs	r2, #7
 8005280:	4013      	ands	r3, r2
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d1ee      	bne.n	8005266 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2204      	movs	r2, #4
 800528e:	4013      	ands	r3, r2
 8005290:	d009      	beq.n	80052a6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005292:	4b14      	ldr	r3, [pc, #80]	@ (80052e4 <HAL_RCC_ClockConfig+0x1f8>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	4a15      	ldr	r2, [pc, #84]	@ (80052ec <HAL_RCC_ClockConfig+0x200>)
 8005298:	4013      	ands	r3, r2
 800529a:	0019      	movs	r1, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	4b10      	ldr	r3, [pc, #64]	@ (80052e4 <HAL_RCC_ClockConfig+0x1f8>)
 80052a2:	430a      	orrs	r2, r1
 80052a4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80052a6:	f000 f829 	bl	80052fc <HAL_RCC_GetSysClockFreq>
 80052aa:	0001      	movs	r1, r0
 80052ac:	4b0d      	ldr	r3, [pc, #52]	@ (80052e4 <HAL_RCC_ClockConfig+0x1f8>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	0a1b      	lsrs	r3, r3, #8
 80052b2:	220f      	movs	r2, #15
 80052b4:	401a      	ands	r2, r3
 80052b6:	4b0e      	ldr	r3, [pc, #56]	@ (80052f0 <HAL_RCC_ClockConfig+0x204>)
 80052b8:	0092      	lsls	r2, r2, #2
 80052ba:	58d3      	ldr	r3, [r2, r3]
 80052bc:	221f      	movs	r2, #31
 80052be:	4013      	ands	r3, r2
 80052c0:	000a      	movs	r2, r1
 80052c2:	40da      	lsrs	r2, r3
 80052c4:	4b0b      	ldr	r3, [pc, #44]	@ (80052f4 <HAL_RCC_ClockConfig+0x208>)
 80052c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80052c8:	4b0b      	ldr	r3, [pc, #44]	@ (80052f8 <HAL_RCC_ClockConfig+0x20c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	0018      	movs	r0, r3
 80052ce:	f7fd f8ff 	bl	80024d0 <HAL_InitTick>
 80052d2:	0003      	movs	r3, r0
}
 80052d4:	0018      	movs	r0, r3
 80052d6:	46bd      	mov	sp, r7
 80052d8:	b004      	add	sp, #16
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40022000 	.word	0x40022000
 80052e0:	00001388 	.word	0x00001388
 80052e4:	40021000 	.word	0x40021000
 80052e8:	fffff0ff 	.word	0xfffff0ff
 80052ec:	ffff8fff 	.word	0xffff8fff
 80052f0:	08006114 	.word	0x08006114
 80052f4:	20000064 	.word	0x20000064
 80052f8:	20000068 	.word	0x20000068

080052fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005302:	4b3c      	ldr	r3, [pc, #240]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	2238      	movs	r2, #56	@ 0x38
 8005308:	4013      	ands	r3, r2
 800530a:	d10f      	bne.n	800532c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800530c:	4b39      	ldr	r3, [pc, #228]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	0adb      	lsrs	r3, r3, #11
 8005312:	2207      	movs	r2, #7
 8005314:	4013      	ands	r3, r2
 8005316:	2201      	movs	r2, #1
 8005318:	409a      	lsls	r2, r3
 800531a:	0013      	movs	r3, r2
 800531c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800531e:	6839      	ldr	r1, [r7, #0]
 8005320:	4835      	ldr	r0, [pc, #212]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005322:	f7fa feef 	bl	8000104 <__udivsi3>
 8005326:	0003      	movs	r3, r0
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	e05d      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800532c:	4b31      	ldr	r3, [pc, #196]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2238      	movs	r2, #56	@ 0x38
 8005332:	4013      	ands	r3, r2
 8005334:	2b08      	cmp	r3, #8
 8005336:	d102      	bne.n	800533e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005338:	4b30      	ldr	r3, [pc, #192]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x100>)
 800533a:	613b      	str	r3, [r7, #16]
 800533c:	e054      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800533e:	4b2d      	ldr	r3, [pc, #180]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2238      	movs	r2, #56	@ 0x38
 8005344:	4013      	ands	r3, r2
 8005346:	2b10      	cmp	r3, #16
 8005348:	d138      	bne.n	80053bc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800534a:	4b2a      	ldr	r3, [pc, #168]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	2203      	movs	r2, #3
 8005350:	4013      	ands	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005354:	4b27      	ldr	r3, [pc, #156]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	2207      	movs	r2, #7
 800535c:	4013      	ands	r3, r2
 800535e:	3301      	adds	r3, #1
 8005360:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b03      	cmp	r3, #3
 8005366:	d10d      	bne.n	8005384 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	4824      	ldr	r0, [pc, #144]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x100>)
 800536c:	f7fa feca 	bl	8000104 <__udivsi3>
 8005370:	0003      	movs	r3, r0
 8005372:	0019      	movs	r1, r3
 8005374:	4b1f      	ldr	r3, [pc, #124]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	0a1b      	lsrs	r3, r3, #8
 800537a:	227f      	movs	r2, #127	@ 0x7f
 800537c:	4013      	ands	r3, r2
 800537e:	434b      	muls	r3, r1
 8005380:	617b      	str	r3, [r7, #20]
        break;
 8005382:	e00d      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	481c      	ldr	r0, [pc, #112]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005388:	f7fa febc 	bl	8000104 <__udivsi3>
 800538c:	0003      	movs	r3, r0
 800538e:	0019      	movs	r1, r3
 8005390:	4b18      	ldr	r3, [pc, #96]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	0a1b      	lsrs	r3, r3, #8
 8005396:	227f      	movs	r2, #127	@ 0x7f
 8005398:	4013      	ands	r3, r2
 800539a:	434b      	muls	r3, r1
 800539c:	617b      	str	r3, [r7, #20]
        break;
 800539e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80053a0:	4b14      	ldr	r3, [pc, #80]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	0f5b      	lsrs	r3, r3, #29
 80053a6:	2207      	movs	r2, #7
 80053a8:	4013      	ands	r3, r2
 80053aa:	3301      	adds	r3, #1
 80053ac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	6978      	ldr	r0, [r7, #20]
 80053b2:	f7fa fea7 	bl	8000104 <__udivsi3>
 80053b6:	0003      	movs	r3, r0
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	e015      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80053bc:	4b0d      	ldr	r3, [pc, #52]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2238      	movs	r2, #56	@ 0x38
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d103      	bne.n	80053d0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80053c8:	2380      	movs	r3, #128	@ 0x80
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	e00b      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80053d0:	4b08      	ldr	r3, [pc, #32]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2238      	movs	r2, #56	@ 0x38
 80053d6:	4013      	ands	r3, r2
 80053d8:	2b18      	cmp	r3, #24
 80053da:	d103      	bne.n	80053e4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80053dc:	23fa      	movs	r3, #250	@ 0xfa
 80053de:	01db      	lsls	r3, r3, #7
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	e001      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053e8:	693b      	ldr	r3, [r7, #16]
}
 80053ea:	0018      	movs	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b006      	add	sp, #24
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	46c0      	nop			@ (mov r8, r8)
 80053f4:	40021000 	.word	0x40021000
 80053f8:	00f42400 	.word	0x00f42400
 80053fc:	007a1200 	.word	0x007a1200

08005400 <HAL_RCC_EnableCSS>:
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005404:	4b04      	ldr	r3, [pc, #16]	@ (8005418 <HAL_RCC_EnableCSS+0x18>)
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	4b03      	ldr	r3, [pc, #12]	@ (8005418 <HAL_RCC_EnableCSS+0x18>)
 800540a:	2180      	movs	r1, #128	@ 0x80
 800540c:	0309      	lsls	r1, r1, #12
 800540e:	430a      	orrs	r2, r1
 8005410:	601a      	str	r2, [r3, #0]
}
 8005412:	46c0      	nop			@ (mov r8, r8)
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40021000 	.word	0x40021000

0800541c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note  This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
  uint32_t itflag = RCC->CIFR;
 8005422:	4b0d      	ldr	r3, [pc, #52]	@ (8005458 <HAL_RCC_NMI_IRQHandler+0x3c>)
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	607b      	str	r3, [r7, #4]

  /* Clear interrupt flags related to CSS */
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 8005428:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <HAL_RCC_NMI_IRQHandler+0x3c>)
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	22c0      	movs	r2, #192	@ 0xc0
 800542e:	0092      	lsls	r2, r2, #2
 8005430:	400a      	ands	r2, r1
 8005432:	621a      	str	r2, [r3, #32]

  /* Check RCC CSSF interrupt flag  */
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	2380      	movs	r3, #128	@ 0x80
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	4013      	ands	r3, r2
 800543c:	d001      	beq.n	8005442 <HAL_RCC_NMI_IRQHandler+0x26>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800543e:	f000 f80d 	bl	800545c <HAL_RCC_CSSCallback>
  }

  /* Check RCC LSECSSF interrupt flag  */
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	2380      	movs	r3, #128	@ 0x80
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4013      	ands	r3, r2
 800544a:	d001      	beq.n	8005450 <HAL_RCC_NMI_IRQHandler+0x34>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_LSECSSCallback();
 800544c:	f000 f80b 	bl	8005466 <HAL_RCC_LSECSSCallback>
  }
}
 8005450:	46c0      	nop			@ (mov r8, r8)
 8005452:	46bd      	mov	sp, r7
 8005454:	b002      	add	sp, #8
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40021000 	.word	0x40021000

0800545c <HAL_RCC_CSSCallback>:
/**
  * @brief Handle the RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8005460:	46c0      	nop			@ (mov r8, r8)
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_RCC_LSECSSCallback>:
/**
  * @brief  RCC LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_LSECSSCallback(void)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005478:	2313      	movs	r3, #19
 800547a:	18fb      	adds	r3, r7, r3
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005480:	2312      	movs	r3, #18
 8005482:	18fb      	adds	r3, r7, r3
 8005484:	2200      	movs	r2, #0
 8005486:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	2380      	movs	r3, #128	@ 0x80
 800548e:	029b      	lsls	r3, r3, #10
 8005490:	4013      	ands	r3, r2
 8005492:	d100      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005494:	e0a3      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005496:	2011      	movs	r0, #17
 8005498:	183b      	adds	r3, r7, r0
 800549a:	2200      	movs	r2, #0
 800549c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800549e:	4bc3      	ldr	r3, [pc, #780]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054a2:	2380      	movs	r3, #128	@ 0x80
 80054a4:	055b      	lsls	r3, r3, #21
 80054a6:	4013      	ands	r3, r2
 80054a8:	d110      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054aa:	4bc0      	ldr	r3, [pc, #768]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054ae:	4bbf      	ldr	r3, [pc, #764]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054b0:	2180      	movs	r1, #128	@ 0x80
 80054b2:	0549      	lsls	r1, r1, #21
 80054b4:	430a      	orrs	r2, r1
 80054b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80054b8:	4bbc      	ldr	r3, [pc, #752]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054bc:	2380      	movs	r3, #128	@ 0x80
 80054be:	055b      	lsls	r3, r3, #21
 80054c0:	4013      	ands	r3, r2
 80054c2:	60bb      	str	r3, [r7, #8]
 80054c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054c6:	183b      	adds	r3, r7, r0
 80054c8:	2201      	movs	r2, #1
 80054ca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054cc:	4bb8      	ldr	r3, [pc, #736]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	4bb7      	ldr	r3, [pc, #732]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80054d2:	2180      	movs	r1, #128	@ 0x80
 80054d4:	0049      	lsls	r1, r1, #1
 80054d6:	430a      	orrs	r2, r1
 80054d8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054da:	f7fd f855 	bl	8002588 <HAL_GetTick>
 80054de:	0003      	movs	r3, r0
 80054e0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054e2:	e00b      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e4:	f7fd f850 	bl	8002588 <HAL_GetTick>
 80054e8:	0002      	movs	r2, r0
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d904      	bls.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80054f2:	2313      	movs	r3, #19
 80054f4:	18fb      	adds	r3, r7, r3
 80054f6:	2203      	movs	r2, #3
 80054f8:	701a      	strb	r2, [r3, #0]
        break;
 80054fa:	e005      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054fc:	4bac      	ldr	r3, [pc, #688]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	2380      	movs	r3, #128	@ 0x80
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	4013      	ands	r3, r2
 8005506:	d0ed      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005508:	2313      	movs	r3, #19
 800550a:	18fb      	adds	r3, r7, r3
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d154      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005512:	4ba6      	ldr	r3, [pc, #664]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005514:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005516:	23c0      	movs	r3, #192	@ 0xc0
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4013      	ands	r3, r2
 800551c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d019      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	429a      	cmp	r2, r3
 800552c:	d014      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800552e:	4b9f      	ldr	r3, [pc, #636]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005532:	4aa0      	ldr	r2, [pc, #640]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005534:	4013      	ands	r3, r2
 8005536:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005538:	4b9c      	ldr	r3, [pc, #624]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800553a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800553c:	4b9b      	ldr	r3, [pc, #620]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800553e:	2180      	movs	r1, #128	@ 0x80
 8005540:	0249      	lsls	r1, r1, #9
 8005542:	430a      	orrs	r2, r1
 8005544:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005546:	4b99      	ldr	r3, [pc, #612]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005548:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800554a:	4b98      	ldr	r3, [pc, #608]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800554c:	499a      	ldr	r1, [pc, #616]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800554e:	400a      	ands	r2, r1
 8005550:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005552:	4b96      	ldr	r3, [pc, #600]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2201      	movs	r2, #1
 800555c:	4013      	ands	r3, r2
 800555e:	d016      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005560:	f7fd f812 	bl	8002588 <HAL_GetTick>
 8005564:	0003      	movs	r3, r0
 8005566:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005568:	e00c      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800556a:	f7fd f80d 	bl	8002588 <HAL_GetTick>
 800556e:	0002      	movs	r2, r0
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	4a91      	ldr	r2, [pc, #580]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d904      	bls.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800557a:	2313      	movs	r3, #19
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	2203      	movs	r2, #3
 8005580:	701a      	strb	r2, [r3, #0]
            break;
 8005582:	e004      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005584:	4b89      	ldr	r3, [pc, #548]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005588:	2202      	movs	r2, #2
 800558a:	4013      	ands	r3, r2
 800558c:	d0ed      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800558e:	2313      	movs	r3, #19
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10a      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005598:	4b84      	ldr	r3, [pc, #528]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800559a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800559c:	4a85      	ldr	r2, [pc, #532]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800559e:	4013      	ands	r3, r2
 80055a0:	0019      	movs	r1, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055a6:	4b81      	ldr	r3, [pc, #516]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055a8:	430a      	orrs	r2, r1
 80055aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80055ac:	e00c      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055ae:	2312      	movs	r3, #18
 80055b0:	18fb      	adds	r3, r7, r3
 80055b2:	2213      	movs	r2, #19
 80055b4:	18ba      	adds	r2, r7, r2
 80055b6:	7812      	ldrb	r2, [r2, #0]
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	e005      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055bc:	2312      	movs	r3, #18
 80055be:	18fb      	adds	r3, r7, r3
 80055c0:	2213      	movs	r2, #19
 80055c2:	18ba      	adds	r2, r7, r2
 80055c4:	7812      	ldrb	r2, [r2, #0]
 80055c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055c8:	2311      	movs	r3, #17
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d105      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d2:	4b76      	ldr	r3, [pc, #472]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055d6:	4b75      	ldr	r3, [pc, #468]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055d8:	4979      	ldr	r1, [pc, #484]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80055da:	400a      	ands	r2, r1
 80055dc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2201      	movs	r2, #1
 80055e4:	4013      	ands	r3, r2
 80055e6:	d009      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055e8:	4b70      	ldr	r3, [pc, #448]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ec:	2203      	movs	r2, #3
 80055ee:	4393      	bics	r3, r2
 80055f0:	0019      	movs	r1, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	4b6d      	ldr	r3, [pc, #436]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055f8:	430a      	orrs	r2, r1
 80055fa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2202      	movs	r2, #2
 8005602:	4013      	ands	r3, r2
 8005604:	d009      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005606:	4b69      	ldr	r3, [pc, #420]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560a:	220c      	movs	r2, #12
 800560c:	4393      	bics	r3, r2
 800560e:	0019      	movs	r1, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	4b65      	ldr	r3, [pc, #404]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005616:	430a      	orrs	r2, r1
 8005618:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2210      	movs	r2, #16
 8005620:	4013      	ands	r3, r2
 8005622:	d009      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005624:	4b61      	ldr	r3, [pc, #388]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005628:	4a66      	ldr	r2, [pc, #408]	@ (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800562a:	4013      	ands	r3, r2
 800562c:	0019      	movs	r1, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	4b5e      	ldr	r3, [pc, #376]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005634:	430a      	orrs	r2, r1
 8005636:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	2380      	movs	r3, #128	@ 0x80
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4013      	ands	r3, r2
 8005642:	d009      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005644:	4b59      	ldr	r3, [pc, #356]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005648:	4a5f      	ldr	r2, [pc, #380]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800564a:	4013      	ands	r3, r2
 800564c:	0019      	movs	r1, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	4b56      	ldr	r3, [pc, #344]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005654:	430a      	orrs	r2, r1
 8005656:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	2380      	movs	r3, #128	@ 0x80
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	4013      	ands	r3, r2
 8005662:	d009      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005664:	4b51      	ldr	r3, [pc, #324]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005668:	4a58      	ldr	r2, [pc, #352]	@ (80057cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800566a:	4013      	ands	r3, r2
 800566c:	0019      	movs	r1, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69da      	ldr	r2, [r3, #28]
 8005672:	4b4e      	ldr	r3, [pc, #312]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005674:	430a      	orrs	r2, r1
 8005676:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2220      	movs	r2, #32
 800567e:	4013      	ands	r3, r2
 8005680:	d009      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005682:	4b4a      	ldr	r3, [pc, #296]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005686:	4a52      	ldr	r2, [pc, #328]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005688:	4013      	ands	r3, r2
 800568a:	0019      	movs	r1, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	4b46      	ldr	r3, [pc, #280]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005692:	430a      	orrs	r2, r1
 8005694:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	2380      	movs	r3, #128	@ 0x80
 800569c:	01db      	lsls	r3, r3, #7
 800569e:	4013      	ands	r3, r2
 80056a0:	d015      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056a2:	4b42      	ldr	r3, [pc, #264]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	0899      	lsrs	r1, r3, #2
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1a      	ldr	r2, [r3, #32]
 80056ae:	4b3f      	ldr	r3, [pc, #252]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056b0:	430a      	orrs	r2, r1
 80056b2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a1a      	ldr	r2, [r3, #32]
 80056b8:	2380      	movs	r3, #128	@ 0x80
 80056ba:	05db      	lsls	r3, r3, #23
 80056bc:	429a      	cmp	r2, r3
 80056be:	d106      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80056c0:	4b3a      	ldr	r3, [pc, #232]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	4b39      	ldr	r3, [pc, #228]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056c6:	2180      	movs	r1, #128	@ 0x80
 80056c8:	0249      	lsls	r1, r1, #9
 80056ca:	430a      	orrs	r2, r1
 80056cc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	2380      	movs	r3, #128	@ 0x80
 80056d4:	031b      	lsls	r3, r3, #12
 80056d6:	4013      	ands	r3, r2
 80056d8:	d009      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056da:	4b34      	ldr	r3, [pc, #208]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056de:	2240      	movs	r2, #64	@ 0x40
 80056e0:	4393      	bics	r3, r2
 80056e2:	0019      	movs	r1, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056e8:	4b30      	ldr	r3, [pc, #192]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056ea:	430a      	orrs	r2, r1
 80056ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	2380      	movs	r3, #128	@ 0x80
 80056f4:	039b      	lsls	r3, r3, #14
 80056f6:	4013      	ands	r3, r2
 80056f8:	d016      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80056fa:	4b2c      	ldr	r3, [pc, #176]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056fe:	4a35      	ldr	r2, [pc, #212]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005700:	4013      	ands	r3, r2
 8005702:	0019      	movs	r1, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005708:	4b28      	ldr	r3, [pc, #160]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800570a:	430a      	orrs	r2, r1
 800570c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005712:	2380      	movs	r3, #128	@ 0x80
 8005714:	03db      	lsls	r3, r3, #15
 8005716:	429a      	cmp	r2, r3
 8005718:	d106      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800571a:	4b24      	ldr	r3, [pc, #144]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	4b23      	ldr	r3, [pc, #140]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005720:	2180      	movs	r1, #128	@ 0x80
 8005722:	0449      	lsls	r1, r1, #17
 8005724:	430a      	orrs	r2, r1
 8005726:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	2380      	movs	r3, #128	@ 0x80
 800572e:	03db      	lsls	r3, r3, #15
 8005730:	4013      	ands	r3, r2
 8005732:	d016      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005734:	4b1d      	ldr	r3, [pc, #116]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005738:	4a27      	ldr	r2, [pc, #156]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800573a:	4013      	ands	r3, r2
 800573c:	0019      	movs	r1, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005742:	4b1a      	ldr	r3, [pc, #104]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005744:	430a      	orrs	r2, r1
 8005746:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574c:	2380      	movs	r3, #128	@ 0x80
 800574e:	045b      	lsls	r3, r3, #17
 8005750:	429a      	cmp	r2, r3
 8005752:	d106      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005754:	4b15      	ldr	r3, [pc, #84]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	4b14      	ldr	r3, [pc, #80]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800575a:	2180      	movs	r1, #128	@ 0x80
 800575c:	0449      	lsls	r1, r1, #17
 800575e:	430a      	orrs	r2, r1
 8005760:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	2380      	movs	r3, #128	@ 0x80
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	4013      	ands	r3, r2
 800576c:	d016      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800576e:	4b0f      	ldr	r3, [pc, #60]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005772:	4a1a      	ldr	r2, [pc, #104]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005774:	4013      	ands	r3, r2
 8005776:	0019      	movs	r1, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	695a      	ldr	r2, [r3, #20]
 800577c:	4b0b      	ldr	r3, [pc, #44]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800577e:	430a      	orrs	r2, r1
 8005780:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	695a      	ldr	r2, [r3, #20]
 8005786:	2380      	movs	r3, #128	@ 0x80
 8005788:	01db      	lsls	r3, r3, #7
 800578a:	429a      	cmp	r2, r3
 800578c:	d106      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800578e:	4b07      	ldr	r3, [pc, #28]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	4b06      	ldr	r3, [pc, #24]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005794:	2180      	movs	r1, #128	@ 0x80
 8005796:	0249      	lsls	r1, r1, #9
 8005798:	430a      	orrs	r2, r1
 800579a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800579c:	2312      	movs	r3, #18
 800579e:	18fb      	adds	r3, r7, r3
 80057a0:	781b      	ldrb	r3, [r3, #0]
}
 80057a2:	0018      	movs	r0, r3
 80057a4:	46bd      	mov	sp, r7
 80057a6:	b006      	add	sp, #24
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	46c0      	nop			@ (mov r8, r8)
 80057ac:	40021000 	.word	0x40021000
 80057b0:	40007000 	.word	0x40007000
 80057b4:	fffffcff 	.word	0xfffffcff
 80057b8:	fffeffff 	.word	0xfffeffff
 80057bc:	00001388 	.word	0x00001388
 80057c0:	efffffff 	.word	0xefffffff
 80057c4:	fffff3ff 	.word	0xfffff3ff
 80057c8:	fff3ffff 	.word	0xfff3ffff
 80057cc:	ffcfffff 	.word	0xffcfffff
 80057d0:	ffffcfff 	.word	0xffffcfff
 80057d4:	ffbfffff 	.word	0xffbfffff
 80057d8:	feffffff 	.word	0xfeffffff
 80057dc:	ffff3fff 	.word	0xffff3fff

080057e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e04a      	b.n	8005888 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	223d      	movs	r2, #61	@ 0x3d
 80057f6:	5c9b      	ldrb	r3, [r3, r2]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d107      	bne.n	800580e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	223c      	movs	r2, #60	@ 0x3c
 8005802:	2100      	movs	r1, #0
 8005804:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	0018      	movs	r0, r3
 800580a:	f7fc fd2f 	bl	800226c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	223d      	movs	r2, #61	@ 0x3d
 8005812:	2102      	movs	r1, #2
 8005814:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3304      	adds	r3, #4
 800581e:	0019      	movs	r1, r3
 8005820:	0010      	movs	r0, r2
 8005822:	f000 fa8f 	bl	8005d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2248      	movs	r2, #72	@ 0x48
 800582a:	2101      	movs	r1, #1
 800582c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	223e      	movs	r2, #62	@ 0x3e
 8005832:	2101      	movs	r1, #1
 8005834:	5499      	strb	r1, [r3, r2]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	223f      	movs	r2, #63	@ 0x3f
 800583a:	2101      	movs	r1, #1
 800583c:	5499      	strb	r1, [r3, r2]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2240      	movs	r2, #64	@ 0x40
 8005842:	2101      	movs	r1, #1
 8005844:	5499      	strb	r1, [r3, r2]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2241      	movs	r2, #65	@ 0x41
 800584a:	2101      	movs	r1, #1
 800584c:	5499      	strb	r1, [r3, r2]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2242      	movs	r2, #66	@ 0x42
 8005852:	2101      	movs	r1, #1
 8005854:	5499      	strb	r1, [r3, r2]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2243      	movs	r2, #67	@ 0x43
 800585a:	2101      	movs	r1, #1
 800585c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2244      	movs	r2, #68	@ 0x44
 8005862:	2101      	movs	r1, #1
 8005864:	5499      	strb	r1, [r3, r2]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2245      	movs	r2, #69	@ 0x45
 800586a:	2101      	movs	r1, #1
 800586c:	5499      	strb	r1, [r3, r2]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2246      	movs	r2, #70	@ 0x46
 8005872:	2101      	movs	r1, #1
 8005874:	5499      	strb	r1, [r3, r2]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2247      	movs	r2, #71	@ 0x47
 800587a:	2101      	movs	r1, #1
 800587c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	223d      	movs	r2, #61	@ 0x3d
 8005882:	2101      	movs	r1, #1
 8005884:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	0018      	movs	r0, r3
 800588a:	46bd      	mov	sp, r7
 800588c:	b002      	add	sp, #8
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	223d      	movs	r2, #61	@ 0x3d
 800589c:	5c9b      	ldrb	r3, [r3, r2]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d001      	beq.n	80058a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e042      	b.n	800592e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	223d      	movs	r2, #61	@ 0x3d
 80058ac:	2102      	movs	r1, #2
 80058ae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2101      	movs	r1, #1
 80058bc:	430a      	orrs	r2, r1
 80058be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005938 <HAL_TIM_Base_Start_IT+0xa8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00f      	beq.n	80058ea <HAL_TIM_Base_Start_IT+0x5a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	2380      	movs	r3, #128	@ 0x80
 80058d0:	05db      	lsls	r3, r3, #23
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d009      	beq.n	80058ea <HAL_TIM_Base_Start_IT+0x5a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a18      	ldr	r2, [pc, #96]	@ (800593c <HAL_TIM_Base_Start_IT+0xac>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <HAL_TIM_Base_Start_IT+0x5a>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a16      	ldr	r2, [pc, #88]	@ (8005940 <HAL_TIM_Base_Start_IT+0xb0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d116      	bne.n	8005918 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	4a14      	ldr	r2, [pc, #80]	@ (8005944 <HAL_TIM_Base_Start_IT+0xb4>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b06      	cmp	r3, #6
 80058fa:	d016      	beq.n	800592a <HAL_TIM_Base_Start_IT+0x9a>
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	2380      	movs	r3, #128	@ 0x80
 8005900:	025b      	lsls	r3, r3, #9
 8005902:	429a      	cmp	r2, r3
 8005904:	d011      	beq.n	800592a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2101      	movs	r1, #1
 8005912:	430a      	orrs	r2, r1
 8005914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005916:	e008      	b.n	800592a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2101      	movs	r1, #1
 8005924:	430a      	orrs	r2, r1
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	e000      	b.n	800592c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800592a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	0018      	movs	r0, r3
 8005930:	46bd      	mov	sp, r7
 8005932:	b004      	add	sp, #16
 8005934:	bd80      	pop	{r7, pc}
 8005936:	46c0      	nop			@ (mov r8, r8)
 8005938:	40012c00 	.word	0x40012c00
 800593c:	40000400 	.word	0x40000400
 8005940:	40014000 	.word	0x40014000
 8005944:	00010007 	.word	0x00010007

08005948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2202      	movs	r2, #2
 8005964:	4013      	ands	r3, r2
 8005966:	d021      	beq.n	80059ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2202      	movs	r2, #2
 800596c:	4013      	ands	r3, r2
 800596e:	d01d      	beq.n	80059ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2203      	movs	r2, #3
 8005976:	4252      	negs	r2, r2
 8005978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	2203      	movs	r2, #3
 8005988:	4013      	ands	r3, r2
 800598a:	d004      	beq.n	8005996 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	0018      	movs	r0, r3
 8005990:	f000 f9c0 	bl	8005d14 <HAL_TIM_IC_CaptureCallback>
 8005994:	e007      	b.n	80059a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	0018      	movs	r0, r3
 800599a:	f000 f9b3 	bl	8005d04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	0018      	movs	r0, r3
 80059a2:	f000 f9bf 	bl	8005d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2204      	movs	r2, #4
 80059b0:	4013      	ands	r3, r2
 80059b2:	d022      	beq.n	80059fa <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2204      	movs	r2, #4
 80059b8:	4013      	ands	r3, r2
 80059ba:	d01e      	beq.n	80059fa <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2205      	movs	r2, #5
 80059c2:	4252      	negs	r2, r2
 80059c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2202      	movs	r2, #2
 80059ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	23c0      	movs	r3, #192	@ 0xc0
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4013      	ands	r3, r2
 80059d8:	d004      	beq.n	80059e4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	0018      	movs	r0, r3
 80059de:	f000 f999 	bl	8005d14 <HAL_TIM_IC_CaptureCallback>
 80059e2:	e007      	b.n	80059f4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	0018      	movs	r0, r3
 80059e8:	f000 f98c 	bl	8005d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	0018      	movs	r0, r3
 80059f0:	f000 f998 	bl	8005d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2208      	movs	r2, #8
 80059fe:	4013      	ands	r3, r2
 8005a00:	d021      	beq.n	8005a46 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2208      	movs	r2, #8
 8005a06:	4013      	ands	r3, r2
 8005a08:	d01d      	beq.n	8005a46 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2209      	movs	r2, #9
 8005a10:	4252      	negs	r2, r2
 8005a12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2204      	movs	r2, #4
 8005a18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	2203      	movs	r2, #3
 8005a22:	4013      	ands	r3, r2
 8005a24:	d004      	beq.n	8005a30 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f000 f973 	bl	8005d14 <HAL_TIM_IC_CaptureCallback>
 8005a2e:	e007      	b.n	8005a40 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	0018      	movs	r0, r3
 8005a34:	f000 f966 	bl	8005d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	f000 f972 	bl	8005d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2210      	movs	r2, #16
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	d022      	beq.n	8005a94 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2210      	movs	r2, #16
 8005a52:	4013      	ands	r3, r2
 8005a54:	d01e      	beq.n	8005a94 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2211      	movs	r2, #17
 8005a5c:	4252      	negs	r2, r2
 8005a5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2208      	movs	r2, #8
 8005a64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69da      	ldr	r2, [r3, #28]
 8005a6c:	23c0      	movs	r3, #192	@ 0xc0
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4013      	ands	r3, r2
 8005a72:	d004      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	0018      	movs	r0, r3
 8005a78:	f000 f94c 	bl	8005d14 <HAL_TIM_IC_CaptureCallback>
 8005a7c:	e007      	b.n	8005a8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	0018      	movs	r0, r3
 8005a82:	f000 f93f 	bl	8005d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f000 f94b 	bl	8005d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2201      	movs	r2, #1
 8005a98:	4013      	ands	r3, r2
 8005a9a:	d00c      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	d008      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	4252      	negs	r2, r2
 8005aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f7fc fa03 	bl	8001ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
   if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2280      	movs	r2, #128	@ 0x80
 8005aba:	4013      	ands	r3, r2
 8005abc:	d104      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	2380      	movs	r3, #128	@ 0x80
 8005ac2:	019b      	lsls	r3, r3, #6
 8005ac4:	4013      	ands	r3, r2
   if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ac6:	d00b      	beq.n	8005ae0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2280      	movs	r2, #128	@ 0x80
 8005acc:	4013      	ands	r3, r2
 8005ace:	d007      	beq.n	8005ae0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8005b50 <HAL_TIM_IRQHandler+0x208>)
 8005ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	0018      	movs	r0, r3
 8005adc:	f000 fad2 	bl	8006084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	2380      	movs	r3, #128	@ 0x80
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d00b      	beq.n	8005b02 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2280      	movs	r2, #128	@ 0x80
 8005aee:	4013      	ands	r3, r2
 8005af0:	d007      	beq.n	8005b02 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a17      	ldr	r2, [pc, #92]	@ (8005b54 <HAL_TIM_IRQHandler+0x20c>)
 8005af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	0018      	movs	r0, r3
 8005afe:	f000 fac9 	bl	8006094 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2240      	movs	r2, #64	@ 0x40
 8005b06:	4013      	ands	r3, r2
 8005b08:	d00c      	beq.n	8005b24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2240      	movs	r2, #64	@ 0x40
 8005b0e:	4013      	ands	r3, r2
 8005b10:	d008      	beq.n	8005b24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2241      	movs	r2, #65	@ 0x41
 8005b18:	4252      	negs	r2, r2
 8005b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	0018      	movs	r0, r3
 8005b20:	f000 f908 	bl	8005d34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2220      	movs	r2, #32
 8005b28:	4013      	ands	r3, r2
 8005b2a:	d00c      	beq.n	8005b46 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	4013      	ands	r3, r2
 8005b32:	d008      	beq.n	8005b46 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2221      	movs	r2, #33	@ 0x21
 8005b3a:	4252      	negs	r2, r2
 8005b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	0018      	movs	r0, r3
 8005b42:	f000 fa97 	bl	8006074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b46:	46c0      	nop			@ (mov r8, r8)
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	b004      	add	sp, #16
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	46c0      	nop			@ (mov r8, r8)
 8005b50:	ffffdf7f 	.word	0xffffdf7f
 8005b54:	fffffeff 	.word	0xfffffeff

08005b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b62:	230f      	movs	r3, #15
 8005b64:	18fb      	adds	r3, r7, r3
 8005b66:	2200      	movs	r2, #0
 8005b68:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	223c      	movs	r2, #60	@ 0x3c
 8005b6e:	5c9b      	ldrb	r3, [r3, r2]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_TIM_ConfigClockSource+0x20>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e0bc      	b.n	8005cf2 <HAL_TIM_ConfigClockSource+0x19a>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	223c      	movs	r2, #60	@ 0x3c
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	223d      	movs	r2, #61	@ 0x3d
 8005b84:	2102      	movs	r1, #2
 8005b86:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4a5a      	ldr	r2, [pc, #360]	@ (8005cfc <HAL_TIM_ConfigClockSource+0x1a4>)
 8005b94:	4013      	ands	r3, r2
 8005b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4a59      	ldr	r2, [pc, #356]	@ (8005d00 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2280      	movs	r2, #128	@ 0x80
 8005bae:	0192      	lsls	r2, r2, #6
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d040      	beq.n	8005c36 <HAL_TIM_ConfigClockSource+0xde>
 8005bb4:	2280      	movs	r2, #128	@ 0x80
 8005bb6:	0192      	lsls	r2, r2, #6
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d900      	bls.n	8005bbe <HAL_TIM_ConfigClockSource+0x66>
 8005bbc:	e088      	b.n	8005cd0 <HAL_TIM_ConfigClockSource+0x178>
 8005bbe:	2280      	movs	r2, #128	@ 0x80
 8005bc0:	0152      	lsls	r2, r2, #5
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d100      	bne.n	8005bc8 <HAL_TIM_ConfigClockSource+0x70>
 8005bc6:	e088      	b.n	8005cda <HAL_TIM_ConfigClockSource+0x182>
 8005bc8:	2280      	movs	r2, #128	@ 0x80
 8005bca:	0152      	lsls	r2, r2, #5
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d900      	bls.n	8005bd2 <HAL_TIM_ConfigClockSource+0x7a>
 8005bd0:	e07e      	b.n	8005cd0 <HAL_TIM_ConfigClockSource+0x178>
 8005bd2:	2b70      	cmp	r3, #112	@ 0x70
 8005bd4:	d018      	beq.n	8005c08 <HAL_TIM_ConfigClockSource+0xb0>
 8005bd6:	d900      	bls.n	8005bda <HAL_TIM_ConfigClockSource+0x82>
 8005bd8:	e07a      	b.n	8005cd0 <HAL_TIM_ConfigClockSource+0x178>
 8005bda:	2b60      	cmp	r3, #96	@ 0x60
 8005bdc:	d04f      	beq.n	8005c7e <HAL_TIM_ConfigClockSource+0x126>
 8005bde:	d900      	bls.n	8005be2 <HAL_TIM_ConfigClockSource+0x8a>
 8005be0:	e076      	b.n	8005cd0 <HAL_TIM_ConfigClockSource+0x178>
 8005be2:	2b50      	cmp	r3, #80	@ 0x50
 8005be4:	d03b      	beq.n	8005c5e <HAL_TIM_ConfigClockSource+0x106>
 8005be6:	d900      	bls.n	8005bea <HAL_TIM_ConfigClockSource+0x92>
 8005be8:	e072      	b.n	8005cd0 <HAL_TIM_ConfigClockSource+0x178>
 8005bea:	2b40      	cmp	r3, #64	@ 0x40
 8005bec:	d057      	beq.n	8005c9e <HAL_TIM_ConfigClockSource+0x146>
 8005bee:	d900      	bls.n	8005bf2 <HAL_TIM_ConfigClockSource+0x9a>
 8005bf0:	e06e      	b.n	8005cd0 <HAL_TIM_ConfigClockSource+0x178>
 8005bf2:	2b30      	cmp	r3, #48	@ 0x30
 8005bf4:	d063      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0x166>
 8005bf6:	d86b      	bhi.n	8005cd0 <HAL_TIM_ConfigClockSource+0x178>
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d060      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0x166>
 8005bfc:	d868      	bhi.n	8005cd0 <HAL_TIM_ConfigClockSource+0x178>
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d05d      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0x166>
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d05b      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0x166>
 8005c06:	e063      	b.n	8005cd0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c18:	f000 f99e 	bl	8005f58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2277      	movs	r2, #119	@ 0x77
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	609a      	str	r2, [r3, #8]
      break;
 8005c34:	e052      	b.n	8005cdc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c46:	f000 f987 	bl	8005f58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2180      	movs	r1, #128	@ 0x80
 8005c56:	01c9      	lsls	r1, r1, #7
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	609a      	str	r2, [r3, #8]
      break;
 8005c5c:	e03e      	b.n	8005cdc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c6a:	001a      	movs	r2, r3
 8005c6c:	f000 f8f8 	bl	8005e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2150      	movs	r1, #80	@ 0x50
 8005c76:	0018      	movs	r0, r3
 8005c78:	f000 f952 	bl	8005f20 <TIM_ITRx_SetConfig>
      break;
 8005c7c:	e02e      	b.n	8005cdc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c8a:	001a      	movs	r2, r3
 8005c8c:	f000 f916 	bl	8005ebc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2160      	movs	r1, #96	@ 0x60
 8005c96:	0018      	movs	r0, r3
 8005c98:	f000 f942 	bl	8005f20 <TIM_ITRx_SetConfig>
      break;
 8005c9c:	e01e      	b.n	8005cdc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005caa:	001a      	movs	r2, r3
 8005cac:	f000 f8d8 	bl	8005e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2140      	movs	r1, #64	@ 0x40
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f000 f932 	bl	8005f20 <TIM_ITRx_SetConfig>
      break;
 8005cbc:	e00e      	b.n	8005cdc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	0019      	movs	r1, r3
 8005cc8:	0010      	movs	r0, r2
 8005cca:	f000 f929 	bl	8005f20 <TIM_ITRx_SetConfig>
      break;
 8005cce:	e005      	b.n	8005cdc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005cd0:	230f      	movs	r3, #15
 8005cd2:	18fb      	adds	r3, r7, r3
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	701a      	strb	r2, [r3, #0]
      break;
 8005cd8:	e000      	b.n	8005cdc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005cda:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	223d      	movs	r2, #61	@ 0x3d
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	223c      	movs	r2, #60	@ 0x3c
 8005ce8:	2100      	movs	r1, #0
 8005cea:	5499      	strb	r1, [r3, r2]

  return status;
 8005cec:	230f      	movs	r3, #15
 8005cee:	18fb      	adds	r3, r7, r3
 8005cf0:	781b      	ldrb	r3, [r3, #0]
}
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	b004      	add	sp, #16
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	46c0      	nop			@ (mov r8, r8)
 8005cfc:	ffceff88 	.word	0xffceff88
 8005d00:	ffff00ff 	.word	0xffff00ff

08005d04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d0c:	46c0      	nop			@ (mov r8, r8)
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	b002      	add	sp, #8
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d1c:	46c0      	nop			@ (mov r8, r8)
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	b002      	add	sp, #8
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d2c:	46c0      	nop			@ (mov r8, r8)
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	b002      	add	sp, #8
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d3c:	46c0      	nop			@ (mov r8, r8)
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	b002      	add	sp, #8
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a3b      	ldr	r2, [pc, #236]	@ (8005e44 <TIM_Base_SetConfig+0x100>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d008      	beq.n	8005d6e <TIM_Base_SetConfig+0x2a>
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	2380      	movs	r3, #128	@ 0x80
 8005d60:	05db      	lsls	r3, r3, #23
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d003      	beq.n	8005d6e <TIM_Base_SetConfig+0x2a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a37      	ldr	r2, [pc, #220]	@ (8005e48 <TIM_Base_SetConfig+0x104>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d108      	bne.n	8005d80 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2270      	movs	r2, #112	@ 0x70
 8005d72:	4393      	bics	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a30      	ldr	r2, [pc, #192]	@ (8005e44 <TIM_Base_SetConfig+0x100>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d018      	beq.n	8005dba <TIM_Base_SetConfig+0x76>
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	2380      	movs	r3, #128	@ 0x80
 8005d8c:	05db      	lsls	r3, r3, #23
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d013      	beq.n	8005dba <TIM_Base_SetConfig+0x76>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2c      	ldr	r2, [pc, #176]	@ (8005e48 <TIM_Base_SetConfig+0x104>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00f      	beq.n	8005dba <TIM_Base_SetConfig+0x76>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8005e4c <TIM_Base_SetConfig+0x108>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00b      	beq.n	8005dba <TIM_Base_SetConfig+0x76>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a2a      	ldr	r2, [pc, #168]	@ (8005e50 <TIM_Base_SetConfig+0x10c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d007      	beq.n	8005dba <TIM_Base_SetConfig+0x76>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a29      	ldr	r2, [pc, #164]	@ (8005e54 <TIM_Base_SetConfig+0x110>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d003      	beq.n	8005dba <TIM_Base_SetConfig+0x76>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a28      	ldr	r2, [pc, #160]	@ (8005e58 <TIM_Base_SetConfig+0x114>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d108      	bne.n	8005dcc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4a27      	ldr	r2, [pc, #156]	@ (8005e5c <TIM_Base_SetConfig+0x118>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2280      	movs	r2, #128	@ 0x80
 8005dd0:	4393      	bics	r3, r2
 8005dd2:	001a      	movs	r2, r3
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a13      	ldr	r2, [pc, #76]	@ (8005e44 <TIM_Base_SetConfig+0x100>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00b      	beq.n	8005e12 <TIM_Base_SetConfig+0xce>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a14      	ldr	r2, [pc, #80]	@ (8005e50 <TIM_Base_SetConfig+0x10c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d007      	beq.n	8005e12 <TIM_Base_SetConfig+0xce>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a13      	ldr	r2, [pc, #76]	@ (8005e54 <TIM_Base_SetConfig+0x110>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d003      	beq.n	8005e12 <TIM_Base_SetConfig+0xce>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a12      	ldr	r2, [pc, #72]	@ (8005e58 <TIM_Base_SetConfig+0x114>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d103      	bne.n	8005e1a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	691a      	ldr	r2, [r3, #16]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2201      	movs	r2, #1
 8005e26:	4013      	ands	r3, r2
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d106      	bne.n	8005e3a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	2201      	movs	r2, #1
 8005e32:	4393      	bics	r3, r2
 8005e34:	001a      	movs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	611a      	str	r2, [r3, #16]
  }
}
 8005e3a:	46c0      	nop			@ (mov r8, r8)
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	b004      	add	sp, #16
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	46c0      	nop			@ (mov r8, r8)
 8005e44:	40012c00 	.word	0x40012c00
 8005e48:	40000400 	.word	0x40000400
 8005e4c:	40002000 	.word	0x40002000
 8005e50:	40014000 	.word	0x40014000
 8005e54:	40014400 	.word	0x40014400
 8005e58:	40014800 	.word	0x40014800
 8005e5c:	fffffcff 	.word	0xfffffcff

08005e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	2201      	movs	r2, #1
 8005e78:	4393      	bics	r3, r2
 8005e7a:	001a      	movs	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	22f0      	movs	r2, #240	@ 0xf0
 8005e8a:	4393      	bics	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	220a      	movs	r2, #10
 8005e9c:	4393      	bics	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	621a      	str	r2, [r3, #32]
}
 8005eb4:	46c0      	nop			@ (mov r8, r8)
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	b006      	add	sp, #24
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	2210      	movs	r2, #16
 8005ed4:	4393      	bics	r3, r2
 8005ed6:	001a      	movs	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8005f1c <TIM_TI2_ConfigInputStage+0x60>)
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	031b      	lsls	r3, r3, #12
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	22a0      	movs	r2, #160	@ 0xa0
 8005ef8:	4393      	bics	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	621a      	str	r2, [r3, #32]
}
 8005f12:	46c0      	nop			@ (mov r8, r8)
 8005f14:	46bd      	mov	sp, r7
 8005f16:	b006      	add	sp, #24
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	46c0      	nop			@ (mov r8, r8)
 8005f1c:	ffff0fff 	.word	0xffff0fff

08005f20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4a08      	ldr	r2, [pc, #32]	@ (8005f54 <TIM_ITRx_SetConfig+0x34>)
 8005f34:	4013      	ands	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	2207      	movs	r2, #7
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	609a      	str	r2, [r3, #8]
}
 8005f4a:	46c0      	nop			@ (mov r8, r8)
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	b004      	add	sp, #16
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	46c0      	nop			@ (mov r8, r8)
 8005f54:	ffcfff8f 	.word	0xffcfff8f

08005f58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	4a09      	ldr	r2, [pc, #36]	@ (8005f94 <TIM_ETR_SetConfig+0x3c>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	021a      	lsls	r2, r3, #8
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	609a      	str	r2, [r3, #8]
}
 8005f8c:	46c0      	nop			@ (mov r8, r8)
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b006      	add	sp, #24
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	ffff00ff 	.word	0xffff00ff

08005f98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	223c      	movs	r2, #60	@ 0x3c
 8005fa6:	5c9b      	ldrb	r3, [r3, r2]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e055      	b.n	800605c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	223c      	movs	r2, #60	@ 0x3c
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	223d      	movs	r2, #61	@ 0x3d
 8005fbc:	2102      	movs	r1, #2
 8005fbe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a23      	ldr	r2, [pc, #140]	@ (8006064 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d108      	bne.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4a22      	ldr	r2, [pc, #136]	@ (8006068 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005fde:	4013      	ands	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2270      	movs	r2, #112	@ 0x70
 8005ff0:	4393      	bics	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a16      	ldr	r2, [pc, #88]	@ (8006064 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00f      	beq.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	2380      	movs	r3, #128	@ 0x80
 8006016:	05db      	lsls	r3, r3, #23
 8006018:	429a      	cmp	r2, r3
 800601a:	d009      	beq.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a12      	ldr	r2, [pc, #72]	@ (800606c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d004      	beq.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a11      	ldr	r2, [pc, #68]	@ (8006070 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d10c      	bne.n	800604a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2280      	movs	r2, #128	@ 0x80
 8006034:	4393      	bics	r3, r2
 8006036:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	4313      	orrs	r3, r2
 8006040:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	223d      	movs	r2, #61	@ 0x3d
 800604e:	2101      	movs	r1, #1
 8006050:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	223c      	movs	r2, #60	@ 0x3c
 8006056:	2100      	movs	r1, #0
 8006058:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	0018      	movs	r0, r3
 800605e:	46bd      	mov	sp, r7
 8006060:	b004      	add	sp, #16
 8006062:	bd80      	pop	{r7, pc}
 8006064:	40012c00 	.word	0x40012c00
 8006068:	ff0fffff 	.word	0xff0fffff
 800606c:	40000400 	.word	0x40000400
 8006070:	40014000 	.word	0x40014000

08006074 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800607c:	46c0      	nop			@ (mov r8, r8)
 800607e:	46bd      	mov	sp, r7
 8006080:	b002      	add	sp, #8
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800608c:	46c0      	nop			@ (mov r8, r8)
 800608e:	46bd      	mov	sp, r7
 8006090:	b002      	add	sp, #8
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800609c:	46c0      	nop			@ (mov r8, r8)
 800609e:	46bd      	mov	sp, r7
 80060a0:	b002      	add	sp, #8
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <memset>:
 80060a4:	0003      	movs	r3, r0
 80060a6:	1882      	adds	r2, r0, r2
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d100      	bne.n	80060ae <memset+0xa>
 80060ac:	4770      	bx	lr
 80060ae:	7019      	strb	r1, [r3, #0]
 80060b0:	3301      	adds	r3, #1
 80060b2:	e7f9      	b.n	80060a8 <memset+0x4>

080060b4 <__libc_init_array>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	2600      	movs	r6, #0
 80060b8:	4c0c      	ldr	r4, [pc, #48]	@ (80060ec <__libc_init_array+0x38>)
 80060ba:	4d0d      	ldr	r5, [pc, #52]	@ (80060f0 <__libc_init_array+0x3c>)
 80060bc:	1b64      	subs	r4, r4, r5
 80060be:	10a4      	asrs	r4, r4, #2
 80060c0:	42a6      	cmp	r6, r4
 80060c2:	d109      	bne.n	80060d8 <__libc_init_array+0x24>
 80060c4:	2600      	movs	r6, #0
 80060c6:	f000 f819 	bl	80060fc <_init>
 80060ca:	4c0a      	ldr	r4, [pc, #40]	@ (80060f4 <__libc_init_array+0x40>)
 80060cc:	4d0a      	ldr	r5, [pc, #40]	@ (80060f8 <__libc_init_array+0x44>)
 80060ce:	1b64      	subs	r4, r4, r5
 80060d0:	10a4      	asrs	r4, r4, #2
 80060d2:	42a6      	cmp	r6, r4
 80060d4:	d105      	bne.n	80060e2 <__libc_init_array+0x2e>
 80060d6:	bd70      	pop	{r4, r5, r6, pc}
 80060d8:	00b3      	lsls	r3, r6, #2
 80060da:	58eb      	ldr	r3, [r5, r3]
 80060dc:	4798      	blx	r3
 80060de:	3601      	adds	r6, #1
 80060e0:	e7ee      	b.n	80060c0 <__libc_init_array+0xc>
 80060e2:	00b3      	lsls	r3, r6, #2
 80060e4:	58eb      	ldr	r3, [r5, r3]
 80060e6:	4798      	blx	r3
 80060e8:	3601      	adds	r6, #1
 80060ea:	e7f2      	b.n	80060d2 <__libc_init_array+0x1e>
 80060ec:	08006154 	.word	0x08006154
 80060f0:	08006154 	.word	0x08006154
 80060f4:	08006158 	.word	0x08006158
 80060f8:	08006154 	.word	0x08006154

080060fc <_init>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	46c0      	nop			@ (mov r8, r8)
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr

08006108 <_fini>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	46c0      	nop			@ (mov r8, r8)
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr
