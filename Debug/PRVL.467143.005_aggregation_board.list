
PRVL.467143.005_aggregation_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006640  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080066fc  080066fc  000076fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800673c  0800673c  00008080  2**0
                  CONTENTS
  4 .ARM          00000000  0800673c  0800673c  00008080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800673c  0800673c  00008080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800673c  0800673c  0000773c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006740  08006740  00007740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08006744  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000080  080067c4  00008080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  080067c4  00008388  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011964  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de5  00000000  00000000  00019a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0001c7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c68  00000000  00000000  0001d7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d69  00000000  00000000  0001e450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001504f  00000000  00000000  000371b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bd58  00000000  00000000  0004c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7f60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000388c  00000000  00000000  000e7fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000eb830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000080 	.word	0x20000080
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080066e4 	.word	0x080066e4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000084 	.word	0x20000084
 8000100:	080066e4 	.word	0x080066e4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <PowerOnAdapter>:
	adapter1_state = 0;
	adapter2_state = 0;
}

void PowerOnAdapter(uint8_t adapter_number)
{
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b087      	sub	sp, #28
 8000220:	af02      	add	r7, sp, #8
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 8000228:	4b62      	ldr	r3, [pc, #392]	@ (80003b4 <PowerOnAdapter+0x198>)
 800022a:	2201      	movs	r2, #1
 800022c:	2110      	movs	r1, #16
 800022e:	0018      	movs	r0, r3
 8000230:	f003 f929 	bl	8003486 <HAL_GPIO_WritePin>
	ResetBus();
 8000234:	f001 f912 	bl	800145c <ResetBus>
	Set_devslp();
 8000238:	f000 fe00 	bl	8000e3c <Set_devslp>
	is_launching = 1;
 800023c:	4b5e      	ldr	r3, [pc, #376]	@ (80003b8 <PowerOnAdapter+0x19c>)
 800023e:	2201      	movs	r2, #1
 8000240:	701a      	strb	r2, [r3, #0]
	uint8_t i2c_buffer[1]; // Буфер для передачи данных по I2C
	StartBlinking(adapter_number);
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	0018      	movs	r0, r3
 8000248:	f001 fdc6 	bl	8001dd8 <StartBlinking>
	if (adapter_number == 1 && adapter1_state != 1 && MB1_attach ==  0) {
 800024c:	1dfb      	adds	r3, r7, #7
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b01      	cmp	r3, #1
 8000252:	d14e      	bne.n	80002f2 <PowerOnAdapter+0xd6>
 8000254:	4b59      	ldr	r3, [pc, #356]	@ (80003bc <PowerOnAdapter+0x1a0>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2b01      	cmp	r3, #1
 800025a:	d04a      	beq.n	80002f2 <PowerOnAdapter+0xd6>
 800025c:	4b58      	ldr	r3, [pc, #352]	@ (80003c0 <PowerOnAdapter+0x1a4>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d146      	bne.n	80002f2 <PowerOnAdapter+0xd6>
		HAL_Delay(300);
 8000264:	2396      	movs	r3, #150	@ 0x96
 8000266:	005b      	lsls	r3, r3, #1
 8000268:	0018      	movs	r0, r3
 800026a:	f002 fc87 	bl	8002b7c <HAL_Delay>
		LED_Init();
 800026e:	f001 f9e1 	bl	8001634 <LED_Init>
		// Подготовка команды для передачи по I2C
		i2c_buffer[0] = PWR_ON; // �?спользуем значение из enum
 8000272:	240c      	movs	r4, #12
 8000274:	193b      	adds	r3, r7, r4
 8000276:	2201      	movs	r2, #1
 8000278:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_off, 1, 100);
 800027a:	4a52      	ldr	r2, [pc, #328]	@ (80003c4 <PowerOnAdapter+0x1a8>)
 800027c:	4852      	ldr	r0, [pc, #328]	@ (80003c8 <PowerOnAdapter+0x1ac>)
 800027e:	2364      	movs	r3, #100	@ 0x64
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	2301      	movs	r3, #1
 8000284:	21e6      	movs	r1, #230	@ 0xe6
 8000286:	f003 f9c1 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 800028a:	200a      	movs	r0, #10
 800028c:	f002 fc76 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_2, 1, 100);
 8000290:	4a4e      	ldr	r2, [pc, #312]	@ (80003cc <PowerOnAdapter+0x1b0>)
 8000292:	484d      	ldr	r0, [pc, #308]	@ (80003c8 <PowerOnAdapter+0x1ac>)
 8000294:	2364      	movs	r3, #100	@ 0x64
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	2301      	movs	r3, #1
 800029a:	21e6      	movs	r1, #230	@ 0xe6
 800029c:	f003 f9b6 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 80002a0:	200a      	movs	r0, #10
 80002a2:	f002 fc6b 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_STM_FAN_adapter << 1), i2c_buffer, 1, 100); // Передаём буфер
 80002a6:	193a      	adds	r2, r7, r4
 80002a8:	4847      	ldr	r0, [pc, #284]	@ (80003c8 <PowerOnAdapter+0x1ac>)
 80002aa:	2364      	movs	r3, #100	@ 0x64
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	2301      	movs	r3, #1
 80002b0:	214a      	movs	r1, #74	@ 0x4a
 80002b2:	f003 f9ab 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 80002b6:	200a      	movs	r0, #10
 80002b8:	f002 fc60 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_off, 1, 100);
 80002bc:	4a41      	ldr	r2, [pc, #260]	@ (80003c4 <PowerOnAdapter+0x1a8>)
 80002be:	4842      	ldr	r0, [pc, #264]	@ (80003c8 <PowerOnAdapter+0x1ac>)
 80002c0:	2364      	movs	r3, #100	@ 0x64
 80002c2:	9300      	str	r3, [sp, #0]
 80002c4:	2301      	movs	r3, #1
 80002c6:	21e6      	movs	r1, #230	@ 0xe6
 80002c8:	f003 f9a0 	bl	800360c <HAL_I2C_Master_Transmit>
		UpdateLEDs();
 80002cc:	f001 fd08 	bl	8001ce0 <UpdateLEDs>
		if(HAL_GPIO_ReadPin(MB1_BITCH_GPIO_Port, MB1_BITCH_Pin)!= 1){ adapter1_state = 1;
 80002d0:	23a0      	movs	r3, #160	@ 0xa0
 80002d2:	05db      	lsls	r3, r3, #23
 80002d4:	2108      	movs	r1, #8
 80002d6:	0018      	movs	r0, r3
 80002d8:	f003 f8b8 	bl	800344c <HAL_GPIO_ReadPin>
 80002dc:	0003      	movs	r3, r0
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d003      	beq.n	80002ea <PowerOnAdapter+0xce>
 80002e2:	4b36      	ldr	r3, [pc, #216]	@ (80003bc <PowerOnAdapter+0x1a0>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	701a      	strb	r2, [r3, #0]
 80002e8:	e059      	b.n	800039e <PowerOnAdapter+0x182>
		}else adapter1_state = 0;
 80002ea:	4b34      	ldr	r3, [pc, #208]	@ (80003bc <PowerOnAdapter+0x1a0>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(MB1_BITCH_GPIO_Port, MB1_BITCH_Pin)!= 1){ adapter1_state = 1;
 80002f0:	e055      	b.n	800039e <PowerOnAdapter+0x182>


	} else if (adapter_number == 2 && adapter2_state != 1 && MB2_attach ==  0 ) {
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b02      	cmp	r3, #2
 80002f8:	d151      	bne.n	800039e <PowerOnAdapter+0x182>
 80002fa:	4b35      	ldr	r3, [pc, #212]	@ (80003d0 <PowerOnAdapter+0x1b4>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d04d      	beq.n	800039e <PowerOnAdapter+0x182>
 8000302:	4b34      	ldr	r3, [pc, #208]	@ (80003d4 <PowerOnAdapter+0x1b8>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d149      	bne.n	800039e <PowerOnAdapter+0x182>
		HAL_Delay(300);
 800030a:	2396      	movs	r3, #150	@ 0x96
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	0018      	movs	r0, r3
 8000310:	f002 fc34 	bl	8002b7c <HAL_Delay>
		LED_Init();
 8000314:	f001 f98e 	bl	8001634 <LED_Init>
		// Подготовка команды для передачи по I2C
		i2c_buffer[0] = PWR_ON; // �?спользуем значение из enum
 8000318:	240c      	movs	r4, #12
 800031a:	193b      	adds	r3, r7, r4
 800031c:	2201      	movs	r2, #1
 800031e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_off, 1, 1000);
 8000320:	4a28      	ldr	r2, [pc, #160]	@ (80003c4 <PowerOnAdapter+0x1a8>)
 8000322:	4829      	ldr	r0, [pc, #164]	@ (80003c8 <PowerOnAdapter+0x1ac>)
 8000324:	23fa      	movs	r3, #250	@ 0xfa
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	9300      	str	r3, [sp, #0]
 800032a:	2301      	movs	r3, #1
 800032c:	21e6      	movs	r1, #230	@ 0xe6
 800032e:	f003 f96d 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8000332:	200a      	movs	r0, #10
 8000334:	f002 fc22 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_3, 1, 500);
 8000338:	4a27      	ldr	r2, [pc, #156]	@ (80003d8 <PowerOnAdapter+0x1bc>)
 800033a:	4823      	ldr	r0, [pc, #140]	@ (80003c8 <PowerOnAdapter+0x1ac>)
 800033c:	23fa      	movs	r3, #250	@ 0xfa
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	2301      	movs	r3, #1
 8000344:	21e6      	movs	r1, #230	@ 0xe6
 8000346:	f003 f961 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 800034a:	200a      	movs	r0, #10
 800034c:	f002 fc16 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_STM_FAN_adapter << 1), i2c_buffer, 1, 1000); // Передаём буфер
 8000350:	193a      	adds	r2, r7, r4
 8000352:	481d      	ldr	r0, [pc, #116]	@ (80003c8 <PowerOnAdapter+0x1ac>)
 8000354:	23fa      	movs	r3, #250	@ 0xfa
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	2301      	movs	r3, #1
 800035c:	214a      	movs	r1, #74	@ 0x4a
 800035e:	f003 f955 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8000362:	200a      	movs	r0, #10
 8000364:	f002 fc0a 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_off, 1, 1000);
 8000368:	4a16      	ldr	r2, [pc, #88]	@ (80003c4 <PowerOnAdapter+0x1a8>)
 800036a:	4817      	ldr	r0, [pc, #92]	@ (80003c8 <PowerOnAdapter+0x1ac>)
 800036c:	23fa      	movs	r3, #250	@ 0xfa
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	9300      	str	r3, [sp, #0]
 8000372:	2301      	movs	r3, #1
 8000374:	21e6      	movs	r1, #230	@ 0xe6
 8000376:	f003 f949 	bl	800360c <HAL_I2C_Master_Transmit>
		UpdateLEDs();
 800037a:	f001 fcb1 	bl	8001ce0 <UpdateLEDs>
		if(HAL_GPIO_ReadPin(MB2_BITCH_GPIO_Port, MB2_BITCH_Pin)!= 1){ adapter1_state = 1;
 800037e:	23a0      	movs	r3, #160	@ 0xa0
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	2120      	movs	r1, #32
 8000384:	0018      	movs	r0, r3
 8000386:	f003 f861 	bl	800344c <HAL_GPIO_ReadPin>
 800038a:	0003      	movs	r3, r0
 800038c:	2b01      	cmp	r3, #1
 800038e:	d003      	beq.n	8000398 <PowerOnAdapter+0x17c>
 8000390:	4b0a      	ldr	r3, [pc, #40]	@ (80003bc <PowerOnAdapter+0x1a0>)
 8000392:	2201      	movs	r2, #1
 8000394:	701a      	strb	r2, [r3, #0]
 8000396:	e002      	b.n	800039e <PowerOnAdapter+0x182>
		}else adapter1_state = 0;
 8000398:	4b08      	ldr	r3, [pc, #32]	@ (80003bc <PowerOnAdapter+0x1a0>)
 800039a:	2200      	movs	r2, #0
 800039c:	701a      	strb	r2, [r3, #0]

	}

	cold_start = 0;
 800039e:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <PowerOnAdapter+0x1c0>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	701a      	strb	r2, [r3, #0]
	is_launching = 0;
 80003a4:	4b04      	ldr	r3, [pc, #16]	@ (80003b8 <PowerOnAdapter+0x19c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
}
 80003aa:	46c0      	nop			@ (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	b005      	add	sp, #20
 80003b0:	bd90      	pop	{r4, r7, pc}
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	50000800 	.word	0x50000800
 80003b8:	2000037c 	.word	0x2000037c
 80003bc:	20000318 	.word	0x20000318
 80003c0:	2000006f 	.word	0x2000006f
 80003c4:	200002b4 	.word	0x200002b4
 80003c8:	200000b8 	.word	0x200000b8
 80003cc:	2000005c 	.word	0x2000005c
 80003d0:	20000319 	.word	0x20000319
 80003d4:	20000070 	.word	0x20000070
 80003d8:	20000060 	.word	0x20000060
 80003dc:	20000071 	.word	0x20000071

080003e0 <PowerOffAdapter>:
void PowerOffAdapter(uint8_t adapter_number) // отправка посылки на выключение адаптера по I2C
{
 80003e0:	b590      	push	{r4, r7, lr}
 80003e2:	b087      	sub	sp, #28
 80003e4:	af02      	add	r7, sp, #8
 80003e6:	0002      	movs	r2, r0
 80003e8:	1dfb      	adds	r3, r7, #7
 80003ea:	701a      	strb	r2, [r3, #0]

	uint8_t i2c_buffer[1]; // Буфер для передачи данных по I2C

	is_launching = 0;
 80003ec:	4b4d      	ldr	r3, [pc, #308]	@ (8000524 <PowerOffAdapter+0x144>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
	if (adapter_number == 1 && adapter1_state == 1) {
 80003f2:	1dfb      	adds	r3, r7, #7
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d145      	bne.n	8000486 <PowerOffAdapter+0xa6>
 80003fa:	4b4b      	ldr	r3, [pc, #300]	@ (8000528 <PowerOffAdapter+0x148>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d141      	bne.n	8000486 <PowerOffAdapter+0xa6>
		// Подготовка команды для передачи по I2C
		i2c_buffer[0] = PWR_OFF; // �?спользуем значение из enum
 8000402:	240c      	movs	r4, #12
 8000404:	193b      	adds	r3, r7, r4
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_off, 1, 1000);
 800040a:	4a48      	ldr	r2, [pc, #288]	@ (800052c <PowerOffAdapter+0x14c>)
 800040c:	4848      	ldr	r0, [pc, #288]	@ (8000530 <PowerOffAdapter+0x150>)
 800040e:	23fa      	movs	r3, #250	@ 0xfa
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	2301      	movs	r3, #1
 8000416:	21e6      	movs	r1, #230	@ 0xe6
 8000418:	f003 f8f8 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 800041c:	200a      	movs	r0, #10
 800041e:	f002 fbad 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_2, 1, 1000);
 8000422:	4a44      	ldr	r2, [pc, #272]	@ (8000534 <PowerOffAdapter+0x154>)
 8000424:	4842      	ldr	r0, [pc, #264]	@ (8000530 <PowerOffAdapter+0x150>)
 8000426:	23fa      	movs	r3, #250	@ 0xfa
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	9300      	str	r3, [sp, #0]
 800042c:	2301      	movs	r3, #1
 800042e:	21e6      	movs	r1, #230	@ 0xe6
 8000430:	f003 f8ec 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8000434:	200a      	movs	r0, #10
 8000436:	f002 fba1 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_STM_FAN_adapter << 1), i2c_buffer, 1, 1000); // Передаём буфер
 800043a:	193a      	adds	r2, r7, r4
 800043c:	483c      	ldr	r0, [pc, #240]	@ (8000530 <PowerOffAdapter+0x150>)
 800043e:	23fa      	movs	r3, #250	@ 0xfa
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	2301      	movs	r3, #1
 8000446:	214a      	movs	r1, #74	@ 0x4a
 8000448:	f003 f8e0 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 800044c:	200a      	movs	r0, #10
 800044e:	f002 fb95 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_off, 1, 1000);
 8000452:	4a36      	ldr	r2, [pc, #216]	@ (800052c <PowerOffAdapter+0x14c>)
 8000454:	4836      	ldr	r0, [pc, #216]	@ (8000530 <PowerOffAdapter+0x150>)
 8000456:	23fa      	movs	r3, #250	@ 0xfa
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	9300      	str	r3, [sp, #0]
 800045c:	2301      	movs	r3, #1
 800045e:	21e6      	movs	r1, #230	@ 0xe6
 8000460:	f003 f8d4 	bl	800360c <HAL_I2C_Master_Transmit>

		if(HAL_GPIO_ReadPin(MB1_BITCH_GPIO_Port, MB1_BITCH_Pin)!= 1) {
 8000464:	23a0      	movs	r3, #160	@ 0xa0
 8000466:	05db      	lsls	r3, r3, #23
 8000468:	2108      	movs	r1, #8
 800046a:	0018      	movs	r0, r3
 800046c:	f002 ffee 	bl	800344c <HAL_GPIO_ReadPin>
 8000470:	0003      	movs	r3, r0
 8000472:	2b01      	cmp	r3, #1
 8000474:	d003      	beq.n	800047e <PowerOffAdapter+0x9e>
			adapter1_state = 1;
 8000476:	4b2c      	ldr	r3, [pc, #176]	@ (8000528 <PowerOffAdapter+0x148>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(MB1_BITCH_GPIO_Port, MB1_BITCH_Pin)!= 1) {
 800047c:	e04d      	b.n	800051a <PowerOffAdapter+0x13a>
		} else adapter1_state = 0;
 800047e:	4b2a      	ldr	r3, [pc, #168]	@ (8000528 <PowerOffAdapter+0x148>)
 8000480:	2200      	movs	r2, #0
 8000482:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(MB1_BITCH_GPIO_Port, MB1_BITCH_Pin)!= 1) {
 8000484:	e049      	b.n	800051a <PowerOffAdapter+0x13a>
	} else if (adapter_number == 2 && adapter2_state == 1) {
 8000486:	1dfb      	adds	r3, r7, #7
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b02      	cmp	r3, #2
 800048c:	d145      	bne.n	800051a <PowerOffAdapter+0x13a>
 800048e:	4b2a      	ldr	r3, [pc, #168]	@ (8000538 <PowerOffAdapter+0x158>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d141      	bne.n	800051a <PowerOffAdapter+0x13a>
		// Подготовка команды для передачи по I2C
		i2c_buffer[0] = PWR_OFF; // �?спользуем значение из enum
 8000496:	240c      	movs	r4, #12
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_off, 1, 1000);
 800049e:	4a23      	ldr	r2, [pc, #140]	@ (800052c <PowerOffAdapter+0x14c>)
 80004a0:	4823      	ldr	r0, [pc, #140]	@ (8000530 <PowerOffAdapter+0x150>)
 80004a2:	23fa      	movs	r3, #250	@ 0xfa
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	9300      	str	r3, [sp, #0]
 80004a8:	2301      	movs	r3, #1
 80004aa:	21e6      	movs	r1, #230	@ 0xe6
 80004ac:	f003 f8ae 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 80004b0:	200a      	movs	r0, #10
 80004b2:	f002 fb63 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_3, 1, 1000);
 80004b6:	4a21      	ldr	r2, [pc, #132]	@ (800053c <PowerOffAdapter+0x15c>)
 80004b8:	481d      	ldr	r0, [pc, #116]	@ (8000530 <PowerOffAdapter+0x150>)
 80004ba:	23fa      	movs	r3, #250	@ 0xfa
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	9300      	str	r3, [sp, #0]
 80004c0:	2301      	movs	r3, #1
 80004c2:	21e6      	movs	r1, #230	@ 0xe6
 80004c4:	f003 f8a2 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 80004c8:	200a      	movs	r0, #10
 80004ca:	f002 fb57 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_STM_FAN_adapter << 1), i2c_buffer, 1, 1000); // Передаём буфер
 80004ce:	193a      	adds	r2, r7, r4
 80004d0:	4817      	ldr	r0, [pc, #92]	@ (8000530 <PowerOffAdapter+0x150>)
 80004d2:	23fa      	movs	r3, #250	@ 0xfa
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2301      	movs	r3, #1
 80004da:	214a      	movs	r1, #74	@ 0x4a
 80004dc:	f003 f896 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 80004e0:	200a      	movs	r0, #10
 80004e2:	f002 fb4b 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_off, 1, 1000);
 80004e6:	4a11      	ldr	r2, [pc, #68]	@ (800052c <PowerOffAdapter+0x14c>)
 80004e8:	4811      	ldr	r0, [pc, #68]	@ (8000530 <PowerOffAdapter+0x150>)
 80004ea:	23fa      	movs	r3, #250	@ 0xfa
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2301      	movs	r3, #1
 80004f2:	21e6      	movs	r1, #230	@ 0xe6
 80004f4:	f003 f88a 	bl	800360c <HAL_I2C_Master_Transmit>
		if(HAL_GPIO_ReadPin(MB2_BITCH_GPIO_Port, MB2_BITCH_Pin)!= 1) {
 80004f8:	23a0      	movs	r3, #160	@ 0xa0
 80004fa:	05db      	lsls	r3, r3, #23
 80004fc:	2120      	movs	r1, #32
 80004fe:	0018      	movs	r0, r3
 8000500:	f002 ffa4 	bl	800344c <HAL_GPIO_ReadPin>
 8000504:	0003      	movs	r3, r0
 8000506:	2b01      	cmp	r3, #1
 8000508:	d003      	beq.n	8000512 <PowerOffAdapter+0x132>
			adapter2_state = 1;
 800050a:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <PowerOffAdapter+0x158>)
 800050c:	2201      	movs	r2, #1
 800050e:	701a      	strb	r2, [r3, #0]
		} else adapter2_state = 0;
	}
}
 8000510:	e003      	b.n	800051a <PowerOffAdapter+0x13a>
		} else adapter2_state = 0;
 8000512:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <PowerOffAdapter+0x158>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
}
 8000518:	e7ff      	b.n	800051a <PowerOffAdapter+0x13a>
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b005      	add	sp, #20
 8000520:	bd90      	pop	{r4, r7, pc}
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	2000037c 	.word	0x2000037c
 8000528:	20000318 	.word	0x20000318
 800052c:	200002b4 	.word	0x200002b4
 8000530:	200000b8 	.word	0x200000b8
 8000534:	2000005c 	.word	0x2000005c
 8000538:	20000319 	.word	0x20000319
 800053c:	20000060 	.word	0x20000060

08000540 <HardResetAdapter>:

void HardResetAdapter(uint8_t adapter_number)// отправка посылки на hard reset  адаптера по I2C
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b087      	sub	sp, #28
 8000544:	af02      	add	r7, sp, #8
 8000546:	0002      	movs	r2, r0
 8000548:	1dfb      	adds	r3, r7, #7
 800054a:	701a      	strb	r2, [r3, #0]

	uint8_t i2c_buffer[1]; // Буфер для передачи данных по I2C

	if (adapter_number == 1 && adapter1_state == 1) {
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d139      	bne.n	80005c8 <HardResetAdapter+0x88>
 8000554:	4b3d      	ldr	r3, [pc, #244]	@ (800064c <HardResetAdapter+0x10c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d135      	bne.n	80005c8 <HardResetAdapter+0x88>
		// Подготовка команды для передачи по I2C
		i2c_buffer[0] = HARD_RESET; // �?спользуем значение из enum
 800055c:	240c      	movs	r4, #12
 800055e:	193b      	adds	r3, r7, r4
 8000560:	2203      	movs	r2, #3
 8000562:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_off, 1, 1000);
 8000564:	4a3a      	ldr	r2, [pc, #232]	@ (8000650 <HardResetAdapter+0x110>)
 8000566:	483b      	ldr	r0, [pc, #236]	@ (8000654 <HardResetAdapter+0x114>)
 8000568:	23fa      	movs	r3, #250	@ 0xfa
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2301      	movs	r3, #1
 8000570:	21e6      	movs	r1, #230	@ 0xe6
 8000572:	f003 f84b 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8000576:	200a      	movs	r0, #10
 8000578:	f002 fb00 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_2, 1, HAL_MAX_DELAY);
 800057c:	4a36      	ldr	r2, [pc, #216]	@ (8000658 <HardResetAdapter+0x118>)
 800057e:	4835      	ldr	r0, [pc, #212]	@ (8000654 <HardResetAdapter+0x114>)
 8000580:	2301      	movs	r3, #1
 8000582:	425b      	negs	r3, r3
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2301      	movs	r3, #1
 8000588:	21e6      	movs	r1, #230	@ 0xe6
 800058a:	f003 f83f 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 800058e:	200a      	movs	r0, #10
 8000590:	f002 faf4 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_STM_FAN_adapter << 1), i2c_buffer, 1, 1000); // Передаём буфер
 8000594:	193a      	adds	r2, r7, r4
 8000596:	482f      	ldr	r0, [pc, #188]	@ (8000654 <HardResetAdapter+0x114>)
 8000598:	23fa      	movs	r3, #250	@ 0xfa
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	214a      	movs	r1, #74	@ 0x4a
 80005a2:	f003 f833 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 80005a6:	200a      	movs	r0, #10
 80005a8:	f002 fae8 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_off, 1, 1000);
 80005ac:	4a28      	ldr	r2, [pc, #160]	@ (8000650 <HardResetAdapter+0x110>)
 80005ae:	4829      	ldr	r0, [pc, #164]	@ (8000654 <HardResetAdapter+0x114>)
 80005b0:	23fa      	movs	r3, #250	@ 0xfa
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2301      	movs	r3, #1
 80005b8:	21e6      	movs	r1, #230	@ 0xe6
 80005ba:	f003 f827 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(6000);
 80005be:	4b27      	ldr	r3, [pc, #156]	@ (800065c <HardResetAdapter+0x11c>)
 80005c0:	0018      	movs	r0, r3
 80005c2:	f002 fadb 	bl	8002b7c <HAL_Delay>
		HAL_Delay(10);
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_off, 1, 1000);
		HAL_Delay(6000);
	}

}
 80005c6:	e03c      	b.n	8000642 <HardResetAdapter+0x102>
	} else if (adapter_number == 2 && adapter2_state == 1) {
 80005c8:	1dfb      	adds	r3, r7, #7
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d138      	bne.n	8000642 <HardResetAdapter+0x102>
 80005d0:	4b23      	ldr	r3, [pc, #140]	@ (8000660 <HardResetAdapter+0x120>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d134      	bne.n	8000642 <HardResetAdapter+0x102>
		i2c_buffer[0] = HARD_RESET; // �?спользуем значение из enum
 80005d8:	240c      	movs	r4, #12
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	2203      	movs	r2, #3
 80005de:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_off, 1, 1000);
 80005e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000650 <HardResetAdapter+0x110>)
 80005e2:	481c      	ldr	r0, [pc, #112]	@ (8000654 <HardResetAdapter+0x114>)
 80005e4:	23fa      	movs	r3, #250	@ 0xfa
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	21e6      	movs	r1, #230	@ 0xe6
 80005ee:	f003 f80d 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 80005f2:	200a      	movs	r0, #10
 80005f4:	f002 fac2 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_3, 1, HAL_MAX_DELAY);
 80005f8:	4a1a      	ldr	r2, [pc, #104]	@ (8000664 <HardResetAdapter+0x124>)
 80005fa:	4816      	ldr	r0, [pc, #88]	@ (8000654 <HardResetAdapter+0x114>)
 80005fc:	2301      	movs	r3, #1
 80005fe:	425b      	negs	r3, r3
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	21e6      	movs	r1, #230	@ 0xe6
 8000606:	f003 f801 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 800060a:	200a      	movs	r0, #10
 800060c:	f002 fab6 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_STM_FAN_adapter << 1), i2c_buffer, 1, 1000); // Передаём буфер
 8000610:	193a      	adds	r2, r7, r4
 8000612:	4810      	ldr	r0, [pc, #64]	@ (8000654 <HardResetAdapter+0x114>)
 8000614:	23fa      	movs	r3, #250	@ 0xfa
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2301      	movs	r3, #1
 800061c:	214a      	movs	r1, #74	@ 0x4a
 800061e:	f002 fff5 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8000622:	200a      	movs	r0, #10
 8000624:	f002 faaa 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_off, 1, 1000);
 8000628:	4a09      	ldr	r2, [pc, #36]	@ (8000650 <HardResetAdapter+0x110>)
 800062a:	480a      	ldr	r0, [pc, #40]	@ (8000654 <HardResetAdapter+0x114>)
 800062c:	23fa      	movs	r3, #250	@ 0xfa
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2301      	movs	r3, #1
 8000634:	21e6      	movs	r1, #230	@ 0xe6
 8000636:	f002 ffe9 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(6000);
 800063a:	4b08      	ldr	r3, [pc, #32]	@ (800065c <HardResetAdapter+0x11c>)
 800063c:	0018      	movs	r0, r3
 800063e:	f002 fa9d 	bl	8002b7c <HAL_Delay>
}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	b005      	add	sp, #20
 8000648:	bd90      	pop	{r4, r7, pc}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	20000318 	.word	0x20000318
 8000650:	200002b4 	.word	0x200002b4
 8000654:	200000b8 	.word	0x200000b8
 8000658:	2000005c 	.word	0x2000005c
 800065c:	00001770 	.word	0x00001770
 8000660:	20000319 	.word	0x20000319
 8000664:	20000060 	.word	0x20000060

08000668 <UpdateCPU_PSON>:

void UpdateCPU_PSON()
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	if( MB1_attach == 0 && MB2_attach == 0)
 800066c:	4b76      	ldr	r3, [pc, #472]	@ (8000848 <UpdateCPU_PSON+0x1e0>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d000      	beq.n	8000676 <UpdateCPU_PSON+0xe>
 8000674:	e088      	b.n	8000788 <UpdateCPU_PSON+0x120>
 8000676:	4b75      	ldr	r3, [pc, #468]	@ (800084c <UpdateCPU_PSON+0x1e4>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d000      	beq.n	8000680 <UpdateCPU_PSON+0x18>
 800067e:	e083      	b.n	8000788 <UpdateCPU_PSON+0x120>
	{
		if (adapter1_state == 0 && adapter2_state == 1 && MB2_attach == 0 && cold_start == 1)
 8000680:	4b73      	ldr	r3, [pc, #460]	@ (8000850 <UpdateCPU_PSON+0x1e8>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d125      	bne.n	80006d4 <UpdateCPU_PSON+0x6c>
 8000688:	4b72      	ldr	r3, [pc, #456]	@ (8000854 <UpdateCPU_PSON+0x1ec>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d121      	bne.n	80006d4 <UpdateCPU_PSON+0x6c>
 8000690:	4b6e      	ldr	r3, [pc, #440]	@ (800084c <UpdateCPU_PSON+0x1e4>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d11d      	bne.n	80006d4 <UpdateCPU_PSON+0x6c>
 8000698:	4b6f      	ldr	r3, [pc, #444]	@ (8000858 <UpdateCPU_PSON+0x1f0>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d119      	bne.n	80006d4 <UpdateCPU_PSON+0x6c>
		{
			HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 80006a0:	4b6e      	ldr	r3, [pc, #440]	@ (800085c <UpdateCPU_PSON+0x1f4>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	2110      	movs	r1, #16
 80006a6:	0018      	movs	r0, r3
 80006a8:	f002 feed 	bl	8003486 <HAL_GPIO_WritePin>
			is_launching = 1;
 80006ac:	4b6c      	ldr	r3, [pc, #432]	@ (8000860 <UpdateCPU_PSON+0x1f8>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
			LED_Init();
 80006b2:	f000 ffbf 	bl	8001634 <LED_Init>
			PowerOnAdapter(2);
 80006b6:	2002      	movs	r0, #2
 80006b8:	f7ff fdb0 	bl	800021c <PowerOnAdapter>
			HAL_TIM_Base_Start_IT(&htim1);
 80006bc:	4b69      	ldr	r3, [pc, #420]	@ (8000864 <UpdateCPU_PSON+0x1fc>)
 80006be:	0018      	movs	r0, r3
 80006c0:	f005 fbac 	bl	8005e1c <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 80006c4:	4b68      	ldr	r3, [pc, #416]	@ (8000868 <UpdateCPU_PSON+0x200>)
 80006c6:	0018      	movs	r0, r3
 80006c8:	f005 fba8 	bl	8005e1c <HAL_TIM_Base_Start_IT>

			cold_start = 0;
 80006cc:	4b62      	ldr	r3, [pc, #392]	@ (8000858 <UpdateCPU_PSON+0x1f0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
 80006d2:	e058      	b.n	8000786 <UpdateCPU_PSON+0x11e>
		}else
			if (adapter2_state == 0 && adapter1_state == 1 && MB1_attach == 0 && cold_start == 1)
 80006d4:	4b5f      	ldr	r3, [pc, #380]	@ (8000854 <UpdateCPU_PSON+0x1ec>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d125      	bne.n	8000728 <UpdateCPU_PSON+0xc0>
 80006dc:	4b5c      	ldr	r3, [pc, #368]	@ (8000850 <UpdateCPU_PSON+0x1e8>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d121      	bne.n	8000728 <UpdateCPU_PSON+0xc0>
 80006e4:	4b58      	ldr	r3, [pc, #352]	@ (8000848 <UpdateCPU_PSON+0x1e0>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d11d      	bne.n	8000728 <UpdateCPU_PSON+0xc0>
 80006ec:	4b5a      	ldr	r3, [pc, #360]	@ (8000858 <UpdateCPU_PSON+0x1f0>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d119      	bne.n	8000728 <UpdateCPU_PSON+0xc0>
			{
				HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 80006f4:	4b59      	ldr	r3, [pc, #356]	@ (800085c <UpdateCPU_PSON+0x1f4>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	2110      	movs	r1, #16
 80006fa:	0018      	movs	r0, r3
 80006fc:	f002 fec3 	bl	8003486 <HAL_GPIO_WritePin>
				is_launching = 1;
 8000700:	4b57      	ldr	r3, [pc, #348]	@ (8000860 <UpdateCPU_PSON+0x1f8>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
				LED_Init();
 8000706:	f000 ff95 	bl	8001634 <LED_Init>
				PowerOnAdapter(1);
 800070a:	2001      	movs	r0, #1
 800070c:	f7ff fd86 	bl	800021c <PowerOnAdapter>
				HAL_TIM_Base_Start_IT(&htim1);
 8000710:	4b54      	ldr	r3, [pc, #336]	@ (8000864 <UpdateCPU_PSON+0x1fc>)
 8000712:	0018      	movs	r0, r3
 8000714:	f005 fb82 	bl	8005e1c <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start_IT(&htim2);
 8000718:	4b53      	ldr	r3, [pc, #332]	@ (8000868 <UpdateCPU_PSON+0x200>)
 800071a:	0018      	movs	r0, r3
 800071c:	f005 fb7e 	bl	8005e1c <HAL_TIM_Base_Start_IT>
				cold_start = 0;
 8000720:	4b4d      	ldr	r3, [pc, #308]	@ (8000858 <UpdateCPU_PSON+0x1f0>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	e02e      	b.n	8000786 <UpdateCPU_PSON+0x11e>
			}else if (adapter1_state == 1 && adapter2_state == 1 && cold_start == 1)
 8000728:	4b49      	ldr	r3, [pc, #292]	@ (8000850 <UpdateCPU_PSON+0x1e8>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d000      	beq.n	8000732 <UpdateCPU_PSON+0xca>
 8000730:	e085      	b.n	800083e <UpdateCPU_PSON+0x1d6>
 8000732:	4b48      	ldr	r3, [pc, #288]	@ (8000854 <UpdateCPU_PSON+0x1ec>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d000      	beq.n	800073c <UpdateCPU_PSON+0xd4>
 800073a:	e080      	b.n	800083e <UpdateCPU_PSON+0x1d6>
 800073c:	4b46      	ldr	r3, [pc, #280]	@ (8000858 <UpdateCPU_PSON+0x1f0>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d000      	beq.n	8000746 <UpdateCPU_PSON+0xde>
 8000744:	e07b      	b.n	800083e <UpdateCPU_PSON+0x1d6>
			{
				HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 8000746:	4b45      	ldr	r3, [pc, #276]	@ (800085c <UpdateCPU_PSON+0x1f4>)
 8000748:	2201      	movs	r2, #1
 800074a:	2110      	movs	r1, #16
 800074c:	0018      	movs	r0, r3
 800074e:	f002 fe9a 	bl	8003486 <HAL_GPIO_WritePin>
				is_launching = 1;
 8000752:	4b43      	ldr	r3, [pc, #268]	@ (8000860 <UpdateCPU_PSON+0x1f8>)
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
				LED_Init();
 8000758:	f000 ff6c 	bl	8001634 <LED_Init>
				PowerOnAdapter(1);
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff fd5d 	bl	800021c <PowerOnAdapter>
				PowerOnAdapter(2);
 8000762:	2002      	movs	r0, #2
 8000764:	f7ff fd5a 	bl	800021c <PowerOnAdapter>
				HAL_Delay(200);
 8000768:	20c8      	movs	r0, #200	@ 0xc8
 800076a:	f002 fa07 	bl	8002b7c <HAL_Delay>
				HAL_TIM_Base_Start_IT(&htim1);
 800076e:	4b3d      	ldr	r3, [pc, #244]	@ (8000864 <UpdateCPU_PSON+0x1fc>)
 8000770:	0018      	movs	r0, r3
 8000772:	f005 fb53 	bl	8005e1c <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Start_IT(&htim2);
 8000776:	4b3c      	ldr	r3, [pc, #240]	@ (8000868 <UpdateCPU_PSON+0x200>)
 8000778:	0018      	movs	r0, r3
 800077a:	f005 fb4f 	bl	8005e1c <HAL_TIM_Base_Start_IT>
				cold_start = 0;
 800077e:	4b36      	ldr	r3, [pc, #216]	@ (8000858 <UpdateCPU_PSON+0x1f0>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
		if (adapter1_state == 0 && adapter2_state == 1 && MB2_attach == 0 && cold_start == 1)
 8000784:	e05b      	b.n	800083e <UpdateCPU_PSON+0x1d6>
 8000786:	e05a      	b.n	800083e <UpdateCPU_PSON+0x1d6>
			}

	}else if ((adapter1_state == 1 && MB1_attach == 0) || (adapter2_state == 1 && MB2_attach == 0) )
 8000788:	4b31      	ldr	r3, [pc, #196]	@ (8000850 <UpdateCPU_PSON+0x1e8>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d103      	bne.n	8000798 <UpdateCPU_PSON+0x130>
 8000790:	4b2d      	ldr	r3, [pc, #180]	@ (8000848 <UpdateCPU_PSON+0x1e0>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d007      	beq.n	80007a8 <UpdateCPU_PSON+0x140>
 8000798:	4b2e      	ldr	r3, [pc, #184]	@ (8000854 <UpdateCPU_PSON+0x1ec>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d125      	bne.n	80007ec <UpdateCPU_PSON+0x184>
 80007a0:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <UpdateCPU_PSON+0x1e4>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d121      	bne.n	80007ec <UpdateCPU_PSON+0x184>
	{

		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 80007a8:	4b2c      	ldr	r3, [pc, #176]	@ (800085c <UpdateCPU_PSON+0x1f4>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	2110      	movs	r1, #16
 80007ae:	0018      	movs	r0, r3
 80007b0:	f002 fe69 	bl	8003486 <HAL_GPIO_WritePin>

		if (cold_start == 1)
 80007b4:	4b28      	ldr	r3, [pc, #160]	@ (8000858 <UpdateCPU_PSON+0x1f0>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d10b      	bne.n	80007d4 <UpdateCPU_PSON+0x16c>
		{
			HAL_Delay(500);
 80007bc:	23fa      	movs	r3, #250	@ 0xfa
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	0018      	movs	r0, r3
 80007c2:	f002 f9db 	bl	8002b7c <HAL_Delay>
			LED_Init();
 80007c6:	f000 ff35 	bl	8001634 <LED_Init>
			HAL_Delay(500);
 80007ca:	23fa      	movs	r3, #250	@ 0xfa
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	0018      	movs	r0, r3
 80007d0:	f002 f9d4 	bl	8002b7c <HAL_Delay>
		}
		cold_start =0;
 80007d4:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <UpdateCPU_PSON+0x1f0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim1);
 80007da:	4b22      	ldr	r3, [pc, #136]	@ (8000864 <UpdateCPU_PSON+0x1fc>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f005 fb1d 	bl	8005e1c <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim2);
 80007e2:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <UpdateCPU_PSON+0x200>)
 80007e4:	0018      	movs	r0, r3
 80007e6:	f005 fb19 	bl	8005e1c <HAL_TIM_Base_Start_IT>
 80007ea:	e029      	b.n	8000840 <UpdateCPU_PSON+0x1d8>

	}else if (is_launching == 1)
 80007ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000860 <UpdateCPU_PSON+0x1f8>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d115      	bne.n	8000820 <UpdateCPU_PSON+0x1b8>
	{
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 80007f4:	4b19      	ldr	r3, [pc, #100]	@ (800085c <UpdateCPU_PSON+0x1f4>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	2110      	movs	r1, #16
 80007fa:	0018      	movs	r0, r3
 80007fc:	f002 fe43 	bl	8003486 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000800:	23fa      	movs	r3, #250	@ 0xfa
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	0018      	movs	r0, r3
 8000806:	f002 f9b9 	bl	8002b7c <HAL_Delay>
		LED_Init();
 800080a:	f000 ff13 	bl	8001634 <LED_Init>
		HAL_TIM_Base_Start_IT(&htim1);
 800080e:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <UpdateCPU_PSON+0x1fc>)
 8000810:	0018      	movs	r0, r3
 8000812:	f005 fb03 	bl	8005e1c <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim2);
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <UpdateCPU_PSON+0x200>)
 8000818:	0018      	movs	r0, r3
 800081a:	f005 faff 	bl	8005e1c <HAL_TIM_Base_Start_IT>
	{
		HAL_TIM_Base_Stop_IT(&htim1);
		HAL_TIM_Base_Stop_IT(&htim2);
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, RESET);
	}
}
 800081e:	e00f      	b.n	8000840 <UpdateCPU_PSON+0x1d8>
		HAL_TIM_Base_Stop_IT(&htim1);
 8000820:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <UpdateCPU_PSON+0x1fc>)
 8000822:	0018      	movs	r0, r3
 8000824:	f005 fb56 	bl	8005ed4 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <UpdateCPU_PSON+0x200>)
 800082a:	0018      	movs	r0, r3
 800082c:	f005 fb52 	bl	8005ed4 <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, RESET);
 8000830:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <UpdateCPU_PSON+0x1f4>)
 8000832:	2200      	movs	r2, #0
 8000834:	2110      	movs	r1, #16
 8000836:	0018      	movs	r0, r3
 8000838:	f002 fe25 	bl	8003486 <HAL_GPIO_WritePin>
}
 800083c:	e000      	b.n	8000840 <UpdateCPU_PSON+0x1d8>
		if (adapter1_state == 0 && adapter2_state == 1 && MB2_attach == 0 && cold_start == 1)
 800083e:	46c0      	nop			@ (mov r8, r8)
}
 8000840:	46c0      	nop			@ (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	2000006f 	.word	0x2000006f
 800084c:	20000070 	.word	0x20000070
 8000850:	20000318 	.word	0x20000318
 8000854:	20000319 	.word	0x20000319
 8000858:	20000071 	.word	0x20000071
 800085c:	50000800 	.word	0x50000800
 8000860:	2000037c 	.word	0x2000037c
 8000864:	200001c4 	.word	0x200001c4
 8000868:	20000210 	.word	0x20000210

0800086c <HandleButtons>:
#include "config.h"
#include "main.h"
#include "adapter.h"
#include "button.h"

void HandleButtons() {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; i++) {
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	e009      	b.n	800088c <HandleButtons+0x20>
		ProcessButton(&buttons[i]);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	011a      	lsls	r2, r3, #4
 800087c:	4b07      	ldr	r3, [pc, #28]	@ (800089c <HandleButtons+0x30>)
 800087e:	18d3      	adds	r3, r2, r3
 8000880:	0018      	movs	r0, r3
 8000882:	f000 f80d 	bl	80008a0 <ProcessButton>
	for (int i = 0; i < 2; i++) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3301      	adds	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b01      	cmp	r3, #1
 8000890:	ddf2      	ble.n	8000878 <HandleButtons+0xc>
	}
}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	46c0      	nop			@ (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b002      	add	sp, #8
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2000000c 	.word	0x2000000c

080008a0 <ProcessButton>:

void ProcessButton(Button* btn) {
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
    uint8_t pin_state = HAL_GPIO_ReadPin(btn->port, btn->pin);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	889b      	ldrh	r3, [r3, #4]
 80008b0:	210f      	movs	r1, #15
 80008b2:	187c      	adds	r4, r7, r1
 80008b4:	0019      	movs	r1, r3
 80008b6:	0010      	movs	r0, r2
 80008b8:	f002 fdc8 	bl	800344c <HAL_GPIO_ReadPin>
 80008bc:	0003      	movs	r3, r0
 80008be:	7023      	strb	r3, [r4, #0]
    uint32_t current_time = HAL_GetTick();
 80008c0:	f002 f952 	bl	8002b68 <HAL_GetTick>
 80008c4:	0003      	movs	r3, r0
 80008c6:	60bb      	str	r3, [r7, #8]

    switch (btn->state) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	799b      	ldrb	r3, [r3, #6]
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	d100      	bne.n	80008d2 <ProcessButton+0x32>
 80008d0:	e062      	b.n	8000998 <ProcessButton+0xf8>
 80008d2:	dd00      	ble.n	80008d6 <ProcessButton+0x36>
 80008d4:	e069      	b.n	80009aa <ProcessButton+0x10a>
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d025      	beq.n	8000926 <ProcessButton+0x86>
 80008da:	dd00      	ble.n	80008de <ProcessButton+0x3e>
 80008dc:	e065      	b.n	80009aa <ProcessButton+0x10a>
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <ProcessButton+0x48>
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d00c      	beq.n	8000900 <ProcessButton+0x60>
            if (pin_state == GPIO_PIN_SET) {
                btn->state = BUTTON_IDLE;
            }
            break;
	default:
		break;
 80008e6:	e060      	b.n	80009aa <ProcessButton+0x10a>
            if (pin_state == GPIO_PIN_RESET) {  // Кнопка нажата (активный 0)
 80008e8:	230f      	movs	r3, #15
 80008ea:	18fb      	adds	r3, r7, r3
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d15d      	bne.n	80009ae <ProcessButton+0x10e>
                btn->state = BUTTON_DEBOUNCE;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2201      	movs	r2, #1
 80008f6:	719a      	strb	r2, [r3, #6]
                btn->press_time = current_time;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	609a      	str	r2, [r3, #8]
            break;
 80008fe:	e056      	b.n	80009ae <ProcessButton+0x10e>
            if (current_time - btn->press_time >= DEBOUNCE_TIME) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	2b31      	cmp	r3, #49	@ 0x31
 800090a:	d952      	bls.n	80009b2 <ProcessButton+0x112>
                if (pin_state == GPIO_PIN_RESET) {  // Кнопка всё ещё нажата
 800090c:	230f      	movs	r3, #15
 800090e:	18fb      	adds	r3, r7, r3
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d103      	bne.n	800091e <ProcessButton+0x7e>
                    btn->state = BUTTON_PRESSED;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2202      	movs	r2, #2
 800091a:	719a      	strb	r2, [r3, #6]
            break;
 800091c:	e049      	b.n	80009b2 <ProcessButton+0x112>
                    btn->state = BUTTON_IDLE;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	719a      	strb	r2, [r3, #6]
            break;
 8000924:	e045      	b.n	80009b2 <ProcessButton+0x112>
        	btn_handler = 1;
 8000926:	4b27      	ldr	r3, [pc, #156]	@ (80009c4 <ProcessButton+0x124>)
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]
            if (current_time - btn->press_time >= LONG_PRESS) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	68ba      	ldr	r2, [r7, #8]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	4a24      	ldr	r2, [pc, #144]	@ (80009c8 <ProcessButton+0x128>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d909      	bls.n	800094e <ProcessButton+0xae>
                ButtonAction(btn->adapter_num, 2);  // Долгое нажатие (>5 сек)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	7b1b      	ldrb	r3, [r3, #12]
 800093e:	2102      	movs	r1, #2
 8000940:	0018      	movs	r0, r3
 8000942:	f000 f843 	bl	80009cc <ButtonAction>
                btn->state = BUTTON_HOLD;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2203      	movs	r2, #3
 800094a:	719a      	strb	r2, [r3, #6]
            break;
 800094c:	e033      	b.n	80009b6 <ProcessButton+0x116>
            else if (pin_state == GPIO_PIN_SET) {
 800094e:	230f      	movs	r3, #15
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d12e      	bne.n	80009b6 <ProcessButton+0x116>
                if (current_time - btn->press_time < SHORT_PRESS) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	1ad2      	subs	r2, r2, r3
 8000960:	23fa      	movs	r3, #250	@ 0xfa
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	429a      	cmp	r2, r3
 8000966:	d206      	bcs.n	8000976 <ProcessButton+0xd6>
                    ButtonAction(btn->adapter_num, 0);  // Короткое нажатие (<2 сек)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	7b1b      	ldrb	r3, [r3, #12]
 800096c:	2100      	movs	r1, #0
 800096e:	0018      	movs	r0, r3
 8000970:	f000 f82c 	bl	80009cc <ButtonAction>
 8000974:	e00c      	b.n	8000990 <ProcessButton+0xf0>
                else if (current_time - btn->press_time < LONG_PRESS) {
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <ProcessButton+0x128>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d805      	bhi.n	8000990 <ProcessButton+0xf0>
                    ButtonAction(btn->adapter_num, 1);  // Среднее нажатие (2-5 сек)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	7b1b      	ldrb	r3, [r3, #12]
 8000988:	2101      	movs	r1, #1
 800098a:	0018      	movs	r0, r3
 800098c:	f000 f81e 	bl	80009cc <ButtonAction>
                btn->state = BUTTON_IDLE;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	719a      	strb	r2, [r3, #6]
            break;
 8000996:	e00e      	b.n	80009b6 <ProcessButton+0x116>
            if (pin_state == GPIO_PIN_SET) {
 8000998:	230f      	movs	r3, #15
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d10b      	bne.n	80009ba <ProcessButton+0x11a>
                btn->state = BUTTON_IDLE;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	719a      	strb	r2, [r3, #6]
            break;
 80009a8:	e007      	b.n	80009ba <ProcessButton+0x11a>
		break;
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	e006      	b.n	80009bc <ProcessButton+0x11c>
            break;
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	e004      	b.n	80009bc <ProcessButton+0x11c>
            break;
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	e002      	b.n	80009bc <ProcessButton+0x11c>
            break;
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	e000      	b.n	80009bc <ProcessButton+0x11c>
            break;
 80009ba:	46c0      	nop			@ (mov r8, r8)
	}
}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b005      	add	sp, #20
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	2000031a 	.word	0x2000031a
 80009c8:	00001387 	.word	0x00001387

080009cc <ButtonAction>:

void ButtonAction(uint8_t adapter_num, uint8_t action_type) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	0002      	movs	r2, r0
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	1dbb      	adds	r3, r7, #6
 80009da:	1c0a      	adds	r2, r1, #0
 80009dc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MB1_STATUS_LED_GPIO_Port, MB1_STATUS_LED_Pin, SET);
 80009de:	23a0      	movs	r3, #160	@ 0xa0
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	2201      	movs	r2, #1
 80009e4:	2110      	movs	r1, #16
 80009e6:	0018      	movs	r0, r3
 80009e8:	f002 fd4d 	bl	8003486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MB2_STATUS_LED_GPIO_Port, MB2_STATUS_LED_Pin, SET);
 80009ec:	23a0      	movs	r3, #160	@ 0xa0
 80009ee:	05db      	lsls	r3, r3, #23
 80009f0:	2201      	movs	r2, #1
 80009f2:	2140      	movs	r1, #64	@ 0x40
 80009f4:	0018      	movs	r0, r3
 80009f6:	f002 fd46 	bl	8003486 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80009fa:	2032      	movs	r0, #50	@ 0x32
 80009fc:	f002 f8be 	bl	8002b7c <HAL_Delay>
	is_launching = 1;
 8000a00:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <ButtonAction+0x84>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
	switch (action_type) {
 8000a06:	1dbb      	adds	r3, r7, #6
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d011      	beq.n	8000a32 <ButtonAction+0x66>
 8000a0e:	dc16      	bgt.n	8000a3e <ButtonAction+0x72>
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d002      	beq.n	8000a1a <ButtonAction+0x4e>
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d006      	beq.n	8000a26 <ButtonAction+0x5a>
		HardResetAdapter(adapter_num);
		break;
	case 2: // Долгое нажатие (>5 сек)
		PowerOffAdapter(adapter_num);
		break;
	default: break;
 8000a18:	e011      	b.n	8000a3e <ButtonAction+0x72>
		PowerOnAdapter(adapter_num);
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f7ff fbfc 	bl	800021c <PowerOnAdapter>
		break;
 8000a24:	e00c      	b.n	8000a40 <ButtonAction+0x74>
		HardResetAdapter(adapter_num);
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f7ff fd88 	bl	8000540 <HardResetAdapter>
		break;
 8000a30:	e006      	b.n	8000a40 <ButtonAction+0x74>
		PowerOffAdapter(adapter_num);
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff fcd2 	bl	80003e0 <PowerOffAdapter>
		break;
 8000a3c:	e000      	b.n	8000a40 <ButtonAction+0x74>
	default: break;
 8000a3e:	46c0      	nop			@ (mov r8, r8)
	}

	btn_handler = 0;
 8000a40:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <ButtonAction+0x88>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]

}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b002      	add	sp, #8
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	2000037c 	.word	0x2000037c
 8000a54:	2000031a 	.word	0x2000031a

08000a58 <Read_disks_connected>:
#include "config.h"
#include "main.h"
#include "disk.h"

void Read_disks_connected()
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af02      	add	r7, sp, #8

	static uint8_t prevConnected[MAX_DISKS] = {0}; // Предыдущее состояние подключения
	HAL_Delay(20);
 8000a5e:	2014      	movs	r0, #20
 8000a60:	f002 f88c 	bl	8002b7c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 1000);
 8000a64:	4ac9      	ldr	r2, [pc, #804]	@ (8000d8c <Read_disks_connected+0x334>)
 8000a66:	48ca      	ldr	r0, [pc, #808]	@ (8000d90 <Read_disks_connected+0x338>)
 8000a68:	23fa      	movs	r3, #250	@ 0xfa
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	21e8      	movs	r1, #232	@ 0xe8
 8000a72:	f002 fdcb 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000a76:	2014      	movs	r0, #20
 8000a78:	f002 f880 	bl	8002b7c <HAL_Delay>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 8000a7c:	4bc5      	ldr	r3, [pc, #788]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000a7e:	2277      	movs	r2, #119	@ 0x77
 8000a80:	0019      	movs	r1, r3
 8000a82:	2001      	movs	r0, #1
 8000a84:	f000 fd5e 	bl	8001544 <Read_Register>


	if (~Buf_PRSTN[0] & 0x02)		//PRSTN F1
 8000a88:	4bc2      	ldr	r3, [pc, #776]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2302      	movs	r3, #2
 8000a90:	4013      	ands	r3, r2
 8000a92:	d103      	bne.n	8000a9c <Read_disks_connected+0x44>
	{
		disks[0].isConnected = 1;
 8000a94:	4bc0      	ldr	r3, [pc, #768]	@ (8000d98 <Read_disks_connected+0x340>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	e002      	b.n	8000aa2 <Read_disks_connected+0x4a>
	} else {
		disks[0].isConnected = 0;
 8000a9c:	4bbe      	ldr	r3, [pc, #760]	@ (8000d98 <Read_disks_connected+0x340>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN F2
 8000aa2:	4bbc      	ldr	r3, [pc, #752]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	001a      	movs	r2, r3
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	4013      	ands	r3, r2
 8000aac:	d103      	bne.n	8000ab6 <Read_disks_connected+0x5e>
	{
		disks[1].isConnected = 1;
 8000aae:	4bba      	ldr	r3, [pc, #744]	@ (8000d98 <Read_disks_connected+0x340>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	711a      	strb	r2, [r3, #4]
 8000ab4:	e002      	b.n	8000abc <Read_disks_connected+0x64>
	} else {
		disks[1].isConnected = 0;
 8000ab6:	4bb8      	ldr	r3, [pc, #736]	@ (8000d98 <Read_disks_connected+0x340>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	711a      	strb	r2, [r3, #4]
	}

	if (~Buf_PRSTN[0] & 0x20)		//PRSTN F3
 8000abc:	4bb5      	ldr	r3, [pc, #724]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	d103      	bne.n	8000ad0 <Read_disks_connected+0x78>
	{
		disks[2].isConnected = 1;
 8000ac8:	4bb3      	ldr	r3, [pc, #716]	@ (8000d98 <Read_disks_connected+0x340>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	721a      	strb	r2, [r3, #8]
 8000ace:	e002      	b.n	8000ad6 <Read_disks_connected+0x7e>
	} else {
		disks[2].isConnected = 0;
 8000ad0:	4bb1      	ldr	r3, [pc, #708]	@ (8000d98 <Read_disks_connected+0x340>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	721a      	strb	r2, [r3, #8]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN F4
 8000ad6:	4baf      	ldr	r3, [pc, #700]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db03      	blt.n	8000ae8 <Read_disks_connected+0x90>
	{
		disks[3].isConnected = 1;
 8000ae0:	4bad      	ldr	r3, [pc, #692]	@ (8000d98 <Read_disks_connected+0x340>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	731a      	strb	r2, [r3, #12]
 8000ae6:	e002      	b.n	8000aee <Read_disks_connected+0x96>
	} else {
		disks[3].isConnected = 0;
 8000ae8:	4bab      	ldr	r3, [pc, #684]	@ (8000d98 <Read_disks_connected+0x340>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	731a      	strb	r2, [r3, #12]
	}
	HAL_Delay(20);
 8000aee:	2014      	movs	r0, #20
 8000af0:	f002 f844 	bl	8002b7c <HAL_Delay>
	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 8000af4:	4ba7      	ldr	r3, [pc, #668]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000af6:	2277      	movs	r2, #119	@ 0x77
 8000af8:	0019      	movs	r1, r3
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 fd22 	bl	8001544 <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN E1
 8000b00:	4ba4      	ldr	r3, [pc, #656]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	001a      	movs	r2, r3
 8000b06:	2302      	movs	r3, #2
 8000b08:	4013      	ands	r3, r2
 8000b0a:	d103      	bne.n	8000b14 <Read_disks_connected+0xbc>
	{
		disks[4].isConnected = 1;
 8000b0c:	4ba2      	ldr	r3, [pc, #648]	@ (8000d98 <Read_disks_connected+0x340>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	741a      	strb	r2, [r3, #16]
 8000b12:	e002      	b.n	8000b1a <Read_disks_connected+0xc2>
	} else {
		disks[4].isConnected = 0;
 8000b14:	4ba0      	ldr	r3, [pc, #640]	@ (8000d98 <Read_disks_connected+0x340>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	741a      	strb	r2, [r3, #16]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN E2
 8000b1a:	4b9e      	ldr	r3, [pc, #632]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	001a      	movs	r2, r3
 8000b20:	2308      	movs	r3, #8
 8000b22:	4013      	ands	r3, r2
 8000b24:	d103      	bne.n	8000b2e <Read_disks_connected+0xd6>
	{
		disks[5].isConnected = 1;
 8000b26:	4b9c      	ldr	r3, [pc, #624]	@ (8000d98 <Read_disks_connected+0x340>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	751a      	strb	r2, [r3, #20]
 8000b2c:	e002      	b.n	8000b34 <Read_disks_connected+0xdc>
	} else {
		disks[5].isConnected = 0;
 8000b2e:	4b9a      	ldr	r3, [pc, #616]	@ (8000d98 <Read_disks_connected+0x340>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	751a      	strb	r2, [r3, #20]
	}

	if (~Buf_PRSTN[0] & 0x20)		//PRSTN E3
 8000b34:	4b97      	ldr	r3, [pc, #604]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	001a      	movs	r2, r3
 8000b3a:	2320      	movs	r3, #32
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	d103      	bne.n	8000b48 <Read_disks_connected+0xf0>
	{
		disks[6].isConnected = 1;
 8000b40:	4b95      	ldr	r3, [pc, #596]	@ (8000d98 <Read_disks_connected+0x340>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	761a      	strb	r2, [r3, #24]
 8000b46:	e002      	b.n	8000b4e <Read_disks_connected+0xf6>
	} else {
		disks[6].isConnected = 0;
 8000b48:	4b93      	ldr	r3, [pc, #588]	@ (8000d98 <Read_disks_connected+0x340>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	761a      	strb	r2, [r3, #24]
	}

	if (~Buf_PRSTN[0] & 0x80)		//PRSTN E4
 8000b4e:	4b91      	ldr	r3, [pc, #580]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	b25b      	sxtb	r3, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db03      	blt.n	8000b60 <Read_disks_connected+0x108>

	{
		disks[7].isConnected = 1;
 8000b58:	4b8f      	ldr	r3, [pc, #572]	@ (8000d98 <Read_disks_connected+0x340>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	771a      	strb	r2, [r3, #28]
 8000b5e:	e002      	b.n	8000b66 <Read_disks_connected+0x10e>
	} else {
		disks[7].isConnected = 0;
 8000b60:	4b8d      	ldr	r3, [pc, #564]	@ (8000d98 <Read_disks_connected+0x340>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	771a      	strb	r2, [r3, #28]
	}

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 1000);
 8000b66:	4a8d      	ldr	r2, [pc, #564]	@ (8000d9c <Read_disks_connected+0x344>)
 8000b68:	4889      	ldr	r0, [pc, #548]	@ (8000d90 <Read_disks_connected+0x338>)
 8000b6a:	23fa      	movs	r3, #250	@ 0xfa
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2301      	movs	r3, #1
 8000b72:	21e8      	movs	r1, #232	@ 0xe8
 8000b74:	f002 fd4a 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000b78:	2014      	movs	r0, #20
 8000b7a:	f001 ffff 	bl	8002b7c <HAL_Delay>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 8000b7e:	4b85      	ldr	r3, [pc, #532]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000b80:	2277      	movs	r2, #119	@ 0x77
 8000b82:	0019      	movs	r1, r3
 8000b84:	2001      	movs	r0, #1
 8000b86:	f000 fcdd 	bl	8001544 <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN D1
 8000b8a:	4b82      	ldr	r3, [pc, #520]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	001a      	movs	r2, r3
 8000b90:	2302      	movs	r3, #2
 8000b92:	4013      	ands	r3, r2
 8000b94:	d104      	bne.n	8000ba0 <Read_disks_connected+0x148>
	{
		disks[8].isConnected = 1;
 8000b96:	4b80      	ldr	r3, [pc, #512]	@ (8000d98 <Read_disks_connected+0x340>)
 8000b98:	2220      	movs	r2, #32
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	5499      	strb	r1, [r3, r2]
 8000b9e:	e003      	b.n	8000ba8 <Read_disks_connected+0x150>
	} else {
		disks[8].isConnected = 0;
 8000ba0:	4b7d      	ldr	r3, [pc, #500]	@ (8000d98 <Read_disks_connected+0x340>)
 8000ba2:	2220      	movs	r2, #32
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN D2
 8000ba8:	4b7a      	ldr	r3, [pc, #488]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	001a      	movs	r2, r3
 8000bae:	2308      	movs	r3, #8
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	d104      	bne.n	8000bbe <Read_disks_connected+0x166>
	{
		disks[9].isConnected = 1;
 8000bb4:	4b78      	ldr	r3, [pc, #480]	@ (8000d98 <Read_disks_connected+0x340>)
 8000bb6:	2224      	movs	r2, #36	@ 0x24
 8000bb8:	2101      	movs	r1, #1
 8000bba:	5499      	strb	r1, [r3, r2]
 8000bbc:	e003      	b.n	8000bc6 <Read_disks_connected+0x16e>
	} else {
		disks[9].isConnected = 0;
 8000bbe:	4b76      	ldr	r3, [pc, #472]	@ (8000d98 <Read_disks_connected+0x340>)
 8000bc0:	2224      	movs	r2, #36	@ 0x24
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN D3
 8000bc6:	4b73      	ldr	r3, [pc, #460]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	001a      	movs	r2, r3
 8000bcc:	2320      	movs	r3, #32
 8000bce:	4013      	ands	r3, r2
 8000bd0:	d104      	bne.n	8000bdc <Read_disks_connected+0x184>
	{
		disks[10].isConnected = 1;
 8000bd2:	4b71      	ldr	r3, [pc, #452]	@ (8000d98 <Read_disks_connected+0x340>)
 8000bd4:	2228      	movs	r2, #40	@ 0x28
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	5499      	strb	r1, [r3, r2]
 8000bda:	e003      	b.n	8000be4 <Read_disks_connected+0x18c>
	} else {
		disks[10].isConnected = 0;
 8000bdc:	4b6e      	ldr	r3, [pc, #440]	@ (8000d98 <Read_disks_connected+0x340>)
 8000bde:	2228      	movs	r2, #40	@ 0x28
 8000be0:	2100      	movs	r1, #0
 8000be2:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN D4
 8000be4:	4b6b      	ldr	r3, [pc, #428]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db04      	blt.n	8000bf8 <Read_disks_connected+0x1a0>
	{
		disks[11].isConnected = 1;
 8000bee:	4b6a      	ldr	r3, [pc, #424]	@ (8000d98 <Read_disks_connected+0x340>)
 8000bf0:	222c      	movs	r2, #44	@ 0x2c
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	5499      	strb	r1, [r3, r2]
 8000bf6:	e003      	b.n	8000c00 <Read_disks_connected+0x1a8>
	} else {
		disks[11].isConnected = 0;
 8000bf8:	4b67      	ldr	r3, [pc, #412]	@ (8000d98 <Read_disks_connected+0x340>)
 8000bfa:	222c      	movs	r2, #44	@ 0x2c
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	5499      	strb	r1, [r3, r2]
	}
	HAL_Delay(20);
 8000c00:	2014      	movs	r0, #20
 8000c02:	f001 ffbb 	bl	8002b7c <HAL_Delay>
	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 8000c06:	4b63      	ldr	r3, [pc, #396]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000c08:	2277      	movs	r2, #119	@ 0x77
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f000 fc99 	bl	8001544 <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN C1
 8000c12:	4b60      	ldr	r3, [pc, #384]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	001a      	movs	r2, r3
 8000c18:	2302      	movs	r3, #2
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	d104      	bne.n	8000c28 <Read_disks_connected+0x1d0>
	{
		disks[12].isConnected = 1;
 8000c1e:	4b5e      	ldr	r3, [pc, #376]	@ (8000d98 <Read_disks_connected+0x340>)
 8000c20:	2230      	movs	r2, #48	@ 0x30
 8000c22:	2101      	movs	r1, #1
 8000c24:	5499      	strb	r1, [r3, r2]
 8000c26:	e003      	b.n	8000c30 <Read_disks_connected+0x1d8>
	} else {
		disks[12].isConnected = 0;
 8000c28:	4b5b      	ldr	r3, [pc, #364]	@ (8000d98 <Read_disks_connected+0x340>)
 8000c2a:	2230      	movs	r2, #48	@ 0x30
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN C2
 8000c30:	4b58      	ldr	r3, [pc, #352]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	001a      	movs	r2, r3
 8000c36:	2308      	movs	r3, #8
 8000c38:	4013      	ands	r3, r2
 8000c3a:	d104      	bne.n	8000c46 <Read_disks_connected+0x1ee>
	{
		disks[13].isConnected = 1;
 8000c3c:	4b56      	ldr	r3, [pc, #344]	@ (8000d98 <Read_disks_connected+0x340>)
 8000c3e:	2234      	movs	r2, #52	@ 0x34
 8000c40:	2101      	movs	r1, #1
 8000c42:	5499      	strb	r1, [r3, r2]
 8000c44:	e003      	b.n	8000c4e <Read_disks_connected+0x1f6>
	} else {
		disks[13].isConnected = 0;
 8000c46:	4b54      	ldr	r3, [pc, #336]	@ (8000d98 <Read_disks_connected+0x340>)
 8000c48:	2234      	movs	r2, #52	@ 0x34
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN C3
 8000c4e:	4b51      	ldr	r3, [pc, #324]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	001a      	movs	r2, r3
 8000c54:	2320      	movs	r3, #32
 8000c56:	4013      	ands	r3, r2
 8000c58:	d104      	bne.n	8000c64 <Read_disks_connected+0x20c>
	{
		disks[14].isConnected = 1;
 8000c5a:	4b4f      	ldr	r3, [pc, #316]	@ (8000d98 <Read_disks_connected+0x340>)
 8000c5c:	2238      	movs	r2, #56	@ 0x38
 8000c5e:	2101      	movs	r1, #1
 8000c60:	5499      	strb	r1, [r3, r2]
 8000c62:	e003      	b.n	8000c6c <Read_disks_connected+0x214>
	} else {
		disks[14].isConnected = 0;
 8000c64:	4b4c      	ldr	r3, [pc, #304]	@ (8000d98 <Read_disks_connected+0x340>)
 8000c66:	2238      	movs	r2, #56	@ 0x38
 8000c68:	2100      	movs	r1, #0
 8000c6a:	5499      	strb	r1, [r3, r2]
	}

	if (~Buf_PRSTN[0] & 0x80)		//PRSTN C4
 8000c6c:	4b49      	ldr	r3, [pc, #292]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db04      	blt.n	8000c80 <Read_disks_connected+0x228>
	{
		disks[15].isConnected = 1;
 8000c76:	4b48      	ldr	r3, [pc, #288]	@ (8000d98 <Read_disks_connected+0x340>)
 8000c78:	223c      	movs	r2, #60	@ 0x3c
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	5499      	strb	r1, [r3, r2]
 8000c7e:	e003      	b.n	8000c88 <Read_disks_connected+0x230>
	} else {
		disks[15].isConnected = 0;
 8000c80:	4b45      	ldr	r3, [pc, #276]	@ (8000d98 <Read_disks_connected+0x340>)
 8000c82:	223c      	movs	r2, #60	@ 0x3c
 8000c84:	2100      	movs	r1, #0
 8000c86:	5499      	strb	r1, [r3, r2]
	}
	HAL_Delay(20);
 8000c88:	2014      	movs	r0, #20
 8000c8a:	f001 ff77 	bl	8002b7c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 1000);
 8000c8e:	4a44      	ldr	r2, [pc, #272]	@ (8000da0 <Read_disks_connected+0x348>)
 8000c90:	483f      	ldr	r0, [pc, #252]	@ (8000d90 <Read_disks_connected+0x338>)
 8000c92:	23fa      	movs	r3, #250	@ 0xfa
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2301      	movs	r3, #1
 8000c9a:	21e8      	movs	r1, #232	@ 0xe8
 8000c9c:	f002 fcb6 	bl	800360c <HAL_I2C_Master_Transmit>
 	HAL_Delay(20);
 8000ca0:	2014      	movs	r0, #20
 8000ca2:	f001 ff6b 	bl	8002b7c <HAL_Delay>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 8000ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000ca8:	2277      	movs	r2, #119	@ 0x77
 8000caa:	0019      	movs	r1, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 fc49 	bl	8001544 <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN B1
 8000cb2:	4b38      	ldr	r3, [pc, #224]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	001a      	movs	r2, r3
 8000cb8:	2302      	movs	r3, #2
 8000cba:	4013      	ands	r3, r2
 8000cbc:	d104      	bne.n	8000cc8 <Read_disks_connected+0x270>
	{
		disks[16].isConnected = 1;
 8000cbe:	4b36      	ldr	r3, [pc, #216]	@ (8000d98 <Read_disks_connected+0x340>)
 8000cc0:	2240      	movs	r2, #64	@ 0x40
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	5499      	strb	r1, [r3, r2]
 8000cc6:	e003      	b.n	8000cd0 <Read_disks_connected+0x278>
	} else {
		disks[16].isConnected = 0;
 8000cc8:	4b33      	ldr	r3, [pc, #204]	@ (8000d98 <Read_disks_connected+0x340>)
 8000cca:	2240      	movs	r2, #64	@ 0x40
 8000ccc:	2100      	movs	r1, #0
 8000cce:	5499      	strb	r1, [r3, r2]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN B2
 8000cd0:	4b30      	ldr	r3, [pc, #192]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	2308      	movs	r3, #8
 8000cd8:	4013      	ands	r3, r2
 8000cda:	d104      	bne.n	8000ce6 <Read_disks_connected+0x28e>
	{
		disks[17].isConnected = 1;
 8000cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8000d98 <Read_disks_connected+0x340>)
 8000cde:	2244      	movs	r2, #68	@ 0x44
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	5499      	strb	r1, [r3, r2]
 8000ce4:	e003      	b.n	8000cee <Read_disks_connected+0x296>
	} else {
		disks[17].isConnected = 0;
 8000ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d98 <Read_disks_connected+0x340>)
 8000ce8:	2244      	movs	r2, #68	@ 0x44
 8000cea:	2100      	movs	r1, #0
 8000cec:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN B3
 8000cee:	4b29      	ldr	r3, [pc, #164]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	2320      	movs	r3, #32
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	d104      	bne.n	8000d04 <Read_disks_connected+0x2ac>
	{
		disks[18].isConnected = 1;
 8000cfa:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <Read_disks_connected+0x340>)
 8000cfc:	2248      	movs	r2, #72	@ 0x48
 8000cfe:	2101      	movs	r1, #1
 8000d00:	5499      	strb	r1, [r3, r2]
 8000d02:	e003      	b.n	8000d0c <Read_disks_connected+0x2b4>
	} else {
		disks[18].isConnected = 0;
 8000d04:	4b24      	ldr	r3, [pc, #144]	@ (8000d98 <Read_disks_connected+0x340>)
 8000d06:	2248      	movs	r2, #72	@ 0x48
 8000d08:	2100      	movs	r1, #0
 8000d0a:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN B4
 8000d0c:	4b21      	ldr	r3, [pc, #132]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	db04      	blt.n	8000d20 <Read_disks_connected+0x2c8>
	{
		disks[19].isConnected = 1;
 8000d16:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <Read_disks_connected+0x340>)
 8000d18:	224c      	movs	r2, #76	@ 0x4c
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	5499      	strb	r1, [r3, r2]
 8000d1e:	e003      	b.n	8000d28 <Read_disks_connected+0x2d0>
	} else {
		disks[19].isConnected = 0;
 8000d20:	4b1d      	ldr	r3, [pc, #116]	@ (8000d98 <Read_disks_connected+0x340>)
 8000d22:	224c      	movs	r2, #76	@ 0x4c
 8000d24:	2100      	movs	r1, #0
 8000d26:	5499      	strb	r1, [r3, r2]
	}
	HAL_Delay(20);
 8000d28:	2014      	movs	r0, #20
 8000d2a:	f001 ff27 	bl	8002b7c <HAL_Delay>
	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 8000d2e:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000d30:	2277      	movs	r2, #119	@ 0x77
 8000d32:	0019      	movs	r1, r3
 8000d34:	2000      	movs	r0, #0
 8000d36:	f000 fc05 	bl	8001544 <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN A1
 8000d3a:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	001a      	movs	r2, r3
 8000d40:	2302      	movs	r3, #2
 8000d42:	4013      	ands	r3, r2
 8000d44:	d104      	bne.n	8000d50 <Read_disks_connected+0x2f8>
	{
		disks[20].isConnected = 1;
 8000d46:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <Read_disks_connected+0x340>)
 8000d48:	2250      	movs	r2, #80	@ 0x50
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	5499      	strb	r1, [r3, r2]
 8000d4e:	e003      	b.n	8000d58 <Read_disks_connected+0x300>
	} else {
		disks[20].isConnected = 0;
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <Read_disks_connected+0x340>)
 8000d52:	2250      	movs	r2, #80	@ 0x50
 8000d54:	2100      	movs	r1, #0
 8000d56:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN A2
 8000d58:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	2308      	movs	r3, #8
 8000d60:	4013      	ands	r3, r2
 8000d62:	d104      	bne.n	8000d6e <Read_disks_connected+0x316>
	{
		disks[21].isConnected = 1;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <Read_disks_connected+0x340>)
 8000d66:	2254      	movs	r2, #84	@ 0x54
 8000d68:	2101      	movs	r1, #1
 8000d6a:	5499      	strb	r1, [r3, r2]
 8000d6c:	e003      	b.n	8000d76 <Read_disks_connected+0x31e>
	} else {
		disks[21].isConnected = 0;
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <Read_disks_connected+0x340>)
 8000d70:	2254      	movs	r2, #84	@ 0x54
 8000d72:	2100      	movs	r1, #0
 8000d74:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN A3
 8000d76:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <Read_disks_connected+0x33c>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	2320      	movs	r3, #32
 8000d7e:	4013      	ands	r3, r2
 8000d80:	d110      	bne.n	8000da4 <Read_disks_connected+0x34c>
	{
		disks[22].isConnected = 1;
 8000d82:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <Read_disks_connected+0x340>)
 8000d84:	2258      	movs	r2, #88	@ 0x58
 8000d86:	2101      	movs	r1, #1
 8000d88:	5499      	strb	r1, [r3, r2]
 8000d8a:	e00f      	b.n	8000dac <Read_disks_connected+0x354>
 8000d8c:	20000054 	.word	0x20000054
 8000d90:	200000b8 	.word	0x200000b8
 8000d94:	200002b0 	.word	0x200002b0
 8000d98:	200002b8 	.word	0x200002b8
 8000d9c:	20000058 	.word	0x20000058
 8000da0:	2000005c 	.word	0x2000005c
	} else {
		disks[22].isConnected = 0;
 8000da4:	4b21      	ldr	r3, [pc, #132]	@ (8000e2c <Read_disks_connected+0x3d4>)
 8000da6:	2258      	movs	r2, #88	@ 0x58
 8000da8:	2100      	movs	r1, #0
 8000daa:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN A4
 8000dac:	4b20      	ldr	r3, [pc, #128]	@ (8000e30 <Read_disks_connected+0x3d8>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db04      	blt.n	8000dc0 <Read_disks_connected+0x368>
	{
		disks[23].isConnected = 1;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <Read_disks_connected+0x3d4>)
 8000db8:	225c      	movs	r2, #92	@ 0x5c
 8000dba:	2101      	movs	r1, #1
 8000dbc:	5499      	strb	r1, [r3, r2]
 8000dbe:	e003      	b.n	8000dc8 <Read_disks_connected+0x370>
	} else {
		disks[23].isConnected = 0;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <Read_disks_connected+0x3d4>)
 8000dc2:	225c      	movs	r2, #92	@ 0x5c
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	5499      	strb	r1, [r3, r2]
	}
	for (int i = 0; i < MAX_DISKS; ++i) {
 8000dc8:	2300      	movs	r3, #0
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	e025      	b.n	8000e1a <Read_disks_connected+0x3c2>
		// Если состояние подключения изменилось с 0 на 1
		if (disks[i].isConnected == 1 && prevConnected[i] == 0) {
 8000dce:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <Read_disks_connected+0x3d4>)
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	0092      	lsls	r2, r2, #2
 8000dd4:	5cd3      	ldrb	r3, [r2, r3]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d113      	bne.n	8000e02 <Read_disks_connected+0x3aa>
 8000dda:	4a16      	ldr	r2, [pc, #88]	@ (8000e34 <Read_disks_connected+0x3dc>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	18d3      	adds	r3, r2, r3
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10d      	bne.n	8000e02 <Read_disks_connected+0x3aa>
			disks[i].activity = 1; // Устанавливаем активность
 8000de6:	4a11      	ldr	r2, [pc, #68]	@ (8000e2c <Read_disks_connected+0x3d4>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	18d3      	adds	r3, r2, r3
 8000dee:	3301      	adds	r3, #1
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
			connectActivityTimer[i] = HAL_GetTick(); // Запускаем таймер
 8000df4:	f001 feb8 	bl	8002b68 <HAL_GetTick>
 8000df8:	0001      	movs	r1, r0
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <Read_disks_connected+0x3e0>)
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	50d1      	str	r1, [r2, r3]
		}
		prevConnected[i] = disks[i].isConnected; // Сохраняем текущее состояние
 8000e02:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <Read_disks_connected+0x3d4>)
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	0092      	lsls	r2, r2, #2
 8000e08:	5cd1      	ldrb	r1, [r2, r3]
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <Read_disks_connected+0x3dc>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	18d3      	adds	r3, r2, r3
 8000e10:	1c0a      	adds	r2, r1, #0
 8000e12:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_DISKS; ++i) {
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3301      	adds	r3, #1
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b17      	cmp	r3, #23
 8000e1e:	ddd6      	ble.n	8000dce <Read_disks_connected+0x376>
	}
}
 8000e20:	46c0      	nop			@ (mov r8, r8)
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	200002b8 	.word	0x200002b8
 8000e30:	200002b0 	.word	0x200002b0
 8000e34:	2000009c 	.word	0x2000009c
 8000e38:	2000031c 	.word	0x2000031c

08000e3c <Set_devslp>:

void Set_devslp()
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af02      	add	r7, sp, #8
	while (HAL_I2C_IsDeviceReady(&hi2c2, I2C_EXPAND_adr << 1, 3, 100) != HAL_OK){}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	4844      	ldr	r0, [pc, #272]	@ (8000f58 <Set_devslp+0x11c>)
 8000e46:	2364      	movs	r3, #100	@ 0x64
 8000e48:	2203      	movs	r2, #3
 8000e4a:	21e8      	movs	r1, #232	@ 0xe8
 8000e4c:	f002 fe10 	bl	8003a70 <HAL_I2C_IsDeviceReady>
 8000e50:	1e03      	subs	r3, r0, #0
 8000e52:	d1f7      	bne.n	8000e44 <Set_devslp+0x8>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, HAL_MAX_DELAY); //DevSLP  0 канал (E/F)
 8000e54:	4a41      	ldr	r2, [pc, #260]	@ (8000f5c <Set_devslp+0x120>)
 8000e56:	4840      	ldr	r0, [pc, #256]	@ (8000f58 <Set_devslp+0x11c>)
 8000e58:	2301      	movs	r3, #1
 8000e5a:	425b      	negs	r3, r3
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2301      	movs	r3, #1
 8000e60:	21e8      	movs	r1, #232	@ 0xe8
 8000e62:	f002 fbd3 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000e66:	2014      	movs	r0, #20
 8000e68:	f001 fe88 	bl	8002b7c <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&hi2c2, Dev_SLP_adr << 1, 3, 100) != HAL_OK){}
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	483a      	ldr	r0, [pc, #232]	@ (8000f58 <Set_devslp+0x11c>)
 8000e70:	2364      	movs	r3, #100	@ 0x64
 8000e72:	2203      	movs	r2, #3
 8000e74:	21ee      	movs	r1, #238	@ 0xee
 8000e76:	f002 fdfb 	bl	8003a70 <HAL_I2C_IsDeviceReady>
 8000e7a:	1e03      	subs	r3, r0, #0
 8000e7c:	d1f7      	bne.n	8000e6e <Set_devslp+0x32>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), i2cbuff_IN, 3, HAL_MAX_DELAY); // init input
 8000e7e:	4a38      	ldr	r2, [pc, #224]	@ (8000f60 <Set_devslp+0x124>)
 8000e80:	4835      	ldr	r0, [pc, #212]	@ (8000f58 <Set_devslp+0x11c>)
 8000e82:	2301      	movs	r3, #1
 8000e84:	425b      	negs	r3, r3
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	2303      	movs	r3, #3
 8000e8a:	21ee      	movs	r1, #238	@ 0xee
 8000e8c:	f002 fbbe 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000e90:	2014      	movs	r0, #20
 8000e92:	f001 fe73 	bl	8002b7c <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&hi2c2, Dev_SLP_adr << 1, 3, 100) != HAL_OK){}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	482f      	ldr	r0, [pc, #188]	@ (8000f58 <Set_devslp+0x11c>)
 8000e9a:	2364      	movs	r3, #100	@ 0x64
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	21ee      	movs	r1, #238	@ 0xee
 8000ea0:	f002 fde6 	bl	8003a70 <HAL_I2C_IsDeviceReady>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d1f7      	bne.n	8000e98 <Set_devslp+0x5c>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), Dev_SLP_ON, 3, HAL_MAX_DELAY); //write
 8000ea8:	4a2e      	ldr	r2, [pc, #184]	@ (8000f64 <Set_devslp+0x128>)
 8000eaa:	482b      	ldr	r0, [pc, #172]	@ (8000f58 <Set_devslp+0x11c>)
 8000eac:	2301      	movs	r3, #1
 8000eae:	425b      	negs	r3, r3
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	21ee      	movs	r1, #238	@ 0xee
 8000eb6:	f002 fba9 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000eba:	2014      	movs	r0, #20
 8000ebc:	f001 fe5e 	bl	8002b7c <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, HAL_MAX_DELAY); //DevSLP  1 канал (C/D)
 8000ec0:	4a29      	ldr	r2, [pc, #164]	@ (8000f68 <Set_devslp+0x12c>)
 8000ec2:	4825      	ldr	r0, [pc, #148]	@ (8000f58 <Set_devslp+0x11c>)
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	425b      	negs	r3, r3
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2301      	movs	r3, #1
 8000ecc:	21e8      	movs	r1, #232	@ 0xe8
 8000ece:	f002 fb9d 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000ed2:	2014      	movs	r0, #20
 8000ed4:	f001 fe52 	bl	8002b7c <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), i2cbuff_IN, 3, HAL_MAX_DELAY);
 8000ed8:	4a21      	ldr	r2, [pc, #132]	@ (8000f60 <Set_devslp+0x124>)
 8000eda:	481f      	ldr	r0, [pc, #124]	@ (8000f58 <Set_devslp+0x11c>)
 8000edc:	2301      	movs	r3, #1
 8000ede:	425b      	negs	r3, r3
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	21ee      	movs	r1, #238	@ 0xee
 8000ee6:	f002 fb91 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000eea:	2014      	movs	r0, #20
 8000eec:	f001 fe46 	bl	8002b7c <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), Dev_SLP_ON, 3, HAL_MAX_DELAY);
 8000ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8000f64 <Set_devslp+0x128>)
 8000ef2:	4819      	ldr	r0, [pc, #100]	@ (8000f58 <Set_devslp+0x11c>)
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	425b      	negs	r3, r3
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2303      	movs	r3, #3
 8000efc:	21ee      	movs	r1, #238	@ 0xee
 8000efe:	f002 fb85 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000f02:	2014      	movs	r0, #20
 8000f04:	f001 fe3a 	bl	8002b7c <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, HAL_MAX_DELAY); //DevSLP  2 канал (A/B)
 8000f08:	4a18      	ldr	r2, [pc, #96]	@ (8000f6c <Set_devslp+0x130>)
 8000f0a:	4813      	ldr	r0, [pc, #76]	@ (8000f58 <Set_devslp+0x11c>)
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	425b      	negs	r3, r3
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	21e8      	movs	r1, #232	@ 0xe8
 8000f16:	f002 fb79 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000f1a:	2014      	movs	r0, #20
 8000f1c:	f001 fe2e 	bl	8002b7c <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), i2cbuff_IN, 3, HAL_MAX_DELAY);
 8000f20:	4a0f      	ldr	r2, [pc, #60]	@ (8000f60 <Set_devslp+0x124>)
 8000f22:	480d      	ldr	r0, [pc, #52]	@ (8000f58 <Set_devslp+0x11c>)
 8000f24:	2301      	movs	r3, #1
 8000f26:	425b      	negs	r3, r3
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	21ee      	movs	r1, #238	@ 0xee
 8000f2e:	f002 fb6d 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000f32:	2014      	movs	r0, #20
 8000f34:	f001 fe22 	bl	8002b7c <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), Dev_SLP_ON, 3, HAL_MAX_DELAY);
 8000f38:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <Set_devslp+0x128>)
 8000f3a:	4807      	ldr	r0, [pc, #28]	@ (8000f58 <Set_devslp+0x11c>)
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	425b      	negs	r3, r3
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2303      	movs	r3, #3
 8000f44:	21ee      	movs	r1, #238	@ 0xee
 8000f46:	f002 fb61 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000f4a:	2014      	movs	r0, #20
 8000f4c:	f001 fe16 	bl	8002b7c <HAL_Delay>
}
 8000f50:	46c0      	nop			@ (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	200000b8 	.word	0x200000b8
 8000f5c:	20000054 	.word	0x20000054
 8000f60:	20000050 	.word	0x20000050
 8000f64:	2000006c 	.word	0x2000006c
 8000f68:	20000058 	.word	0x20000058
 8000f6c:	2000005c 	.word	0x2000005c

08000f70 <Initialize_Disks>:

void Initialize_Disks()
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_DISKS; ++i) {
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	e01c      	b.n	8000fb6 <Initialize_Disks+0x46>
		disks[i].isConnected = 0;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <Initialize_Disks+0x58>)
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	0092      	lsls	r2, r2, #2
 8000f82:	2100      	movs	r1, #0
 8000f84:	54d1      	strb	r1, [r2, r3]
		disks[i].activity = 0;
 8000f86:	4a10      	ldr	r2, [pc, #64]	@ (8000fc8 <Initialize_Disks+0x58>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	18d3      	adds	r3, r2, r3
 8000f8e:	3301      	adds	r3, #1
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
		disks[i].error = 0;
 8000f94:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc8 <Initialize_Disks+0x58>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	18d3      	adds	r3, r2, r3
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
		disks[i].locate = 0;
 8000fa2:	4a09      	ldr	r2, [pc, #36]	@ (8000fc8 <Initialize_Disks+0x58>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	18d3      	adds	r3, r2, r3
 8000faa:	3303      	adds	r3, #3
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_DISKS; ++i) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b17      	cmp	r3, #23
 8000fba:	dddf      	ble.n	8000f7c <Initialize_Disks+0xc>
	}
}
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b002      	add	sp, #8
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	200002b8 	.word	0x200002b8

08000fcc <UpdateDiskStatus>:

void UpdateDiskStatus(uint8_t diskIndex, uint8_t activity, uint8_t error, uint8_t locate) //функция для обновления данных о дисках
{
 8000fcc:	b5b0      	push	{r4, r5, r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	0005      	movs	r5, r0
 8000fd4:	000c      	movs	r4, r1
 8000fd6:	0010      	movs	r0, r2
 8000fd8:	0019      	movs	r1, r3
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	1c2a      	adds	r2, r5, #0
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	1dbb      	adds	r3, r7, #6
 8000fe2:	1c22      	adds	r2, r4, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	1d7b      	adds	r3, r7, #5
 8000fe8:	1c02      	adds	r2, r0, #0
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	1c0a      	adds	r2, r1, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
	disks[diskIndex].activity = activity;
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8001030 <UpdateDiskStatus+0x64>)
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	18d3      	adds	r3, r2, r3
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	1dba      	adds	r2, r7, #6
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	701a      	strb	r2, [r3, #0]
	disks[diskIndex].error = error;
 8001004:	1dfb      	adds	r3, r7, #7
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4a09      	ldr	r2, [pc, #36]	@ (8001030 <UpdateDiskStatus+0x64>)
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	3302      	adds	r3, #2
 8001010:	1d7a      	adds	r2, r7, #5
 8001012:	7812      	ldrb	r2, [r2, #0]
 8001014:	701a      	strb	r2, [r3, #0]
	disks[diskIndex].locate = locate;
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	4a05      	ldr	r2, [pc, #20]	@ (8001030 <UpdateDiskStatus+0x64>)
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	18d3      	adds	r3, r2, r3
 8001020:	3303      	adds	r3, #3
 8001022:	1d3a      	adds	r2, r7, #4
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	701a      	strb	r2, [r3, #0]
}
 8001028:	46c0      	nop			@ (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b002      	add	sp, #8
 800102e:	bdb0      	pop	{r4, r5, r7, pc}
 8001030:	200002b8 	.word	0x200002b8

08001034 <Read_Disk_Status>:

void Read_Disk_Status(uint16_t slave_address, uint8_t *data, uint16_t size) {
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b085      	sub	sp, #20
 8001038:	af02      	add	r7, sp, #8
 800103a:	6039      	str	r1, [r7, #0]
 800103c:	0011      	movs	r1, r2
 800103e:	1dbb      	adds	r3, r7, #6
 8001040:	1c02      	adds	r2, r0, #0
 8001042:	801a      	strh	r2, [r3, #0]
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	1c0a      	adds	r2, r1, #0
 8001048:	801a      	strh	r2, [r3, #0]

	if(MB1_attach == 0  && MB2_attach == 0)
 800104a:	4b72      	ldr	r3, [pc, #456]	@ (8001214 <Read_Disk_Status+0x1e0>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d000      	beq.n	8001054 <Read_Disk_Status+0x20>
 8001052:	e093      	b.n	800117c <Read_Disk_Status+0x148>
 8001054:	4b70      	ldr	r3, [pc, #448]	@ (8001218 <Read_Disk_Status+0x1e4>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d000      	beq.n	800105e <Read_Disk_Status+0x2a>
 800105c:	e08e      	b.n	800117c <Read_Disk_Status+0x148>
	{
		if(adapter1_state == 1 && adapter2_state == 1){
 800105e:	4b6f      	ldr	r3, [pc, #444]	@ (800121c <Read_Disk_Status+0x1e8>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d143      	bne.n	80010ee <Read_Disk_Status+0xba>
 8001066:	4b6e      	ldr	r3, [pc, #440]	@ (8001220 <Read_Disk_Status+0x1ec>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d13f      	bne.n	80010ee <Read_Disk_Status+0xba>
			if(flag)
 800106e:	4b6d      	ldr	r3, [pc, #436]	@ (8001224 <Read_Disk_Status+0x1f0>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d01d      	beq.n	80010b2 <Read_Disk_Status+0x7e>
					{
						HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_0, 1, 500);
 8001076:	4a6c      	ldr	r2, [pc, #432]	@ (8001228 <Read_Disk_Status+0x1f4>)
 8001078:	486c      	ldr	r0, [pc, #432]	@ (800122c <Read_Disk_Status+0x1f8>)
 800107a:	23fa      	movs	r3, #250	@ 0xfa
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	21e6      	movs	r1, #230	@ 0xe6
 8001084:	f002 fac2 	bl	800360c <HAL_I2C_Master_Transmit>
						HAL_Delay(50);
 8001088:	2032      	movs	r0, #50	@ 0x32
 800108a:	f001 fd77 	bl	8002b7c <HAL_Delay>
						HAL_I2C_Master_Receive(&hi2c2, slave_address << 1, data, size, 500);
 800108e:	1dbb      	adds	r3, r7, #6
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	18db      	adds	r3, r3, r3
 8001094:	b299      	uxth	r1, r3
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	881c      	ldrh	r4, [r3, #0]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	4863      	ldr	r0, [pc, #396]	@ (800122c <Read_Disk_Status+0x1f8>)
 800109e:	23fa      	movs	r3, #250	@ 0xfa
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	0023      	movs	r3, r4
 80010a6:	f002 fbdb 	bl	8003860 <HAL_I2C_Master_Receive>
						flag = 0;
 80010aa:	4b5e      	ldr	r3, [pc, #376]	@ (8001224 <Read_Disk_Status+0x1f0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
			if(flag)
 80010b0:	e063      	b.n	800117a <Read_Disk_Status+0x146>
					} else {
						HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_1, 1, 500);
 80010b2:	4a5f      	ldr	r2, [pc, #380]	@ (8001230 <Read_Disk_Status+0x1fc>)
 80010b4:	485d      	ldr	r0, [pc, #372]	@ (800122c <Read_Disk_Status+0x1f8>)
 80010b6:	23fa      	movs	r3, #250	@ 0xfa
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2301      	movs	r3, #1
 80010be:	21e6      	movs	r1, #230	@ 0xe6
 80010c0:	f002 faa4 	bl	800360c <HAL_I2C_Master_Transmit>
						HAL_Delay(50);
 80010c4:	2032      	movs	r0, #50	@ 0x32
 80010c6:	f001 fd59 	bl	8002b7c <HAL_Delay>
						HAL_I2C_Master_Receive(&hi2c2, slave_address << 1, data, size, 500);
 80010ca:	1dbb      	adds	r3, r7, #6
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	18db      	adds	r3, r3, r3
 80010d0:	b299      	uxth	r1, r3
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	881c      	ldrh	r4, [r3, #0]
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	4854      	ldr	r0, [pc, #336]	@ (800122c <Read_Disk_Status+0x1f8>)
 80010da:	23fa      	movs	r3, #250	@ 0xfa
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	0023      	movs	r3, r4
 80010e2:	f002 fbbd 	bl	8003860 <HAL_I2C_Master_Receive>
						flag = 1;
 80010e6:	4b4f      	ldr	r3, [pc, #316]	@ (8001224 <Read_Disk_Status+0x1f0>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
			if(flag)
 80010ec:	e045      	b.n	800117a <Read_Disk_Status+0x146>
					}
		} else if (adapter1_state == 1 && adapter2_state == 0)
 80010ee:	4b4b      	ldr	r3, [pc, #300]	@ (800121c <Read_Disk_Status+0x1e8>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d11e      	bne.n	8001134 <Read_Disk_Status+0x100>
 80010f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001220 <Read_Disk_Status+0x1ec>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d11a      	bne.n	8001134 <Read_Disk_Status+0x100>
		{
			HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_0, 1, 1000);
 80010fe:	4a4a      	ldr	r2, [pc, #296]	@ (8001228 <Read_Disk_Status+0x1f4>)
 8001100:	484a      	ldr	r0, [pc, #296]	@ (800122c <Read_Disk_Status+0x1f8>)
 8001102:	23fa      	movs	r3, #250	@ 0xfa
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	21e6      	movs	r1, #230	@ 0xe6
 800110c:	f002 fa7e 	bl	800360c <HAL_I2C_Master_Transmit>
			HAL_Delay(50);
 8001110:	2032      	movs	r0, #50	@ 0x32
 8001112:	f001 fd33 	bl	8002b7c <HAL_Delay>
			HAL_I2C_Master_Receive(&hi2c2, slave_address << 1, data, size, 1000);
 8001116:	1dbb      	adds	r3, r7, #6
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	18db      	adds	r3, r3, r3
 800111c:	b299      	uxth	r1, r3
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	881c      	ldrh	r4, [r3, #0]
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	4841      	ldr	r0, [pc, #260]	@ (800122c <Read_Disk_Status+0x1f8>)
 8001126:	23fa      	movs	r3, #250	@ 0xfa
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	0023      	movs	r3, r4
 800112e:	f002 fb97 	bl	8003860 <HAL_I2C_Master_Receive>
 8001132:	e022      	b.n	800117a <Read_Disk_Status+0x146>
		}else if (adapter2_state == 1 && adapter1_state == 0)
 8001134:	4b3a      	ldr	r3, [pc, #232]	@ (8001220 <Read_Disk_Status+0x1ec>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d165      	bne.n	8001208 <Read_Disk_Status+0x1d4>
 800113c:	4b37      	ldr	r3, [pc, #220]	@ (800121c <Read_Disk_Status+0x1e8>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d161      	bne.n	8001208 <Read_Disk_Status+0x1d4>
		{
			HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_1, 1, 1000);
 8001144:	4a3a      	ldr	r2, [pc, #232]	@ (8001230 <Read_Disk_Status+0x1fc>)
 8001146:	4839      	ldr	r0, [pc, #228]	@ (800122c <Read_Disk_Status+0x1f8>)
 8001148:	23fa      	movs	r3, #250	@ 0xfa
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	21e6      	movs	r1, #230	@ 0xe6
 8001152:	f002 fa5b 	bl	800360c <HAL_I2C_Master_Transmit>
			HAL_Delay(50);
 8001156:	2032      	movs	r0, #50	@ 0x32
 8001158:	f001 fd10 	bl	8002b7c <HAL_Delay>
			HAL_I2C_Master_Receive(&hi2c2, slave_address << 1, data, size, 1000);
 800115c:	1dbb      	adds	r3, r7, #6
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	18db      	adds	r3, r3, r3
 8001162:	b299      	uxth	r1, r3
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	881c      	ldrh	r4, [r3, #0]
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	4830      	ldr	r0, [pc, #192]	@ (800122c <Read_Disk_Status+0x1f8>)
 800116c:	23fa      	movs	r3, #250	@ 0xfa
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	0023      	movs	r3, r4
 8001174:	f002 fb74 	bl	8003860 <HAL_I2C_Master_Receive>
		if(adapter1_state == 1 && adapter2_state == 1){
 8001178:	e046      	b.n	8001208 <Read_Disk_Status+0x1d4>
 800117a:	e045      	b.n	8001208 <Read_Disk_Status+0x1d4>
		}


	}else if ( MB1_attach == 0 && adapter1_state == 1){
 800117c:	4b25      	ldr	r3, [pc, #148]	@ (8001214 <Read_Disk_Status+0x1e0>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d11e      	bne.n	80011c2 <Read_Disk_Status+0x18e>
 8001184:	4b25      	ldr	r3, [pc, #148]	@ (800121c <Read_Disk_Status+0x1e8>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d11a      	bne.n	80011c2 <Read_Disk_Status+0x18e>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_0, 1, 1000);
 800118c:	4a26      	ldr	r2, [pc, #152]	@ (8001228 <Read_Disk_Status+0x1f4>)
 800118e:	4827      	ldr	r0, [pc, #156]	@ (800122c <Read_Disk_Status+0x1f8>)
 8001190:	23fa      	movs	r3, #250	@ 0xfa
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2301      	movs	r3, #1
 8001198:	21e6      	movs	r1, #230	@ 0xe6
 800119a:	f002 fa37 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 800119e:	2032      	movs	r0, #50	@ 0x32
 80011a0:	f001 fcec 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c2, slave_address << 1, data, size, 1000);
 80011a4:	1dbb      	adds	r3, r7, #6
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	18db      	adds	r3, r3, r3
 80011aa:	b299      	uxth	r1, r3
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	881c      	ldrh	r4, [r3, #0]
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	481e      	ldr	r0, [pc, #120]	@ (800122c <Read_Disk_Status+0x1f8>)
 80011b4:	23fa      	movs	r3, #250	@ 0xfa
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	0023      	movs	r3, r4
 80011bc:	f002 fb50 	bl	8003860 <HAL_I2C_Master_Receive>
 80011c0:	e023      	b.n	800120a <Read_Disk_Status+0x1d6>
	} else if (MB2_attach == 0 && adapter2_state == 1){
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <Read_Disk_Status+0x1e4>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d11f      	bne.n	800120a <Read_Disk_Status+0x1d6>
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <Read_Disk_Status+0x1ec>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d11b      	bne.n	800120a <Read_Disk_Status+0x1d6>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_1, 1, 1000);
 80011d2:	4a17      	ldr	r2, [pc, #92]	@ (8001230 <Read_Disk_Status+0x1fc>)
 80011d4:	4815      	ldr	r0, [pc, #84]	@ (800122c <Read_Disk_Status+0x1f8>)
 80011d6:	23fa      	movs	r3, #250	@ 0xfa
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2301      	movs	r3, #1
 80011de:	21e6      	movs	r1, #230	@ 0xe6
 80011e0:	f002 fa14 	bl	800360c <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 80011e4:	2032      	movs	r0, #50	@ 0x32
 80011e6:	f001 fcc9 	bl	8002b7c <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c2, slave_address << 1, data, size, 1000);
 80011ea:	1dbb      	adds	r3, r7, #6
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	18db      	adds	r3, r3, r3
 80011f0:	b299      	uxth	r1, r3
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	881c      	ldrh	r4, [r3, #0]
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	480c      	ldr	r0, [pc, #48]	@ (800122c <Read_Disk_Status+0x1f8>)
 80011fa:	23fa      	movs	r3, #250	@ 0xfa
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	0023      	movs	r3, r4
 8001202:	f002 fb2d 	bl	8003860 <HAL_I2C_Master_Receive>
	}else {

	}
}
 8001206:	e000      	b.n	800120a <Read_Disk_Status+0x1d6>
		if(adapter1_state == 1 && adapter2_state == 1){
 8001208:	46c0      	nop			@ (mov r8, r8)
}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b003      	add	sp, #12
 8001210:	bd90      	pop	{r4, r7, pc}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	2000006f 	.word	0x2000006f
 8001218:	20000070 	.word	0x20000070
 800121c:	20000318 	.word	0x20000318
 8001220:	20000319 	.word	0x20000319
 8001224:	2000037f 	.word	0x2000037f
 8001228:	20000054 	.word	0x20000054
 800122c:	200000b8 	.word	0x200000b8
 8001230:	20000058 	.word	0x20000058

08001234 <Decode_Disk_Status>:

void Decode_Disk_Status(uint8_t *data) {
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    for (uint8_t disk_id = 0; disk_id < 24; disk_id++) {
 800123c:	2317      	movs	r3, #23
 800123e:	18fb      	adds	r3, r7, r3
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	e0fd      	b.n	8001442 <Decode_Disk_Status+0x20e>
        uint8_t byte_index = disk_id / 4; // Индекс байта
 8001246:	2113      	movs	r1, #19
 8001248:	187b      	adds	r3, r7, r1
 800124a:	2017      	movs	r0, #23
 800124c:	183a      	adds	r2, r7, r0
 800124e:	7812      	ldrb	r2, [r2, #0]
 8001250:	0892      	lsrs	r2, r2, #2
 8001252:	701a      	strb	r2, [r3, #0]
        uint8_t bit_offset = (disk_id % 4) * 2; // Смещение в байте
 8001254:	183b      	adds	r3, r7, r0
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2203      	movs	r2, #3
 800125a:	4013      	ands	r3, r2
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2412      	movs	r4, #18
 8001260:	193a      	adds	r2, r7, r4
 8001262:	18db      	adds	r3, r3, r3
 8001264:	7013      	strb	r3, [r2, #0]
        uint8_t status = (data[byte_index] >> bit_offset) & 0x03; // Извлечение статуса
 8001266:	187b      	adds	r3, r7, r1
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	18d3      	adds	r3, r2, r3
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	001a      	movs	r2, r3
 8001272:	193b      	adds	r3, r7, r4
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	411a      	asrs	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	b2da      	uxtb	r2, r3
 800127c:	2411      	movs	r4, #17
 800127e:	193b      	adds	r3, r7, r4
 8001280:	2103      	movs	r1, #3
 8001282:	400a      	ands	r2, r1
 8001284:	701a      	strb	r2, [r3, #0]

        // Получаем текущее состояние диска
        uint8_t current_error = disks[disk_id].error;
 8001286:	183b      	adds	r3, r7, r0
 8001288:	781a      	ldrb	r2, [r3, #0]
 800128a:	2310      	movs	r3, #16
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	4972      	ldr	r1, [pc, #456]	@ (8001458 <Decode_Disk_Status+0x224>)
 8001290:	0092      	lsls	r2, r2, #2
 8001292:	188a      	adds	r2, r1, r2
 8001294:	3202      	adds	r2, #2
 8001296:	7812      	ldrb	r2, [r2, #0]
 8001298:	701a      	strb	r2, [r3, #0]
        uint8_t current_locate = disks[disk_id].locate;
 800129a:	183b      	adds	r3, r7, r0
 800129c:	781a      	ldrb	r2, [r3, #0]
 800129e:	230f      	movs	r3, #15
 80012a0:	18fb      	adds	r3, r7, r3
 80012a2:	496d      	ldr	r1, [pc, #436]	@ (8001458 <Decode_Disk_Status+0x224>)
 80012a4:	0092      	lsls	r2, r2, #2
 80012a6:	188a      	adds	r2, r1, r2
 80012a8:	3203      	adds	r2, #3
 80012aa:	7812      	ldrb	r2, [r2, #0]
 80012ac:	701a      	strb	r2, [r3, #0]
        uint8_t current_activity = disks[disk_id].activity;
 80012ae:	183b      	adds	r3, r7, r0
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	230e      	movs	r3, #14
 80012b4:	18fb      	adds	r3, r7, r3
 80012b6:	4968      	ldr	r1, [pc, #416]	@ (8001458 <Decode_Disk_Status+0x224>)
 80012b8:	0092      	lsls	r2, r2, #2
 80012ba:	188a      	adds	r2, r1, r2
 80012bc:	3201      	adds	r2, #1
 80012be:	7812      	ldrb	r2, [r2, #0]
 80012c0:	701a      	strb	r2, [r3, #0]

        // Декодирование нового статуса
        uint8_t new_activity = 0;
 80012c2:	2316      	movs	r3, #22
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
        uint8_t new_error = 0;
 80012ca:	2315      	movs	r3, #21
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
        uint8_t new_locate = 0;
 80012d2:	2314      	movs	r3, #20
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]

        switch (status) {
 80012da:	193b      	adds	r3, r7, r4
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d02f      	beq.n	8001342 <Decode_Disk_Status+0x10e>
 80012e2:	dc3b      	bgt.n	800135c <Decode_Disk_Status+0x128>
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d01f      	beq.n	8001328 <Decode_Disk_Status+0xf4>
 80012e8:	dc38      	bgt.n	800135c <Decode_Disk_Status+0x128>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <Decode_Disk_Status+0xc0>
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d00d      	beq.n	800130e <Decode_Disk_Status+0xda>
                new_activity = 0;
                new_error = 1;
                new_locate = 0;
                break;
            default:
                break;
 80012f2:	e033      	b.n	800135c <Decode_Disk_Status+0x128>
                new_activity = 0;
 80012f4:	2316      	movs	r3, #22
 80012f6:	18fb      	adds	r3, r7, r3
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
                new_error = 0;
 80012fc:	2315      	movs	r3, #21
 80012fe:	18fb      	adds	r3, r7, r3
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
                new_locate = 0;
 8001304:	2314      	movs	r3, #20
 8001306:	18fb      	adds	r3, r7, r3
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
                break;
 800130c:	e027      	b.n	800135e <Decode_Disk_Status+0x12a>
                new_activity = 1;
 800130e:	2316      	movs	r3, #22
 8001310:	18fb      	adds	r3, r7, r3
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
                new_error = 0;
 8001316:	2315      	movs	r3, #21
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
                new_locate = 0;
 800131e:	2314      	movs	r3, #20
 8001320:	18fb      	adds	r3, r7, r3
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
                break;
 8001326:	e01a      	b.n	800135e <Decode_Disk_Status+0x12a>
                new_activity = 0;
 8001328:	2316      	movs	r3, #22
 800132a:	18fb      	adds	r3, r7, r3
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
                new_error = 0;
 8001330:	2315      	movs	r3, #21
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
                new_locate = 1;
 8001338:	2314      	movs	r3, #20
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
                break;
 8001340:	e00d      	b.n	800135e <Decode_Disk_Status+0x12a>
                new_activity = 0;
 8001342:	2316      	movs	r3, #22
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
                new_error = 1;
 800134a:	2315      	movs	r3, #21
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
                new_locate = 0;
 8001352:	2314      	movs	r3, #20
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
                break;
 800135a:	e000      	b.n	800135e <Decode_Disk_Status+0x12a>
                break;
 800135c:	46c0      	nop			@ (mov r8, r8)
        // Применяем приоритеты:
        // 1. Если уже есть error, сохраняем его
        // 2. Иначе если есть locate, сохраняем его, если новый статус не error
        // 3. Иначе обновляем activity

        uint8_t final_error = current_error || new_error;
 800135e:	2310      	movs	r3, #16
 8001360:	18fb      	adds	r3, r7, r3
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d104      	bne.n	8001372 <Decode_Disk_Status+0x13e>
 8001368:	2315      	movs	r3, #21
 800136a:	18fb      	adds	r3, r7, r3
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <Decode_Disk_Status+0x142>
 8001372:	2201      	movs	r2, #1
 8001374:	e000      	b.n	8001378 <Decode_Disk_Status+0x144>
 8001376:	2200      	movs	r2, #0
 8001378:	230d      	movs	r3, #13
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	701a      	strb	r2, [r3, #0]
        uint8_t final_locate = (current_locate || new_locate) && !final_error;
 800137e:	230f      	movs	r3, #15
 8001380:	18fb      	adds	r3, r7, r3
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d104      	bne.n	8001392 <Decode_Disk_Status+0x15e>
 8001388:	2314      	movs	r3, #20
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <Decode_Disk_Status+0x16c>
 8001392:	230d      	movs	r3, #13
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <Decode_Disk_Status+0x16c>
 800139c:	2201      	movs	r2, #1
 800139e:	e000      	b.n	80013a2 <Decode_Disk_Status+0x16e>
 80013a0:	2200      	movs	r2, #0
 80013a2:	210c      	movs	r1, #12
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	701a      	strb	r2, [r3, #0]
        uint8_t final_activity = new_activity && !final_error && !final_locate;
 80013a8:	2316      	movs	r3, #22
 80013aa:	18fb      	adds	r3, r7, r3
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00a      	beq.n	80013c8 <Decode_Disk_Status+0x194>
 80013b2:	230d      	movs	r3, #13
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d105      	bne.n	80013c8 <Decode_Disk_Status+0x194>
 80013bc:	187b      	adds	r3, r7, r1
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <Decode_Disk_Status+0x194>
 80013c4:	2201      	movs	r2, #1
 80013c6:	e000      	b.n	80013ca <Decode_Disk_Status+0x196>
 80013c8:	2200      	movs	r2, #0
 80013ca:	200b      	movs	r0, #11
 80013cc:	183b      	adds	r3, r7, r0
 80013ce:	701a      	strb	r2, [r3, #0]

        // Обновляем статус только если он изменился
        if (disks[disk_id].error != final_error ||
 80013d0:	2117      	movs	r1, #23
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	4a20      	ldr	r2, [pc, #128]	@ (8001458 <Decode_Disk_Status+0x224>)
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	18d3      	adds	r3, r2, r3
 80013dc:	3302      	adds	r3, #2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	220d      	movs	r2, #13
 80013e2:	18ba      	adds	r2, r7, r2
 80013e4:	7812      	ldrb	r2, [r2, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d116      	bne.n	8001418 <Decode_Disk_Status+0x1e4>
            disks[disk_id].locate != final_locate ||
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001458 <Decode_Disk_Status+0x224>)
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	18d3      	adds	r3, r2, r3
 80013f4:	3303      	adds	r3, #3
 80013f6:	781b      	ldrb	r3, [r3, #0]
        if (disks[disk_id].error != final_error ||
 80013f8:	220c      	movs	r2, #12
 80013fa:	18ba      	adds	r2, r7, r2
 80013fc:	7812      	ldrb	r2, [r2, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d10a      	bne.n	8001418 <Decode_Disk_Status+0x1e4>
            disks[disk_id].activity != final_activity) {
 8001402:	187b      	adds	r3, r7, r1
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	4a14      	ldr	r2, [pc, #80]	@ (8001458 <Decode_Disk_Status+0x224>)
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	18d3      	adds	r3, r2, r3
 800140c:	3301      	adds	r3, #1
 800140e:	781b      	ldrb	r3, [r3, #0]
            disks[disk_id].locate != final_locate ||
 8001410:	183a      	adds	r2, r7, r0
 8001412:	7812      	ldrb	r2, [r2, #0]
 8001414:	429a      	cmp	r2, r3
 8001416:	d00e      	beq.n	8001436 <Decode_Disk_Status+0x202>
            UpdateDiskStatus(disk_id, final_activity, final_error, final_locate);
 8001418:	230c      	movs	r3, #12
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	781c      	ldrb	r4, [r3, #0]
 800141e:	230d      	movs	r3, #13
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	781a      	ldrb	r2, [r3, #0]
 8001424:	230b      	movs	r3, #11
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	7819      	ldrb	r1, [r3, #0]
 800142a:	2317      	movs	r3, #23
 800142c:	18fb      	adds	r3, r7, r3
 800142e:	7818      	ldrb	r0, [r3, #0]
 8001430:	0023      	movs	r3, r4
 8001432:	f7ff fdcb 	bl	8000fcc <UpdateDiskStatus>
    for (uint8_t disk_id = 0; disk_id < 24; disk_id++) {
 8001436:	2117      	movs	r1, #23
 8001438:	187b      	adds	r3, r7, r1
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	187b      	adds	r3, r7, r1
 800143e:	3201      	adds	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	2317      	movs	r3, #23
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b17      	cmp	r3, #23
 800144a:	d800      	bhi.n	800144e <Decode_Disk_Status+0x21a>
 800144c:	e6fb      	b.n	8001246 <Decode_Disk_Status+0x12>
        }
    }
}
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	46c0      	nop			@ (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b007      	add	sp, #28
 8001456:	bd90      	pop	{r4, r7, pc}
 8001458:	200002b8 	.word	0x200002b8

0800145c <ResetBus>:
#include "i2c.h"
#include "config.h"
#include "main.h"

void ResetBus()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TEMP_I2C1_RES_GPIO_Port, TEMP_I2C1_RES_Pin, RESET);
 8001460:	4b35      	ldr	r3, [pc, #212]	@ (8001538 <ResetBus+0xdc>)
 8001462:	2200      	movs	r2, #0
 8001464:	2104      	movs	r1, #4
 8001466:	0018      	movs	r0, r3
 8001468:	f002 f80d 	bl	8003486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_G_GPIO_Port, SGPIO_I2C1_RES_G_Pin, RESET);
 800146c:	4b32      	ldr	r3, [pc, #200]	@ (8001538 <ResetBus+0xdc>)
 800146e:	2200      	movs	r2, #0
 8001470:	2101      	movs	r1, #1
 8001472:	0018      	movs	r0, r3
 8001474:	f002 f807 	bl	8003486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_GPIO_Port, SGPIO_I2C1_RES_Pin, RESET);
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	482f      	ldr	r0, [pc, #188]	@ (800153c <ResetBus+0xe0>)
 800147e:	2200      	movs	r2, #0
 8001480:	0019      	movs	r1, r3
 8001482:	f002 f800 	bl	8003486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3RES_G_GPIO_Port, SGPIO_I2C3RES_G_Pin, RESET);
 8001486:	4b2e      	ldr	r3, [pc, #184]	@ (8001540 <ResetBus+0xe4>)
 8001488:	2200      	movs	r2, #0
 800148a:	2104      	movs	r1, #4
 800148c:	0018      	movs	r0, r3
 800148e:	f001 fffa 	bl	8003486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3_RES_GPIO_Port, SGPIO_I2C3_RES_Pin, RESET);
 8001492:	4b2b      	ldr	r3, [pc, #172]	@ (8001540 <ResetBus+0xe4>)
 8001494:	2200      	movs	r2, #0
 8001496:	2102      	movs	r1, #2
 8001498:	0018      	movs	r0, r3
 800149a:	f001 fff4 	bl	8003486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_GPIO_Port, SGPIO_I2C2_RES_Pin, RESET);
 800149e:	2380      	movs	r3, #128	@ 0x80
 80014a0:	01db      	lsls	r3, r3, #7
 80014a2:	4826      	ldr	r0, [pc, #152]	@ (800153c <ResetBus+0xe0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	0019      	movs	r1, r3
 80014a8:	f001 ffed 	bl	8003486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_G_GPIO_Port, SGPIO_I2C2_RES_G_Pin, RESET);
 80014ac:	2380      	movs	r3, #128	@ 0x80
 80014ae:	019b      	lsls	r3, r3, #6
 80014b0:	4822      	ldr	r0, [pc, #136]	@ (800153c <ResetBus+0xe0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	0019      	movs	r1, r3
 80014b6:	f001 ffe6 	bl	8003486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_I2C2_RES_GPIO_Port, TEMP_I2C2_RES_Pin, RESET);
 80014ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <ResetBus+0xdc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	2102      	movs	r1, #2
 80014c0:	0018      	movs	r0, r3
 80014c2:	f001 ffe0 	bl	8003486 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80014c6:	2014      	movs	r0, #20
 80014c8:	f001 fb58 	bl	8002b7c <HAL_Delay>
	HAL_GPIO_WritePin(TEMP_I2C1_RES_GPIO_Port, TEMP_I2C1_RES_Pin, SET);
 80014cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001538 <ResetBus+0xdc>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	2104      	movs	r1, #4
 80014d2:	0018      	movs	r0, r3
 80014d4:	f001 ffd7 	bl	8003486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_G_GPIO_Port, SGPIO_I2C1_RES_G_Pin, SET);
 80014d8:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <ResetBus+0xdc>)
 80014da:	2201      	movs	r2, #1
 80014dc:	2101      	movs	r1, #1
 80014de:	0018      	movs	r0, r3
 80014e0:	f001 ffd1 	bl	8003486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_GPIO_Port, SGPIO_I2C1_RES_Pin, SET);
 80014e4:	2380      	movs	r3, #128	@ 0x80
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4814      	ldr	r0, [pc, #80]	@ (800153c <ResetBus+0xe0>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	0019      	movs	r1, r3
 80014ee:	f001 ffca 	bl	8003486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3RES_G_GPIO_Port, SGPIO_I2C3RES_G_Pin, SET);
 80014f2:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <ResetBus+0xe4>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	2104      	movs	r1, #4
 80014f8:	0018      	movs	r0, r3
 80014fa:	f001 ffc4 	bl	8003486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3_RES_GPIO_Port, SGPIO_I2C3_RES_Pin, SET);
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <ResetBus+0xe4>)
 8001500:	2201      	movs	r2, #1
 8001502:	2102      	movs	r1, #2
 8001504:	0018      	movs	r0, r3
 8001506:	f001 ffbe 	bl	8003486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_GPIO_Port, SGPIO_I2C2_RES_Pin, SET);
 800150a:	2380      	movs	r3, #128	@ 0x80
 800150c:	01db      	lsls	r3, r3, #7
 800150e:	480b      	ldr	r0, [pc, #44]	@ (800153c <ResetBus+0xe0>)
 8001510:	2201      	movs	r2, #1
 8001512:	0019      	movs	r1, r3
 8001514:	f001 ffb7 	bl	8003486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_G_GPIO_Port, SGPIO_I2C2_RES_G_Pin, SET);
 8001518:	2380      	movs	r3, #128	@ 0x80
 800151a:	019b      	lsls	r3, r3, #6
 800151c:	4807      	ldr	r0, [pc, #28]	@ (800153c <ResetBus+0xe0>)
 800151e:	2201      	movs	r2, #1
 8001520:	0019      	movs	r1, r3
 8001522:	f001 ffb0 	bl	8003486 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_I2C2_RES_GPIO_Port, TEMP_I2C2_RES_Pin, SET);
 8001526:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <ResetBus+0xdc>)
 8001528:	2201      	movs	r2, #1
 800152a:	2102      	movs	r1, #2
 800152c:	0018      	movs	r0, r3
 800152e:	f001 ffaa 	bl	8003486 <HAL_GPIO_WritePin>

}
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	50000c00 	.word	0x50000c00
 800153c:	50000800 	.word	0x50000800
 8001540:	50000400 	.word	0x50000400

08001544 <Read_Register>:
	HAL_Delay(20);
	HAL_GPIO_WritePin(TEMP_I2C2_RES_GPIO_Port, TEMP_I2C2_RES_Pin, SET);
	HAL_Delay(100);
}
void Read_Register(uint8_t register_pointer, uint8_t* receive_buffer, uint16_t adr_rep)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af02      	add	r7, sp, #8
 800154a:	6039      	str	r1, [r7, #0]
 800154c:	0011      	movs	r1, r2
 800154e:	1dfb      	adds	r3, r7, #7
 8001550:	1c02      	adds	r2, r0, #0
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	1c0a      	adds	r2, r1, #0
 8001558:	801a      	strh	r2, [r3, #0]
	//set pointer to register

	HAL_I2C_Master_Transmit(&hi2c2, (adr_rep << 1), &register_pointer, 1, 1000);
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	18db      	adds	r3, r3, r3
 8001560:	b299      	uxth	r1, r3
 8001562:	1dfa      	adds	r2, r7, #7
 8001564:	480c      	ldr	r0, [pc, #48]	@ (8001598 <Read_Register+0x54>)
 8001566:	23fa      	movs	r3, #250	@ 0xfa
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2301      	movs	r3, #1
 800156e:	f002 f84d 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001572:	2014      	movs	r0, #20
 8001574:	f001 fb02 	bl	8002b7c <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, (adr_rep << 1), receive_buffer, 1, 1000);
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	18db      	adds	r3, r3, r3
 800157e:	b299      	uxth	r1, r3
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	4805      	ldr	r0, [pc, #20]	@ (8001598 <Read_Register+0x54>)
 8001584:	23fa      	movs	r3, #250	@ 0xfa
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2301      	movs	r3, #1
 800158c:	f002 f968 	bl	8003860 <HAL_I2C_Master_Receive>


}
 8001590:	46c0      	nop			@ (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	b002      	add	sp, #8
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200000b8 	.word	0x200000b8

0800159c <Set_Led_On>:




void Set_Led_On(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af02      	add	r7, sp, #8
	while (HAL_I2C_IsDeviceReady(&hi2c2, LED_adr << 1, 3, 100)!= HAL_OK){
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	480d      	ldr	r0, [pc, #52]	@ (80015dc <Set_Led_On+0x40>)
 80015a6:	2364      	movs	r3, #100	@ 0x64
 80015a8:	2203      	movs	r2, #3
 80015aa:	21ea      	movs	r1, #234	@ 0xea
 80015ac:	f002 fa60 	bl	8003a70 <HAL_I2C_IsDeviceReady>
 80015b0:	1e03      	subs	r3, r0, #0
 80015b2:	d1f7      	bne.n	80015a4 <Set_Led_On+0x8>
	}
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff_OUT, 3, 10);
 80015b4:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <Set_Led_On+0x44>)
 80015b6:	4809      	ldr	r0, [pc, #36]	@ (80015dc <Set_Led_On+0x40>)
 80015b8:	230a      	movs	r3, #10
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2303      	movs	r3, #3
 80015be:	21ea      	movs	r1, #234	@ 0xea
 80015c0:	f002 f824 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), ledbufON, 3, 10);
 80015c4:	4a07      	ldr	r2, [pc, #28]	@ (80015e4 <Set_Led_On+0x48>)
 80015c6:	4805      	ldr	r0, [pc, #20]	@ (80015dc <Set_Led_On+0x40>)
 80015c8:	230a      	movs	r3, #10
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2303      	movs	r3, #3
 80015ce:	21ea      	movs	r1, #234	@ 0xea
 80015d0:	f002 f81c 	bl	800360c <HAL_I2C_Master_Transmit>
}
 80015d4:	46c0      	nop			@ (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			@ (mov r8, r8)
 80015dc:	200000b8 	.word	0x200000b8
 80015e0:	2000004c 	.word	0x2000004c
 80015e4:	20000064 	.word	0x20000064

080015e8 <Set_Led_Off>:

void Set_Led_Off()
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af02      	add	r7, sp, #8
	while (HAL_I2C_IsDeviceReady(&hi2c2, LED_adr << 1, 3, 100)!= HAL_OK){
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	480d      	ldr	r0, [pc, #52]	@ (8001628 <Set_Led_Off+0x40>)
 80015f2:	2364      	movs	r3, #100	@ 0x64
 80015f4:	2203      	movs	r2, #3
 80015f6:	21ea      	movs	r1, #234	@ 0xea
 80015f8:	f002 fa3a 	bl	8003a70 <HAL_I2C_IsDeviceReady>
 80015fc:	1e03      	subs	r3, r0, #0
 80015fe:	d1f7      	bne.n	80015f0 <Set_Led_Off+0x8>
	}
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff_OUT, 3, 10);
 8001600:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <Set_Led_Off+0x44>)
 8001602:	4809      	ldr	r0, [pc, #36]	@ (8001628 <Set_Led_Off+0x40>)
 8001604:	230a      	movs	r3, #10
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2303      	movs	r3, #3
 800160a:	21ea      	movs	r1, #234	@ 0xea
 800160c:	f001 fffe 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), ledbufOFF, 3, 10);
 8001610:	4a07      	ldr	r2, [pc, #28]	@ (8001630 <Set_Led_Off+0x48>)
 8001612:	4805      	ldr	r0, [pc, #20]	@ (8001628 <Set_Led_Off+0x40>)
 8001614:	230a      	movs	r3, #10
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2303      	movs	r3, #3
 800161a:	21ea      	movs	r1, #234	@ 0xea
 800161c:	f001 fff6 	bl	800360c <HAL_I2C_Master_Transmit>

}
 8001620:	46c0      	nop			@ (mov r8, r8)
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	46c0      	nop			@ (mov r8, r8)
 8001628:	200000b8 	.word	0x200000b8
 800162c:	2000004c 	.word	0x2000004c
 8001630:	20000068 	.word	0x20000068

08001634 <LED_Init>:

void LED_Init(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af02      	add	r7, sp, #8
	// Инициализация LED
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 800163a:	4a2e      	ldr	r2, [pc, #184]	@ (80016f4 <LED_Init+0xc0>)
 800163c:	482e      	ldr	r0, [pc, #184]	@ (80016f8 <LED_Init+0xc4>)
 800163e:	230a      	movs	r3, #10
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2301      	movs	r3, #1
 8001644:	21e8      	movs	r1, #232	@ 0xe8
 8001646:	f001 ffe1 	bl	800360c <HAL_I2C_Master_Transmit>
	Set_Led_On();
 800164a:	f7ff ffa7 	bl	800159c <Set_Led_On>
	HAL_Delay(400);
 800164e:	23c8      	movs	r3, #200	@ 0xc8
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	0018      	movs	r0, r3
 8001654:	f001 fa92 	bl	8002b7c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 8001658:	4a28      	ldr	r2, [pc, #160]	@ (80016fc <LED_Init+0xc8>)
 800165a:	4827      	ldr	r0, [pc, #156]	@ (80016f8 <LED_Init+0xc4>)
 800165c:	230a      	movs	r3, #10
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2301      	movs	r3, #1
 8001662:	21e8      	movs	r1, #232	@ 0xe8
 8001664:	f001 ffd2 	bl	800360c <HAL_I2C_Master_Transmit>
	Set_Led_On();
 8001668:	f7ff ff98 	bl	800159c <Set_Led_On>
	HAL_Delay(400);
 800166c:	23c8      	movs	r3, #200	@ 0xc8
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	0018      	movs	r0, r3
 8001672:	f001 fa83 	bl	8002b7c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 8001676:	4a22      	ldr	r2, [pc, #136]	@ (8001700 <LED_Init+0xcc>)
 8001678:	481f      	ldr	r0, [pc, #124]	@ (80016f8 <LED_Init+0xc4>)
 800167a:	230a      	movs	r3, #10
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2301      	movs	r3, #1
 8001680:	21e8      	movs	r1, #232	@ 0xe8
 8001682:	f001 ffc3 	bl	800360c <HAL_I2C_Master_Transmit>
	Set_Led_On();
 8001686:	f7ff ff89 	bl	800159c <Set_Led_On>
	HAL_Delay(400);
 800168a:	23c8      	movs	r3, #200	@ 0xc8
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	0018      	movs	r0, r3
 8001690:	f001 fa74 	bl	8002b7c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 8001694:	4a17      	ldr	r2, [pc, #92]	@ (80016f4 <LED_Init+0xc0>)
 8001696:	4818      	ldr	r0, [pc, #96]	@ (80016f8 <LED_Init+0xc4>)
 8001698:	230a      	movs	r3, #10
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2301      	movs	r3, #1
 800169e:	21e8      	movs	r1, #232	@ 0xe8
 80016a0:	f001 ffb4 	bl	800360c <HAL_I2C_Master_Transmit>
	Set_Led_Off();
 80016a4:	f7ff ffa0 	bl	80015e8 <Set_Led_Off>
	HAL_Delay(400);
 80016a8:	23c8      	movs	r3, #200	@ 0xc8
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	0018      	movs	r0, r3
 80016ae:	f001 fa65 	bl	8002b7c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 80016b2:	4a12      	ldr	r2, [pc, #72]	@ (80016fc <LED_Init+0xc8>)
 80016b4:	4810      	ldr	r0, [pc, #64]	@ (80016f8 <LED_Init+0xc4>)
 80016b6:	230a      	movs	r3, #10
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2301      	movs	r3, #1
 80016bc:	21e8      	movs	r1, #232	@ 0xe8
 80016be:	f001 ffa5 	bl	800360c <HAL_I2C_Master_Transmit>
	Set_Led_Off();
 80016c2:	f7ff ff91 	bl	80015e8 <Set_Led_Off>
	HAL_Delay(400);
 80016c6:	23c8      	movs	r3, #200	@ 0xc8
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	0018      	movs	r0, r3
 80016cc:	f001 fa56 	bl	8002b7c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 80016d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001700 <LED_Init+0xcc>)
 80016d2:	4809      	ldr	r0, [pc, #36]	@ (80016f8 <LED_Init+0xc4>)
 80016d4:	230a      	movs	r3, #10
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2301      	movs	r3, #1
 80016da:	21e8      	movs	r1, #232	@ 0xe8
 80016dc:	f001 ff96 	bl	800360c <HAL_I2C_Master_Transmit>
	Set_Led_Off();
 80016e0:	f7ff ff82 	bl	80015e8 <Set_Led_Off>
	HAL_Delay(400);
 80016e4:	23c8      	movs	r3, #200	@ 0xc8
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	0018      	movs	r0, r3
 80016ea:	f001 fa47 	bl	8002b7c <HAL_Delay>
}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000054 	.word	0x20000054
 80016f8:	200000b8 	.word	0x200000b8
 80016fc:	20000058 	.word	0x20000058
 8001700:	2000005c 	.word	0x2000005c

08001704 <Set_Led>:

void Set_Led()
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af02      	add	r7, sp, #8
	while (HAL_I2C_IsDeviceReady(&hi2c2, I2C_EXPAND_adr << 1, 3, 100) != HAL_OK);
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	4829      	ldr	r0, [pc, #164]	@ (80017b4 <Set_Led+0xb0>)
 800170e:	2364      	movs	r3, #100	@ 0x64
 8001710:	2203      	movs	r2, #3
 8001712:	21e8      	movs	r1, #232	@ 0xe8
 8001714:	f002 f9ac 	bl	8003a70 <HAL_I2C_IsDeviceReady>
 8001718:	1e03      	subs	r3, r0, #0
 800171a:	d1f7      	bne.n	800170c <Set_Led+0x8>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 100);
 800171c:	4a26      	ldr	r2, [pc, #152]	@ (80017b8 <Set_Led+0xb4>)
 800171e:	4825      	ldr	r0, [pc, #148]	@ (80017b4 <Set_Led+0xb0>)
 8001720:	2364      	movs	r3, #100	@ 0x64
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	2301      	movs	r3, #1
 8001726:	21e8      	movs	r1, #232	@ 0xe8
 8001728:	f001 ff70 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff_OUT, 3, 100);
 800172c:	4a23      	ldr	r2, [pc, #140]	@ (80017bc <Set_Led+0xb8>)
 800172e:	4821      	ldr	r0, [pc, #132]	@ (80017b4 <Set_Led+0xb0>)
 8001730:	2364      	movs	r3, #100	@ 0x64
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2303      	movs	r3, #3
 8001736:	21ea      	movs	r1, #234	@ 0xea
 8001738:	f001 ff68 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), channel_one, 3, 100);
 800173c:	4a20      	ldr	r2, [pc, #128]	@ (80017c0 <Set_Led+0xbc>)
 800173e:	481d      	ldr	r0, [pc, #116]	@ (80017b4 <Set_Led+0xb0>)
 8001740:	2364      	movs	r3, #100	@ 0x64
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2303      	movs	r3, #3
 8001746:	21ea      	movs	r1, #234	@ 0xea
 8001748:	f001 ff60 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 100);
 800174c:	4a1d      	ldr	r2, [pc, #116]	@ (80017c4 <Set_Led+0xc0>)
 800174e:	4819      	ldr	r0, [pc, #100]	@ (80017b4 <Set_Led+0xb0>)
 8001750:	2364      	movs	r3, #100	@ 0x64
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2301      	movs	r3, #1
 8001756:	21e8      	movs	r1, #232	@ 0xe8
 8001758:	f001 ff58 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff_OUT, 3, 100);
 800175c:	4a17      	ldr	r2, [pc, #92]	@ (80017bc <Set_Led+0xb8>)
 800175e:	4815      	ldr	r0, [pc, #84]	@ (80017b4 <Set_Led+0xb0>)
 8001760:	2364      	movs	r3, #100	@ 0x64
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2303      	movs	r3, #3
 8001766:	21ea      	movs	r1, #234	@ 0xea
 8001768:	f001 ff50 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), channel_two, 3, 100);
 800176c:	4a16      	ldr	r2, [pc, #88]	@ (80017c8 <Set_Led+0xc4>)
 800176e:	4811      	ldr	r0, [pc, #68]	@ (80017b4 <Set_Led+0xb0>)
 8001770:	2364      	movs	r3, #100	@ 0x64
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2303      	movs	r3, #3
 8001776:	21ea      	movs	r1, #234	@ 0xea
 8001778:	f001 ff48 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 100);
 800177c:	4a13      	ldr	r2, [pc, #76]	@ (80017cc <Set_Led+0xc8>)
 800177e:	480d      	ldr	r0, [pc, #52]	@ (80017b4 <Set_Led+0xb0>)
 8001780:	2364      	movs	r3, #100	@ 0x64
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2301      	movs	r3, #1
 8001786:	21e8      	movs	r1, #232	@ 0xe8
 8001788:	f001 ff40 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff_OUT, 3, 100);
 800178c:	4a0b      	ldr	r2, [pc, #44]	@ (80017bc <Set_Led+0xb8>)
 800178e:	4809      	ldr	r0, [pc, #36]	@ (80017b4 <Set_Led+0xb0>)
 8001790:	2364      	movs	r3, #100	@ 0x64
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2303      	movs	r3, #3
 8001796:	21ea      	movs	r1, #234	@ 0xea
 8001798:	f001 ff38 	bl	800360c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), channel_three, 3, 100);
 800179c:	4a0c      	ldr	r2, [pc, #48]	@ (80017d0 <Set_Led+0xcc>)
 800179e:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <Set_Led+0xb0>)
 80017a0:	2364      	movs	r3, #100	@ 0x64
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2303      	movs	r3, #3
 80017a6:	21ea      	movs	r1, #234	@ 0xea
 80017a8:	f001 ff30 	bl	800360c <HAL_I2C_Master_Transmit>
}
 80017ac:	46c0      	nop			@ (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	200000b8 	.word	0x200000b8
 80017b8:	20000054 	.word	0x20000054
 80017bc:	2000004c 	.word	0x2000004c
 80017c0:	20000000 	.word	0x20000000
 80017c4:	20000058 	.word	0x20000058
 80017c8:	20000004 	.word	0x20000004
 80017cc:	2000005c 	.word	0x2000005c
 80017d0:	20000008 	.word	0x20000008

080017d4 <UpdateLEDStates>:

void UpdateLEDStates()
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
	static uint8_t blinkState = 0; // Состояние мигания (0 или 1)
	blinkState = !blinkState;     // �?нвертируем состояние каждые 125 мс (4 Гц)
 80017da:	4ba7      	ldr	r3, [pc, #668]	@ (8001a78 <UpdateLEDStates+0x2a4>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	425a      	negs	r2, r3
 80017e0:	4153      	adcs	r3, r2
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	001a      	movs	r2, r3
 80017e6:	4ba4      	ldr	r3, [pc, #656]	@ (8001a78 <UpdateLEDStates+0x2a4>)
 80017e8:	701a      	strb	r2, [r3, #0]

	// Очищаем буферы каналов


	// Обновляем состояние светодиодов для каждого диска
	for (int i = 0; i < MAX_DISKS; ++i) {
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	e269      	b.n	8001cc4 <UpdateLEDStates+0x4f0>
		// Определяем, какой канал использовать
		uint8_t *channel;
		uint8_t greenBit;
		uint8_t redBit;

		if (i < 8) {
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b07      	cmp	r3, #7
 80017f4:	dc4e      	bgt.n	8001894 <UpdateLEDStates+0xc0>
			channel = channel_one;
 80017f6:	4ba1      	ldr	r3, [pc, #644]	@ (8001a7c <UpdateLEDStates+0x2a8>)
 80017f8:	60bb      	str	r3, [r7, #8]
			if (i < 4) {
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	dc24      	bgt.n	800184a <UpdateLEDStates+0x76>
				// Диски 0-3: первый байт
				greenBit = (i == 0) ? 6 : (i == 1) ? 4 : (i == 2) ? 2 : 1;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00b      	beq.n	800181e <UpdateLEDStates+0x4a>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d006      	beq.n	800181a <UpdateLEDStates+0x46>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d101      	bne.n	8001816 <UpdateLEDStates+0x42>
 8001812:	2302      	movs	r3, #2
 8001814:	e004      	b.n	8001820 <UpdateLEDStates+0x4c>
 8001816:	2301      	movs	r3, #1
 8001818:	e002      	b.n	8001820 <UpdateLEDStates+0x4c>
 800181a:	2304      	movs	r3, #4
 800181c:	e000      	b.n	8001820 <UpdateLEDStates+0x4c>
 800181e:	2306      	movs	r3, #6
 8001820:	1dfa      	adds	r2, r7, #7
 8001822:	7013      	strb	r3, [r2, #0]
				redBit = (i == 0) ? 7 : (i == 1) ? 5 : (i == 2) ? 3 : 0;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00b      	beq.n	8001842 <UpdateLEDStates+0x6e>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d006      	beq.n	800183e <UpdateLEDStates+0x6a>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d101      	bne.n	800183a <UpdateLEDStates+0x66>
 8001836:	2303      	movs	r3, #3
 8001838:	e004      	b.n	8001844 <UpdateLEDStates+0x70>
 800183a:	2300      	movs	r3, #0
 800183c:	e002      	b.n	8001844 <UpdateLEDStates+0x70>
 800183e:	2305      	movs	r3, #5
 8001840:	e000      	b.n	8001844 <UpdateLEDStates+0x70>
 8001842:	2307      	movs	r3, #7
 8001844:	1dba      	adds	r2, r7, #6
 8001846:	7013      	strb	r3, [r2, #0]
 8001848:	e0c4      	b.n	80019d4 <UpdateLEDStates+0x200>
			} else {
				// Диски 4-7: второй байт
				greenBit = (i == 4) ? 7 : (i == 5) ? 4 : (i == 6) ? 3 : 1;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b04      	cmp	r3, #4
 800184e:	d00b      	beq.n	8001868 <UpdateLEDStates+0x94>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b05      	cmp	r3, #5
 8001854:	d006      	beq.n	8001864 <UpdateLEDStates+0x90>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2b06      	cmp	r3, #6
 800185a:	d101      	bne.n	8001860 <UpdateLEDStates+0x8c>
 800185c:	2303      	movs	r3, #3
 800185e:	e004      	b.n	800186a <UpdateLEDStates+0x96>
 8001860:	2301      	movs	r3, #1
 8001862:	e002      	b.n	800186a <UpdateLEDStates+0x96>
 8001864:	2304      	movs	r3, #4
 8001866:	e000      	b.n	800186a <UpdateLEDStates+0x96>
 8001868:	2307      	movs	r3, #7
 800186a:	1dfa      	adds	r2, r7, #7
 800186c:	7013      	strb	r3, [r2, #0]
				redBit = (i == 4) ? 6 : (i == 5) ? 5 : (i == 6) ? 2 : 0;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2b04      	cmp	r3, #4
 8001872:	d00b      	beq.n	800188c <UpdateLEDStates+0xb8>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b05      	cmp	r3, #5
 8001878:	d006      	beq.n	8001888 <UpdateLEDStates+0xb4>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b06      	cmp	r3, #6
 800187e:	d101      	bne.n	8001884 <UpdateLEDStates+0xb0>
 8001880:	2302      	movs	r3, #2
 8001882:	e004      	b.n	800188e <UpdateLEDStates+0xba>
 8001884:	2300      	movs	r3, #0
 8001886:	e002      	b.n	800188e <UpdateLEDStates+0xba>
 8001888:	2305      	movs	r3, #5
 800188a:	e000      	b.n	800188e <UpdateLEDStates+0xba>
 800188c:	2306      	movs	r3, #6
 800188e:	1dba      	adds	r2, r7, #6
 8001890:	7013      	strb	r3, [r2, #0]
 8001892:	e09f      	b.n	80019d4 <UpdateLEDStates+0x200>
			}
		} else if (i < 16) {
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b0f      	cmp	r3, #15
 8001898:	dc4e      	bgt.n	8001938 <UpdateLEDStates+0x164>
			channel = channel_two;
 800189a:	4b79      	ldr	r3, [pc, #484]	@ (8001a80 <UpdateLEDStates+0x2ac>)
 800189c:	60bb      	str	r3, [r7, #8]
			if (i < 12) {
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b0b      	cmp	r3, #11
 80018a2:	dc24      	bgt.n	80018ee <UpdateLEDStates+0x11a>
				// Диски 8-11: первый байт
				greenBit = (i == 8) ? 6 : (i == 9) ? 5 : (i == 10) ? 2 : 1;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d00b      	beq.n	80018c2 <UpdateLEDStates+0xee>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2b09      	cmp	r3, #9
 80018ae:	d006      	beq.n	80018be <UpdateLEDStates+0xea>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b0a      	cmp	r3, #10
 80018b4:	d101      	bne.n	80018ba <UpdateLEDStates+0xe6>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e004      	b.n	80018c4 <UpdateLEDStates+0xf0>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e002      	b.n	80018c4 <UpdateLEDStates+0xf0>
 80018be:	2305      	movs	r3, #5
 80018c0:	e000      	b.n	80018c4 <UpdateLEDStates+0xf0>
 80018c2:	2306      	movs	r3, #6
 80018c4:	1dfa      	adds	r2, r7, #7
 80018c6:	7013      	strb	r3, [r2, #0]
				redBit = (i == 8) ? 7 : (i == 9) ? 4 : (i == 10) ? 3 : 0;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d00b      	beq.n	80018e6 <UpdateLEDStates+0x112>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2b09      	cmp	r3, #9
 80018d2:	d006      	beq.n	80018e2 <UpdateLEDStates+0x10e>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b0a      	cmp	r3, #10
 80018d8:	d101      	bne.n	80018de <UpdateLEDStates+0x10a>
 80018da:	2303      	movs	r3, #3
 80018dc:	e004      	b.n	80018e8 <UpdateLEDStates+0x114>
 80018de:	2300      	movs	r3, #0
 80018e0:	e002      	b.n	80018e8 <UpdateLEDStates+0x114>
 80018e2:	2304      	movs	r3, #4
 80018e4:	e000      	b.n	80018e8 <UpdateLEDStates+0x114>
 80018e6:	2307      	movs	r3, #7
 80018e8:	1dba      	adds	r2, r7, #6
 80018ea:	7013      	strb	r3, [r2, #0]
 80018ec:	e072      	b.n	80019d4 <UpdateLEDStates+0x200>
			} else {
				// Диски 12-15: второй байт
				greenBit = (i == 12) ? 6 : (i == 13) ? 4 : (i == 14) ? 2 : 1;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2b0c      	cmp	r3, #12
 80018f2:	d00b      	beq.n	800190c <UpdateLEDStates+0x138>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b0d      	cmp	r3, #13
 80018f8:	d006      	beq.n	8001908 <UpdateLEDStates+0x134>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b0e      	cmp	r3, #14
 80018fe:	d101      	bne.n	8001904 <UpdateLEDStates+0x130>
 8001900:	2302      	movs	r3, #2
 8001902:	e004      	b.n	800190e <UpdateLEDStates+0x13a>
 8001904:	2301      	movs	r3, #1
 8001906:	e002      	b.n	800190e <UpdateLEDStates+0x13a>
 8001908:	2304      	movs	r3, #4
 800190a:	e000      	b.n	800190e <UpdateLEDStates+0x13a>
 800190c:	2306      	movs	r3, #6
 800190e:	1dfa      	adds	r2, r7, #7
 8001910:	7013      	strb	r3, [r2, #0]
				redBit = (i == 12) ? 7 : (i == 13) ? 5 : (i == 14) ? 3 : 0;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b0c      	cmp	r3, #12
 8001916:	d00b      	beq.n	8001930 <UpdateLEDStates+0x15c>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b0d      	cmp	r3, #13
 800191c:	d006      	beq.n	800192c <UpdateLEDStates+0x158>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2b0e      	cmp	r3, #14
 8001922:	d101      	bne.n	8001928 <UpdateLEDStates+0x154>
 8001924:	2303      	movs	r3, #3
 8001926:	e004      	b.n	8001932 <UpdateLEDStates+0x15e>
 8001928:	2300      	movs	r3, #0
 800192a:	e002      	b.n	8001932 <UpdateLEDStates+0x15e>
 800192c:	2305      	movs	r3, #5
 800192e:	e000      	b.n	8001932 <UpdateLEDStates+0x15e>
 8001930:	2307      	movs	r3, #7
 8001932:	1dba      	adds	r2, r7, #6
 8001934:	7013      	strb	r3, [r2, #0]
 8001936:	e04d      	b.n	80019d4 <UpdateLEDStates+0x200>
			}
		} else {
			channel = channel_three;
 8001938:	4b52      	ldr	r3, [pc, #328]	@ (8001a84 <UpdateLEDStates+0x2b0>)
 800193a:	60bb      	str	r3, [r7, #8]
			if (i < 20) {
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b13      	cmp	r3, #19
 8001940:	dc24      	bgt.n	800198c <UpdateLEDStates+0x1b8>
				// Диски 16-19: первый байт
				greenBit = (i == 16) ? 7 : (i == 17) ? 5 : (i == 18) ? 3 : 1;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2b10      	cmp	r3, #16
 8001946:	d00b      	beq.n	8001960 <UpdateLEDStates+0x18c>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b11      	cmp	r3, #17
 800194c:	d006      	beq.n	800195c <UpdateLEDStates+0x188>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2b12      	cmp	r3, #18
 8001952:	d101      	bne.n	8001958 <UpdateLEDStates+0x184>
 8001954:	2303      	movs	r3, #3
 8001956:	e004      	b.n	8001962 <UpdateLEDStates+0x18e>
 8001958:	2301      	movs	r3, #1
 800195a:	e002      	b.n	8001962 <UpdateLEDStates+0x18e>
 800195c:	2305      	movs	r3, #5
 800195e:	e000      	b.n	8001962 <UpdateLEDStates+0x18e>
 8001960:	2307      	movs	r3, #7
 8001962:	1dfa      	adds	r2, r7, #7
 8001964:	7013      	strb	r3, [r2, #0]
				redBit = (i == 16) ? 6 : (i == 17) ? 4 : (i == 18) ? 2 : 0;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2b10      	cmp	r3, #16
 800196a:	d00b      	beq.n	8001984 <UpdateLEDStates+0x1b0>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2b11      	cmp	r3, #17
 8001970:	d006      	beq.n	8001980 <UpdateLEDStates+0x1ac>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2b12      	cmp	r3, #18
 8001976:	d101      	bne.n	800197c <UpdateLEDStates+0x1a8>
 8001978:	2302      	movs	r3, #2
 800197a:	e004      	b.n	8001986 <UpdateLEDStates+0x1b2>
 800197c:	2300      	movs	r3, #0
 800197e:	e002      	b.n	8001986 <UpdateLEDStates+0x1b2>
 8001980:	2304      	movs	r3, #4
 8001982:	e000      	b.n	8001986 <UpdateLEDStates+0x1b2>
 8001984:	2306      	movs	r3, #6
 8001986:	1dba      	adds	r2, r7, #6
 8001988:	7013      	strb	r3, [r2, #0]
 800198a:	e023      	b.n	80019d4 <UpdateLEDStates+0x200>
			} else {
				// Диски 20-23: второй байт
				greenBit = (i == 20) ? 6 : (i == 21) ? 4 : (i == 22) ? 3 : 1;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b14      	cmp	r3, #20
 8001990:	d00b      	beq.n	80019aa <UpdateLEDStates+0x1d6>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2b15      	cmp	r3, #21
 8001996:	d006      	beq.n	80019a6 <UpdateLEDStates+0x1d2>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b16      	cmp	r3, #22
 800199c:	d101      	bne.n	80019a2 <UpdateLEDStates+0x1ce>
 800199e:	2303      	movs	r3, #3
 80019a0:	e004      	b.n	80019ac <UpdateLEDStates+0x1d8>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e002      	b.n	80019ac <UpdateLEDStates+0x1d8>
 80019a6:	2304      	movs	r3, #4
 80019a8:	e000      	b.n	80019ac <UpdateLEDStates+0x1d8>
 80019aa:	2306      	movs	r3, #6
 80019ac:	1dfa      	adds	r2, r7, #7
 80019ae:	7013      	strb	r3, [r2, #0]
				redBit = (i == 20) ? 7 : (i == 21) ? 5 : (i == 22) ? 2 : 0;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b14      	cmp	r3, #20
 80019b4:	d00b      	beq.n	80019ce <UpdateLEDStates+0x1fa>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b15      	cmp	r3, #21
 80019ba:	d006      	beq.n	80019ca <UpdateLEDStates+0x1f6>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b16      	cmp	r3, #22
 80019c0:	d101      	bne.n	80019c6 <UpdateLEDStates+0x1f2>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e004      	b.n	80019d0 <UpdateLEDStates+0x1fc>
 80019c6:	2300      	movs	r3, #0
 80019c8:	e002      	b.n	80019d0 <UpdateLEDStates+0x1fc>
 80019ca:	2305      	movs	r3, #5
 80019cc:	e000      	b.n	80019d0 <UpdateLEDStates+0x1fc>
 80019ce:	2307      	movs	r3, #7
 80019d0:	1dba      	adds	r2, r7, #6
 80019d2:	7013      	strb	r3, [r2, #0]
			}
		}
		uint8_t byteIndex = (i < 4 || (i >= 8 && i < 12) || (i >= 16 && i < 20)) ? 2 : 1;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	dd0b      	ble.n	80019f2 <UpdateLEDStates+0x21e>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2b07      	cmp	r3, #7
 80019de:	dd02      	ble.n	80019e6 <UpdateLEDStates+0x212>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b0b      	cmp	r3, #11
 80019e4:	dd05      	ble.n	80019f2 <UpdateLEDStates+0x21e>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	dd04      	ble.n	80019f6 <UpdateLEDStates+0x222>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b13      	cmp	r3, #19
 80019f0:	dc01      	bgt.n	80019f6 <UpdateLEDStates+0x222>
 80019f2:	2202      	movs	r2, #2
 80019f4:	e000      	b.n	80019f8 <UpdateLEDStates+0x224>
 80019f6:	2201      	movs	r2, #1
 80019f8:	1d7b      	adds	r3, r7, #5
 80019fa:	701a      	strb	r2, [r3, #0]

		// Управление светодиодами
		if (disks[i].isConnected) {
 80019fc:	4b22      	ldr	r3, [pc, #136]	@ (8001a88 <UpdateLEDStates+0x2b4>)
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	0092      	lsls	r2, r2, #2
 8001a02:	5cd3      	ldrb	r3, [r2, r3]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d100      	bne.n	8001a0a <UpdateLEDStates+0x236>
 8001a08:	e12d      	b.n	8001c66 <UpdateLEDStates+0x492>
			if (disks[i].error) {
 8001a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001a88 <UpdateLEDStates+0x2b4>)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	18d3      	adds	r3, r2, r3
 8001a12:	3302      	adds	r3, #2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d038      	beq.n	8001a8c <UpdateLEDStates+0x2b8>
				// Ошибка: красный светодиод горит постоянно
				channel[byteIndex] |= (1 << (greenBit % 8));  // Выключаем зеленый светодиод
 8001a1a:	1d7b      	adds	r3, r7, #5
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	18d3      	adds	r3, r2, r3
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b25a      	sxtb	r2, r3
 8001a26:	1dfb      	adds	r3, r7, #7
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2107      	movs	r1, #7
 8001a2c:	400b      	ands	r3, r1
 8001a2e:	2101      	movs	r1, #1
 8001a30:	4099      	lsls	r1, r3
 8001a32:	000b      	movs	r3, r1
 8001a34:	b25b      	sxtb	r3, r3
 8001a36:	4313      	orrs	r3, r2
 8001a38:	b259      	sxtb	r1, r3
 8001a3a:	1d7b      	adds	r3, r7, #5
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	18d3      	adds	r3, r2, r3
 8001a42:	b2ca      	uxtb	r2, r1
 8001a44:	701a      	strb	r2, [r3, #0]
				channel[byteIndex] &= ~(1 << (redBit % 8)); // Включаем красный светодиод
 8001a46:	1d7b      	adds	r3, r7, #5
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	18d3      	adds	r3, r2, r3
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b25b      	sxtb	r3, r3
 8001a52:	1dba      	adds	r2, r7, #6
 8001a54:	7812      	ldrb	r2, [r2, #0]
 8001a56:	2107      	movs	r1, #7
 8001a58:	400a      	ands	r2, r1
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	4091      	lsls	r1, r2
 8001a5e:	000a      	movs	r2, r1
 8001a60:	b252      	sxtb	r2, r2
 8001a62:	43d2      	mvns	r2, r2
 8001a64:	b252      	sxtb	r2, r2
 8001a66:	4013      	ands	r3, r2
 8001a68:	b259      	sxtb	r1, r3
 8001a6a:	1d7b      	adds	r3, r7, #5
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	18d3      	adds	r3, r2, r3
 8001a72:	b2ca      	uxtb	r2, r1
 8001a74:	701a      	strb	r2, [r3, #0]
 8001a76:	e122      	b.n	8001cbe <UpdateLEDStates+0x4ea>
 8001a78:	200000b4 	.word	0x200000b4
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000004 	.word	0x20000004
 8001a84:	20000008 	.word	0x20000008
 8001a88:	200002b8 	.word	0x200002b8
			} else if (disks[i].locate) {
 8001a8c:	4a92      	ldr	r2, [pc, #584]	@ (8001cd8 <UpdateLEDStates+0x504>)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	18d3      	adds	r3, r2, r3
 8001a94:	3303      	adds	r3, #3
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d061      	beq.n	8001b60 <UpdateLEDStates+0x38c>
				// Локация: зеленый и красный светодиоды мигают
				if (blinkState) {
 8001a9c:	4b8f      	ldr	r3, [pc, #572]	@ (8001cdc <UpdateLEDStates+0x508>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d030      	beq.n	8001b06 <UpdateLEDStates+0x332>
					channel[byteIndex] &= ~(1 << (greenBit % 8)); // Включаем зеленый светодиод
 8001aa4:	1d7b      	adds	r3, r7, #5
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	18d3      	adds	r3, r2, r3
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	b25b      	sxtb	r3, r3
 8001ab0:	1dfa      	adds	r2, r7, #7
 8001ab2:	7812      	ldrb	r2, [r2, #0]
 8001ab4:	2107      	movs	r1, #7
 8001ab6:	400a      	ands	r2, r1
 8001ab8:	2101      	movs	r1, #1
 8001aba:	4091      	lsls	r1, r2
 8001abc:	000a      	movs	r2, r1
 8001abe:	b252      	sxtb	r2, r2
 8001ac0:	43d2      	mvns	r2, r2
 8001ac2:	b252      	sxtb	r2, r2
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	b259      	sxtb	r1, r3
 8001ac8:	1d7b      	adds	r3, r7, #5
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	18d3      	adds	r3, r2, r3
 8001ad0:	b2ca      	uxtb	r2, r1
 8001ad2:	701a      	strb	r2, [r3, #0]
					channel[byteIndex] &= ~(1 << (redBit % 8)); // Включаем красный светодиод
 8001ad4:	1d7b      	adds	r3, r7, #5
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	18d3      	adds	r3, r2, r3
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	1dba      	adds	r2, r7, #6
 8001ae2:	7812      	ldrb	r2, [r2, #0]
 8001ae4:	2107      	movs	r1, #7
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4091      	lsls	r1, r2
 8001aec:	000a      	movs	r2, r1
 8001aee:	b252      	sxtb	r2, r2
 8001af0:	43d2      	mvns	r2, r2
 8001af2:	b252      	sxtb	r2, r2
 8001af4:	4013      	ands	r3, r2
 8001af6:	b259      	sxtb	r1, r3
 8001af8:	1d7b      	adds	r3, r7, #5
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	18d3      	adds	r3, r2, r3
 8001b00:	b2ca      	uxtb	r2, r1
 8001b02:	701a      	strb	r2, [r3, #0]
 8001b04:	e0db      	b.n	8001cbe <UpdateLEDStates+0x4ea>
				} else {
					channel[byteIndex] |= (1 << (greenBit % 8));  // Выключаем зеленый светодиод
 8001b06:	1d7b      	adds	r3, r7, #5
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	18d3      	adds	r3, r2, r3
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b25a      	sxtb	r2, r3
 8001b12:	1dfb      	adds	r3, r7, #7
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2107      	movs	r1, #7
 8001b18:	400b      	ands	r3, r1
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4099      	lsls	r1, r3
 8001b1e:	000b      	movs	r3, r1
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	4313      	orrs	r3, r2
 8001b24:	b259      	sxtb	r1, r3
 8001b26:	1d7b      	adds	r3, r7, #5
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	18d3      	adds	r3, r2, r3
 8001b2e:	b2ca      	uxtb	r2, r1
 8001b30:	701a      	strb	r2, [r3, #0]
					channel[byteIndex] |= (1 << (redBit % 8));  // Выключаем красный светодиод
 8001b32:	1d7b      	adds	r3, r7, #5
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	18d3      	adds	r3, r2, r3
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b25a      	sxtb	r2, r3
 8001b3e:	1dbb      	adds	r3, r7, #6
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2107      	movs	r1, #7
 8001b44:	400b      	ands	r3, r1
 8001b46:	2101      	movs	r1, #1
 8001b48:	4099      	lsls	r1, r3
 8001b4a:	000b      	movs	r3, r1
 8001b4c:	b25b      	sxtb	r3, r3
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	b259      	sxtb	r1, r3
 8001b52:	1d7b      	adds	r3, r7, #5
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	18d3      	adds	r3, r2, r3
 8001b5a:	b2ca      	uxtb	r2, r1
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	e0ae      	b.n	8001cbe <UpdateLEDStates+0x4ea>
				}
			} else if (disks[i].activity) {
 8001b60:	4a5d      	ldr	r2, [pc, #372]	@ (8001cd8 <UpdateLEDStates+0x504>)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	18d3      	adds	r3, r2, r3
 8001b68:	3301      	adds	r3, #1
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d033      	beq.n	8001bd8 <UpdateLEDStates+0x404>
				// Активность: зеленый светодиод мигает
				if (blinkState) {
 8001b70:	4b5a      	ldr	r3, [pc, #360]	@ (8001cdc <UpdateLEDStates+0x508>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d018      	beq.n	8001baa <UpdateLEDStates+0x3d6>
					channel[byteIndex] &= ~(1 << (greenBit % 8)); // Включаем зеленый светодиод
 8001b78:	1d7b      	adds	r3, r7, #5
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	18d3      	adds	r3, r2, r3
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	b25b      	sxtb	r3, r3
 8001b84:	1dfa      	adds	r2, r7, #7
 8001b86:	7812      	ldrb	r2, [r2, #0]
 8001b88:	2107      	movs	r1, #7
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	4091      	lsls	r1, r2
 8001b90:	000a      	movs	r2, r1
 8001b92:	b252      	sxtb	r2, r2
 8001b94:	43d2      	mvns	r2, r2
 8001b96:	b252      	sxtb	r2, r2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	b259      	sxtb	r1, r3
 8001b9c:	1d7b      	adds	r3, r7, #5
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	18d3      	adds	r3, r2, r3
 8001ba4:	b2ca      	uxtb	r2, r1
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	e089      	b.n	8001cbe <UpdateLEDStates+0x4ea>
				} else {
					channel[byteIndex] |= (1 << (greenBit % 8));  // Выключаем зеленый светодиод
 8001baa:	1d7b      	adds	r3, r7, #5
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	18d3      	adds	r3, r2, r3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b25a      	sxtb	r2, r3
 8001bb6:	1dfb      	adds	r3, r7, #7
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2107      	movs	r1, #7
 8001bbc:	400b      	ands	r3, r1
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	4099      	lsls	r1, r3
 8001bc2:	000b      	movs	r3, r1
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	b259      	sxtb	r1, r3
 8001bca:	1d7b      	adds	r3, r7, #5
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	18d3      	adds	r3, r2, r3
 8001bd2:	b2ca      	uxtb	r2, r1
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	e072      	b.n	8001cbe <UpdateLEDStates+0x4ea>
				}
			} else if (disks[i].error == 0 && disks[i].locate == 0 && disks[i].activity == 0)
 8001bd8:	4a3f      	ldr	r2, [pc, #252]	@ (8001cd8 <UpdateLEDStates+0x504>)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	18d3      	adds	r3, r2, r3
 8001be0:	3302      	adds	r3, #2
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d16a      	bne.n	8001cbe <UpdateLEDStates+0x4ea>
 8001be8:	4a3b      	ldr	r2, [pc, #236]	@ (8001cd8 <UpdateLEDStates+0x504>)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	18d3      	adds	r3, r2, r3
 8001bf0:	3303      	adds	r3, #3
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d162      	bne.n	8001cbe <UpdateLEDStates+0x4ea>
 8001bf8:	4a37      	ldr	r2, [pc, #220]	@ (8001cd8 <UpdateLEDStates+0x504>)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	18d3      	adds	r3, r2, r3
 8001c00:	3301      	adds	r3, #1
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d15a      	bne.n	8001cbe <UpdateLEDStates+0x4ea>
			{
				channel[byteIndex] &= ~ (1 << (greenBit % 8));  // Включаем зеленый светодиод
 8001c08:	1d7b      	adds	r3, r7, #5
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	18d3      	adds	r3, r2, r3
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b25b      	sxtb	r3, r3
 8001c14:	1dfa      	adds	r2, r7, #7
 8001c16:	7812      	ldrb	r2, [r2, #0]
 8001c18:	2107      	movs	r1, #7
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	4091      	lsls	r1, r2
 8001c20:	000a      	movs	r2, r1
 8001c22:	b252      	sxtb	r2, r2
 8001c24:	43d2      	mvns	r2, r2
 8001c26:	b252      	sxtb	r2, r2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	b259      	sxtb	r1, r3
 8001c2c:	1d7b      	adds	r3, r7, #5
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	18d3      	adds	r3, r2, r3
 8001c34:	b2ca      	uxtb	r2, r1
 8001c36:	701a      	strb	r2, [r3, #0]
				channel[byteIndex] |= (1 << (redBit % 8));  // Выключаем красный светодиод
 8001c38:	1d7b      	adds	r3, r7, #5
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	18d3      	adds	r3, r2, r3
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	b25a      	sxtb	r2, r3
 8001c44:	1dbb      	adds	r3, r7, #6
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2107      	movs	r1, #7
 8001c4a:	400b      	ands	r3, r1
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	4099      	lsls	r1, r3
 8001c50:	000b      	movs	r3, r1
 8001c52:	b25b      	sxtb	r3, r3
 8001c54:	4313      	orrs	r3, r2
 8001c56:	b259      	sxtb	r1, r3
 8001c58:	1d7b      	adds	r3, r7, #5
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	18d3      	adds	r3, r2, r3
 8001c60:	b2ca      	uxtb	r2, r1
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	e02b      	b.n	8001cbe <UpdateLEDStates+0x4ea>
			}
		} else
		{
			channel[byteIndex] |= (1 << (greenBit % 8));  // Выключаем зеленый светодиод
 8001c66:	1d7b      	adds	r3, r7, #5
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	18d3      	adds	r3, r2, r3
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	b25a      	sxtb	r2, r3
 8001c72:	1dfb      	adds	r3, r7, #7
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2107      	movs	r1, #7
 8001c78:	400b      	ands	r3, r1
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	4099      	lsls	r1, r3
 8001c7e:	000b      	movs	r3, r1
 8001c80:	b25b      	sxtb	r3, r3
 8001c82:	4313      	orrs	r3, r2
 8001c84:	b259      	sxtb	r1, r3
 8001c86:	1d7b      	adds	r3, r7, #5
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	18d3      	adds	r3, r2, r3
 8001c8e:	b2ca      	uxtb	r2, r1
 8001c90:	701a      	strb	r2, [r3, #0]
			channel[byteIndex] |= (1 << (redBit % 8));  // Выключаем красный светодиод
 8001c92:	1d7b      	adds	r3, r7, #5
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	18d3      	adds	r3, r2, r3
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	b25a      	sxtb	r2, r3
 8001c9e:	1dbb      	adds	r3, r7, #6
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2107      	movs	r1, #7
 8001ca4:	400b      	ands	r3, r1
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4099      	lsls	r1, r3
 8001caa:	000b      	movs	r3, r1
 8001cac:	b25b      	sxtb	r3, r3
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	b259      	sxtb	r1, r3
 8001cb2:	1d7b      	adds	r3, r7, #5
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	18d3      	adds	r3, r2, r3
 8001cba:	b2ca      	uxtb	r2, r1
 8001cbc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_DISKS; ++i) {
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b17      	cmp	r3, #23
 8001cc8:	dc00      	bgt.n	8001ccc <UpdateLEDStates+0x4f8>
 8001cca:	e591      	b.n	80017f0 <UpdateLEDStates+0x1c>
		}
	}

	// Обновляем светодиоды на расширителе
	Set_Led();
 8001ccc:	f7ff fd1a 	bl	8001704 <Set_Led>
}
 8001cd0:	46c0      	nop			@ (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b004      	add	sp, #16
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200002b8 	.word	0x200002b8
 8001cdc:	200000b4 	.word	0x200000b4

08001ce0 <UpdateLEDs>:

void UpdateLEDs() {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 8001ce6:	f000 ff3f 	bl	8002b68 <HAL_GetTick>
 8001cea:	0003      	movs	r3, r0
 8001cec:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < 2; i++) {
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	e05c      	b.n	8001dae <UpdateLEDs+0xce>
		uint8_t adapter_state = (i == 0) ? adapter1_state : adapter2_state;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d102      	bne.n	8001d00 <UpdateLEDs+0x20>
 8001cfa:	4b31      	ldr	r3, [pc, #196]	@ (8001dc0 <UpdateLEDs+0xe0>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	e001      	b.n	8001d04 <UpdateLEDs+0x24>
 8001d00:	4b30      	ldr	r3, [pc, #192]	@ (8001dc4 <UpdateLEDs+0xe4>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	1dfa      	adds	r2, r7, #7
 8001d06:	7013      	strb	r3, [r2, #0]
		uint8_t adapter_attach = (i == 0) ? MB1_attach : MB2_attach;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <UpdateLEDs+0x34>
 8001d0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc8 <UpdateLEDs+0xe8>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	e001      	b.n	8001d18 <UpdateLEDs+0x38>
 8001d14:	4b2d      	ldr	r3, [pc, #180]	@ (8001dcc <UpdateLEDs+0xec>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	1dba      	adds	r2, r7, #6
 8001d1a:	7013      	strb	r3, [r2, #0]
		LEDState* led = &leds[i];
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	011a      	lsls	r2, r3, #4
 8001d20:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd0 <UpdateLEDs+0xf0>)
 8001d22:	18d3      	adds	r3, r2, r3
 8001d24:	603b      	str	r3, [r7, #0]

		if (adapter_attach) {
 8001d26:	1dbb      	adds	r3, r7, #6
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <UpdateLEDs+0x66>
			// Адаптер не подключен - выключаем светодиод
			HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, GPIO_PIN_RESET);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	889b      	ldrh	r3, [r3, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	0019      	movs	r1, r3
 8001d3a:	f001 fba4 	bl	8003486 <HAL_GPIO_WritePin>
			led->is_blinking = 0;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2200      	movs	r2, #0
 8001d42:	731a      	strb	r2, [r3, #12]
 8001d44:	e030      	b.n	8001da8 <UpdateLEDs+0xc8>
		}
		else if (led->is_blinking) {
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	7b1b      	ldrb	r3, [r3, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d01f      	beq.n	8001d8e <UpdateLEDs+0xae>
			// Мигание в процессе
			if (current_time - led->blink_start_time < 5000) { // Мигаем 5 секунд
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd4 <UpdateLEDs+0xf4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d925      	bls.n	8001da8 <UpdateLEDs+0xc8>
				// Состояние мигания управляется в прерывании таймера
			}
			else {
				// Завершаем мигание
				led->is_blinking = 0;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	731a      	strb	r2, [r3, #12]
				if (adapter_state == 1) {
 8001d62:	1dfb      	adds	r3, r7, #7
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d108      	bne.n	8001d7c <UpdateLEDs+0x9c>
					HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, GPIO_PIN_SET); // Включаем
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	889b      	ldrh	r3, [r3, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	0019      	movs	r1, r3
 8001d76:	f001 fb86 	bl	8003486 <HAL_GPIO_WritePin>
 8001d7a:	e015      	b.n	8001da8 <UpdateLEDs+0xc8>
				} else {
					HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, GPIO_PIN_RESET); // Выключаем
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	889b      	ldrh	r3, [r3, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	0019      	movs	r1, r3
 8001d88:	f001 fb7d 	bl	8003486 <HAL_GPIO_WritePin>
 8001d8c:	e00c      	b.n	8001da8 <UpdateLEDs+0xc8>
				}
			}
		}
		else {
			// Обычный режим
			HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin,
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	8899      	ldrh	r1, [r3, #4]
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	425a      	negs	r2, r3
 8001d9e:	4153      	adcs	r3, r2
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	001a      	movs	r2, r3
 8001da4:	f001 fb6f 	bl	8003486 <HAL_GPIO_WritePin>
	for (int i = 0; i < 2; i++) {
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3301      	adds	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	dd9f      	ble.n	8001cf4 <UpdateLEDs+0x14>
					adapter_state == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
		}
	}
}
 8001db4:	46c0      	nop			@ (mov r8, r8)
 8001db6:	46c0      	nop			@ (mov r8, r8)
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b004      	add	sp, #16
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	20000318 	.word	0x20000318
 8001dc4:	20000319 	.word	0x20000319
 8001dc8:	2000006f 	.word	0x2000006f
 8001dcc:	20000070 	.word	0x20000070
 8001dd0:	2000002c 	.word	0x2000002c
 8001dd4:	00001387 	.word	0x00001387

08001dd8 <StartBlinking>:
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);


}
// Функция для запуска мигания светодиода
void StartBlinking(uint8_t adapter_num) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	0002      	movs	r2, r0
 8001de0:	1dfb      	adds	r3, r7, #7
 8001de2:	701a      	strb	r2, [r3, #0]
	LEDState *led = &leds[adapter_num - 1];
 8001de4:	1dfb      	adds	r3, r7, #7
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	011a      	lsls	r2, r3, #4
 8001dec:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <StartBlinking+0x44>)
 8001dee:	18d3      	adds	r3, r2, r3
 8001df0:	60fb      	str	r3, [r7, #12]
	led->is_blinking = 1;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	731a      	strb	r2, [r3, #12]
	led->blink_start_time = HAL_GetTick();
 8001df8:	f000 feb6 	bl	8002b68 <HAL_GetTick>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, GPIO_PIN_SET); // Начинаем с включенного состояния
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	889b      	ldrh	r3, [r3, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	f001 fb3a 	bl	8003486 <HAL_GPIO_WritePin>

}
 8001e12:	46c0      	nop			@ (mov r8, r8)
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b004      	add	sp, #16
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			@ (mov r8, r8)
 8001e1c:	2000002c 	.word	0x2000002c

08001e20 <ProcessCondition>:
static void MX_TIM2_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
//void InitializeDiskPins();
void ProcessCondition()
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
	if (MB1_attach == 0) {
 8001e24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea0 <ProcessCondition+0x80>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10f      	bne.n	8001e4c <ProcessCondition+0x2c>
		if (HAL_GPIO_ReadPin(MB1_BITCH_GPIO_Port, MB1_BITCH_Pin) == 1)
 8001e2c:	23a0      	movs	r3, #160	@ 0xa0
 8001e2e:	05db      	lsls	r3, r3, #23
 8001e30:	2108      	movs	r1, #8
 8001e32:	0018      	movs	r0, r3
 8001e34:	f001 fb0a 	bl	800344c <HAL_GPIO_ReadPin>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d103      	bne.n	8001e46 <ProcessCondition+0x26>
		{
			adapter1_state = 0;}
 8001e3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <ProcessCondition+0x84>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e002      	b.n	8001e4c <ProcessCondition+0x2c>
		else adapter1_state = 1;
 8001e46:	4b17      	ldr	r3, [pc, #92]	@ (8001ea4 <ProcessCondition+0x84>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
	}

	if (MB2_attach == 0) {
 8001e4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <ProcessCondition+0x88>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10f      	bne.n	8001e74 <ProcessCondition+0x54>
		if (HAL_GPIO_ReadPin(MB2_BITCH_GPIO_Port, MB2_BITCH_Pin) == 1)
 8001e54:	23a0      	movs	r3, #160	@ 0xa0
 8001e56:	05db      	lsls	r3, r3, #23
 8001e58:	2120      	movs	r1, #32
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f001 faf6 	bl	800344c <HAL_GPIO_ReadPin>
 8001e60:	0003      	movs	r3, r0
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d103      	bne.n	8001e6e <ProcessCondition+0x4e>
		{
			adapter2_state = 0;
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <ProcessCondition+0x8c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	e002      	b.n	8001e74 <ProcessCondition+0x54>
		}else adapter2_state = 1;
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <ProcessCondition+0x8c>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
	}
	MB1_attach = HAL_GPIO_ReadPin(MB1_ATTACH_GPIO_Port, MB1_ATTACH_Pin);
 8001e74:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <ProcessCondition+0x90>)
 8001e76:	2101      	movs	r1, #1
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f001 fae7 	bl	800344c <HAL_GPIO_ReadPin>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	001a      	movs	r2, r3
 8001e82:	4b07      	ldr	r3, [pc, #28]	@ (8001ea0 <ProcessCondition+0x80>)
 8001e84:	701a      	strb	r2, [r3, #0]
	MB2_attach = HAL_GPIO_ReadPin(MB2_ATTACH_GPIO_Port, MB2_ATTACH_Pin);
 8001e86:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <ProcessCondition+0x94>)
 8001e88:	2120      	movs	r1, #32
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f001 fade 	bl	800344c <HAL_GPIO_ReadPin>
 8001e90:	0003      	movs	r3, r0
 8001e92:	001a      	movs	r2, r3
 8001e94:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <ProcessCondition+0x88>)
 8001e96:	701a      	strb	r2, [r3, #0]
}
 8001e98:	46c0      	nop			@ (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	2000006f 	.word	0x2000006f
 8001ea4:	20000318 	.word	0x20000318
 8001ea8:	20000070 	.word	0x20000070
 8001eac:	20000319 	.word	0x20000319
 8001eb0:	50000400 	.word	0x50000400
 8001eb4:	50000c00 	.word	0x50000c00

08001eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ebc:	f000 fdd8 	bl	8002a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec0:	f000 f83a 	bl	8001f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ec4:	f000 fa20 	bl	8002308 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ec8:	f000 fa08 	bl	80022dc <MX_DMA_Init>
  MX_I2C2_Init();
 8001ecc:	f000 f8bc 	bl	8002048 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001ed0:	f000 f9ac 	bl	800222c <MX_TIM3_Init>
  MX_TIM1_Init();
 8001ed4:	f000 f8f8 	bl	80020c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ed8:	f000 f952 	bl	8002180 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001edc:	f000 f886 	bl	8001fec <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


	ResetBus();
 8001ee0:	f7ff fabc 	bl	800145c <ResetBus>
	HAL_Delay(500);
 8001ee4:	23fa      	movs	r3, #250	@ 0xfa
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f000 fe47 	bl	8002b7c <HAL_Delay>
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	2007      	movs	r0, #7
 8001ef4:	f000 ff12 	bl	8002d1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001ef8:	2007      	movs	r0, #7
 8001efa:	f000 ff24 	bl	8002d46 <HAL_NVIC_EnableIRQ>
	ResetBus();
 8001efe:	f7ff faad 	bl	800145c <ResetBus>
	//InitializeDiskPins();

	Initialize_Disks();
 8001f02:	f7ff f835 	bl	8000f70 <Initialize_Disks>

	Set_devslp();
 8001f06:	f7fe ff99 	bl	8000e3c <Set_devslp>
	HAL_Delay(250);
 8001f0a:	20fa      	movs	r0, #250	@ 0xfa
 8001f0c:	f000 fe36 	bl	8002b7c <HAL_Delay>
	Read_disks_connected(); // Чтение подключенных дисков
 8001f10:	f7fe fda2 	bl	8000a58 <Read_disks_connected>
	HAL_Delay(250);
 8001f14:	20fa      	movs	r0, #250	@ 0xfa
 8001f16:	f000 fe31 	bl	8002b7c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim3);
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <main+0x7c>)
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f003 ff7d 	bl	8005e1c <HAL_TIM_Base_Start_IT>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HandleButtons();//buttons
 8001f22:	f7fe fca3 	bl	800086c <HandleButtons>
		ProcessCondition();
 8001f26:	f7ff ff7b 	bl	8001e20 <ProcessCondition>
		UpdateLEDs();
 8001f2a:	f7ff fed9 	bl	8001ce0 <UpdateLEDs>
		HandleButtons();//buttons
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	e7f7      	b.n	8001f22 <main+0x6a>
 8001f32:	46c0      	nop			@ (mov r8, r8)
 8001f34:	2000025c 	.word	0x2000025c

08001f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b093      	sub	sp, #76	@ 0x4c
 8001f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f3e:	2410      	movs	r4, #16
 8001f40:	193b      	adds	r3, r7, r4
 8001f42:	0018      	movs	r0, r3
 8001f44:	2338      	movs	r3, #56	@ 0x38
 8001f46:	001a      	movs	r2, r3
 8001f48:	2100      	movs	r1, #0
 8001f4a:	f004 fb9f 	bl	800668c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f4e:	003b      	movs	r3, r7
 8001f50:	0018      	movs	r0, r3
 8001f52:	2310      	movs	r3, #16
 8001f54:	001a      	movs	r2, r3
 8001f56:	2100      	movs	r1, #0
 8001f58:	f004 fb98 	bl	800668c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	0018      	movs	r0, r3
 8001f62:	f003 f82f 	bl	8004fc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f66:	193b      	adds	r3, r7, r4
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f6c:	193b      	adds	r3, r7, r4
 8001f6e:	2280      	movs	r2, #128	@ 0x80
 8001f70:	0252      	lsls	r2, r2, #9
 8001f72:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f74:	0021      	movs	r1, r4
 8001f76:	187b      	adds	r3, r7, r1
 8001f78:	2202      	movs	r2, #2
 8001f7a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f7c:	187b      	adds	r3, r7, r1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001f82:	187b      	adds	r3, r7, r1
 8001f84:	2200      	movs	r2, #0
 8001f86:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001f88:	187b      	adds	r3, r7, r1
 8001f8a:	2210      	movs	r2, #16
 8001f8c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	2280      	movs	r2, #128	@ 0x80
 8001f92:	0292      	lsls	r2, r2, #10
 8001f94:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001f96:	187b      	adds	r3, r7, r1
 8001f98:	22c0      	movs	r2, #192	@ 0xc0
 8001f9a:	04d2      	lsls	r2, r2, #19
 8001f9c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	2280      	movs	r2, #128	@ 0x80
 8001fa2:	0592      	lsls	r2, r2, #22
 8001fa4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa6:	187b      	adds	r3, r7, r1
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f003 f84b 	bl	8005044 <HAL_RCC_OscConfig>
 8001fae:	1e03      	subs	r3, r0, #0
 8001fb0:	d001      	beq.n	8001fb6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001fb2:	f000 fb85 	bl	80026c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb6:	003b      	movs	r3, r7
 8001fb8:	2207      	movs	r2, #7
 8001fba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fbc:	003b      	movs	r3, r7
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc2:	003b      	movs	r3, r7
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fc8:	003b      	movs	r3, r7
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fce:	003b      	movs	r3, r7
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f003 fb50 	bl	8005678 <HAL_RCC_ClockConfig>
 8001fd8:	1e03      	subs	r3, r0, #0
 8001fda:	d001      	beq.n	8001fe0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001fdc:	f000 fb70 	bl	80026c0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001fe0:	f003 fcd4 	bl	800598c <HAL_RCC_EnableCSS>
}
 8001fe4:	46c0      	nop			@ (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b013      	add	sp, #76	@ 0x4c
 8001fea:	bd90      	pop	{r4, r7, pc}

08001fec <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2102      	movs	r1, #2
 8001ff4:	2009      	movs	r0, #9
 8001ff6:	f000 fe91 	bl	8002d1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ffa:	2009      	movs	r0, #9
 8001ffc:	f000 fea3 	bl	8002d46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 0);
 8002000:	2200      	movs	r2, #0
 8002002:	2102      	movs	r1, #2
 8002004:	200a      	movs	r0, #10
 8002006:	f000 fe89 	bl	8002d1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800200a:	200a      	movs	r0, #10
 800200c:	f000 fe9b 	bl	8002d46 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002010:	2200      	movs	r2, #0
 8002012:	2102      	movs	r1, #2
 8002014:	200f      	movs	r0, #15
 8002016:	f000 fe81 	bl	8002d1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800201a:	200f      	movs	r0, #15
 800201c:	f000 fe93 	bl	8002d46 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8002020:	2200      	movs	r2, #0
 8002022:	2102      	movs	r1, #2
 8002024:	2010      	movs	r0, #16
 8002026:	f000 fe79 	bl	8002d1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800202a:	2010      	movs	r0, #16
 800202c:	f000 fe8b 	bl	8002d46 <HAL_NVIC_EnableIRQ>
  /* I2C2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_IRQn, 1, 0);
 8002030:	2200      	movs	r2, #0
 8002032:	2101      	movs	r1, #1
 8002034:	2018      	movs	r0, #24
 8002036:	f000 fe71 	bl	8002d1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_IRQn);
 800203a:	2018      	movs	r0, #24
 800203c:	f000 fe83 	bl	8002d46 <HAL_NVIC_EnableIRQ>
}
 8002040:	46c0      	nop			@ (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800204c:	4b1b      	ldr	r3, [pc, #108]	@ (80020bc <MX_I2C2_Init+0x74>)
 800204e:	4a1c      	ldr	r2, [pc, #112]	@ (80020c0 <MX_I2C2_Init+0x78>)
 8002050:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00F12163;
 8002052:	4b1a      	ldr	r3, [pc, #104]	@ (80020bc <MX_I2C2_Init+0x74>)
 8002054:	4a1b      	ldr	r2, [pc, #108]	@ (80020c4 <MX_I2C2_Init+0x7c>)
 8002056:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002058:	4b18      	ldr	r3, [pc, #96]	@ (80020bc <MX_I2C2_Init+0x74>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800205e:	4b17      	ldr	r3, [pc, #92]	@ (80020bc <MX_I2C2_Init+0x74>)
 8002060:	2201      	movs	r2, #1
 8002062:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002064:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <MX_I2C2_Init+0x74>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800206a:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <MX_I2C2_Init+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002070:	4b12      	ldr	r3, [pc, #72]	@ (80020bc <MX_I2C2_Init+0x74>)
 8002072:	2200      	movs	r2, #0
 8002074:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002076:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <MX_I2C2_Init+0x74>)
 8002078:	2200      	movs	r2, #0
 800207a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800207c:	4b0f      	ldr	r3, [pc, #60]	@ (80020bc <MX_I2C2_Init+0x74>)
 800207e:	2200      	movs	r2, #0
 8002080:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002082:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <MX_I2C2_Init+0x74>)
 8002084:	0018      	movs	r0, r3
 8002086:	f001 fa1b 	bl	80034c0 <HAL_I2C_Init>
 800208a:	1e03      	subs	r3, r0, #0
 800208c:	d001      	beq.n	8002092 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800208e:	f000 fb17 	bl	80026c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002092:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <MX_I2C2_Init+0x74>)
 8002094:	2100      	movs	r1, #0
 8002096:	0018      	movs	r0, r3
 8002098:	f002 fefc 	bl	8004e94 <HAL_I2CEx_ConfigAnalogFilter>
 800209c:	1e03      	subs	r3, r0, #0
 800209e:	d001      	beq.n	80020a4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80020a0:	f000 fb0e 	bl	80026c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80020a4:	4b05      	ldr	r3, [pc, #20]	@ (80020bc <MX_I2C2_Init+0x74>)
 80020a6:	2100      	movs	r1, #0
 80020a8:	0018      	movs	r0, r3
 80020aa:	f002 ff3f 	bl	8004f2c <HAL_I2CEx_ConfigDigitalFilter>
 80020ae:	1e03      	subs	r3, r0, #0
 80020b0:	d001      	beq.n	80020b6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80020b2:	f000 fb05 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	200000b8 	.word	0x200000b8
 80020c0:	40005800 	.word	0x40005800
 80020c4:	00f12163 	.word	0x00f12163

080020c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ce:	2310      	movs	r3, #16
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	0018      	movs	r0, r3
 80020d4:	2310      	movs	r3, #16
 80020d6:	001a      	movs	r2, r3
 80020d8:	2100      	movs	r1, #0
 80020da:	f004 fad7 	bl	800668c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	0018      	movs	r0, r3
 80020e2:	230c      	movs	r3, #12
 80020e4:	001a      	movs	r2, r3
 80020e6:	2100      	movs	r1, #0
 80020e8:	f004 fad0 	bl	800668c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ec:	4b21      	ldr	r3, [pc, #132]	@ (8002174 <MX_TIM1_Init+0xac>)
 80020ee:	4a22      	ldr	r2, [pc, #136]	@ (8002178 <MX_TIM1_Init+0xb0>)
 80020f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 80020f2:	4b20      	ldr	r3, [pc, #128]	@ (8002174 <MX_TIM1_Init+0xac>)
 80020f4:	4a21      	ldr	r2, [pc, #132]	@ (800217c <MX_TIM1_Init+0xb4>)
 80020f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002174 <MX_TIM1_Init+0xac>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 124;
 80020fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002174 <MX_TIM1_Init+0xac>)
 8002100:	227c      	movs	r2, #124	@ 0x7c
 8002102:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002104:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <MX_TIM1_Init+0xac>)
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800210a:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <MX_TIM1_Init+0xac>)
 800210c:	2200      	movs	r2, #0
 800210e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002110:	4b18      	ldr	r3, [pc, #96]	@ (8002174 <MX_TIM1_Init+0xac>)
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002116:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <MX_TIM1_Init+0xac>)
 8002118:	0018      	movs	r0, r3
 800211a:	f003 fe27 	bl	8005d6c <HAL_TIM_Base_Init>
 800211e:	1e03      	subs	r3, r0, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8002122:	f000 facd 	bl	80026c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002126:	2110      	movs	r1, #16
 8002128:	187b      	adds	r3, r7, r1
 800212a:	2280      	movs	r2, #128	@ 0x80
 800212c:	0152      	lsls	r2, r2, #5
 800212e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002130:	187a      	adds	r2, r7, r1
 8002132:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <MX_TIM1_Init+0xac>)
 8002134:	0011      	movs	r1, r2
 8002136:	0018      	movs	r0, r3
 8002138:	f004 f802 	bl	8006140 <HAL_TIM_ConfigClockSource>
 800213c:	1e03      	subs	r3, r0, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002140:	f000 fabe 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2200      	movs	r2, #0
 800214e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002156:	1d3a      	adds	r2, r7, #4
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <MX_TIM1_Init+0xac>)
 800215a:	0011      	movs	r1, r2
 800215c:	0018      	movs	r0, r3
 800215e:	f004 fa0f 	bl	8006580 <HAL_TIMEx_MasterConfigSynchronization>
 8002162:	1e03      	subs	r3, r0, #0
 8002164:	d001      	beq.n	800216a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8002166:	f000 faab 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	46bd      	mov	sp, r7
 800216e:	b008      	add	sp, #32
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	200001c4 	.word	0x200001c4
 8002178:	40012c00 	.word	0x40012c00
 800217c:	0000f9ff 	.word	0x0000f9ff

08002180 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002186:	2310      	movs	r3, #16
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	0018      	movs	r0, r3
 800218c:	2310      	movs	r3, #16
 800218e:	001a      	movs	r2, r3
 8002190:	2100      	movs	r1, #0
 8002192:	f004 fa7b 	bl	800668c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	0018      	movs	r0, r3
 800219a:	230c      	movs	r3, #12
 800219c:	001a      	movs	r2, r3
 800219e:	2100      	movs	r1, #0
 80021a0:	f004 fa74 	bl	800668c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002224 <MX_TIM2_Init+0xa4>)
 80021a6:	2280      	movs	r2, #128	@ 0x80
 80021a8:	05d2      	lsls	r2, r2, #23
 80021aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 80021ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002224 <MX_TIM2_Init+0xa4>)
 80021ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002228 <MX_TIM2_Init+0xa8>)
 80021b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002224 <MX_TIM2_Init+0xa4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 80021b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002224 <MX_TIM2_Init+0xa4>)
 80021ba:	22f4      	movs	r2, #244	@ 0xf4
 80021bc:	32ff      	adds	r2, #255	@ 0xff
 80021be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c0:	4b18      	ldr	r3, [pc, #96]	@ (8002224 <MX_TIM2_Init+0xa4>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c6:	4b17      	ldr	r3, [pc, #92]	@ (8002224 <MX_TIM2_Init+0xa4>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021cc:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <MX_TIM2_Init+0xa4>)
 80021ce:	0018      	movs	r0, r3
 80021d0:	f003 fdcc 	bl	8005d6c <HAL_TIM_Base_Init>
 80021d4:	1e03      	subs	r3, r0, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80021d8:	f000 fa72 	bl	80026c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021dc:	2110      	movs	r1, #16
 80021de:	187b      	adds	r3, r7, r1
 80021e0:	2280      	movs	r2, #128	@ 0x80
 80021e2:	0152      	lsls	r2, r2, #5
 80021e4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021e6:	187a      	adds	r2, r7, r1
 80021e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <MX_TIM2_Init+0xa4>)
 80021ea:	0011      	movs	r1, r2
 80021ec:	0018      	movs	r0, r3
 80021ee:	f003 ffa7 	bl	8006140 <HAL_TIM_ConfigClockSource>
 80021f2:	1e03      	subs	r3, r0, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80021f6:	f000 fa63 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002206:	1d3a      	adds	r2, r7, #4
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <MX_TIM2_Init+0xa4>)
 800220a:	0011      	movs	r1, r2
 800220c:	0018      	movs	r0, r3
 800220e:	f004 f9b7 	bl	8006580 <HAL_TIMEx_MasterConfigSynchronization>
 8002212:	1e03      	subs	r3, r0, #0
 8002214:	d001      	beq.n	800221a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002216:	f000 fa53 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	46bd      	mov	sp, r7
 800221e:	b008      	add	sp, #32
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	20000210 	.word	0x20000210
 8002228:	0000f9ff 	.word	0x0000f9ff

0800222c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002232:	2310      	movs	r3, #16
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	0018      	movs	r0, r3
 8002238:	2310      	movs	r3, #16
 800223a:	001a      	movs	r2, r3
 800223c:	2100      	movs	r1, #0
 800223e:	f004 fa25 	bl	800668c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	0018      	movs	r0, r3
 8002246:	230c      	movs	r3, #12
 8002248:	001a      	movs	r2, r3
 800224a:	2100      	movs	r1, #0
 800224c:	f004 fa1e 	bl	800668c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002250:	4b1e      	ldr	r3, [pc, #120]	@ (80022cc <MX_TIM3_Init+0xa0>)
 8002252:	4a1f      	ldr	r2, [pc, #124]	@ (80022d0 <MX_TIM3_Init+0xa4>)
 8002254:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8002256:	4b1d      	ldr	r3, [pc, #116]	@ (80022cc <MX_TIM3_Init+0xa0>)
 8002258:	4a1e      	ldr	r2, [pc, #120]	@ (80022d4 <MX_TIM3_Init+0xa8>)
 800225a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225c:	4b1b      	ldr	r3, [pc, #108]	@ (80022cc <MX_TIM3_Init+0xa0>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002262:	4b1a      	ldr	r3, [pc, #104]	@ (80022cc <MX_TIM3_Init+0xa0>)
 8002264:	4a1c      	ldr	r2, [pc, #112]	@ (80022d8 <MX_TIM3_Init+0xac>)
 8002266:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002268:	4b18      	ldr	r3, [pc, #96]	@ (80022cc <MX_TIM3_Init+0xa0>)
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800226e:	4b17      	ldr	r3, [pc, #92]	@ (80022cc <MX_TIM3_Init+0xa0>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002274:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <MX_TIM3_Init+0xa0>)
 8002276:	0018      	movs	r0, r3
 8002278:	f003 fd78 	bl	8005d6c <HAL_TIM_Base_Init>
 800227c:	1e03      	subs	r3, r0, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002280:	f000 fa1e 	bl	80026c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002284:	2110      	movs	r1, #16
 8002286:	187b      	adds	r3, r7, r1
 8002288:	2280      	movs	r2, #128	@ 0x80
 800228a:	0152      	lsls	r2, r2, #5
 800228c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800228e:	187a      	adds	r2, r7, r1
 8002290:	4b0e      	ldr	r3, [pc, #56]	@ (80022cc <MX_TIM3_Init+0xa0>)
 8002292:	0011      	movs	r1, r2
 8002294:	0018      	movs	r0, r3
 8002296:	f003 ff53 	bl	8006140 <HAL_TIM_ConfigClockSource>
 800229a:	1e03      	subs	r3, r0, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800229e:	f000 fa0f 	bl	80026c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022ae:	1d3a      	adds	r2, r7, #4
 80022b0:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <MX_TIM3_Init+0xa0>)
 80022b2:	0011      	movs	r1, r2
 80022b4:	0018      	movs	r0, r3
 80022b6:	f004 f963 	bl	8006580 <HAL_TIMEx_MasterConfigSynchronization>
 80022ba:	1e03      	subs	r3, r0, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80022be:	f000 f9ff 	bl	80026c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b008      	add	sp, #32
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	2000025c 	.word	0x2000025c
 80022d0:	40000400 	.word	0x40000400
 80022d4:	0000f9ff 	.word	0x0000f9ff
 80022d8:	000003e7 	.word	0x000003e7

080022dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022e2:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <MX_DMA_Init+0x28>)
 80022e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022e6:	4b07      	ldr	r3, [pc, #28]	@ (8002304 <MX_DMA_Init+0x28>)
 80022e8:	2101      	movs	r1, #1
 80022ea:	430a      	orrs	r2, r1
 80022ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80022ee:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <MX_DMA_Init+0x28>)
 80022f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f2:	2201      	movs	r2, #1
 80022f4:	4013      	ands	r3, r2
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]

}
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b002      	add	sp, #8
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	40021000 	.word	0x40021000

08002308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b08b      	sub	sp, #44	@ 0x2c
 800230c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230e:	2414      	movs	r4, #20
 8002310:	193b      	adds	r3, r7, r4
 8002312:	0018      	movs	r0, r3
 8002314:	2314      	movs	r3, #20
 8002316:	001a      	movs	r2, r3
 8002318:	2100      	movs	r1, #0
 800231a:	f004 f9b7 	bl	800668c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800231e:	4b86      	ldr	r3, [pc, #536]	@ (8002538 <MX_GPIO_Init+0x230>)
 8002320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002322:	4b85      	ldr	r3, [pc, #532]	@ (8002538 <MX_GPIO_Init+0x230>)
 8002324:	2104      	movs	r1, #4
 8002326:	430a      	orrs	r2, r1
 8002328:	635a      	str	r2, [r3, #52]	@ 0x34
 800232a:	4b83      	ldr	r3, [pc, #524]	@ (8002538 <MX_GPIO_Init+0x230>)
 800232c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800232e:	2204      	movs	r2, #4
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002336:	4b80      	ldr	r3, [pc, #512]	@ (8002538 <MX_GPIO_Init+0x230>)
 8002338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800233a:	4b7f      	ldr	r3, [pc, #508]	@ (8002538 <MX_GPIO_Init+0x230>)
 800233c:	2120      	movs	r1, #32
 800233e:	430a      	orrs	r2, r1
 8002340:	635a      	str	r2, [r3, #52]	@ 0x34
 8002342:	4b7d      	ldr	r3, [pc, #500]	@ (8002538 <MX_GPIO_Init+0x230>)
 8002344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002346:	2220      	movs	r2, #32
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800234e:	4b7a      	ldr	r3, [pc, #488]	@ (8002538 <MX_GPIO_Init+0x230>)
 8002350:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002352:	4b79      	ldr	r3, [pc, #484]	@ (8002538 <MX_GPIO_Init+0x230>)
 8002354:	2101      	movs	r1, #1
 8002356:	430a      	orrs	r2, r1
 8002358:	635a      	str	r2, [r3, #52]	@ 0x34
 800235a:	4b77      	ldr	r3, [pc, #476]	@ (8002538 <MX_GPIO_Init+0x230>)
 800235c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800235e:	2201      	movs	r2, #1
 8002360:	4013      	ands	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002366:	4b74      	ldr	r3, [pc, #464]	@ (8002538 <MX_GPIO_Init+0x230>)
 8002368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800236a:	4b73      	ldr	r3, [pc, #460]	@ (8002538 <MX_GPIO_Init+0x230>)
 800236c:	2102      	movs	r1, #2
 800236e:	430a      	orrs	r2, r1
 8002370:	635a      	str	r2, [r3, #52]	@ 0x34
 8002372:	4b71      	ldr	r3, [pc, #452]	@ (8002538 <MX_GPIO_Init+0x230>)
 8002374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002376:	2202      	movs	r2, #2
 8002378:	4013      	ands	r3, r2
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800237e:	4b6e      	ldr	r3, [pc, #440]	@ (8002538 <MX_GPIO_Init+0x230>)
 8002380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002382:	4b6d      	ldr	r3, [pc, #436]	@ (8002538 <MX_GPIO_Init+0x230>)
 8002384:	2108      	movs	r1, #8
 8002386:	430a      	orrs	r2, r1
 8002388:	635a      	str	r2, [r3, #52]	@ 0x34
 800238a:	4b6b      	ldr	r3, [pc, #428]	@ (8002538 <MX_GPIO_Init+0x230>)
 800238c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800238e:	2208      	movs	r2, #8
 8002390:	4013      	ands	r3, r2
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FP_MB2_PWRLED_Pin|FP_MB1_PWRLED_Pin|CPU_PSON_Pin, GPIO_PIN_RESET);
 8002396:	4969      	ldr	r1, [pc, #420]	@ (800253c <MX_GPIO_Init+0x234>)
 8002398:	4b69      	ldr	r3, [pc, #420]	@ (8002540 <MX_GPIO_Init+0x238>)
 800239a:	2200      	movs	r2, #0
 800239c:	0018      	movs	r0, r3
 800239e:	f001 f872 	bl	8003486 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SGPIO_I2C2_RES_G_Pin|SGPIO_I2C2_RES_Pin|SGPIO_I2C1_RES_Pin, GPIO_PIN_SET);
 80023a2:	23c4      	movs	r3, #196	@ 0xc4
 80023a4:	01db      	lsls	r3, r3, #7
 80023a6:	4866      	ldr	r0, [pc, #408]	@ (8002540 <MX_GPIO_Init+0x238>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	0019      	movs	r1, r3
 80023ac:	f001 f86b 	bl	8003486 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB1_STATUS_LED_Pin|MB2_STATUS_LED_Pin, GPIO_PIN_SET);
 80023b0:	23a0      	movs	r3, #160	@ 0xa0
 80023b2:	05db      	lsls	r3, r3, #23
 80023b4:	2201      	movs	r2, #1
 80023b6:	2150      	movs	r1, #80	@ 0x50
 80023b8:	0018      	movs	r0, r3
 80023ba:	f001 f864 	bl	8003486 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SGPIO_I2C3_RES_Pin|SGPIO_I2C3RES_G_Pin, GPIO_PIN_SET);
 80023be:	4b61      	ldr	r3, [pc, #388]	@ (8002544 <MX_GPIO_Init+0x23c>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	2106      	movs	r1, #6
 80023c4:	0018      	movs	r0, r3
 80023c6:	f001 f85e 	bl	8003486 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SGPIO_I2C1_RES_G_Pin|TEMP_I2C2_RES_Pin|TEMP_I2C1_RES_Pin, GPIO_PIN_SET);
 80023ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002548 <MX_GPIO_Init+0x240>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	2107      	movs	r1, #7
 80023d0:	0018      	movs	r0, r3
 80023d2:	f001 f858 	bl	8003486 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FP_MB2_PWRLED_Pin SGPIO_I2C2_RES_G_Pin SGPIO_I2C2_RES_Pin FP_MB1_PWRLED_Pin
                           CPU_PSON_Pin SGPIO_I2C1_RES_Pin */
  GPIO_InitStruct.Pin = FP_MB2_PWRLED_Pin|SGPIO_I2C2_RES_G_Pin|SGPIO_I2C2_RES_Pin|FP_MB1_PWRLED_Pin
 80023d6:	193b      	adds	r3, r7, r4
 80023d8:	4a5c      	ldr	r2, [pc, #368]	@ (800254c <MX_GPIO_Init+0x244>)
 80023da:	601a      	str	r2, [r3, #0]
                          |CPU_PSON_Pin|SGPIO_I2C1_RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023dc:	193b      	adds	r3, r7, r4
 80023de:	2201      	movs	r2, #1
 80023e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	193b      	adds	r3, r7, r4
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e8:	193b      	adds	r3, r7, r4
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ee:	193b      	adds	r3, r7, r4
 80023f0:	4a53      	ldr	r2, [pc, #332]	@ (8002540 <MX_GPIO_Init+0x238>)
 80023f2:	0019      	movs	r1, r3
 80023f4:	0010      	movs	r0, r2
 80023f6:	f000 fec5 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_DRIVE4_ACTIVITY_Pin B_DRIVE4_ACTIVITY_Pin B_DRIVE3_ACTIVITY_Pin B_DRIVE2_ACTIVITY_Pin
                           MB1_PWR_SW_Pin C_DRIVE1_ACTIVITY_Pin C_DRIVE2_ACTIVITY_Pin E_DRIVE1_ACTIVITY_Pin */
  GPIO_InitStruct.Pin = D_DRIVE4_ACTIVITY_Pin|B_DRIVE4_ACTIVITY_Pin|B_DRIVE3_ACTIVITY_Pin|B_DRIVE2_ACTIVITY_Pin
 80023fa:	193b      	adds	r3, r7, r4
 80023fc:	4a54      	ldr	r2, [pc, #336]	@ (8002550 <MX_GPIO_Init+0x248>)
 80023fe:	601a      	str	r2, [r3, #0]
                          |MB1_PWR_SW_Pin|C_DRIVE1_ACTIVITY_Pin|C_DRIVE2_ACTIVITY_Pin|E_DRIVE1_ACTIVITY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002400:	193b      	adds	r3, r7, r4
 8002402:	2200      	movs	r2, #0
 8002404:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	193b      	adds	r3, r7, r4
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800240c:	193b      	adds	r3, r7, r4
 800240e:	4a4c      	ldr	r2, [pc, #304]	@ (8002540 <MX_GPIO_Init+0x238>)
 8002410:	0019      	movs	r1, r3
 8002412:	0010      	movs	r0, r2
 8002414:	f000 feb6 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB1_BITCH_Pin MB2_BITCH_Pin CPU_PWROK_Pin A_DRIVE4_ACTIVITY_Pin
                           B_DRIVE1_ACTIVITY_Pin D_DRIVE1_ACTIVITY_Pin D_DRIVE2_ACTIVITY_Pin D_DRIVE3_ACTIVITY_Pin */
  GPIO_InitStruct.Pin = MB1_BITCH_Pin|MB2_BITCH_Pin|CPU_PWROK_Pin|A_DRIVE4_ACTIVITY_Pin
 8002418:	193b      	adds	r3, r7, r4
 800241a:	4a4e      	ldr	r2, [pc, #312]	@ (8002554 <MX_GPIO_Init+0x24c>)
 800241c:	601a      	str	r2, [r3, #0]
                          |B_DRIVE1_ACTIVITY_Pin|D_DRIVE1_ACTIVITY_Pin|D_DRIVE2_ACTIVITY_Pin|D_DRIVE3_ACTIVITY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800241e:	193b      	adds	r3, r7, r4
 8002420:	2200      	movs	r2, #0
 8002422:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	193b      	adds	r3, r7, r4
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	193a      	adds	r2, r7, r4
 800242c:	23a0      	movs	r3, #160	@ 0xa0
 800242e:	05db      	lsls	r3, r3, #23
 8002430:	0011      	movs	r1, r2
 8002432:	0018      	movs	r0, r3
 8002434:	f000 fea6 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB1_STATUS_LED_Pin MB2_STATUS_LED_Pin */
  GPIO_InitStruct.Pin = MB1_STATUS_LED_Pin|MB2_STATUS_LED_Pin;
 8002438:	193b      	adds	r3, r7, r4
 800243a:	2250      	movs	r2, #80	@ 0x50
 800243c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243e:	193b      	adds	r3, r7, r4
 8002440:	2201      	movs	r2, #1
 8002442:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	193b      	adds	r3, r7, r4
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	193b      	adds	r3, r7, r4
 800244c:	2200      	movs	r2, #0
 800244e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	193a      	adds	r2, r7, r4
 8002452:	23a0      	movs	r3, #160	@ 0xa0
 8002454:	05db      	lsls	r3, r3, #23
 8002456:	0011      	movs	r1, r2
 8002458:	0018      	movs	r0, r3
 800245a:	f000 fe93 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB1_ATTACH_Pin A_DRIVE1_ACTIVITY_Pin A_DRIVE2_ACTIVITY_Pin A_DRIVE3_ACTIVITY_Pin
                           F_DRIVE4_ACTIVITY_Pin F_DRIVE3_ACTIVITY_Pin F_DRIVE2_ACTIVITY_Pin F_DRIVE1_ACTIVITY_Pin
                           E_DRIVE4_ACTIVITY_Pin E_DRIVE3_ACTIVITY_Pin E_DRIVE2_ACTIVITY_Pin */
  GPIO_InitStruct.Pin = MB1_ATTACH_Pin|A_DRIVE1_ACTIVITY_Pin|A_DRIVE2_ACTIVITY_Pin|A_DRIVE3_ACTIVITY_Pin
 800245e:	193b      	adds	r3, r7, r4
 8002460:	4a3d      	ldr	r2, [pc, #244]	@ (8002558 <MX_GPIO_Init+0x250>)
 8002462:	601a      	str	r2, [r3, #0]
                          |F_DRIVE4_ACTIVITY_Pin|F_DRIVE3_ACTIVITY_Pin|F_DRIVE2_ACTIVITY_Pin|F_DRIVE1_ACTIVITY_Pin
                          |E_DRIVE4_ACTIVITY_Pin|E_DRIVE3_ACTIVITY_Pin|E_DRIVE2_ACTIVITY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002464:	193b      	adds	r3, r7, r4
 8002466:	2200      	movs	r2, #0
 8002468:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	193b      	adds	r3, r7, r4
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002470:	193b      	adds	r3, r7, r4
 8002472:	4a34      	ldr	r2, [pc, #208]	@ (8002544 <MX_GPIO_Init+0x23c>)
 8002474:	0019      	movs	r1, r3
 8002476:	0010      	movs	r0, r2
 8002478:	f000 fe84 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : SGPIO_I2C3_RES_Pin SGPIO_I2C3RES_G_Pin */
  GPIO_InitStruct.Pin = SGPIO_I2C3_RES_Pin|SGPIO_I2C3RES_G_Pin;
 800247c:	193b      	adds	r3, r7, r4
 800247e:	2206      	movs	r2, #6
 8002480:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002482:	193b      	adds	r3, r7, r4
 8002484:	2201      	movs	r2, #1
 8002486:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	193b      	adds	r3, r7, r4
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	193b      	adds	r3, r7, r4
 8002490:	2200      	movs	r2, #0
 8002492:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002494:	193b      	adds	r3, r7, r4
 8002496:	4a2b      	ldr	r2, [pc, #172]	@ (8002544 <MX_GPIO_Init+0x23c>)
 8002498:	0019      	movs	r1, r3
 800249a:	0010      	movs	r0, r2
 800249c:	f000 fe72 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_DRIVE3_ACTIVITY_Pin C_DRIVE4_ACTIVITY_Pin MB2_ATTACH_Pin MB2_PWR_SW_Pin */
  GPIO_InitStruct.Pin = C_DRIVE3_ACTIVITY_Pin|C_DRIVE4_ACTIVITY_Pin|MB2_ATTACH_Pin|MB2_PWR_SW_Pin;
 80024a0:	0021      	movs	r1, r4
 80024a2:	187b      	adds	r3, r7, r1
 80024a4:	22d8      	movs	r2, #216	@ 0xd8
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024aa:	000c      	movs	r4, r1
 80024ac:	193b      	adds	r3, r7, r4
 80024ae:	2200      	movs	r2, #0
 80024b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	193b      	adds	r3, r7, r4
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024b8:	193b      	adds	r3, r7, r4
 80024ba:	4a23      	ldr	r2, [pc, #140]	@ (8002548 <MX_GPIO_Init+0x240>)
 80024bc:	0019      	movs	r1, r3
 80024be:	0010      	movs	r0, r2
 80024c0:	f000 fe60 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pin : FP_MB2_PWR_SW_Pin */
  GPIO_InitStruct.Pin = FP_MB2_PWR_SW_Pin;
 80024c4:	193b      	adds	r3, r7, r4
 80024c6:	2280      	movs	r2, #128	@ 0x80
 80024c8:	0212      	lsls	r2, r2, #8
 80024ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024cc:	193b      	adds	r3, r7, r4
 80024ce:	2200      	movs	r2, #0
 80024d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024d2:	193b      	adds	r3, r7, r4
 80024d4:	2201      	movs	r2, #1
 80024d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FP_MB2_PWR_SW_GPIO_Port, &GPIO_InitStruct);
 80024d8:	193a      	adds	r2, r7, r4
 80024da:	23a0      	movs	r3, #160	@ 0xa0
 80024dc:	05db      	lsls	r3, r3, #23
 80024de:	0011      	movs	r1, r2
 80024e0:	0018      	movs	r0, r3
 80024e2:	f000 fe4f 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pin : FP_MB1_PWR_SW_Pin */
  GPIO_InitStruct.Pin = FP_MB1_PWR_SW_Pin;
 80024e6:	0021      	movs	r1, r4
 80024e8:	187b      	adds	r3, r7, r1
 80024ea:	2280      	movs	r2, #128	@ 0x80
 80024ec:	0052      	lsls	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f0:	000c      	movs	r4, r1
 80024f2:	193b      	adds	r3, r7, r4
 80024f4:	2200      	movs	r2, #0
 80024f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024f8:	193b      	adds	r3, r7, r4
 80024fa:	2201      	movs	r2, #1
 80024fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FP_MB1_PWR_SW_GPIO_Port, &GPIO_InitStruct);
 80024fe:	193b      	adds	r3, r7, r4
 8002500:	4a0f      	ldr	r2, [pc, #60]	@ (8002540 <MX_GPIO_Init+0x238>)
 8002502:	0019      	movs	r1, r3
 8002504:	0010      	movs	r0, r2
 8002506:	f000 fe3d 	bl	8003184 <HAL_GPIO_Init>

  /*Configure GPIO pins : SGPIO_I2C1_RES_G_Pin TEMP_I2C2_RES_Pin TEMP_I2C1_RES_Pin */
  GPIO_InitStruct.Pin = SGPIO_I2C1_RES_G_Pin|TEMP_I2C2_RES_Pin|TEMP_I2C1_RES_Pin;
 800250a:	0021      	movs	r1, r4
 800250c:	187b      	adds	r3, r7, r1
 800250e:	2207      	movs	r2, #7
 8002510:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002512:	187b      	adds	r3, r7, r1
 8002514:	2201      	movs	r2, #1
 8002516:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	187b      	adds	r3, r7, r1
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	187b      	adds	r3, r7, r1
 8002520:	2200      	movs	r2, #0
 8002522:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002524:	187b      	adds	r3, r7, r1
 8002526:	4a08      	ldr	r2, [pc, #32]	@ (8002548 <MX_GPIO_Init+0x240>)
 8002528:	0019      	movs	r1, r3
 800252a:	0010      	movs	r0, r2
 800252c:	f000 fe2a 	bl	8003184 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002530:	46c0      	nop			@ (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b00b      	add	sp, #44	@ 0x2c
 8002536:	bd90      	pop	{r4, r7, pc}
 8002538:	40021000 	.word	0x40021000
 800253c:	00000811 	.word	0x00000811
 8002540:	50000800 	.word	0x50000800
 8002544:	50000400 	.word	0x50000400
 8002548:	50000c00 	.word	0x50000c00
 800254c:	00006a11 	.word	0x00006a11
 8002550:	000084ee 	.word	0x000084ee
 8002554:	00001fa8 	.word	0x00001fa8
 8002558:	0000e3f9 	.word	0x0000e3f9

0800255c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1 && btn_handler == 0) // 8 раз в секунду
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a4a      	ldr	r2, [pc, #296]	@ (8002694 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d133      	bne.n	80025d6 <HAL_TIM_PeriodElapsedCallback+0x7a>
 800256e:	4b4a      	ldr	r3, [pc, #296]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d12f      	bne.n	80025d6 <HAL_TIM_PeriodElapsedCallback+0x7a>
	{
		HandleButtons();//buttons
 8002576:	f7fe f979 	bl	800086c <HandleButtons>
		UpdateLEDStates(); // Обновление состояния светодиодов
 800257a:	f7ff f92b 	bl	80017d4 <UpdateLEDStates>
		static uint8_t blink_phase = 0;
		blink_phase = !blink_phase; // �?нвертируем состояние
 800257e:	4b47      	ldr	r3, [pc, #284]	@ (800269c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	425a      	negs	r2, r3
 8002584:	4153      	adcs	r3, r2
 8002586:	b2db      	uxtb	r3, r3
 8002588:	001a      	movs	r2, r3
 800258a:	4b44      	ldr	r3, [pc, #272]	@ (800269c <HAL_TIM_PeriodElapsedCallback+0x140>)
 800258c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 2; i++) {
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	e01c      	b.n	80025ce <HAL_TIM_PeriodElapsedCallback+0x72>
			if (leds[i].is_blinking) {
 8002594:	4a42      	ldr	r2, [pc, #264]	@ (80026a0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	18d3      	adds	r3, r2, r3
 800259c:	330c      	adds	r3, #12
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d011      	beq.n	80025c8 <HAL_TIM_PeriodElapsedCallback+0x6c>
				HAL_GPIO_WritePin(leds[i].GPIOx, leds[i].GPIO_Pin,
 80025a4:	4b3e      	ldr	r3, [pc, #248]	@ (80026a0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	0112      	lsls	r2, r2, #4
 80025aa:	58d0      	ldr	r0, [r2, r3]
 80025ac:	4a3c      	ldr	r2, [pc, #240]	@ (80026a0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	18d3      	adds	r3, r2, r3
 80025b4:	3304      	adds	r3, #4
 80025b6:	8819      	ldrh	r1, [r3, #0]
 80025b8:	4b38      	ldr	r3, [pc, #224]	@ (800269c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	1e5a      	subs	r2, r3, #1
 80025be:	4193      	sbcs	r3, r2
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	001a      	movs	r2, r3
 80025c4:	f000 ff5f 	bl	8003486 <HAL_GPIO_WritePin>
		for (int i = 0; i < 2; i++) {
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	3301      	adds	r3, #1
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	dddf      	ble.n	8002594 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
 80025d4:	e05a      	b.n	800268c <HAL_TIM_PeriodElapsedCallback+0x130>
						blink_phase ? GPIO_PIN_SET : GPIO_PIN_RESET);
			}
		}
	} else
		if (htim->Instance == TIM2 && btn_handler == 0) // 4 раза в секунду
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	2380      	movs	r3, #128	@ 0x80
 80025dc:	05db      	lsls	r3, r3, #23
 80025de:	429a      	cmp	r2, r3
 80025e0:	d113      	bne.n	800260a <HAL_TIM_PeriodElapsedCallback+0xae>
 80025e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10f      	bne.n	800260a <HAL_TIM_PeriodElapsedCallback+0xae>
		{
			read_disk_status_flag = 1;
 80025ea:	4b2e      	ldr	r3, [pc, #184]	@ (80026a4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]

			Read_Disk_Status(0x24, disk_status, 6); // Чтение статуса дисков
 80025f0:	4b2d      	ldr	r3, [pc, #180]	@ (80026a8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80025f2:	2206      	movs	r2, #6
 80025f4:	0019      	movs	r1, r3
 80025f6:	2024      	movs	r0, #36	@ 0x24
 80025f8:	f7fe fd1c 	bl	8001034 <Read_Disk_Status>
			Decode_Disk_Status(disk_status); // Декодирование статуса
 80025fc:	4b2a      	ldr	r3, [pc, #168]	@ (80026a8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80025fe:	0018      	movs	r0, r3
 8002600:	f7fe fe18 	bl	8001234 <Decode_Disk_Status>
			Read_disks_connected(); // Чтение подключенных дисков
 8002604:	f7fe fa28 	bl	8000a58 <Read_disks_connected>
 8002608:	e040      	b.n	800268c <HAL_TIM_PeriodElapsedCallback+0x130>

		} else
			if (htim->Instance == TIM3 && btn_handler == 0) // 1 раз в секунду
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a27      	ldr	r2, [pc, #156]	@ (80026ac <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d13b      	bne.n	800268c <HAL_TIM_PeriodElapsedCallback+0x130>
 8002614:	4b20      	ldr	r3, [pc, #128]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d137      	bne.n	800268c <HAL_TIM_PeriodElapsedCallback+0x130>
			{
				UpdateCPU_PSON();
 800261c:	f7fe f824 	bl	8000668 <UpdateCPU_PSON>
				is_launching = 0;
 8002620:	4b23      	ldr	r3, [pc, #140]	@ (80026b0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
				//temperature = getMaxTemperature();
				for (int i = 0; i < MAX_DISKS; ++i) {
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	e028      	b.n	800267e <HAL_TIM_PeriodElapsedCallback+0x122>
					if (disks[i].activity == 1 && connectActivityTimer[i] != 0 &&
 800262c:	4a21      	ldr	r2, [pc, #132]	@ (80026b4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	18d3      	adds	r3, r2, r3
 8002634:	3301      	adds	r3, #1
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d11d      	bne.n	8002678 <HAL_TIM_PeriodElapsedCallback+0x11c>
 800263c:	4b1e      	ldr	r3, [pc, #120]	@ (80026b8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	0092      	lsls	r2, r2, #2
 8002642:	58d3      	ldr	r3, [r2, r3]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d017      	beq.n	8002678 <HAL_TIM_PeriodElapsedCallback+0x11c>
							(HAL_GetTick() - connectActivityTimer[i] >= 4000)) { // 4 секунды
 8002648:	f000 fa8e 	bl	8002b68 <HAL_GetTick>
 800264c:	0001      	movs	r1, r0
 800264e:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	58d3      	ldr	r3, [r2, r3]
 8002656:	1aca      	subs	r2, r1, r3
					if (disks[i].activity == 1 && connectActivityTimer[i] != 0 &&
 8002658:	23fa      	movs	r3, #250	@ 0xfa
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	429a      	cmp	r2, r3
 800265e:	d30b      	bcc.n	8002678 <HAL_TIM_PeriodElapsedCallback+0x11c>
						disks[i].activity = 0; // Сбрасываем активность
 8002660:	4a14      	ldr	r2, [pc, #80]	@ (80026b4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	18d3      	adds	r3, r2, r3
 8002668:	3301      	adds	r3, #1
 800266a:	2200      	movs	r2, #0
 800266c:	701a      	strb	r2, [r3, #0]
						connectActivityTimer[i] = 0; // Сбрасываем таймер
 800266e:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	2100      	movs	r1, #0
 8002676:	50d1      	str	r1, [r2, r3]
				for (int i = 0; i < MAX_DISKS; ++i) {
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	3301      	adds	r3, #1
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b17      	cmp	r3, #23
 8002682:	ddd3      	ble.n	800262c <HAL_TIM_PeriodElapsedCallback+0xd0>
					}
				}
				transmit_temperature_flag = 1; // Устанавливаем флаг для передачи температуры
 8002684:	4b0d      	ldr	r3, [pc, #52]	@ (80026bc <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]

			}
}
 800268a:	e7ff      	b.n	800268c <HAL_TIM_PeriodElapsedCallback+0x130>
 800268c:	46c0      	nop			@ (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	b004      	add	sp, #16
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40012c00 	.word	0x40012c00
 8002698:	2000031a 	.word	0x2000031a
 800269c:	20000380 	.word	0x20000380
 80026a0:	2000002c 	.word	0x2000002c
 80026a4:	2000037d 	.word	0x2000037d
 80026a8:	200002a8 	.word	0x200002a8
 80026ac:	40000400 	.word	0x40000400
 80026b0:	2000037c 	.word	0x2000037c
 80026b4:	200002b8 	.word	0x200002b8
 80026b8:	2000031c 	.word	0x2000031c
 80026bc:	2000037e 	.word	0x2000037e

080026c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c4:	b672      	cpsid	i
}
 80026c6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	while (1)
 80026c8:	46c0      	nop			@ (mov r8, r8)
 80026ca:	e7fd      	b.n	80026c8 <Error_Handler+0x8>

080026cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002710 <HAL_MspInit+0x44>)
 80026d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002710 <HAL_MspInit+0x44>)
 80026d8:	2101      	movs	r1, #1
 80026da:	430a      	orrs	r2, r1
 80026dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80026de:	4b0c      	ldr	r3, [pc, #48]	@ (8002710 <HAL_MspInit+0x44>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	2201      	movs	r2, #1
 80026e4:	4013      	ands	r3, r2
 80026e6:	607b      	str	r3, [r7, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ea:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <HAL_MspInit+0x44>)
 80026ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026ee:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <HAL_MspInit+0x44>)
 80026f0:	2180      	movs	r1, #128	@ 0x80
 80026f2:	0549      	lsls	r1, r1, #21
 80026f4:	430a      	orrs	r2, r1
 80026f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026f8:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <HAL_MspInit+0x44>)
 80026fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026fc:	2380      	movs	r3, #128	@ 0x80
 80026fe:	055b      	lsls	r3, r3, #21
 8002700:	4013      	ands	r3, r2
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b002      	add	sp, #8
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	40021000 	.word	0x40021000

08002714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b08b      	sub	sp, #44	@ 0x2c
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	2414      	movs	r4, #20
 800271e:	193b      	adds	r3, r7, r4
 8002720:	0018      	movs	r0, r3
 8002722:	2314      	movs	r3, #20
 8002724:	001a      	movs	r2, r3
 8002726:	2100      	movs	r1, #0
 8002728:	f003 ffb0 	bl	800668c <memset>
  if(hi2c->Instance==I2C2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a45      	ldr	r2, [pc, #276]	@ (8002848 <HAL_I2C_MspInit+0x134>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d000      	beq.n	8002738 <HAL_I2C_MspInit+0x24>
 8002736:	e082      	b.n	800283e <HAL_I2C_MspInit+0x12a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002738:	4b44      	ldr	r3, [pc, #272]	@ (800284c <HAL_I2C_MspInit+0x138>)
 800273a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800273c:	4b43      	ldr	r3, [pc, #268]	@ (800284c <HAL_I2C_MspInit+0x138>)
 800273e:	2102      	movs	r1, #2
 8002740:	430a      	orrs	r2, r1
 8002742:	635a      	str	r2, [r3, #52]	@ 0x34
 8002744:	4b41      	ldr	r3, [pc, #260]	@ (800284c <HAL_I2C_MspInit+0x138>)
 8002746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002748:	2202      	movs	r2, #2
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = TEMP_I2C1_SCL_Pin|TEMP_I2C1_SDA_Pin;
 8002750:	193b      	adds	r3, r7, r4
 8002752:	22c0      	movs	r2, #192	@ 0xc0
 8002754:	0112      	lsls	r2, r2, #4
 8002756:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002758:	0021      	movs	r1, r4
 800275a:	187b      	adds	r3, r7, r1
 800275c:	2212      	movs	r2, #18
 800275e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	187b      	adds	r3, r7, r1
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	187b      	adds	r3, r7, r1
 8002768:	2200      	movs	r2, #0
 800276a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800276c:	187b      	adds	r3, r7, r1
 800276e:	2206      	movs	r2, #6
 8002770:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002772:	187b      	adds	r3, r7, r1
 8002774:	4a36      	ldr	r2, [pc, #216]	@ (8002850 <HAL_I2C_MspInit+0x13c>)
 8002776:	0019      	movs	r1, r3
 8002778:	0010      	movs	r0, r2
 800277a:	f000 fd03 	bl	8003184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800277e:	4b33      	ldr	r3, [pc, #204]	@ (800284c <HAL_I2C_MspInit+0x138>)
 8002780:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002782:	4b32      	ldr	r3, [pc, #200]	@ (800284c <HAL_I2C_MspInit+0x138>)
 8002784:	2180      	movs	r1, #128	@ 0x80
 8002786:	03c9      	lsls	r1, r1, #15
 8002788:	430a      	orrs	r2, r1
 800278a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800278c:	4b2f      	ldr	r3, [pc, #188]	@ (800284c <HAL_I2C_MspInit+0x138>)
 800278e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002790:	2380      	movs	r3, #128	@ 0x80
 8002792:	03db      	lsls	r3, r3, #15
 8002794:	4013      	ands	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel1;
 800279a:	4b2e      	ldr	r3, [pc, #184]	@ (8002854 <HAL_I2C_MspInit+0x140>)
 800279c:	4a2e      	ldr	r2, [pc, #184]	@ (8002858 <HAL_I2C_MspInit+0x144>)
 800279e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 80027a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002854 <HAL_I2C_MspInit+0x140>)
 80027a2:	220c      	movs	r2, #12
 80027a4:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002854 <HAL_I2C_MspInit+0x140>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ac:	4b29      	ldr	r3, [pc, #164]	@ (8002854 <HAL_I2C_MspInit+0x140>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027b2:	4b28      	ldr	r3, [pc, #160]	@ (8002854 <HAL_I2C_MspInit+0x140>)
 80027b4:	2280      	movs	r2, #128	@ 0x80
 80027b6:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027b8:	4b26      	ldr	r3, [pc, #152]	@ (8002854 <HAL_I2C_MspInit+0x140>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027be:	4b25      	ldr	r3, [pc, #148]	@ (8002854 <HAL_I2C_MspInit+0x140>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80027c4:	4b23      	ldr	r3, [pc, #140]	@ (8002854 <HAL_I2C_MspInit+0x140>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027ca:	4b22      	ldr	r3, [pc, #136]	@ (8002854 <HAL_I2C_MspInit+0x140>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80027d0:	4b20      	ldr	r3, [pc, #128]	@ (8002854 <HAL_I2C_MspInit+0x140>)
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 fad4 	bl	8002d80 <HAL_DMA_Init>
 80027d8:	1e03      	subs	r3, r0, #0
 80027da:	d001      	beq.n	80027e0 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80027dc:	f7ff ff70 	bl	80026c0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002854 <HAL_I2C_MspInit+0x140>)
 80027e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002854 <HAL_I2C_MspInit+0x140>)
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel2;
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <HAL_I2C_MspInit+0x148>)
 80027ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002860 <HAL_I2C_MspInit+0x14c>)
 80027f0:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 80027f2:	4b1a      	ldr	r3, [pc, #104]	@ (800285c <HAL_I2C_MspInit+0x148>)
 80027f4:	220d      	movs	r2, #13
 80027f6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027f8:	4b18      	ldr	r3, [pc, #96]	@ (800285c <HAL_I2C_MspInit+0x148>)
 80027fa:	2210      	movs	r2, #16
 80027fc:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027fe:	4b17      	ldr	r3, [pc, #92]	@ (800285c <HAL_I2C_MspInit+0x148>)
 8002800:	2200      	movs	r2, #0
 8002802:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002804:	4b15      	ldr	r3, [pc, #84]	@ (800285c <HAL_I2C_MspInit+0x148>)
 8002806:	2280      	movs	r2, #128	@ 0x80
 8002808:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800280a:	4b14      	ldr	r3, [pc, #80]	@ (800285c <HAL_I2C_MspInit+0x148>)
 800280c:	2200      	movs	r2, #0
 800280e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002810:	4b12      	ldr	r3, [pc, #72]	@ (800285c <HAL_I2C_MspInit+0x148>)
 8002812:	2200      	movs	r2, #0
 8002814:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002816:	4b11      	ldr	r3, [pc, #68]	@ (800285c <HAL_I2C_MspInit+0x148>)
 8002818:	2200      	movs	r2, #0
 800281a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800281c:	4b0f      	ldr	r3, [pc, #60]	@ (800285c <HAL_I2C_MspInit+0x148>)
 800281e:	2200      	movs	r2, #0
 8002820:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002822:	4b0e      	ldr	r3, [pc, #56]	@ (800285c <HAL_I2C_MspInit+0x148>)
 8002824:	0018      	movs	r0, r3
 8002826:	f000 faab 	bl	8002d80 <HAL_DMA_Init>
 800282a:	1e03      	subs	r3, r0, #0
 800282c:	d001      	beq.n	8002832 <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 800282e:	f7ff ff47 	bl	80026c0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a09      	ldr	r2, [pc, #36]	@ (800285c <HAL_I2C_MspInit+0x148>)
 8002836:	639a      	str	r2, [r3, #56]	@ 0x38
 8002838:	4b08      	ldr	r3, [pc, #32]	@ (800285c <HAL_I2C_MspInit+0x148>)
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800283e:	46c0      	nop			@ (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	b00b      	add	sp, #44	@ 0x2c
 8002844:	bd90      	pop	{r4, r7, pc}
 8002846:	46c0      	nop			@ (mov r8, r8)
 8002848:	40005800 	.word	0x40005800
 800284c:	40021000 	.word	0x40021000
 8002850:	50000400 	.word	0x50000400
 8002854:	2000010c 	.word	0x2000010c
 8002858:	40020008 	.word	0x40020008
 800285c:	20000168 	.word	0x20000168
 8002860:	4002001c 	.word	0x4002001c

08002864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b093      	sub	sp, #76	@ 0x4c
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800286c:	2414      	movs	r4, #20
 800286e:	193b      	adds	r3, r7, r4
 8002870:	0018      	movs	r0, r3
 8002872:	2334      	movs	r3, #52	@ 0x34
 8002874:	001a      	movs	r2, r3
 8002876:	2100      	movs	r1, #0
 8002878:	f003 ff08 	bl	800668c <memset>
  if(htim_base->Instance==TIM1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a28      	ldr	r2, [pc, #160]	@ (8002924 <HAL_TIM_Base_MspInit+0xc0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d125      	bne.n	80028d2 <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002886:	193b      	adds	r3, r7, r4
 8002888:	2280      	movs	r2, #128	@ 0x80
 800288a:	0392      	lsls	r2, r2, #14
 800288c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800288e:	193b      	adds	r3, r7, r4
 8002890:	2200      	movs	r2, #0
 8002892:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002894:	193b      	adds	r3, r7, r4
 8002896:	0018      	movs	r0, r3
 8002898:	f003 f8b0 	bl	80059fc <HAL_RCCEx_PeriphCLKConfig>
 800289c:	1e03      	subs	r3, r0, #0
 800289e:	d001      	beq.n	80028a4 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80028a0:	f7ff ff0e 	bl	80026c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028a4:	4b20      	ldr	r3, [pc, #128]	@ (8002928 <HAL_TIM_Base_MspInit+0xc4>)
 80028a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002928 <HAL_TIM_Base_MspInit+0xc4>)
 80028aa:	2180      	movs	r1, #128	@ 0x80
 80028ac:	0109      	lsls	r1, r1, #4
 80028ae:	430a      	orrs	r2, r1
 80028b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80028b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002928 <HAL_TIM_Base_MspInit+0xc4>)
 80028b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028b6:	2380      	movs	r3, #128	@ 0x80
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 2, 0);
 80028c0:	2200      	movs	r2, #0
 80028c2:	2102      	movs	r1, #2
 80028c4:	200d      	movs	r0, #13
 80028c6:	f000 fa29 	bl	8002d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80028ca:	200d      	movs	r0, #13
 80028cc:	f000 fa3b 	bl	8002d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028d0:	e023      	b.n	800291a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	05db      	lsls	r3, r3, #23
 80028da:	429a      	cmp	r2, r3
 80028dc:	d10c      	bne.n	80028f8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028de:	4b12      	ldr	r3, [pc, #72]	@ (8002928 <HAL_TIM_Base_MspInit+0xc4>)
 80028e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028e2:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <HAL_TIM_Base_MspInit+0xc4>)
 80028e4:	2101      	movs	r1, #1
 80028e6:	430a      	orrs	r2, r1
 80028e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002928 <HAL_TIM_Base_MspInit+0xc4>)
 80028ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ee:	2201      	movs	r2, #1
 80028f0:	4013      	ands	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
}
 80028f6:	e010      	b.n	800291a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0b      	ldr	r2, [pc, #44]	@ (800292c <HAL_TIM_Base_MspInit+0xc8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d10b      	bne.n	800291a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002902:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <HAL_TIM_Base_MspInit+0xc4>)
 8002904:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002906:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <HAL_TIM_Base_MspInit+0xc4>)
 8002908:	2102      	movs	r1, #2
 800290a:	430a      	orrs	r2, r1
 800290c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_TIM_Base_MspInit+0xc4>)
 8002910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002912:	2202      	movs	r2, #2
 8002914:	4013      	ands	r3, r2
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
}
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	b013      	add	sp, #76	@ 0x4c
 8002920:	bd90      	pop	{r4, r7, pc}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	40012c00 	.word	0x40012c00
 8002928:	40021000 	.word	0x40021000
 800292c:	40000400 	.word	0x40000400

08002930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002934:	f003 f838 	bl	80059a8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002938:	46c0      	nop			@ (mov r8, r8)
 800293a:	e7fd      	b.n	8002938 <NMI_Handler+0x8>

0800293c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002940:	46c0      	nop			@ (mov r8, r8)
 8002942:	e7fd      	b.n	8002940 <HardFault_Handler+0x4>

08002944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002948:	46c0      	nop			@ (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002952:	46c0      	nop			@ (mov r8, r8)
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800295c:	f000 f8f2 	bl	8002b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002960:	46c0      	nop			@ (mov r8, r8)
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800296c:	4b03      	ldr	r3, [pc, #12]	@ (800297c <DMA1_Channel1_IRQHandler+0x14>)
 800296e:	0018      	movs	r0, r3
 8002970:	f000 fafa 	bl	8002f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002974:	46c0      	nop			@ (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	46c0      	nop			@ (mov r8, r8)
 800297c:	2000010c 	.word	0x2000010c

08002980 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002984:	4b03      	ldr	r3, [pc, #12]	@ (8002994 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002986:	0018      	movs	r0, r3
 8002988:	f000 faee 	bl	8002f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800298c:	46c0      	nop			@ (mov r8, r8)
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			@ (mov r8, r8)
 8002994:	20000168 	.word	0x20000168

08002998 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800299c:	4b03      	ldr	r3, [pc, #12]	@ (80029ac <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800299e:	0018      	movs	r0, r3
 80029a0:	f003 fac6 	bl	8005f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80029a4:	46c0      	nop			@ (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	46c0      	nop			@ (mov r8, r8)
 80029ac:	200001c4 	.word	0x200001c4

080029b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029b4:	4b03      	ldr	r3, [pc, #12]	@ (80029c4 <TIM2_IRQHandler+0x14>)
 80029b6:	0018      	movs	r0, r3
 80029b8:	f003 faba 	bl	8005f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029bc:	46c0      	nop			@ (mov r8, r8)
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	20000210 	.word	0x20000210

080029c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029cc:	4b03      	ldr	r3, [pc, #12]	@ (80029dc <TIM3_IRQHandler+0x14>)
 80029ce:	0018      	movs	r0, r3
 80029d0:	f003 faae 	bl	8005f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029d4:	46c0      	nop			@ (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	46c0      	nop			@ (mov r8, r8)
 80029dc:	2000025c 	.word	0x2000025c

080029e0 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80029e4:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <I2C2_IRQHandler+0x2c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	23e0      	movs	r3, #224	@ 0xe0
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4013      	ands	r3, r2
 80029f0:	d004      	beq.n	80029fc <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 80029f2:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <I2C2_IRQHandler+0x2c>)
 80029f4:	0018      	movs	r0, r3
 80029f6:	f001 f951 	bl	8003c9c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 80029fa:	e003      	b.n	8002a04 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 80029fc:	4b03      	ldr	r3, [pc, #12]	@ (8002a0c <I2C2_IRQHandler+0x2c>)
 80029fe:	0018      	movs	r0, r3
 8002a00:	f001 f932 	bl	8003c68 <HAL_I2C_EV_IRQHandler>
}
 8002a04:	46c0      	nop			@ (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			@ (mov r8, r8)
 8002a0c:	200000b8 	.word	0x200000b8

08002a10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a14:	46c0      	nop			@ (mov r8, r8)
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a1c:	480d      	ldr	r0, [pc, #52]	@ (8002a54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a20:	f7ff fff6 	bl	8002a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a24:	480c      	ldr	r0, [pc, #48]	@ (8002a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a26:	490d      	ldr	r1, [pc, #52]	@ (8002a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a28:	4a0d      	ldr	r2, [pc, #52]	@ (8002a60 <LoopForever+0xe>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a2c:	e002      	b.n	8002a34 <LoopCopyDataInit>

08002a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a32:	3304      	adds	r3, #4

08002a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a38:	d3f9      	bcc.n	8002a2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a3c:	4c0a      	ldr	r4, [pc, #40]	@ (8002a68 <LoopForever+0x16>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a40:	e001      	b.n	8002a46 <LoopFillZerobss>

08002a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a44:	3204      	adds	r2, #4

08002a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a48:	d3fb      	bcc.n	8002a42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a4a:	f003 fe27 	bl	800669c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002a4e:	f7ff fa33 	bl	8001eb8 <main>

08002a52 <LoopForever>:

LoopForever:
  b LoopForever
 8002a52:	e7fe      	b.n	8002a52 <LoopForever>
  ldr   r0, =_estack
 8002a54:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a5c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002a60:	08006744 	.word	0x08006744
  ldr r2, =_sbss
 8002a64:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002a68:	20000388 	.word	0x20000388

08002a6c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a6c:	e7fe      	b.n	8002a6c <ADC1_COMP_IRQHandler>
	...

08002a70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_Init+0x3c>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <HAL_Init+0x3c>)
 8002a82:	2180      	movs	r1, #128	@ 0x80
 8002a84:	0049      	lsls	r1, r1, #1
 8002a86:	430a      	orrs	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f000 f810 	bl	8002ab0 <HAL_InitTick>
 8002a90:	1e03      	subs	r3, r0, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002a94:	1dfb      	adds	r3, r7, #7
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	e001      	b.n	8002aa0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002a9c:	f7ff fe16 	bl	80026cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002aa0:	1dfb      	adds	r3, r7, #7
 8002aa2:	781b      	ldrb	r3, [r3, #0]
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40022000 	.word	0x40022000

08002ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ab8:	230f      	movs	r3, #15
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b38 <HAL_InitTick+0x88>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d02b      	beq.n	8002b20 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b3c <HAL_InitTick+0x8c>)
 8002aca:	681c      	ldr	r4, [r3, #0]
 8002acc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b38 <HAL_InitTick+0x88>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	23fa      	movs	r3, #250	@ 0xfa
 8002ad4:	0098      	lsls	r0, r3, #2
 8002ad6:	f7fd fb15 	bl	8000104 <__udivsi3>
 8002ada:	0003      	movs	r3, r0
 8002adc:	0019      	movs	r1, r3
 8002ade:	0020      	movs	r0, r4
 8002ae0:	f7fd fb10 	bl	8000104 <__udivsi3>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f000 f93d 	bl	8002d66 <HAL_SYSTICK_Config>
 8002aec:	1e03      	subs	r3, r0, #0
 8002aee:	d112      	bne.n	8002b16 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d80a      	bhi.n	8002b0c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	2301      	movs	r3, #1
 8002afa:	425b      	negs	r3, r3
 8002afc:	2200      	movs	r2, #0
 8002afe:	0018      	movs	r0, r3
 8002b00:	f000 f90c 	bl	8002d1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b04:	4b0e      	ldr	r3, [pc, #56]	@ (8002b40 <HAL_InitTick+0x90>)
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e00d      	b.n	8002b28 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002b0c:	230f      	movs	r3, #15
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	e008      	b.n	8002b28 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b16:	230f      	movs	r3, #15
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e003      	b.n	8002b28 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b20:	230f      	movs	r3, #15
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002b28:	230f      	movs	r3, #15
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	781b      	ldrb	r3, [r3, #0]
}
 8002b2e:	0018      	movs	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b005      	add	sp, #20
 8002b34:	bd90      	pop	{r4, r7, pc}
 8002b36:	46c0      	nop			@ (mov r8, r8)
 8002b38:	2000007c 	.word	0x2000007c
 8002b3c:	20000074 	.word	0x20000074
 8002b40:	20000078 	.word	0x20000078

08002b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b48:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <HAL_IncTick+0x1c>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	001a      	movs	r2, r3
 8002b4e:	4b05      	ldr	r3, [pc, #20]	@ (8002b64 <HAL_IncTick+0x20>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	18d2      	adds	r2, r2, r3
 8002b54:	4b03      	ldr	r3, [pc, #12]	@ (8002b64 <HAL_IncTick+0x20>)
 8002b56:	601a      	str	r2, [r3, #0]
}
 8002b58:	46c0      	nop			@ (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	46c0      	nop			@ (mov r8, r8)
 8002b60:	2000007c 	.word	0x2000007c
 8002b64:	20000384 	.word	0x20000384

08002b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b6c:	4b02      	ldr	r3, [pc, #8]	@ (8002b78 <HAL_GetTick+0x10>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	0018      	movs	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			@ (mov r8, r8)
 8002b78:	20000384 	.word	0x20000384

08002b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b84:	f7ff fff0 	bl	8002b68 <HAL_GetTick>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3301      	adds	r3, #1
 8002b94:	d005      	beq.n	8002ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b96:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc0 <HAL_Delay+0x44>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	001a      	movs	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	189b      	adds	r3, r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ba2:	46c0      	nop			@ (mov r8, r8)
 8002ba4:	f7ff ffe0 	bl	8002b68 <HAL_GetTick>
 8002ba8:	0002      	movs	r2, r0
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d8f7      	bhi.n	8002ba4 <HAL_Delay+0x28>
  {
  }
}
 8002bb4:	46c0      	nop			@ (mov r8, r8)
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b004      	add	sp, #16
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			@ (mov r8, r8)
 8002bc0:	2000007c 	.word	0x2000007c

08002bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	0002      	movs	r2, r0
 8002bcc:	1dfb      	adds	r3, r7, #7
 8002bce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bd0:	1dfb      	adds	r3, r7, #7
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bd6:	d809      	bhi.n	8002bec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd8:	1dfb      	adds	r3, r7, #7
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	001a      	movs	r2, r3
 8002bde:	231f      	movs	r3, #31
 8002be0:	401a      	ands	r2, r3
 8002be2:	4b04      	ldr	r3, [pc, #16]	@ (8002bf4 <__NVIC_EnableIRQ+0x30>)
 8002be4:	2101      	movs	r1, #1
 8002be6:	4091      	lsls	r1, r2
 8002be8:	000a      	movs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002bec:	46c0      	nop			@ (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b002      	add	sp, #8
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	e000e100 	.word	0xe000e100

08002bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	0002      	movs	r2, r0
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	1dfb      	adds	r3, r7, #7
 8002c04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c06:	1dfb      	adds	r3, r7, #7
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c0c:	d828      	bhi.n	8002c60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c0e:	4a2f      	ldr	r2, [pc, #188]	@ (8002ccc <__NVIC_SetPriority+0xd4>)
 8002c10:	1dfb      	adds	r3, r7, #7
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	b25b      	sxtb	r3, r3
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	33c0      	adds	r3, #192	@ 0xc0
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	589b      	ldr	r3, [r3, r2]
 8002c1e:	1dfa      	adds	r2, r7, #7
 8002c20:	7812      	ldrb	r2, [r2, #0]
 8002c22:	0011      	movs	r1, r2
 8002c24:	2203      	movs	r2, #3
 8002c26:	400a      	ands	r2, r1
 8002c28:	00d2      	lsls	r2, r2, #3
 8002c2a:	21ff      	movs	r1, #255	@ 0xff
 8002c2c:	4091      	lsls	r1, r2
 8002c2e:	000a      	movs	r2, r1
 8002c30:	43d2      	mvns	r2, r2
 8002c32:	401a      	ands	r2, r3
 8002c34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	019b      	lsls	r3, r3, #6
 8002c3a:	22ff      	movs	r2, #255	@ 0xff
 8002c3c:	401a      	ands	r2, r3
 8002c3e:	1dfb      	adds	r3, r7, #7
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	0018      	movs	r0, r3
 8002c44:	2303      	movs	r3, #3
 8002c46:	4003      	ands	r3, r0
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c4c:	481f      	ldr	r0, [pc, #124]	@ (8002ccc <__NVIC_SetPriority+0xd4>)
 8002c4e:	1dfb      	adds	r3, r7, #7
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	b25b      	sxtb	r3, r3
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	430a      	orrs	r2, r1
 8002c58:	33c0      	adds	r3, #192	@ 0xc0
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c5e:	e031      	b.n	8002cc4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c60:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd0 <__NVIC_SetPriority+0xd8>)
 8002c62:	1dfb      	adds	r3, r7, #7
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	0019      	movs	r1, r3
 8002c68:	230f      	movs	r3, #15
 8002c6a:	400b      	ands	r3, r1
 8002c6c:	3b08      	subs	r3, #8
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	3306      	adds	r3, #6
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	18d3      	adds	r3, r2, r3
 8002c76:	3304      	adds	r3, #4
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	1dfa      	adds	r2, r7, #7
 8002c7c:	7812      	ldrb	r2, [r2, #0]
 8002c7e:	0011      	movs	r1, r2
 8002c80:	2203      	movs	r2, #3
 8002c82:	400a      	ands	r2, r1
 8002c84:	00d2      	lsls	r2, r2, #3
 8002c86:	21ff      	movs	r1, #255	@ 0xff
 8002c88:	4091      	lsls	r1, r2
 8002c8a:	000a      	movs	r2, r1
 8002c8c:	43d2      	mvns	r2, r2
 8002c8e:	401a      	ands	r2, r3
 8002c90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	019b      	lsls	r3, r3, #6
 8002c96:	22ff      	movs	r2, #255	@ 0xff
 8002c98:	401a      	ands	r2, r3
 8002c9a:	1dfb      	adds	r3, r7, #7
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	4003      	ands	r3, r0
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ca8:	4809      	ldr	r0, [pc, #36]	@ (8002cd0 <__NVIC_SetPriority+0xd8>)
 8002caa:	1dfb      	adds	r3, r7, #7
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	001c      	movs	r4, r3
 8002cb0:	230f      	movs	r3, #15
 8002cb2:	4023      	ands	r3, r4
 8002cb4:	3b08      	subs	r3, #8
 8002cb6:	089b      	lsrs	r3, r3, #2
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	3306      	adds	r3, #6
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	18c3      	adds	r3, r0, r3
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	601a      	str	r2, [r3, #0]
}
 8002cc4:	46c0      	nop			@ (mov r8, r8)
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b003      	add	sp, #12
 8002cca:	bd90      	pop	{r4, r7, pc}
 8002ccc:	e000e100 	.word	0xe000e100
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	1e5a      	subs	r2, r3, #1
 8002ce0:	2380      	movs	r3, #128	@ 0x80
 8002ce2:	045b      	lsls	r3, r3, #17
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d301      	bcc.n	8002cec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e010      	b.n	8002d0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cec:	4b0a      	ldr	r3, [pc, #40]	@ (8002d18 <SysTick_Config+0x44>)
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	3a01      	subs	r2, #1
 8002cf2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	425b      	negs	r3, r3
 8002cf8:	2103      	movs	r1, #3
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f7ff ff7c 	bl	8002bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d00:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <SysTick_Config+0x44>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d06:	4b04      	ldr	r3, [pc, #16]	@ (8002d18 <SysTick_Config+0x44>)
 8002d08:	2207      	movs	r2, #7
 8002d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	0018      	movs	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b002      	add	sp, #8
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	e000e010 	.word	0xe000e010

08002d1c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	210f      	movs	r1, #15
 8002d28:	187b      	adds	r3, r7, r1
 8002d2a:	1c02      	adds	r2, r0, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	187b      	adds	r3, r7, r1
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	b25b      	sxtb	r3, r3
 8002d36:	0011      	movs	r1, r2
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f7ff ff5d 	bl	8002bf8 <__NVIC_SetPriority>
}
 8002d3e:	46c0      	nop			@ (mov r8, r8)
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b004      	add	sp, #16
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	0002      	movs	r2, r0
 8002d4e:	1dfb      	adds	r3, r7, #7
 8002d50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d52:	1dfb      	adds	r3, r7, #7
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b25b      	sxtb	r3, r3
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f7ff ff33 	bl	8002bc4 <__NVIC_EnableIRQ>
}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b002      	add	sp, #8
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	0018      	movs	r0, r3
 8002d72:	f7ff ffaf 	bl	8002cd4 <SysTick_Config>
 8002d76:	0003      	movs	r3, r0
}
 8002d78:	0018      	movs	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b002      	add	sp, #8
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e077      	b.n	8002e82 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a3d      	ldr	r2, [pc, #244]	@ (8002e8c <HAL_DMA_Init+0x10c>)
 8002d98:	4694      	mov	ip, r2
 8002d9a:	4463      	add	r3, ip
 8002d9c:	2114      	movs	r1, #20
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f7fd f9b0 	bl	8000104 <__udivsi3>
 8002da4:	0003      	movs	r3, r0
 8002da6:	009a      	lsls	r2, r3, #2
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2225      	movs	r2, #37	@ 0x25
 8002db0:	2102      	movs	r1, #2
 8002db2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4934      	ldr	r1, [pc, #208]	@ (8002e90 <HAL_DMA_Init+0x110>)
 8002dc0:	400a      	ands	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6819      	ldr	r1, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f000 f971 	bl	80030e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	2380      	movs	r3, #128	@ 0x80
 8002e08:	01db      	lsls	r3, r3, #7
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d102      	bne.n	8002e14 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1c:	213f      	movs	r1, #63	@ 0x3f
 8002e1e:	400a      	ands	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002e2a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d011      	beq.n	8002e58 <HAL_DMA_Init+0xd8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d80d      	bhi.n	8002e58 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f000 f97c 	bl	800313c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	e008      	b.n	8002e6a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2225      	movs	r2, #37	@ 0x25
 8002e74:	2101      	movs	r1, #1
 8002e76:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2224      	movs	r2, #36	@ 0x24
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	0018      	movs	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b002      	add	sp, #8
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	bffdfff8 	.word	0xbffdfff8
 8002e90:	ffff800f 	.word	0xffff800f

08002e94 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9c:	210f      	movs	r1, #15
 8002e9e:	187b      	adds	r3, r7, r1
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2225      	movs	r2, #37	@ 0x25
 8002ea8:	5c9b      	ldrb	r3, [r3, r2]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d006      	beq.n	8002ebe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002eb6:	187b      	adds	r3, r7, r1
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	e049      	b.n	8002f52 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	210e      	movs	r1, #14
 8002eca:	438a      	bics	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2101      	movs	r1, #1
 8002eda:	438a      	bics	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee8:	491d      	ldr	r1, [pc, #116]	@ (8002f60 <HAL_DMA_Abort_IT+0xcc>)
 8002eea:	400a      	ands	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002eee:	4b1d      	ldr	r3, [pc, #116]	@ (8002f64 <HAL_DMA_Abort_IT+0xd0>)
 8002ef0:	6859      	ldr	r1, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	221c      	movs	r2, #28
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2201      	movs	r2, #1
 8002efc:	409a      	lsls	r2, r3
 8002efe:	4b19      	ldr	r3, [pc, #100]	@ (8002f64 <HAL_DMA_Abort_IT+0xd0>)
 8002f00:	430a      	orrs	r2, r1
 8002f02:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f0c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00c      	beq.n	8002f30 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f20:	490f      	ldr	r1, [pc, #60]	@ (8002f60 <HAL_DMA_Abort_IT+0xcc>)
 8002f22:	400a      	ands	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002f2e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2225      	movs	r2, #37	@ 0x25
 8002f34:	2101      	movs	r1, #1
 8002f36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2224      	movs	r2, #36	@ 0x24
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d004      	beq.n	8002f52 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	0010      	movs	r0, r2
 8002f50:	4798      	blx	r3
    }
  }
  return status;
 8002f52:	230f      	movs	r3, #15
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	781b      	ldrb	r3, [r3, #0]
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b004      	add	sp, #16
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	fffffeff 	.word	0xfffffeff
 8002f64:	40020000 	.word	0x40020000

08002f68 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002f70:	4b55      	ldr	r3, [pc, #340]	@ (80030c8 <HAL_DMA_IRQHandler+0x160>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	221c      	movs	r2, #28
 8002f84:	4013      	ands	r3, r2
 8002f86:	2204      	movs	r2, #4
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	0013      	movs	r3, r2
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d027      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x7a>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2204      	movs	r2, #4
 8002f96:	4013      	ands	r3, r2
 8002f98:	d023      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d107      	bne.n	8002fb6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2104      	movs	r1, #4
 8002fb2:	438a      	bics	r2, r1
 8002fb4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002fb6:	4b44      	ldr	r3, [pc, #272]	@ (80030c8 <HAL_DMA_IRQHandler+0x160>)
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	221c      	movs	r2, #28
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2204      	movs	r2, #4
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	4b40      	ldr	r3, [pc, #256]	@ (80030c8 <HAL_DMA_IRQHandler+0x160>)
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d100      	bne.n	8002fd6 <HAL_DMA_IRQHandler+0x6e>
 8002fd4:	e073      	b.n	80030be <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	0010      	movs	r0, r2
 8002fde:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002fe0:	e06d      	b.n	80030be <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	221c      	movs	r2, #28
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2202      	movs	r2, #2
 8002fec:	409a      	lsls	r2, r3
 8002fee:	0013      	movs	r3, r2
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d02e      	beq.n	8003054 <HAL_DMA_IRQHandler+0xec>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d02a      	beq.n	8003054 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2220      	movs	r2, #32
 8003006:	4013      	ands	r3, r2
 8003008:	d10b      	bne.n	8003022 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	210a      	movs	r1, #10
 8003016:	438a      	bics	r2, r1
 8003018:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2225      	movs	r2, #37	@ 0x25
 800301e:	2101      	movs	r1, #1
 8003020:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003022:	4b29      	ldr	r3, [pc, #164]	@ (80030c8 <HAL_DMA_IRQHandler+0x160>)
 8003024:	6859      	ldr	r1, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	221c      	movs	r2, #28
 800302c:	4013      	ands	r3, r2
 800302e:	2202      	movs	r2, #2
 8003030:	409a      	lsls	r2, r3
 8003032:	4b25      	ldr	r3, [pc, #148]	@ (80030c8 <HAL_DMA_IRQHandler+0x160>)
 8003034:	430a      	orrs	r2, r1
 8003036:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2224      	movs	r2, #36	@ 0x24
 800303c:	2100      	movs	r1, #0
 800303e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d03a      	beq.n	80030be <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	0010      	movs	r0, r2
 8003050:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003052:	e034      	b.n	80030be <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003058:	221c      	movs	r2, #28
 800305a:	4013      	ands	r3, r2
 800305c:	2208      	movs	r2, #8
 800305e:	409a      	lsls	r2, r3
 8003060:	0013      	movs	r3, r2
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4013      	ands	r3, r2
 8003066:	d02b      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x158>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2208      	movs	r2, #8
 800306c:	4013      	ands	r3, r2
 800306e:	d027      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	210e      	movs	r1, #14
 800307c:	438a      	bics	r2, r1
 800307e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003080:	4b11      	ldr	r3, [pc, #68]	@ (80030c8 <HAL_DMA_IRQHandler+0x160>)
 8003082:	6859      	ldr	r1, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	221c      	movs	r2, #28
 800308a:	4013      	ands	r3, r2
 800308c:	2201      	movs	r2, #1
 800308e:	409a      	lsls	r2, r3
 8003090:	4b0d      	ldr	r3, [pc, #52]	@ (80030c8 <HAL_DMA_IRQHandler+0x160>)
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2225      	movs	r2, #37	@ 0x25
 80030a0:	2101      	movs	r1, #1
 80030a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2224      	movs	r2, #36	@ 0x24
 80030a8:	2100      	movs	r1, #0
 80030aa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	0010      	movs	r0, r2
 80030bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	46c0      	nop			@ (mov r8, r8)
}
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b004      	add	sp, #16
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40020000 	.word	0x40020000

080030cc <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2225      	movs	r2, #37	@ 0x25
 80030d8:	5c9b      	ldrb	r3, [r3, r2]
 80030da:	b2db      	uxtb	r3, r3
}
 80030dc:	0018      	movs	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	4a10      	ldr	r2, [pc, #64]	@ (8003134 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80030f4:	4694      	mov	ip, r2
 80030f6:	4463      	add	r3, ip
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	001a      	movs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	001a      	movs	r2, r3
 8003106:	23ff      	movs	r3, #255	@ 0xff
 8003108:	4013      	ands	r3, r2
 800310a:	3b08      	subs	r3, #8
 800310c:	2114      	movs	r1, #20
 800310e:	0018      	movs	r0, r3
 8003110:	f7fc fff8 	bl	8000104 <__udivsi3>
 8003114:	0003      	movs	r3, r0
 8003116:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a07      	ldr	r2, [pc, #28]	@ (8003138 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800311c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	221f      	movs	r2, #31
 8003122:	4013      	ands	r3, r2
 8003124:	2201      	movs	r2, #1
 8003126:	409a      	lsls	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800312c:	46c0      	nop			@ (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b004      	add	sp, #16
 8003132:	bd80      	pop	{r7, pc}
 8003134:	10008200 	.word	0x10008200
 8003138:	40020880 	.word	0x40020880

0800313c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	223f      	movs	r2, #63	@ 0x3f
 800314a:	4013      	ands	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4a0a      	ldr	r2, [pc, #40]	@ (800317c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003152:	4694      	mov	ip, r2
 8003154:	4463      	add	r3, ip
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	001a      	movs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a07      	ldr	r2, [pc, #28]	@ (8003180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003162:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3b01      	subs	r3, #1
 8003168:	2203      	movs	r2, #3
 800316a:	4013      	ands	r3, r2
 800316c:	2201      	movs	r2, #1
 800316e:	409a      	lsls	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003174:	46c0      	nop			@ (mov r8, r8)
 8003176:	46bd      	mov	sp, r7
 8003178:	b004      	add	sp, #16
 800317a:	bd80      	pop	{r7, pc}
 800317c:	1000823f 	.word	0x1000823f
 8003180:	40020940 	.word	0x40020940

08003184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003192:	e147      	b.n	8003424 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2101      	movs	r1, #1
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4091      	lsls	r1, r2
 800319e:	000a      	movs	r2, r1
 80031a0:	4013      	ands	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d100      	bne.n	80031ac <HAL_GPIO_Init+0x28>
 80031aa:	e138      	b.n	800341e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2203      	movs	r2, #3
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d005      	beq.n	80031c4 <HAL_GPIO_Init+0x40>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2203      	movs	r2, #3
 80031be:	4013      	ands	r3, r2
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d130      	bne.n	8003226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	2203      	movs	r2, #3
 80031d0:	409a      	lsls	r2, r3
 80031d2:	0013      	movs	r3, r2
 80031d4:	43da      	mvns	r2, r3
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4013      	ands	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	409a      	lsls	r2, r3
 80031e6:	0013      	movs	r3, r2
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031fa:	2201      	movs	r2, #1
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	409a      	lsls	r2, r3
 8003200:	0013      	movs	r3, r2
 8003202:	43da      	mvns	r2, r3
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	2201      	movs	r2, #1
 8003212:	401a      	ands	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	409a      	lsls	r2, r3
 8003218:	0013      	movs	r3, r2
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2203      	movs	r2, #3
 800322c:	4013      	ands	r3, r2
 800322e:	2b03      	cmp	r3, #3
 8003230:	d017      	beq.n	8003262 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	2203      	movs	r2, #3
 800323e:	409a      	lsls	r2, r3
 8003240:	0013      	movs	r3, r2
 8003242:	43da      	mvns	r2, r3
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4013      	ands	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	409a      	lsls	r2, r3
 8003254:	0013      	movs	r3, r2
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2203      	movs	r2, #3
 8003268:	4013      	ands	r3, r2
 800326a:	2b02      	cmp	r3, #2
 800326c:	d123      	bne.n	80032b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	08da      	lsrs	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3208      	adds	r2, #8
 8003276:	0092      	lsls	r2, r2, #2
 8003278:	58d3      	ldr	r3, [r2, r3]
 800327a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2207      	movs	r2, #7
 8003280:	4013      	ands	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	220f      	movs	r2, #15
 8003286:	409a      	lsls	r2, r3
 8003288:	0013      	movs	r3, r2
 800328a:	43da      	mvns	r2, r3
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4013      	ands	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2107      	movs	r1, #7
 800329a:	400b      	ands	r3, r1
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	409a      	lsls	r2, r3
 80032a0:	0013      	movs	r3, r2
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	08da      	lsrs	r2, r3, #3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3208      	adds	r2, #8
 80032b0:	0092      	lsls	r2, r2, #2
 80032b2:	6939      	ldr	r1, [r7, #16]
 80032b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	2203      	movs	r2, #3
 80032c2:	409a      	lsls	r2, r3
 80032c4:	0013      	movs	r3, r2
 80032c6:	43da      	mvns	r2, r3
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4013      	ands	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2203      	movs	r2, #3
 80032d4:	401a      	ands	r2, r3
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	409a      	lsls	r2, r3
 80032dc:	0013      	movs	r3, r2
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	23c0      	movs	r3, #192	@ 0xc0
 80032f0:	029b      	lsls	r3, r3, #10
 80032f2:	4013      	ands	r3, r2
 80032f4:	d100      	bne.n	80032f8 <HAL_GPIO_Init+0x174>
 80032f6:	e092      	b.n	800341e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80032f8:	4a50      	ldr	r2, [pc, #320]	@ (800343c <HAL_GPIO_Init+0x2b8>)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	089b      	lsrs	r3, r3, #2
 80032fe:	3318      	adds	r3, #24
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	589b      	ldr	r3, [r3, r2]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2203      	movs	r2, #3
 800330a:	4013      	ands	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	220f      	movs	r2, #15
 8003310:	409a      	lsls	r2, r3
 8003312:	0013      	movs	r3, r2
 8003314:	43da      	mvns	r2, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	23a0      	movs	r3, #160	@ 0xa0
 8003320:	05db      	lsls	r3, r3, #23
 8003322:	429a      	cmp	r2, r3
 8003324:	d013      	beq.n	800334e <HAL_GPIO_Init+0x1ca>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a45      	ldr	r2, [pc, #276]	@ (8003440 <HAL_GPIO_Init+0x2bc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00d      	beq.n	800334a <HAL_GPIO_Init+0x1c6>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a44      	ldr	r2, [pc, #272]	@ (8003444 <HAL_GPIO_Init+0x2c0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <HAL_GPIO_Init+0x1c2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a43      	ldr	r2, [pc, #268]	@ (8003448 <HAL_GPIO_Init+0x2c4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d101      	bne.n	8003342 <HAL_GPIO_Init+0x1be>
 800333e:	2303      	movs	r3, #3
 8003340:	e006      	b.n	8003350 <HAL_GPIO_Init+0x1cc>
 8003342:	2305      	movs	r3, #5
 8003344:	e004      	b.n	8003350 <HAL_GPIO_Init+0x1cc>
 8003346:	2302      	movs	r3, #2
 8003348:	e002      	b.n	8003350 <HAL_GPIO_Init+0x1cc>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <HAL_GPIO_Init+0x1cc>
 800334e:	2300      	movs	r3, #0
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	2103      	movs	r1, #3
 8003354:	400a      	ands	r2, r1
 8003356:	00d2      	lsls	r2, r2, #3
 8003358:	4093      	lsls	r3, r2
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003360:	4936      	ldr	r1, [pc, #216]	@ (800343c <HAL_GPIO_Init+0x2b8>)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	089b      	lsrs	r3, r3, #2
 8003366:	3318      	adds	r3, #24
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800336e:	4b33      	ldr	r3, [pc, #204]	@ (800343c <HAL_GPIO_Init+0x2b8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	43da      	mvns	r2, r3
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4013      	ands	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	2380      	movs	r3, #128	@ 0x80
 8003384:	035b      	lsls	r3, r3, #13
 8003386:	4013      	ands	r3, r2
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003392:	4b2a      	ldr	r3, [pc, #168]	@ (800343c <HAL_GPIO_Init+0x2b8>)
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003398:	4b28      	ldr	r3, [pc, #160]	@ (800343c <HAL_GPIO_Init+0x2b8>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	43da      	mvns	r2, r3
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	2380      	movs	r3, #128	@ 0x80
 80033ae:	039b      	lsls	r3, r3, #14
 80033b0:	4013      	ands	r3, r2
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033bc:	4b1f      	ldr	r3, [pc, #124]	@ (800343c <HAL_GPIO_Init+0x2b8>)
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033c2:	4a1e      	ldr	r2, [pc, #120]	@ (800343c <HAL_GPIO_Init+0x2b8>)
 80033c4:	2384      	movs	r3, #132	@ 0x84
 80033c6:	58d3      	ldr	r3, [r2, r3]
 80033c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	43da      	mvns	r2, r3
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	2380      	movs	r3, #128	@ 0x80
 80033da:	029b      	lsls	r3, r3, #10
 80033dc:	4013      	ands	r3, r2
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033e8:	4914      	ldr	r1, [pc, #80]	@ (800343c <HAL_GPIO_Init+0x2b8>)
 80033ea:	2284      	movs	r2, #132	@ 0x84
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80033f0:	4a12      	ldr	r2, [pc, #72]	@ (800343c <HAL_GPIO_Init+0x2b8>)
 80033f2:	2380      	movs	r3, #128	@ 0x80
 80033f4:	58d3      	ldr	r3, [r2, r3]
 80033f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	43da      	mvns	r2, r3
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4013      	ands	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	2380      	movs	r3, #128	@ 0x80
 8003408:	025b      	lsls	r3, r3, #9
 800340a:	4013      	ands	r3, r2
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003416:	4909      	ldr	r1, [pc, #36]	@ (800343c <HAL_GPIO_Init+0x2b8>)
 8003418:	2280      	movs	r2, #128	@ 0x80
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	3301      	adds	r3, #1
 8003422:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	40da      	lsrs	r2, r3
 800342c:	1e13      	subs	r3, r2, #0
 800342e:	d000      	beq.n	8003432 <HAL_GPIO_Init+0x2ae>
 8003430:	e6b0      	b.n	8003194 <HAL_GPIO_Init+0x10>
  }
}
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	46c0      	nop			@ (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b006      	add	sp, #24
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40021800 	.word	0x40021800
 8003440:	50000400 	.word	0x50000400
 8003444:	50000800 	.word	0x50000800
 8003448:	50000c00 	.word	0x50000c00

0800344c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	000a      	movs	r2, r1
 8003456:	1cbb      	adds	r3, r7, #2
 8003458:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	1cba      	adds	r2, r7, #2
 8003460:	8812      	ldrh	r2, [r2, #0]
 8003462:	4013      	ands	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003466:	230f      	movs	r3, #15
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	2201      	movs	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
 800346e:	e003      	b.n	8003478 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003470:	230f      	movs	r3, #15
 8003472:	18fb      	adds	r3, r7, r3
 8003474:	2200      	movs	r2, #0
 8003476:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003478:	230f      	movs	r3, #15
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	781b      	ldrb	r3, [r3, #0]
}
 800347e:	0018      	movs	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	b004      	add	sp, #16
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	0008      	movs	r0, r1
 8003490:	0011      	movs	r1, r2
 8003492:	1cbb      	adds	r3, r7, #2
 8003494:	1c02      	adds	r2, r0, #0
 8003496:	801a      	strh	r2, [r3, #0]
 8003498:	1c7b      	adds	r3, r7, #1
 800349a:	1c0a      	adds	r2, r1, #0
 800349c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800349e:	1c7b      	adds	r3, r7, #1
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d004      	beq.n	80034b0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034a6:	1cbb      	adds	r3, r7, #2
 80034a8:	881a      	ldrh	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034ae:	e003      	b.n	80034b8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034b0:	1cbb      	adds	r3, r7, #2
 80034b2:	881a      	ldrh	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034b8:	46c0      	nop			@ (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b002      	add	sp, #8
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e08f      	b.n	80035f2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2241      	movs	r2, #65	@ 0x41
 80034d6:	5c9b      	ldrb	r3, [r3, r2]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d107      	bne.n	80034ee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2240      	movs	r2, #64	@ 0x40
 80034e2:	2100      	movs	r1, #0
 80034e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7ff f913 	bl	8002714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2241      	movs	r2, #65	@ 0x41
 80034f2:	2124      	movs	r1, #36	@ 0x24
 80034f4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2101      	movs	r1, #1
 8003502:	438a      	bics	r2, r1
 8003504:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	493b      	ldr	r1, [pc, #236]	@ (80035fc <HAL_I2C_Init+0x13c>)
 8003510:	400a      	ands	r2, r1
 8003512:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4938      	ldr	r1, [pc, #224]	@ (8003600 <HAL_I2C_Init+0x140>)
 8003520:	400a      	ands	r2, r1
 8003522:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d108      	bne.n	800353e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2180      	movs	r1, #128	@ 0x80
 8003536:	0209      	lsls	r1, r1, #8
 8003538:	430a      	orrs	r2, r1
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	e007      	b.n	800354e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2184      	movs	r1, #132	@ 0x84
 8003548:	0209      	lsls	r1, r1, #8
 800354a:	430a      	orrs	r2, r1
 800354c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d109      	bne.n	800356a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2180      	movs	r1, #128	@ 0x80
 8003562:	0109      	lsls	r1, r1, #4
 8003564:	430a      	orrs	r2, r1
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	e007      	b.n	800357a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4923      	ldr	r1, [pc, #140]	@ (8003604 <HAL_I2C_Init+0x144>)
 8003576:	400a      	ands	r2, r1
 8003578:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4920      	ldr	r1, [pc, #128]	@ (8003608 <HAL_I2C_Init+0x148>)
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	491a      	ldr	r1, [pc, #104]	@ (8003600 <HAL_I2C_Init+0x140>)
 8003596:	400a      	ands	r2, r1
 8003598:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69d9      	ldr	r1, [r3, #28]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1a      	ldr	r2, [r3, #32]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2101      	movs	r1, #1
 80035d0:	430a      	orrs	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2241      	movs	r2, #65	@ 0x41
 80035de:	2120      	movs	r1, #32
 80035e0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2242      	movs	r2, #66	@ 0x42
 80035ec:	2100      	movs	r1, #0
 80035ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	0018      	movs	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	b002      	add	sp, #8
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	f0ffffff 	.word	0xf0ffffff
 8003600:	ffff7fff 	.word	0xffff7fff
 8003604:	fffff7ff 	.word	0xfffff7ff
 8003608:	02008000 	.word	0x02008000

0800360c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800360c:	b590      	push	{r4, r7, lr}
 800360e:	b089      	sub	sp, #36	@ 0x24
 8003610:	af02      	add	r7, sp, #8
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	0008      	movs	r0, r1
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	0019      	movs	r1, r3
 800361a:	230a      	movs	r3, #10
 800361c:	18fb      	adds	r3, r7, r3
 800361e:	1c02      	adds	r2, r0, #0
 8003620:	801a      	strh	r2, [r3, #0]
 8003622:	2308      	movs	r3, #8
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	1c0a      	adds	r2, r1, #0
 8003628:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2241      	movs	r2, #65	@ 0x41
 800362e:	5c9b      	ldrb	r3, [r3, r2]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b20      	cmp	r3, #32
 8003634:	d000      	beq.n	8003638 <HAL_I2C_Master_Transmit+0x2c>
 8003636:	e10a      	b.n	800384e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2240      	movs	r2, #64	@ 0x40
 800363c:	5c9b      	ldrb	r3, [r3, r2]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_I2C_Master_Transmit+0x3a>
 8003642:	2302      	movs	r3, #2
 8003644:	e104      	b.n	8003850 <HAL_I2C_Master_Transmit+0x244>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2240      	movs	r2, #64	@ 0x40
 800364a:	2101      	movs	r1, #1
 800364c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800364e:	f7ff fa8b 	bl	8002b68 <HAL_GetTick>
 8003652:	0003      	movs	r3, r0
 8003654:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003656:	2380      	movs	r3, #128	@ 0x80
 8003658:	0219      	lsls	r1, r3, #8
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2319      	movs	r3, #25
 8003662:	2201      	movs	r2, #1
 8003664:	f001 f900 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 8003668:	1e03      	subs	r3, r0, #0
 800366a:	d001      	beq.n	8003670 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0ef      	b.n	8003850 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2241      	movs	r2, #65	@ 0x41
 8003674:	2121      	movs	r1, #33	@ 0x21
 8003676:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2242      	movs	r2, #66	@ 0x42
 800367c:	2110      	movs	r1, #16
 800367e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2208      	movs	r2, #8
 8003690:	18ba      	adds	r2, r7, r2
 8003692:	8812      	ldrh	r2, [r2, #0]
 8003694:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2bff      	cmp	r3, #255	@ 0xff
 80036a4:	d906      	bls.n	80036b4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	22ff      	movs	r2, #255	@ 0xff
 80036aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80036ac:	2380      	movs	r3, #128	@ 0x80
 80036ae:	045b      	lsls	r3, r3, #17
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	e007      	b.n	80036c4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80036be:	2380      	movs	r3, #128	@ 0x80
 80036c0:	049b      	lsls	r3, r3, #18
 80036c2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d027      	beq.n	800371c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	781a      	ldrb	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003700:	b2db      	uxtb	r3, r3
 8003702:	3301      	adds	r3, #1
 8003704:	b2da      	uxtb	r2, r3
 8003706:	697c      	ldr	r4, [r7, #20]
 8003708:	230a      	movs	r3, #10
 800370a:	18fb      	adds	r3, r7, r3
 800370c:	8819      	ldrh	r1, [r3, #0]
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	4b51      	ldr	r3, [pc, #324]	@ (8003858 <HAL_I2C_Master_Transmit+0x24c>)
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	0023      	movs	r3, r4
 8003716:	f001 fb1f 	bl	8004d58 <I2C_TransferConfig>
 800371a:	e06f      	b.n	80037fc <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003720:	b2da      	uxtb	r2, r3
 8003722:	697c      	ldr	r4, [r7, #20]
 8003724:	230a      	movs	r3, #10
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	8819      	ldrh	r1, [r3, #0]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	4b4a      	ldr	r3, [pc, #296]	@ (8003858 <HAL_I2C_Master_Transmit+0x24c>)
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	0023      	movs	r3, r4
 8003732:	f001 fb11 	bl	8004d58 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003736:	e061      	b.n	80037fc <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	0018      	movs	r0, r3
 8003740:	f001 f8ea 	bl	8004918 <I2C_WaitOnTXISFlagUntilTimeout>
 8003744:	1e03      	subs	r3, r0, #0
 8003746:	d001      	beq.n	800374c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e081      	b.n	8003850 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	781a      	ldrb	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d03a      	beq.n	80037fc <HAL_I2C_Master_Transmit+0x1f0>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378a:	2b00      	cmp	r3, #0
 800378c:	d136      	bne.n	80037fc <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800378e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	0013      	movs	r3, r2
 8003798:	2200      	movs	r2, #0
 800379a:	2180      	movs	r1, #128	@ 0x80
 800379c:	f001 f864 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 80037a0:	1e03      	subs	r3, r0, #0
 80037a2:	d001      	beq.n	80037a8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e053      	b.n	8003850 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2bff      	cmp	r3, #255	@ 0xff
 80037b0:	d911      	bls.n	80037d6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	22ff      	movs	r2, #255	@ 0xff
 80037b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	2380      	movs	r3, #128	@ 0x80
 80037c0:	045c      	lsls	r4, r3, #17
 80037c2:	230a      	movs	r3, #10
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	8819      	ldrh	r1, [r3, #0]
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	2300      	movs	r3, #0
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	0023      	movs	r3, r4
 80037d0:	f001 fac2 	bl	8004d58 <I2C_TransferConfig>
 80037d4:	e012      	b.n	80037fc <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	2380      	movs	r3, #128	@ 0x80
 80037e8:	049c      	lsls	r4, r3, #18
 80037ea:	230a      	movs	r3, #10
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	8819      	ldrh	r1, [r3, #0]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	2300      	movs	r3, #0
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	0023      	movs	r3, r4
 80037f8:	f001 faae 	bl	8004d58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d198      	bne.n	8003738 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	0018      	movs	r0, r3
 800380e:	f001 f8c9 	bl	80049a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003812:	1e03      	subs	r3, r0, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e01a      	b.n	8003850 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2220      	movs	r2, #32
 8003820:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	490b      	ldr	r1, [pc, #44]	@ (800385c <HAL_I2C_Master_Transmit+0x250>)
 800382e:	400a      	ands	r2, r1
 8003830:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2241      	movs	r2, #65	@ 0x41
 8003836:	2120      	movs	r1, #32
 8003838:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2242      	movs	r2, #66	@ 0x42
 800383e:	2100      	movs	r1, #0
 8003840:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2240      	movs	r2, #64	@ 0x40
 8003846:	2100      	movs	r1, #0
 8003848:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	e000      	b.n	8003850 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800384e:	2302      	movs	r3, #2
  }
}
 8003850:	0018      	movs	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	b007      	add	sp, #28
 8003856:	bd90      	pop	{r4, r7, pc}
 8003858:	80002000 	.word	0x80002000
 800385c:	fe00e800 	.word	0xfe00e800

08003860 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b089      	sub	sp, #36	@ 0x24
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	0008      	movs	r0, r1
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	0019      	movs	r1, r3
 800386e:	230a      	movs	r3, #10
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	1c02      	adds	r2, r0, #0
 8003874:	801a      	strh	r2, [r3, #0]
 8003876:	2308      	movs	r3, #8
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	1c0a      	adds	r2, r1, #0
 800387c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2241      	movs	r2, #65	@ 0x41
 8003882:	5c9b      	ldrb	r3, [r3, r2]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b20      	cmp	r3, #32
 8003888:	d000      	beq.n	800388c <HAL_I2C_Master_Receive+0x2c>
 800388a:	e0e8      	b.n	8003a5e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2240      	movs	r2, #64	@ 0x40
 8003890:	5c9b      	ldrb	r3, [r3, r2]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_I2C_Master_Receive+0x3a>
 8003896:	2302      	movs	r3, #2
 8003898:	e0e2      	b.n	8003a60 <HAL_I2C_Master_Receive+0x200>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2240      	movs	r2, #64	@ 0x40
 800389e:	2101      	movs	r1, #1
 80038a0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038a2:	f7ff f961 	bl	8002b68 <HAL_GetTick>
 80038a6:	0003      	movs	r3, r0
 80038a8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038aa:	2380      	movs	r3, #128	@ 0x80
 80038ac:	0219      	lsls	r1, r3, #8
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	2319      	movs	r3, #25
 80038b6:	2201      	movs	r2, #1
 80038b8:	f000 ffd6 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 80038bc:	1e03      	subs	r3, r0, #0
 80038be:	d001      	beq.n	80038c4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0cd      	b.n	8003a60 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2241      	movs	r2, #65	@ 0x41
 80038c8:	2122      	movs	r1, #34	@ 0x22
 80038ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2242      	movs	r2, #66	@ 0x42
 80038d0:	2110      	movs	r1, #16
 80038d2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2208      	movs	r2, #8
 80038e4:	18ba      	adds	r2, r7, r2
 80038e6:	8812      	ldrh	r2, [r2, #0]
 80038e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2bff      	cmp	r3, #255	@ 0xff
 80038f8:	d911      	bls.n	800391e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	22ff      	movs	r2, #255	@ 0xff
 80038fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003904:	b2da      	uxtb	r2, r3
 8003906:	2380      	movs	r3, #128	@ 0x80
 8003908:	045c      	lsls	r4, r3, #17
 800390a:	230a      	movs	r3, #10
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	8819      	ldrh	r1, [r3, #0]
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	4b55      	ldr	r3, [pc, #340]	@ (8003a68 <HAL_I2C_Master_Receive+0x208>)
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	0023      	movs	r3, r4
 8003918:	f001 fa1e 	bl	8004d58 <I2C_TransferConfig>
 800391c:	e076      	b.n	8003a0c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392c:	b2da      	uxtb	r2, r3
 800392e:	2380      	movs	r3, #128	@ 0x80
 8003930:	049c      	lsls	r4, r3, #18
 8003932:	230a      	movs	r3, #10
 8003934:	18fb      	adds	r3, r7, r3
 8003936:	8819      	ldrh	r1, [r3, #0]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	4b4b      	ldr	r3, [pc, #300]	@ (8003a68 <HAL_I2C_Master_Receive+0x208>)
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	0023      	movs	r3, r4
 8003940:	f001 fa0a 	bl	8004d58 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003944:	e062      	b.n	8003a0c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	0018      	movs	r0, r3
 800394e:	f001 f86d 	bl	8004a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003952:	1e03      	subs	r3, r0, #0
 8003954:	d001      	beq.n	800395a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e082      	b.n	8003a60 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d03a      	beq.n	8003a0c <HAL_I2C_Master_Receive+0x1ac>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399a:	2b00      	cmp	r3, #0
 800399c:	d136      	bne.n	8003a0c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800399e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	0013      	movs	r3, r2
 80039a8:	2200      	movs	r2, #0
 80039aa:	2180      	movs	r1, #128	@ 0x80
 80039ac:	f000 ff5c 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 80039b0:	1e03      	subs	r3, r0, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e053      	b.n	8003a60 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2bff      	cmp	r3, #255	@ 0xff
 80039c0:	d911      	bls.n	80039e6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	22ff      	movs	r2, #255	@ 0xff
 80039c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	2380      	movs	r3, #128	@ 0x80
 80039d0:	045c      	lsls	r4, r3, #17
 80039d2:	230a      	movs	r3, #10
 80039d4:	18fb      	adds	r3, r7, r3
 80039d6:	8819      	ldrh	r1, [r3, #0]
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	2300      	movs	r3, #0
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	0023      	movs	r3, r4
 80039e0:	f001 f9ba 	bl	8004d58 <I2C_TransferConfig>
 80039e4:	e012      	b.n	8003a0c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	2380      	movs	r3, #128	@ 0x80
 80039f8:	049c      	lsls	r4, r3, #18
 80039fa:	230a      	movs	r3, #10
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	8819      	ldrh	r1, [r3, #0]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	2300      	movs	r3, #0
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	0023      	movs	r3, r4
 8003a08:	f001 f9a6 	bl	8004d58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d197      	bne.n	8003946 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f000 ffc1 	bl	80049a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e01a      	b.n	8003a60 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	490b      	ldr	r1, [pc, #44]	@ (8003a6c <HAL_I2C_Master_Receive+0x20c>)
 8003a3e:	400a      	ands	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2241      	movs	r2, #65	@ 0x41
 8003a46:	2120      	movs	r1, #32
 8003a48:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2242      	movs	r2, #66	@ 0x42
 8003a4e:	2100      	movs	r1, #0
 8003a50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2240      	movs	r2, #64	@ 0x40
 8003a56:	2100      	movs	r1, #0
 8003a58:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e000      	b.n	8003a60 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
  }
}
 8003a60:	0018      	movs	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b007      	add	sp, #28
 8003a66:	bd90      	pop	{r4, r7, pc}
 8003a68:	80002400 	.word	0x80002400
 8003a6c:	fe00e800 	.word	0xfe00e800

08003a70 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08a      	sub	sp, #40	@ 0x28
 8003a74:	af02      	add	r7, sp, #8
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	230a      	movs	r3, #10
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	1c0a      	adds	r2, r1, #0
 8003a82:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2241      	movs	r2, #65	@ 0x41
 8003a8c:	5c9b      	ldrb	r3, [r3, r2]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d000      	beq.n	8003a96 <HAL_I2C_IsDeviceReady+0x26>
 8003a94:	e0df      	b.n	8003c56 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699a      	ldr	r2, [r3, #24]
 8003a9c:	2380      	movs	r3, #128	@ 0x80
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	401a      	ands	r2, r3
 8003aa2:	2380      	movs	r3, #128	@ 0x80
 8003aa4:	021b      	lsls	r3, r3, #8
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d101      	bne.n	8003aae <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e0d4      	b.n	8003c58 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2240      	movs	r2, #64	@ 0x40
 8003ab2:	5c9b      	ldrb	r3, [r3, r2]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_I2C_IsDeviceReady+0x4c>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e0cd      	b.n	8003c58 <HAL_I2C_IsDeviceReady+0x1e8>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2240      	movs	r2, #64	@ 0x40
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2241      	movs	r2, #65	@ 0x41
 8003ac8:	2124      	movs	r1, #36	@ 0x24
 8003aca:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d107      	bne.n	8003aea <HAL_I2C_IsDeviceReady+0x7a>
 8003ada:	230a      	movs	r3, #10
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	059b      	lsls	r3, r3, #22
 8003ae2:	0d9b      	lsrs	r3, r3, #22
 8003ae4:	4a5e      	ldr	r2, [pc, #376]	@ (8003c60 <HAL_I2C_IsDeviceReady+0x1f0>)
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	e006      	b.n	8003af8 <HAL_I2C_IsDeviceReady+0x88>
 8003aea:	230a      	movs	r3, #10
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	059b      	lsls	r3, r3, #22
 8003af2:	0d9b      	lsrs	r3, r3, #22
 8003af4:	4a5b      	ldr	r2, [pc, #364]	@ (8003c64 <HAL_I2C_IsDeviceReady+0x1f4>)
 8003af6:	431a      	orrs	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003afe:	f7ff f833 	bl	8002b68 <HAL_GetTick>
 8003b02:	0003      	movs	r3, r0
 8003b04:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	4013      	ands	r3, r2
 8003b10:	3b20      	subs	r3, #32
 8003b12:	425a      	negs	r2, r3
 8003b14:	4153      	adcs	r3, r2
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	231f      	movs	r3, #31
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2210      	movs	r2, #16
 8003b26:	4013      	ands	r3, r2
 8003b28:	3b10      	subs	r3, #16
 8003b2a:	425a      	negs	r2, r3
 8003b2c:	4153      	adcs	r3, r2
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	231e      	movs	r3, #30
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003b36:	e035      	b.n	8003ba4 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	d01a      	beq.n	8003b74 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7ff f813 	bl	8002b68 <HAL_GetTick>
 8003b42:	0002      	movs	r2, r0
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <HAL_I2C_IsDeviceReady+0xe4>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10f      	bne.n	8003b74 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2241      	movs	r2, #65	@ 0x41
 8003b58:	2120      	movs	r1, #32
 8003b5a:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b60:	2220      	movs	r2, #32
 8003b62:	431a      	orrs	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2240      	movs	r2, #64	@ 0x40
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e071      	b.n	8003c58 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	3b20      	subs	r3, #32
 8003b80:	425a      	negs	r2, r3
 8003b82:	4153      	adcs	r3, r2
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	231f      	movs	r3, #31
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2210      	movs	r2, #16
 8003b94:	4013      	ands	r3, r2
 8003b96:	3b10      	subs	r3, #16
 8003b98:	425a      	negs	r2, r3
 8003b9a:	4153      	adcs	r3, r2
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	231e      	movs	r3, #30
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003ba4:	231f      	movs	r3, #31
 8003ba6:	18fb      	adds	r3, r7, r3
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d104      	bne.n	8003bb8 <HAL_I2C_IsDeviceReady+0x148>
 8003bae:	231e      	movs	r3, #30
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0bf      	beq.n	8003b38 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	2210      	movs	r2, #16
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b10      	cmp	r3, #16
 8003bc4:	d01a      	beq.n	8003bfc <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	0013      	movs	r3, r2
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2120      	movs	r1, #32
 8003bd4:	f000 fe48 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 8003bd8:	1e03      	subs	r3, r0, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e03b      	b.n	8003c58 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2220      	movs	r2, #32
 8003be6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2241      	movs	r2, #65	@ 0x41
 8003bec:	2120      	movs	r1, #32
 8003bee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2240      	movs	r2, #64	@ 0x40
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	e02d      	b.n	8003c58 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	0013      	movs	r3, r2
 8003c06:	2200      	movs	r2, #0
 8003c08:	2120      	movs	r1, #32
 8003c0a:	f000 fe2d 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 8003c0e:	1e03      	subs	r3, r0, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e020      	b.n	8003c58 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2210      	movs	r2, #16
 8003c1c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2220      	movs	r2, #32
 8003c24:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d900      	bls.n	8003c36 <HAL_I2C_IsDeviceReady+0x1c6>
 8003c34:	e74d      	b.n	8003ad2 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2241      	movs	r2, #65	@ 0x41
 8003c3a:	2120      	movs	r1, #32
 8003c3c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c42:	2220      	movs	r2, #32
 8003c44:	431a      	orrs	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2240      	movs	r2, #64	@ 0x40
 8003c4e:	2100      	movs	r1, #0
 8003c50:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8003c56:	2302      	movs	r3, #2
  }
}
 8003c58:	0018      	movs	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b008      	add	sp, #32
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	02002000 	.word	0x02002000
 8003c64:	02002800 	.word	0x02002800

08003c68 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	68f9      	ldr	r1, [r7, #12]
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	4798      	blx	r3
  }
}
 8003c94:	46c0      	nop			@ (mov r8, r8)
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b004      	add	sp, #16
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	2380      	movs	r3, #128	@ 0x80
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d00e      	beq.n	8003cdc <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2280      	movs	r2, #128	@ 0x80
 8003cc2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003cc4:	d00a      	beq.n	8003cdc <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cca:	2201      	movs	r2, #1
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2280      	movs	r2, #128	@ 0x80
 8003cd8:	0052      	lsls	r2, r2, #1
 8003cda:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	2380      	movs	r3, #128	@ 0x80
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d00e      	beq.n	8003d04 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	2280      	movs	r2, #128	@ 0x80
 8003cea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003cec:	d00a      	beq.n	8003d04 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf2:	2208      	movs	r2, #8
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2280      	movs	r2, #128	@ 0x80
 8003d00:	00d2      	lsls	r2, r2, #3
 8003d02:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	2380      	movs	r3, #128	@ 0x80
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d00e      	beq.n	8003d2c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2280      	movs	r2, #128	@ 0x80
 8003d12:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003d14:	d00a      	beq.n	8003d2c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2280      	movs	r2, #128	@ 0x80
 8003d28:	0092      	lsls	r2, r2, #2
 8003d2a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	220b      	movs	r2, #11
 8003d36:	4013      	ands	r3, r2
 8003d38:	d005      	beq.n	8003d46 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	0011      	movs	r1, r2
 8003d40:	0018      	movs	r0, r3
 8003d42:	f000 fc25 	bl	8004590 <I2C_ITError>
  }
}
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b006      	add	sp, #24
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b002      	add	sp, #8
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b002      	add	sp, #8
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	0008      	movs	r0, r1
 8003d78:	0011      	movs	r1, r2
 8003d7a:	1cfb      	adds	r3, r7, #3
 8003d7c:	1c02      	adds	r2, r0, #0
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	003b      	movs	r3, r7
 8003d82:	1c0a      	adds	r2, r1, #0
 8003d84:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b002      	add	sp, #8
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b002      	add	sp, #8
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b082      	sub	sp, #8
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003da6:	46c0      	nop			@ (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b002      	add	sp, #8
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003db6:	46c0      	nop			@ (mov r8, r8)
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b002      	add	sp, #8
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2240      	movs	r2, #64	@ 0x40
 8003dda:	5c9b      	ldrb	r3, [r3, r2]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <I2C_Slave_ISR_IT+0x24>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e0e7      	b.n	8003fb4 <I2C_Slave_ISR_IT+0x1f4>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2240      	movs	r2, #64	@ 0x40
 8003de8:	2101      	movs	r1, #1
 8003dea:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2220      	movs	r2, #32
 8003df0:	4013      	ands	r3, r2
 8003df2:	d00a      	beq.n	8003e0a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003dfa:	d006      	beq.n	8003e0a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	0011      	movs	r1, r2
 8003e02:	0018      	movs	r0, r3
 8003e04:	f000 f9e4 	bl	80041d0 <I2C_ITSlaveCplt>
 8003e08:	e0cf      	b.n	8003faa <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d052      	beq.n	8003eb8 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2210      	movs	r2, #16
 8003e16:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e18:	d04e      	beq.n	8003eb8 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d12d      	bne.n	8003e80 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2241      	movs	r2, #65	@ 0x41
 8003e28:	5c9b      	ldrb	r3, [r3, r2]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b28      	cmp	r3, #40	@ 0x28
 8003e2e:	d10b      	bne.n	8003e48 <I2C_Slave_ISR_IT+0x88>
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	2380      	movs	r3, #128	@ 0x80
 8003e34:	049b      	lsls	r3, r3, #18
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d106      	bne.n	8003e48 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	0011      	movs	r1, r2
 8003e40:	0018      	movs	r0, r3
 8003e42:	f000 fb4d 	bl	80044e0 <I2C_ITListenCplt>
 8003e46:	e036      	b.n	8003eb6 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2241      	movs	r2, #65	@ 0x41
 8003e4c:	5c9b      	ldrb	r3, [r3, r2]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b29      	cmp	r3, #41	@ 0x29
 8003e52:	d110      	bne.n	8003e76 <I2C_Slave_ISR_IT+0xb6>
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	4a59      	ldr	r2, [pc, #356]	@ (8003fbc <I2C_Slave_ISR_IT+0x1fc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00c      	beq.n	8003e76 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2210      	movs	r2, #16
 8003e62:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	0018      	movs	r0, r3
 8003e68:	f000 fcbd 	bl	80047e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f000 f94a 	bl	8004108 <I2C_ITSlaveSeqCplt>
 8003e74:	e01f      	b.n	8003eb6 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2210      	movs	r2, #16
 8003e7c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003e7e:	e091      	b.n	8003fa4 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2210      	movs	r2, #16
 8003e86:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <I2C_Slave_ISR_IT+0xe6>
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	2380      	movs	r3, #128	@ 0x80
 8003e9e:	045b      	lsls	r3, r3, #17
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d000      	beq.n	8003ea6 <I2C_Slave_ISR_IT+0xe6>
 8003ea4:	e07e      	b.n	8003fa4 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	0011      	movs	r1, r2
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f000 fb6e 	bl	8004590 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003eb4:	e076      	b.n	8003fa4 <I2C_Slave_ISR_IT+0x1e4>
 8003eb6:	e075      	b.n	8003fa4 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	2204      	movs	r2, #4
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d02f      	beq.n	8003f20 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003ec6:	d02b      	beq.n	8003f20 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d018      	beq.n	8003f04 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d14c      	bne.n	8003fa8 <I2C_Slave_ISR_IT+0x1e8>
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	4a2a      	ldr	r2, [pc, #168]	@ (8003fbc <I2C_Slave_ISR_IT+0x1fc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d048      	beq.n	8003fa8 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f000 f8f5 	bl	8004108 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003f1e:	e043      	b.n	8003fa8 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	2208      	movs	r2, #8
 8003f24:	4013      	ands	r3, r2
 8003f26:	d00a      	beq.n	8003f3e <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2208      	movs	r2, #8
 8003f2c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003f2e:	d006      	beq.n	8003f3e <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	0011      	movs	r1, r2
 8003f36:	0018      	movs	r0, r3
 8003f38:	f000 f842 	bl	8003fc0 <I2C_ITAddrCplt>
 8003f3c:	e035      	b.n	8003faa <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2202      	movs	r2, #2
 8003f42:	4013      	ands	r3, r2
 8003f44:	d031      	beq.n	8003faa <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003f4c:	d02d      	beq.n	8003faa <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d018      	beq.n	8003f8a <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	781a      	ldrb	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003f88:	e00f      	b.n	8003faa <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	2380      	movs	r3, #128	@ 0x80
 8003f8e:	045b      	lsls	r3, r3, #17
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d002      	beq.n	8003f9a <I2C_Slave_ISR_IT+0x1da>
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d107      	bne.n	8003faa <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f000 f8b3 	bl	8004108 <I2C_ITSlaveSeqCplt>
 8003fa2:	e002      	b.n	8003faa <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8003fa4:	46c0      	nop			@ (mov r8, r8)
 8003fa6:	e000      	b.n	8003faa <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8003fa8:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2240      	movs	r2, #64	@ 0x40
 8003fae:	2100      	movs	r1, #0
 8003fb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b006      	add	sp, #24
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	ffff0000 	.word	0xffff0000

08003fc0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003fc0:	b5b0      	push	{r4, r5, r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2241      	movs	r2, #65	@ 0x41
 8003fce:	5c9b      	ldrb	r3, [r3, r2]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	001a      	movs	r2, r3
 8003fd4:	2328      	movs	r3, #40	@ 0x28
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b28      	cmp	r3, #40	@ 0x28
 8003fda:	d000      	beq.n	8003fde <I2C_ITAddrCplt+0x1e>
 8003fdc:	e088      	b.n	80040f0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	0c1b      	lsrs	r3, r3, #16
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	250f      	movs	r5, #15
 8003fea:	197b      	adds	r3, r7, r5
 8003fec:	2101      	movs	r1, #1
 8003fee:	400a      	ands	r2, r1
 8003ff0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	0c1b      	lsrs	r3, r3, #16
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	200c      	movs	r0, #12
 8003ffe:	183b      	adds	r3, r7, r0
 8004000:	21fe      	movs	r1, #254	@ 0xfe
 8004002:	400a      	ands	r2, r1
 8004004:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	b29a      	uxth	r2, r3
 800400e:	240a      	movs	r4, #10
 8004010:	193b      	adds	r3, r7, r4
 8004012:	0592      	lsls	r2, r2, #22
 8004014:	0d92      	lsrs	r2, r2, #22
 8004016:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	b29a      	uxth	r2, r3
 8004020:	2308      	movs	r3, #8
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	21fe      	movs	r1, #254	@ 0xfe
 8004026:	400a      	ands	r2, r1
 8004028:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d148      	bne.n	80040c4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004032:	0021      	movs	r1, r4
 8004034:	187b      	adds	r3, r7, r1
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	09db      	lsrs	r3, r3, #7
 800403a:	b29a      	uxth	r2, r3
 800403c:	183b      	adds	r3, r7, r0
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	4053      	eors	r3, r2
 8004042:	b29b      	uxth	r3, r3
 8004044:	001a      	movs	r2, r3
 8004046:	2306      	movs	r3, #6
 8004048:	4013      	ands	r3, r2
 800404a:	d120      	bne.n	800408e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800404c:	183b      	adds	r3, r7, r0
 800404e:	187a      	adds	r2, r7, r1
 8004050:	8812      	ldrh	r2, [r2, #0]
 8004052:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004062:	2b02      	cmp	r3, #2
 8004064:	d14c      	bne.n	8004100 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2208      	movs	r2, #8
 8004072:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2240      	movs	r2, #64	@ 0x40
 8004078:	2100      	movs	r1, #0
 800407a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800407c:	183b      	adds	r3, r7, r0
 800407e:	881a      	ldrh	r2, [r3, #0]
 8004080:	197b      	adds	r3, r7, r5
 8004082:	7819      	ldrb	r1, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	0018      	movs	r0, r3
 8004088:	f7ff fe71 	bl	8003d6e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800408c:	e038      	b.n	8004100 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800408e:	240c      	movs	r4, #12
 8004090:	193b      	adds	r3, r7, r4
 8004092:	2208      	movs	r2, #8
 8004094:	18ba      	adds	r2, r7, r2
 8004096:	8812      	ldrh	r2, [r2, #0]
 8004098:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800409a:	2380      	movs	r3, #128	@ 0x80
 800409c:	021a      	lsls	r2, r3, #8
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	0011      	movs	r1, r2
 80040a2:	0018      	movs	r0, r3
 80040a4:	f000 fe92 	bl	8004dcc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2240      	movs	r2, #64	@ 0x40
 80040ac:	2100      	movs	r1, #0
 80040ae:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80040b0:	193b      	adds	r3, r7, r4
 80040b2:	881a      	ldrh	r2, [r3, #0]
 80040b4:	230f      	movs	r3, #15
 80040b6:	18fb      	adds	r3, r7, r3
 80040b8:	7819      	ldrb	r1, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	0018      	movs	r0, r3
 80040be:	f7ff fe56 	bl	8003d6e <HAL_I2C_AddrCallback>
}
 80040c2:	e01d      	b.n	8004100 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80040c4:	2380      	movs	r3, #128	@ 0x80
 80040c6:	021a      	lsls	r2, r3, #8
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	0011      	movs	r1, r2
 80040cc:	0018      	movs	r0, r3
 80040ce:	f000 fe7d 	bl	8004dcc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2240      	movs	r2, #64	@ 0x40
 80040d6:	2100      	movs	r1, #0
 80040d8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80040da:	230c      	movs	r3, #12
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	881a      	ldrh	r2, [r3, #0]
 80040e0:	230f      	movs	r3, #15
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	7819      	ldrb	r1, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	0018      	movs	r0, r3
 80040ea:	f7ff fe40 	bl	8003d6e <HAL_I2C_AddrCallback>
}
 80040ee:	e007      	b.n	8004100 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2208      	movs	r2, #8
 80040f6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2240      	movs	r2, #64	@ 0x40
 80040fc:	2100      	movs	r1, #0
 80040fe:	5499      	strb	r1, [r3, r2]
}
 8004100:	46c0      	nop			@ (mov r8, r8)
 8004102:	46bd      	mov	sp, r7
 8004104:	b004      	add	sp, #16
 8004106:	bdb0      	pop	{r4, r5, r7, pc}

08004108 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2242      	movs	r2, #66	@ 0x42
 800411c:	2100      	movs	r1, #0
 800411e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	2380      	movs	r3, #128	@ 0x80
 8004124:	01db      	lsls	r3, r3, #7
 8004126:	4013      	ands	r3, r2
 8004128:	d008      	beq.n	800413c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4924      	ldr	r1, [pc, #144]	@ (80041c8 <I2C_ITSlaveSeqCplt+0xc0>)
 8004136:	400a      	ands	r2, r1
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e00c      	b.n	8004156 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	2380      	movs	r3, #128	@ 0x80
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	4013      	ands	r3, r2
 8004144:	d007      	beq.n	8004156 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	491e      	ldr	r1, [pc, #120]	@ (80041cc <I2C_ITSlaveSeqCplt+0xc4>)
 8004152:	400a      	ands	r2, r1
 8004154:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2241      	movs	r2, #65	@ 0x41
 800415a:	5c9b      	ldrb	r3, [r3, r2]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b29      	cmp	r3, #41	@ 0x29
 8004160:	d114      	bne.n	800418c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2241      	movs	r2, #65	@ 0x41
 8004166:	2128      	movs	r1, #40	@ 0x28
 8004168:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2221      	movs	r2, #33	@ 0x21
 800416e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2101      	movs	r1, #1
 8004174:	0018      	movs	r0, r3
 8004176:	f000 fe29 	bl	8004dcc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2240      	movs	r2, #64	@ 0x40
 800417e:	2100      	movs	r1, #0
 8004180:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	0018      	movs	r0, r3
 8004186:	f7ff fde2 	bl	8003d4e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800418a:	e019      	b.n	80041c0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2241      	movs	r2, #65	@ 0x41
 8004190:	5c9b      	ldrb	r3, [r3, r2]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b2a      	cmp	r3, #42	@ 0x2a
 8004196:	d113      	bne.n	80041c0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2241      	movs	r2, #65	@ 0x41
 800419c:	2128      	movs	r1, #40	@ 0x28
 800419e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2222      	movs	r2, #34	@ 0x22
 80041a4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2102      	movs	r1, #2
 80041aa:	0018      	movs	r0, r3
 80041ac:	f000 fe0e 	bl	8004dcc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2240      	movs	r2, #64	@ 0x40
 80041b4:	2100      	movs	r1, #0
 80041b6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	0018      	movs	r0, r3
 80041bc:	f7ff fdcf 	bl	8003d5e <HAL_I2C_SlaveRxCpltCallback>
}
 80041c0:	46c0      	nop			@ (mov r8, r8)
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b004      	add	sp, #16
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	ffffbfff 	.word	0xffffbfff
 80041cc:	ffff7fff 	.word	0xffff7fff

080041d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ea:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80041ec:	200b      	movs	r0, #11
 80041ee:	183b      	adds	r3, r7, r0
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	2141      	movs	r1, #65	@ 0x41
 80041f4:	5c52      	ldrb	r2, [r2, r1]
 80041f6:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2220      	movs	r2, #32
 80041fe:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004200:	183b      	adds	r3, r7, r0
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b21      	cmp	r3, #33	@ 0x21
 8004206:	d003      	beq.n	8004210 <I2C_ITSlaveCplt+0x40>
 8004208:	183b      	adds	r3, r7, r0
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b29      	cmp	r3, #41	@ 0x29
 800420e:	d109      	bne.n	8004224 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004210:	4aac      	ldr	r2, [pc, #688]	@ (80044c4 <I2C_ITSlaveCplt+0x2f4>)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	0011      	movs	r1, r2
 8004216:	0018      	movs	r0, r3
 8004218:	f000 fdd8 	bl	8004dcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2221      	movs	r2, #33	@ 0x21
 8004220:	631a      	str	r2, [r3, #48]	@ 0x30
 8004222:	e020      	b.n	8004266 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004224:	220b      	movs	r2, #11
 8004226:	18bb      	adds	r3, r7, r2
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b22      	cmp	r3, #34	@ 0x22
 800422c:	d003      	beq.n	8004236 <I2C_ITSlaveCplt+0x66>
 800422e:	18bb      	adds	r3, r7, r2
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b2a      	cmp	r3, #42	@ 0x2a
 8004234:	d109      	bne.n	800424a <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004236:	4aa4      	ldr	r2, [pc, #656]	@ (80044c8 <I2C_ITSlaveCplt+0x2f8>)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	0011      	movs	r1, r2
 800423c:	0018      	movs	r0, r3
 800423e:	f000 fdc5 	bl	8004dcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2222      	movs	r2, #34	@ 0x22
 8004246:	631a      	str	r2, [r3, #48]	@ 0x30
 8004248:	e00d      	b.n	8004266 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800424a:	230b      	movs	r3, #11
 800424c:	18fb      	adds	r3, r7, r3
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b28      	cmp	r3, #40	@ 0x28
 8004252:	d108      	bne.n	8004266 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004254:	4a9d      	ldr	r2, [pc, #628]	@ (80044cc <I2C_ITSlaveCplt+0x2fc>)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	0011      	movs	r1, r2
 800425a:	0018      	movs	r0, r3
 800425c:	f000 fdb6 	bl	8004dcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2180      	movs	r1, #128	@ 0x80
 8004272:	0209      	lsls	r1, r1, #8
 8004274:	430a      	orrs	r2, r1
 8004276:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4993      	ldr	r1, [pc, #588]	@ (80044d0 <I2C_ITSlaveCplt+0x300>)
 8004284:	400a      	ands	r2, r1
 8004286:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	0018      	movs	r0, r3
 800428c:	f000 faab 	bl	80047e6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	2380      	movs	r3, #128	@ 0x80
 8004294:	01db      	lsls	r3, r3, #7
 8004296:	4013      	ands	r3, r2
 8004298:	d013      	beq.n	80042c2 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	498b      	ldr	r1, [pc, #556]	@ (80044d4 <I2C_ITSlaveCplt+0x304>)
 80042a6:	400a      	ands	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d01f      	beq.n	80042f2 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042c0:	e017      	b.n	80042f2 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	2380      	movs	r3, #128	@ 0x80
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	4013      	ands	r3, r2
 80042ca:	d012      	beq.n	80042f2 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4980      	ldr	r1, [pc, #512]	@ (80044d8 <I2C_ITSlaveCplt+0x308>)
 80042d8:	400a      	ands	r2, r1
 80042da:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d006      	beq.n	80042f2 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2204      	movs	r2, #4
 80042f6:	4013      	ands	r3, r2
 80042f8:	d020      	beq.n	800433c <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2204      	movs	r2, #4
 80042fe:	4393      	bics	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00c      	beq.n	800433c <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434a:	2204      	movs	r2, #4
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2210      	movs	r2, #16
 8004356:	4013      	ands	r3, r2
 8004358:	d04f      	beq.n	80043fa <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2210      	movs	r2, #16
 800435e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004360:	d04b      	beq.n	80043fa <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d12d      	bne.n	80043c8 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2241      	movs	r2, #65	@ 0x41
 8004370:	5c9b      	ldrb	r3, [r3, r2]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b28      	cmp	r3, #40	@ 0x28
 8004376:	d10b      	bne.n	8004390 <I2C_ITSlaveCplt+0x1c0>
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	2380      	movs	r3, #128	@ 0x80
 800437c:	049b      	lsls	r3, r3, #18
 800437e:	429a      	cmp	r2, r3
 8004380:	d106      	bne.n	8004390 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	0011      	movs	r1, r2
 8004388:	0018      	movs	r0, r3
 800438a:	f000 f8a9 	bl	80044e0 <I2C_ITListenCplt>
 800438e:	e034      	b.n	80043fa <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2241      	movs	r2, #65	@ 0x41
 8004394:	5c9b      	ldrb	r3, [r3, r2]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b29      	cmp	r3, #41	@ 0x29
 800439a:	d110      	bne.n	80043be <I2C_ITSlaveCplt+0x1ee>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4a4f      	ldr	r2, [pc, #316]	@ (80044dc <I2C_ITSlaveCplt+0x30c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00c      	beq.n	80043be <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2210      	movs	r2, #16
 80043aa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	0018      	movs	r0, r3
 80043b0:	f000 fa19 	bl	80047e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	0018      	movs	r0, r3
 80043b8:	f7ff fea6 	bl	8004108 <I2C_ITSlaveSeqCplt>
 80043bc:	e01d      	b.n	80043fa <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2210      	movs	r2, #16
 80043c4:	61da      	str	r2, [r3, #28]
 80043c6:	e018      	b.n	80043fa <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2210      	movs	r2, #16
 80043ce:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d4:	2204      	movs	r2, #4
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d004      	beq.n	80043ec <I2C_ITSlaveCplt+0x21c>
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	2380      	movs	r3, #128	@ 0x80
 80043e6:	045b      	lsls	r3, r3, #17
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d106      	bne.n	80043fa <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	0011      	movs	r1, r2
 80043f4:	0018      	movs	r0, r3
 80043f6:	f000 f8cb 	bl	8004590 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2242      	movs	r2, #66	@ 0x42
 80043fe:	2100      	movs	r1, #0
 8004400:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440c:	2b00      	cmp	r3, #0
 800440e:	d013      	beq.n	8004438 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	0011      	movs	r1, r2
 8004418:	0018      	movs	r0, r3
 800441a:	f000 f8b9 	bl	8004590 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2241      	movs	r2, #65	@ 0x41
 8004422:	5c9b      	ldrb	r3, [r3, r2]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b28      	cmp	r3, #40	@ 0x28
 8004428:	d147      	bne.n	80044ba <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	0011      	movs	r1, r2
 8004430:	0018      	movs	r0, r3
 8004432:	f000 f855 	bl	80044e0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004436:	e040      	b.n	80044ba <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443c:	4a27      	ldr	r2, [pc, #156]	@ (80044dc <I2C_ITSlaveCplt+0x30c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d016      	beq.n	8004470 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	0018      	movs	r0, r3
 8004446:	f7ff fe5f 	bl	8004108 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a23      	ldr	r2, [pc, #140]	@ (80044dc <I2C_ITSlaveCplt+0x30c>)
 800444e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2241      	movs	r2, #65	@ 0x41
 8004454:	2120      	movs	r1, #32
 8004456:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2240      	movs	r2, #64	@ 0x40
 8004462:	2100      	movs	r1, #0
 8004464:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	0018      	movs	r0, r3
 800446a:	f7ff fc90 	bl	8003d8e <HAL_I2C_ListenCpltCallback>
}
 800446e:	e024      	b.n	80044ba <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2241      	movs	r2, #65	@ 0x41
 8004474:	5c9b      	ldrb	r3, [r3, r2]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b22      	cmp	r3, #34	@ 0x22
 800447a:	d10f      	bne.n	800449c <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2241      	movs	r2, #65	@ 0x41
 8004480:	2120      	movs	r1, #32
 8004482:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2240      	movs	r2, #64	@ 0x40
 800448e:	2100      	movs	r1, #0
 8004490:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	0018      	movs	r0, r3
 8004496:	f7ff fc62 	bl	8003d5e <HAL_I2C_SlaveRxCpltCallback>
}
 800449a:	e00e      	b.n	80044ba <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2241      	movs	r2, #65	@ 0x41
 80044a0:	2120      	movs	r1, #32
 80044a2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2240      	movs	r2, #64	@ 0x40
 80044ae:	2100      	movs	r1, #0
 80044b0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	0018      	movs	r0, r3
 80044b6:	f7ff fc4a 	bl	8003d4e <HAL_I2C_SlaveTxCpltCallback>
}
 80044ba:	46c0      	nop			@ (mov r8, r8)
 80044bc:	46bd      	mov	sp, r7
 80044be:	b006      	add	sp, #24
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	00008001 	.word	0x00008001
 80044c8:	00008002 	.word	0x00008002
 80044cc:	00008003 	.word	0x00008003
 80044d0:	fe00e800 	.word	0xfe00e800
 80044d4:	ffffbfff 	.word	0xffffbfff
 80044d8:	ffff7fff 	.word	0xffff7fff
 80044dc:	ffff0000 	.word	0xffff0000

080044e0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a26      	ldr	r2, [pc, #152]	@ (8004588 <I2C_ITListenCplt+0xa8>)
 80044ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2241      	movs	r2, #65	@ 0x41
 80044fa:	2120      	movs	r1, #32
 80044fc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2242      	movs	r2, #66	@ 0x42
 8004502:	2100      	movs	r1, #0
 8004504:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2204      	movs	r2, #4
 8004510:	4013      	ands	r3, r2
 8004512:	d022      	beq.n	800455a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004530:	2b00      	cmp	r3, #0
 8004532:	d012      	beq.n	800455a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004552:	2204      	movs	r2, #4
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800455a:	4a0c      	ldr	r2, [pc, #48]	@ (800458c <I2C_ITListenCplt+0xac>)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	0011      	movs	r1, r2
 8004560:	0018      	movs	r0, r3
 8004562:	f000 fc33 	bl	8004dcc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2210      	movs	r2, #16
 800456c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2240      	movs	r2, #64	@ 0x40
 8004572:	2100      	movs	r1, #0
 8004574:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	0018      	movs	r0, r3
 800457a:	f7ff fc08 	bl	8003d8e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800457e:	46c0      	nop			@ (mov r8, r8)
 8004580:	46bd      	mov	sp, r7
 8004582:	b002      	add	sp, #8
 8004584:	bd80      	pop	{r7, pc}
 8004586:	46c0      	nop			@ (mov r8, r8)
 8004588:	ffff0000 	.word	0xffff0000
 800458c:	00008003 	.word	0x00008003

08004590 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800459a:	200f      	movs	r0, #15
 800459c:	183b      	adds	r3, r7, r0
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	2141      	movs	r1, #65	@ 0x41
 80045a2:	5c52      	ldrb	r2, [r2, r1]
 80045a4:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2242      	movs	r2, #66	@ 0x42
 80045aa:	2100      	movs	r1, #0
 80045ac:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a72      	ldr	r2, [pc, #456]	@ (800477c <I2C_ITError+0x1ec>)
 80045b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80045c6:	183b      	adds	r3, r7, r0
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b28      	cmp	r3, #40	@ 0x28
 80045cc:	d007      	beq.n	80045de <I2C_ITError+0x4e>
 80045ce:	183b      	adds	r3, r7, r0
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b29      	cmp	r3, #41	@ 0x29
 80045d4:	d003      	beq.n	80045de <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80045d6:	183b      	adds	r3, r7, r0
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b2a      	cmp	r3, #42	@ 0x2a
 80045dc:	d10c      	bne.n	80045f8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2103      	movs	r1, #3
 80045e2:	0018      	movs	r0, r3
 80045e4:	f000 fbf2 	bl	8004dcc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2241      	movs	r2, #65	@ 0x41
 80045ec:	2128      	movs	r1, #40	@ 0x28
 80045ee:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a63      	ldr	r2, [pc, #396]	@ (8004780 <I2C_ITError+0x1f0>)
 80045f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80045f6:	e032      	b.n	800465e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045f8:	4a62      	ldr	r2, [pc, #392]	@ (8004784 <I2C_ITError+0x1f4>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	0011      	movs	r1, r2
 80045fe:	0018      	movs	r0, r3
 8004600:	f000 fbe4 	bl	8004dcc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	0018      	movs	r0, r3
 8004608:	f000 f8ed 	bl	80047e6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2241      	movs	r2, #65	@ 0x41
 8004610:	5c9b      	ldrb	r3, [r3, r2]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b60      	cmp	r3, #96	@ 0x60
 8004616:	d01f      	beq.n	8004658 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2241      	movs	r2, #65	@ 0x41
 800461c:	2120      	movs	r1, #32
 800461e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	2220      	movs	r2, #32
 8004628:	4013      	ands	r3, r2
 800462a:	2b20      	cmp	r3, #32
 800462c:	d114      	bne.n	8004658 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2210      	movs	r2, #16
 8004636:	4013      	ands	r3, r2
 8004638:	2b10      	cmp	r3, #16
 800463a:	d109      	bne.n	8004650 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2210      	movs	r2, #16
 8004642:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004648:	2204      	movs	r2, #4
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2220      	movs	r2, #32
 8004656:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004662:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004668:	2b00      	cmp	r3, #0
 800466a:	d03b      	beq.n	80046e4 <I2C_ITError+0x154>
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b11      	cmp	r3, #17
 8004670:	d002      	beq.n	8004678 <I2C_ITError+0xe8>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b21      	cmp	r3, #33	@ 0x21
 8004676:	d135      	bne.n	80046e4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	2380      	movs	r3, #128	@ 0x80
 8004680:	01db      	lsls	r3, r3, #7
 8004682:	401a      	ands	r2, r3
 8004684:	2380      	movs	r3, #128	@ 0x80
 8004686:	01db      	lsls	r3, r3, #7
 8004688:	429a      	cmp	r2, r3
 800468a:	d107      	bne.n	800469c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	493c      	ldr	r1, [pc, #240]	@ (8004788 <I2C_ITError+0x1f8>)
 8004698:	400a      	ands	r2, r1
 800469a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a0:	0018      	movs	r0, r3
 80046a2:	f7fe fd13 	bl	80030cc <HAL_DMA_GetState>
 80046a6:	0003      	movs	r3, r0
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d016      	beq.n	80046da <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b0:	4a36      	ldr	r2, [pc, #216]	@ (800478c <I2C_ITError+0x1fc>)
 80046b2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2240      	movs	r2, #64	@ 0x40
 80046b8:	2100      	movs	r1, #0
 80046ba:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c0:	0018      	movs	r0, r3
 80046c2:	f7fe fbe7 	bl	8002e94 <HAL_DMA_Abort_IT>
 80046c6:	1e03      	subs	r3, r0, #0
 80046c8:	d051      	beq.n	800476e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d4:	0018      	movs	r0, r3
 80046d6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046d8:	e049      	b.n	800476e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	0018      	movs	r0, r3
 80046de:	f000 f859 	bl	8004794 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046e2:	e044      	b.n	800476e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d03b      	beq.n	8004764 <I2C_ITError+0x1d4>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b12      	cmp	r3, #18
 80046f0:	d002      	beq.n	80046f8 <I2C_ITError+0x168>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b22      	cmp	r3, #34	@ 0x22
 80046f6:	d135      	bne.n	8004764 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	2380      	movs	r3, #128	@ 0x80
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	401a      	ands	r2, r3
 8004704:	2380      	movs	r3, #128	@ 0x80
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	429a      	cmp	r2, r3
 800470a:	d107      	bne.n	800471c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	491e      	ldr	r1, [pc, #120]	@ (8004790 <I2C_ITError+0x200>)
 8004718:	400a      	ands	r2, r1
 800471a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004720:	0018      	movs	r0, r3
 8004722:	f7fe fcd3 	bl	80030cc <HAL_DMA_GetState>
 8004726:	0003      	movs	r3, r0
 8004728:	2b01      	cmp	r3, #1
 800472a:	d016      	beq.n	800475a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004730:	4a16      	ldr	r2, [pc, #88]	@ (800478c <I2C_ITError+0x1fc>)
 8004732:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2240      	movs	r2, #64	@ 0x40
 8004738:	2100      	movs	r1, #0
 800473a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004740:	0018      	movs	r0, r3
 8004742:	f7fe fba7 	bl	8002e94 <HAL_DMA_Abort_IT>
 8004746:	1e03      	subs	r3, r0, #0
 8004748:	d013      	beq.n	8004772 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800474e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004754:	0018      	movs	r0, r3
 8004756:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004758:	e00b      	b.n	8004772 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	0018      	movs	r0, r3
 800475e:	f000 f819 	bl	8004794 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004762:	e006      	b.n	8004772 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	0018      	movs	r0, r3
 8004768:	f000 f814 	bl	8004794 <I2C_TreatErrorCallback>
  }
}
 800476c:	e002      	b.n	8004774 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800476e:	46c0      	nop			@ (mov r8, r8)
 8004770:	e000      	b.n	8004774 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004772:	46c0      	nop			@ (mov r8, r8)
}
 8004774:	46c0      	nop			@ (mov r8, r8)
 8004776:	46bd      	mov	sp, r7
 8004778:	b004      	add	sp, #16
 800477a:	bd80      	pop	{r7, pc}
 800477c:	ffff0000 	.word	0xffff0000
 8004780:	08003dc1 	.word	0x08003dc1
 8004784:	00008003 	.word	0x00008003
 8004788:	ffffbfff 	.word	0xffffbfff
 800478c:	0800482b 	.word	0x0800482b
 8004790:	ffff7fff 	.word	0xffff7fff

08004794 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2241      	movs	r2, #65	@ 0x41
 80047a0:	5c9b      	ldrb	r3, [r3, r2]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b60      	cmp	r3, #96	@ 0x60
 80047a6:	d10f      	bne.n	80047c8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2241      	movs	r2, #65	@ 0x41
 80047ac:	2120      	movs	r1, #32
 80047ae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2240      	movs	r2, #64	@ 0x40
 80047ba:	2100      	movs	r1, #0
 80047bc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7ff faf4 	bl	8003dae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047c6:	e00a      	b.n	80047de <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2240      	movs	r2, #64	@ 0x40
 80047d2:	2100      	movs	r1, #0
 80047d4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	0018      	movs	r0, r3
 80047da:	f7ff fae0 	bl	8003d9e <HAL_I2C_ErrorCallback>
}
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b002      	add	sp, #8
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	2202      	movs	r2, #2
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d103      	bne.n	8004804 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2200      	movs	r2, #0
 8004802:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	2201      	movs	r2, #1
 800480c:	4013      	ands	r3, r2
 800480e:	2b01      	cmp	r3, #1
 8004810:	d007      	beq.n	8004822 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	699a      	ldr	r2, [r3, #24]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2101      	movs	r1, #1
 800481e:	430a      	orrs	r2, r1
 8004820:	619a      	str	r2, [r3, #24]
  }
}
 8004822:	46c0      	nop			@ (mov r8, r8)
 8004824:	46bd      	mov	sp, r7
 8004826:	b002      	add	sp, #8
 8004828:	bd80      	pop	{r7, pc}

0800482a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004836:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004844:	2200      	movs	r2, #0
 8004846:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004854:	2200      	movs	r2, #0
 8004856:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	0018      	movs	r0, r3
 800485c:	f7ff ff9a 	bl	8004794 <I2C_TreatErrorCallback>
}
 8004860:	46c0      	nop			@ (mov r8, r8)
 8004862:	46bd      	mov	sp, r7
 8004864:	b004      	add	sp, #16
 8004866:	bd80      	pop	{r7, pc}

08004868 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	1dfb      	adds	r3, r7, #7
 8004876:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004878:	e03a      	b.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	6839      	ldr	r1, [r7, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	0018      	movs	r0, r3
 8004882:	f000 f971 	bl	8004b68 <I2C_IsErrorOccurred>
 8004886:	1e03      	subs	r3, r0, #0
 8004888:	d001      	beq.n	800488e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e040      	b.n	8004910 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	3301      	adds	r3, #1
 8004892:	d02d      	beq.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004894:	f7fe f968 	bl	8002b68 <HAL_GetTick>
 8004898:	0002      	movs	r2, r0
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d302      	bcc.n	80048aa <I2C_WaitOnFlagUntilTimeout+0x42>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d122      	bne.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	4013      	ands	r3, r2
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	425a      	negs	r2, r3
 80048ba:	4153      	adcs	r3, r2
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	001a      	movs	r2, r3
 80048c0:	1dfb      	adds	r3, r7, #7
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d113      	bne.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048cc:	2220      	movs	r2, #32
 80048ce:	431a      	orrs	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2241      	movs	r2, #65	@ 0x41
 80048d8:	2120      	movs	r1, #32
 80048da:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2242      	movs	r2, #66	@ 0x42
 80048e0:	2100      	movs	r1, #0
 80048e2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2240      	movs	r2, #64	@ 0x40
 80048e8:	2100      	movs	r1, #0
 80048ea:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e00f      	b.n	8004910 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	4013      	ands	r3, r2
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	425a      	negs	r2, r3
 8004900:	4153      	adcs	r3, r2
 8004902:	b2db      	uxtb	r3, r3
 8004904:	001a      	movs	r2, r3
 8004906:	1dfb      	adds	r3, r7, #7
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d0b5      	beq.n	800487a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	0018      	movs	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	b004      	add	sp, #16
 8004916:	bd80      	pop	{r7, pc}

08004918 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004924:	e032      	b.n	800498c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	0018      	movs	r0, r3
 800492e:	f000 f91b 	bl	8004b68 <I2C_IsErrorOccurred>
 8004932:	1e03      	subs	r3, r0, #0
 8004934:	d001      	beq.n	800493a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e030      	b.n	800499c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	3301      	adds	r3, #1
 800493e:	d025      	beq.n	800498c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004940:	f7fe f912 	bl	8002b68 <HAL_GetTick>
 8004944:	0002      	movs	r2, r0
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	429a      	cmp	r2, r3
 800494e:	d302      	bcc.n	8004956 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d11a      	bne.n	800498c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	2202      	movs	r2, #2
 800495e:	4013      	ands	r3, r2
 8004960:	2b02      	cmp	r3, #2
 8004962:	d013      	beq.n	800498c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004968:	2220      	movs	r2, #32
 800496a:	431a      	orrs	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2241      	movs	r2, #65	@ 0x41
 8004974:	2120      	movs	r1, #32
 8004976:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2242      	movs	r2, #66	@ 0x42
 800497c:	2100      	movs	r1, #0
 800497e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2240      	movs	r2, #64	@ 0x40
 8004984:	2100      	movs	r1, #0
 8004986:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e007      	b.n	800499c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2202      	movs	r2, #2
 8004994:	4013      	ands	r3, r2
 8004996:	2b02      	cmp	r3, #2
 8004998:	d1c5      	bne.n	8004926 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	0018      	movs	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	b004      	add	sp, #16
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049b0:	e02f      	b.n	8004a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	0018      	movs	r0, r3
 80049ba:	f000 f8d5 	bl	8004b68 <I2C_IsErrorOccurred>
 80049be:	1e03      	subs	r3, r0, #0
 80049c0:	d001      	beq.n	80049c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e02d      	b.n	8004a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c6:	f7fe f8cf 	bl	8002b68 <HAL_GetTick>
 80049ca:	0002      	movs	r2, r0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d302      	bcc.n	80049dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d11a      	bne.n	8004a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	2220      	movs	r2, #32
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d013      	beq.n	8004a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ee:	2220      	movs	r2, #32
 80049f0:	431a      	orrs	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2241      	movs	r2, #65	@ 0x41
 80049fa:	2120      	movs	r1, #32
 80049fc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2242      	movs	r2, #66	@ 0x42
 8004a02:	2100      	movs	r1, #0
 8004a04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2240      	movs	r2, #64	@ 0x40
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e007      	b.n	8004a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	d1c8      	bne.n	80049b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	0018      	movs	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b004      	add	sp, #16
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a38:	2317      	movs	r3, #23
 8004a3a:	18fb      	adds	r3, r7, r3
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004a40:	e07b      	b.n	8004b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f000 f88d 	bl	8004b68 <I2C_IsErrorOccurred>
 8004a4e:	1e03      	subs	r3, r0, #0
 8004a50:	d003      	beq.n	8004a5a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004a52:	2317      	movs	r3, #23
 8004a54:	18fb      	adds	r3, r7, r3
 8004a56:	2201      	movs	r2, #1
 8004a58:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	2220      	movs	r2, #32
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d140      	bne.n	8004aea <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004a68:	2117      	movs	r1, #23
 8004a6a:	187b      	adds	r3, r7, r1
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d13b      	bne.n	8004aea <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2204      	movs	r2, #4
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d106      	bne.n	8004a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004a88:	187b      	adds	r3, r7, r1
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	2210      	movs	r2, #16
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d123      	bne.n	8004ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2210      	movs	r2, #16
 8004aa2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4929      	ldr	r1, [pc, #164]	@ (8004b64 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004abe:	400a      	ands	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2241      	movs	r2, #65	@ 0x41
 8004ac6:	2120      	movs	r1, #32
 8004ac8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2242      	movs	r2, #66	@ 0x42
 8004ace:	2100      	movs	r1, #0
 8004ad0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2240      	movs	r2, #64	@ 0x40
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004ada:	2317      	movs	r3, #23
 8004adc:	18fb      	adds	r3, r7, r3
 8004ade:	2201      	movs	r2, #1
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	e002      	b.n	8004aea <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004aea:	f7fe f83d 	bl	8002b68 <HAL_GetTick>
 8004aee:	0002      	movs	r2, r0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d302      	bcc.n	8004b00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d11c      	bne.n	8004b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004b00:	2017      	movs	r0, #23
 8004b02:	183b      	adds	r3, r7, r0
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d117      	bne.n	8004b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	2204      	movs	r2, #4
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d010      	beq.n	8004b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2241      	movs	r2, #65	@ 0x41
 8004b28:	2120      	movs	r1, #32
 8004b2a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2240      	movs	r2, #64	@ 0x40
 8004b30:	2100      	movs	r1, #0
 8004b32:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004b34:	183b      	adds	r3, r7, r0
 8004b36:	2201      	movs	r2, #1
 8004b38:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2204      	movs	r2, #4
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d005      	beq.n	8004b54 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004b48:	2317      	movs	r3, #23
 8004b4a:	18fb      	adds	r3, r7, r3
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d100      	bne.n	8004b54 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004b52:	e776      	b.n	8004a42 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004b54:	2317      	movs	r3, #23
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	781b      	ldrb	r3, [r3, #0]
}
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	b006      	add	sp, #24
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	fe00e800 	.word	0xfe00e800

08004b68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	@ 0x28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b74:	2327      	movs	r3, #39	@ 0x27
 8004b76:	18fb      	adds	r3, r7, r3
 8004b78:	2200      	movs	r2, #0
 8004b7a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2210      	movs	r2, #16
 8004b90:	4013      	ands	r3, r2
 8004b92:	d100      	bne.n	8004b96 <I2C_IsErrorOccurred+0x2e>
 8004b94:	e079      	b.n	8004c8a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2210      	movs	r2, #16
 8004b9c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b9e:	e057      	b.n	8004c50 <I2C_IsErrorOccurred+0xe8>
 8004ba0:	2227      	movs	r2, #39	@ 0x27
 8004ba2:	18bb      	adds	r3, r7, r2
 8004ba4:	18ba      	adds	r2, r7, r2
 8004ba6:	7812      	ldrb	r2, [r2, #0]
 8004ba8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	3301      	adds	r3, #1
 8004bae:	d04f      	beq.n	8004c50 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bb0:	f7fd ffda 	bl	8002b68 <HAL_GetTick>
 8004bb4:	0002      	movs	r2, r0
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d302      	bcc.n	8004bc6 <I2C_IsErrorOccurred+0x5e>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d144      	bne.n	8004c50 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	2380      	movs	r3, #128	@ 0x80
 8004bce:	01db      	lsls	r3, r3, #7
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004bd4:	2013      	movs	r0, #19
 8004bd6:	183b      	adds	r3, r7, r0
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	2142      	movs	r1, #66	@ 0x42
 8004bdc:	5c52      	ldrb	r2, [r2, r1]
 8004bde:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699a      	ldr	r2, [r3, #24]
 8004be6:	2380      	movs	r3, #128	@ 0x80
 8004be8:	021b      	lsls	r3, r3, #8
 8004bea:	401a      	ands	r2, r3
 8004bec:	2380      	movs	r3, #128	@ 0x80
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d126      	bne.n	8004c42 <I2C_IsErrorOccurred+0xda>
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	2380      	movs	r3, #128	@ 0x80
 8004bf8:	01db      	lsls	r3, r3, #7
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d021      	beq.n	8004c42 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004bfe:	183b      	adds	r3, r7, r0
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d01d      	beq.n	8004c42 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2180      	movs	r1, #128	@ 0x80
 8004c12:	01c9      	lsls	r1, r1, #7
 8004c14:	430a      	orrs	r2, r1
 8004c16:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c18:	f7fd ffa6 	bl	8002b68 <HAL_GetTick>
 8004c1c:	0003      	movs	r3, r0
 8004c1e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c20:	e00f      	b.n	8004c42 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c22:	f7fd ffa1 	bl	8002b68 <HAL_GetTick>
 8004c26:	0002      	movs	r2, r0
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b19      	cmp	r3, #25
 8004c2e:	d908      	bls.n	8004c42 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	2220      	movs	r2, #32
 8004c34:	4313      	orrs	r3, r2
 8004c36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004c38:	2327      	movs	r3, #39	@ 0x27
 8004c3a:	18fb      	adds	r3, r7, r3
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]

              break;
 8004c40:	e006      	b.n	8004c50 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d1e8      	bne.n	8004c22 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	2220      	movs	r2, #32
 8004c58:	4013      	ands	r3, r2
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d004      	beq.n	8004c68 <I2C_IsErrorOccurred+0x100>
 8004c5e:	2327      	movs	r3, #39	@ 0x27
 8004c60:	18fb      	adds	r3, r7, r3
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d09b      	beq.n	8004ba0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c68:	2327      	movs	r3, #39	@ 0x27
 8004c6a:	18fb      	adds	r3, r7, r3
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d103      	bne.n	8004c7a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2220      	movs	r2, #32
 8004c78:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004c82:	2327      	movs	r3, #39	@ 0x27
 8004c84:	18fb      	adds	r3, r7, r3
 8004c86:	2201      	movs	r2, #1
 8004c88:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	2380      	movs	r3, #128	@ 0x80
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d00c      	beq.n	8004cb6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2280      	movs	r2, #128	@ 0x80
 8004caa:	0052      	lsls	r2, r2, #1
 8004cac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cae:	2327      	movs	r3, #39	@ 0x27
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	2380      	movs	r3, #128	@ 0x80
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d00c      	beq.n	8004cda <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	2208      	movs	r2, #8
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2280      	movs	r2, #128	@ 0x80
 8004cce:	00d2      	lsls	r2, r2, #3
 8004cd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cd2:	2327      	movs	r3, #39	@ 0x27
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	2380      	movs	r3, #128	@ 0x80
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	d00c      	beq.n	8004cfe <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2280      	movs	r2, #128	@ 0x80
 8004cf2:	0092      	lsls	r2, r2, #2
 8004cf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cf6:	2327      	movs	r3, #39	@ 0x27
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004cfe:	2327      	movs	r3, #39	@ 0x27
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01d      	beq.n	8004d44 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f7ff fd6b 	bl	80047e6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	490e      	ldr	r1, [pc, #56]	@ (8004d54 <I2C_IsErrorOccurred+0x1ec>)
 8004d1c:	400a      	ands	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2241      	movs	r2, #65	@ 0x41
 8004d30:	2120      	movs	r1, #32
 8004d32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2242      	movs	r2, #66	@ 0x42
 8004d38:	2100      	movs	r1, #0
 8004d3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2240      	movs	r2, #64	@ 0x40
 8004d40:	2100      	movs	r1, #0
 8004d42:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004d44:	2327      	movs	r3, #39	@ 0x27
 8004d46:	18fb      	adds	r3, r7, r3
 8004d48:	781b      	ldrb	r3, [r3, #0]
}
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	b00a      	add	sp, #40	@ 0x28
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	fe00e800 	.word	0xfe00e800

08004d58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d58:	b590      	push	{r4, r7, lr}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	0008      	movs	r0, r1
 8004d62:	0011      	movs	r1, r2
 8004d64:	607b      	str	r3, [r7, #4]
 8004d66:	240a      	movs	r4, #10
 8004d68:	193b      	adds	r3, r7, r4
 8004d6a:	1c02      	adds	r2, r0, #0
 8004d6c:	801a      	strh	r2, [r3, #0]
 8004d6e:	2009      	movs	r0, #9
 8004d70:	183b      	adds	r3, r7, r0
 8004d72:	1c0a      	adds	r2, r1, #0
 8004d74:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d76:	193b      	adds	r3, r7, r4
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	059b      	lsls	r3, r3, #22
 8004d7c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d7e:	183b      	adds	r3, r7, r0
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	0419      	lsls	r1, r3, #16
 8004d84:	23ff      	movs	r3, #255	@ 0xff
 8004d86:	041b      	lsls	r3, r3, #16
 8004d88:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d8a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d92:	4313      	orrs	r3, r2
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004da2:	0d51      	lsrs	r1, r2, #21
 8004da4:	2280      	movs	r2, #128	@ 0x80
 8004da6:	00d2      	lsls	r2, r2, #3
 8004da8:	400a      	ands	r2, r1
 8004daa:	4907      	ldr	r1, [pc, #28]	@ (8004dc8 <I2C_TransferConfig+0x70>)
 8004dac:	430a      	orrs	r2, r1
 8004dae:	43d2      	mvns	r2, r2
 8004db0:	401a      	ands	r2, r3
 8004db2:	0011      	movs	r1, r2
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004dbe:	46c0      	nop			@ (mov r8, r8)
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	b007      	add	sp, #28
 8004dc4:	bd90      	pop	{r4, r7, pc}
 8004dc6:	46c0      	nop			@ (mov r8, r8)
 8004dc8:	03ff63ff 	.word	0x03ff63ff

08004dcc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	000a      	movs	r2, r1
 8004dd6:	1cbb      	adds	r3, r7, #2
 8004dd8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004dde:	1cbb      	adds	r3, r7, #2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	2201      	movs	r2, #1
 8004de4:	4013      	ands	r3, r2
 8004de6:	d010      	beq.n	8004e0a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2242      	movs	r2, #66	@ 0x42
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2241      	movs	r2, #65	@ 0x41
 8004df4:	5c9b      	ldrb	r3, [r3, r2]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	001a      	movs	r2, r3
 8004dfa:	2328      	movs	r3, #40	@ 0x28
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b28      	cmp	r3, #40	@ 0x28
 8004e00:	d003      	beq.n	8004e0a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	22b0      	movs	r2, #176	@ 0xb0
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004e0a:	1cbb      	adds	r3, r7, #2
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	4013      	ands	r3, r2
 8004e12:	d010      	beq.n	8004e36 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2244      	movs	r2, #68	@ 0x44
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2241      	movs	r2, #65	@ 0x41
 8004e20:	5c9b      	ldrb	r3, [r3, r2]
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	001a      	movs	r2, r3
 8004e26:	2328      	movs	r3, #40	@ 0x28
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2b28      	cmp	r3, #40	@ 0x28
 8004e2c:	d003      	beq.n	8004e36 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	22b0      	movs	r2, #176	@ 0xb0
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004e36:	1cbb      	adds	r3, r7, #2
 8004e38:	2200      	movs	r2, #0
 8004e3a:	5e9b      	ldrsh	r3, [r3, r2]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	da03      	bge.n	8004e48 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	22b8      	movs	r2, #184	@ 0xb8
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004e48:	1cbb      	adds	r3, r7, #2
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d103      	bne.n	8004e58 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2290      	movs	r2, #144	@ 0x90
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004e58:	1cbb      	adds	r3, r7, #2
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d103      	bne.n	8004e68 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004e68:	1cbb      	adds	r3, r7, #2
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	2b40      	cmp	r3, #64	@ 0x40
 8004e6e:	d103      	bne.n	8004e78 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2240      	movs	r2, #64	@ 0x40
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	43d9      	mvns	r1, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	400a      	ands	r2, r1
 8004e88:	601a      	str	r2, [r3, #0]
}
 8004e8a:	46c0      	nop			@ (mov r8, r8)
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b004      	add	sp, #16
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2241      	movs	r2, #65	@ 0x41
 8004ea2:	5c9b      	ldrb	r3, [r3, r2]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b20      	cmp	r3, #32
 8004ea8:	d138      	bne.n	8004f1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2240      	movs	r2, #64	@ 0x40
 8004eae:	5c9b      	ldrb	r3, [r3, r2]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e032      	b.n	8004f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2240      	movs	r2, #64	@ 0x40
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2241      	movs	r2, #65	@ 0x41
 8004ec4:	2124      	movs	r1, #36	@ 0x24
 8004ec6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	438a      	bics	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4911      	ldr	r1, [pc, #68]	@ (8004f28 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004ee4:	400a      	ands	r2, r1
 8004ee6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6819      	ldr	r1, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2101      	movs	r1, #1
 8004f04:	430a      	orrs	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2241      	movs	r2, #65	@ 0x41
 8004f0c:	2120      	movs	r1, #32
 8004f0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2240      	movs	r2, #64	@ 0x40
 8004f14:	2100      	movs	r1, #0
 8004f16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e000      	b.n	8004f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f1c:	2302      	movs	r3, #2
  }
}
 8004f1e:	0018      	movs	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	b002      	add	sp, #8
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	46c0      	nop			@ (mov r8, r8)
 8004f28:	ffffefff 	.word	0xffffefff

08004f2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2241      	movs	r2, #65	@ 0x41
 8004f3a:	5c9b      	ldrb	r3, [r3, r2]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d139      	bne.n	8004fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2240      	movs	r2, #64	@ 0x40
 8004f46:	5c9b      	ldrb	r3, [r3, r2]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e033      	b.n	8004fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2240      	movs	r2, #64	@ 0x40
 8004f54:	2101      	movs	r1, #1
 8004f56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2241      	movs	r2, #65	@ 0x41
 8004f5c:	2124      	movs	r1, #36	@ 0x24
 8004f5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	438a      	bics	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4a11      	ldr	r2, [pc, #68]	@ (8004fc0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2241      	movs	r2, #65	@ 0x41
 8004fa6:	2120      	movs	r1, #32
 8004fa8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2240      	movs	r2, #64	@ 0x40
 8004fae:	2100      	movs	r1, #0
 8004fb0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e000      	b.n	8004fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004fb6:	2302      	movs	r3, #2
  }
}
 8004fb8:	0018      	movs	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b004      	add	sp, #16
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	fffff0ff 	.word	0xfffff0ff

08004fc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004fcc:	4b19      	ldr	r3, [pc, #100]	@ (8005034 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a19      	ldr	r2, [pc, #100]	@ (8005038 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	0019      	movs	r1, r3
 8004fd6:	4b17      	ldr	r3, [pc, #92]	@ (8005034 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	2380      	movs	r3, #128	@ 0x80
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d11f      	bne.n	8005028 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004fe8:	4b14      	ldr	r3, [pc, #80]	@ (800503c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	0013      	movs	r3, r2
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	189b      	adds	r3, r3, r2
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	4912      	ldr	r1, [pc, #72]	@ (8005040 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f7fb f884 	bl	8000104 <__udivsi3>
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	3301      	adds	r3, #1
 8005000:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005002:	e008      	b.n	8005016 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3b01      	subs	r3, #1
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e001      	b.n	8005016 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e009      	b.n	800502a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005016:	4b07      	ldr	r3, [pc, #28]	@ (8005034 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005018:	695a      	ldr	r2, [r3, #20]
 800501a:	2380      	movs	r3, #128	@ 0x80
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	401a      	ands	r2, r3
 8005020:	2380      	movs	r3, #128	@ 0x80
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	429a      	cmp	r2, r3
 8005026:	d0ed      	beq.n	8005004 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	0018      	movs	r0, r3
 800502c:	46bd      	mov	sp, r7
 800502e:	b004      	add	sp, #16
 8005030:	bd80      	pop	{r7, pc}
 8005032:	46c0      	nop			@ (mov r8, r8)
 8005034:	40007000 	.word	0x40007000
 8005038:	fffff9ff 	.word	0xfffff9ff
 800503c:	20000074 	.word	0x20000074
 8005040:	000f4240 	.word	0x000f4240

08005044 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e2fe      	b.n	8005654 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2201      	movs	r2, #1
 800505c:	4013      	ands	r3, r2
 800505e:	d100      	bne.n	8005062 <HAL_RCC_OscConfig+0x1e>
 8005060:	e07c      	b.n	800515c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005062:	4bc3      	ldr	r3, [pc, #780]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	2238      	movs	r2, #56	@ 0x38
 8005068:	4013      	ands	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800506c:	4bc0      	ldr	r3, [pc, #768]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	2203      	movs	r2, #3
 8005072:	4013      	ands	r3, r2
 8005074:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b10      	cmp	r3, #16
 800507a:	d102      	bne.n	8005082 <HAL_RCC_OscConfig+0x3e>
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2b03      	cmp	r3, #3
 8005080:	d002      	beq.n	8005088 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b08      	cmp	r3, #8
 8005086:	d10b      	bne.n	80050a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005088:	4bb9      	ldr	r3, [pc, #740]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	2380      	movs	r3, #128	@ 0x80
 800508e:	029b      	lsls	r3, r3, #10
 8005090:	4013      	ands	r3, r2
 8005092:	d062      	beq.n	800515a <HAL_RCC_OscConfig+0x116>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d15e      	bne.n	800515a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e2d9      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	2380      	movs	r3, #128	@ 0x80
 80050a6:	025b      	lsls	r3, r3, #9
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d107      	bne.n	80050bc <HAL_RCC_OscConfig+0x78>
 80050ac:	4bb0      	ldr	r3, [pc, #704]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	4baf      	ldr	r3, [pc, #700]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80050b2:	2180      	movs	r1, #128	@ 0x80
 80050b4:	0249      	lsls	r1, r1, #9
 80050b6:	430a      	orrs	r2, r1
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	e020      	b.n	80050fe <HAL_RCC_OscConfig+0xba>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	23a0      	movs	r3, #160	@ 0xa0
 80050c2:	02db      	lsls	r3, r3, #11
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d10e      	bne.n	80050e6 <HAL_RCC_OscConfig+0xa2>
 80050c8:	4ba9      	ldr	r3, [pc, #676]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	4ba8      	ldr	r3, [pc, #672]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80050ce:	2180      	movs	r1, #128	@ 0x80
 80050d0:	02c9      	lsls	r1, r1, #11
 80050d2:	430a      	orrs	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	4ba6      	ldr	r3, [pc, #664]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	4ba5      	ldr	r3, [pc, #660]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80050dc:	2180      	movs	r1, #128	@ 0x80
 80050de:	0249      	lsls	r1, r1, #9
 80050e0:	430a      	orrs	r2, r1
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	e00b      	b.n	80050fe <HAL_RCC_OscConfig+0xba>
 80050e6:	4ba2      	ldr	r3, [pc, #648]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4ba1      	ldr	r3, [pc, #644]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80050ec:	49a1      	ldr	r1, [pc, #644]	@ (8005374 <HAL_RCC_OscConfig+0x330>)
 80050ee:	400a      	ands	r2, r1
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	4b9f      	ldr	r3, [pc, #636]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b9e      	ldr	r3, [pc, #632]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80050f8:	499f      	ldr	r1, [pc, #636]	@ (8005378 <HAL_RCC_OscConfig+0x334>)
 80050fa:	400a      	ands	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d014      	beq.n	8005130 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005106:	f7fd fd2f 	bl	8002b68 <HAL_GetTick>
 800510a:	0003      	movs	r3, r0
 800510c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005110:	f7fd fd2a 	bl	8002b68 <HAL_GetTick>
 8005114:	0002      	movs	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b64      	cmp	r3, #100	@ 0x64
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e298      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005122:	4b93      	ldr	r3, [pc, #588]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	2380      	movs	r3, #128	@ 0x80
 8005128:	029b      	lsls	r3, r3, #10
 800512a:	4013      	ands	r3, r2
 800512c:	d0f0      	beq.n	8005110 <HAL_RCC_OscConfig+0xcc>
 800512e:	e015      	b.n	800515c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005130:	f7fd fd1a 	bl	8002b68 <HAL_GetTick>
 8005134:	0003      	movs	r3, r0
 8005136:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800513a:	f7fd fd15 	bl	8002b68 <HAL_GetTick>
 800513e:	0002      	movs	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b64      	cmp	r3, #100	@ 0x64
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e283      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800514c:	4b88      	ldr	r3, [pc, #544]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	2380      	movs	r3, #128	@ 0x80
 8005152:	029b      	lsls	r3, r3, #10
 8005154:	4013      	ands	r3, r2
 8005156:	d1f0      	bne.n	800513a <HAL_RCC_OscConfig+0xf6>
 8005158:	e000      	b.n	800515c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800515a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2202      	movs	r2, #2
 8005162:	4013      	ands	r3, r2
 8005164:	d100      	bne.n	8005168 <HAL_RCC_OscConfig+0x124>
 8005166:	e099      	b.n	800529c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005168:	4b81      	ldr	r3, [pc, #516]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2238      	movs	r2, #56	@ 0x38
 800516e:	4013      	ands	r3, r2
 8005170:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005172:	4b7f      	ldr	r3, [pc, #508]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	2203      	movs	r2, #3
 8005178:	4013      	ands	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	2b10      	cmp	r3, #16
 8005180:	d102      	bne.n	8005188 <HAL_RCC_OscConfig+0x144>
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b02      	cmp	r3, #2
 8005186:	d002      	beq.n	800518e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d135      	bne.n	80051fa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800518e:	4b78      	ldr	r3, [pc, #480]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	2380      	movs	r3, #128	@ 0x80
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	4013      	ands	r3, r2
 8005198:	d005      	beq.n	80051a6 <HAL_RCC_OscConfig+0x162>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e256      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a6:	4b72      	ldr	r3, [pc, #456]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	4a74      	ldr	r2, [pc, #464]	@ (800537c <HAL_RCC_OscConfig+0x338>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	0019      	movs	r1, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	021a      	lsls	r2, r3, #8
 80051b6:	4b6e      	ldr	r3, [pc, #440]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80051b8:	430a      	orrs	r2, r1
 80051ba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d112      	bne.n	80051e8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80051c2:	4b6b      	ldr	r3, [pc, #428]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a6e      	ldr	r2, [pc, #440]	@ (8005380 <HAL_RCC_OscConfig+0x33c>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	0019      	movs	r1, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	4b67      	ldr	r3, [pc, #412]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80051d2:	430a      	orrs	r2, r1
 80051d4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80051d6:	4b66      	ldr	r3, [pc, #408]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	0adb      	lsrs	r3, r3, #11
 80051dc:	2207      	movs	r2, #7
 80051de:	4013      	ands	r3, r2
 80051e0:	4a68      	ldr	r2, [pc, #416]	@ (8005384 <HAL_RCC_OscConfig+0x340>)
 80051e2:	40da      	lsrs	r2, r3
 80051e4:	4b68      	ldr	r3, [pc, #416]	@ (8005388 <HAL_RCC_OscConfig+0x344>)
 80051e6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80051e8:	4b68      	ldr	r3, [pc, #416]	@ (800538c <HAL_RCC_OscConfig+0x348>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	0018      	movs	r0, r3
 80051ee:	f7fd fc5f 	bl	8002ab0 <HAL_InitTick>
 80051f2:	1e03      	subs	r3, r0, #0
 80051f4:	d051      	beq.n	800529a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e22c      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d030      	beq.n	8005264 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005202:	4b5b      	ldr	r3, [pc, #364]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a5e      	ldr	r2, [pc, #376]	@ (8005380 <HAL_RCC_OscConfig+0x33c>)
 8005208:	4013      	ands	r3, r2
 800520a:	0019      	movs	r1, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	4b57      	ldr	r3, [pc, #348]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 8005212:	430a      	orrs	r2, r1
 8005214:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005216:	4b56      	ldr	r3, [pc, #344]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	4b55      	ldr	r3, [pc, #340]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 800521c:	2180      	movs	r1, #128	@ 0x80
 800521e:	0049      	lsls	r1, r1, #1
 8005220:	430a      	orrs	r2, r1
 8005222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005224:	f7fd fca0 	bl	8002b68 <HAL_GetTick>
 8005228:	0003      	movs	r3, r0
 800522a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800522e:	f7fd fc9b 	bl	8002b68 <HAL_GetTick>
 8005232:	0002      	movs	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e209      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005240:	4b4b      	ldr	r3, [pc, #300]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	2380      	movs	r3, #128	@ 0x80
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	4013      	ands	r3, r2
 800524a:	d0f0      	beq.n	800522e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524c:	4b48      	ldr	r3, [pc, #288]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4a4a      	ldr	r2, [pc, #296]	@ (800537c <HAL_RCC_OscConfig+0x338>)
 8005252:	4013      	ands	r3, r2
 8005254:	0019      	movs	r1, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	021a      	lsls	r2, r3, #8
 800525c:	4b44      	ldr	r3, [pc, #272]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
 8005262:	e01b      	b.n	800529c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005264:	4b42      	ldr	r3, [pc, #264]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	4b41      	ldr	r3, [pc, #260]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 800526a:	4949      	ldr	r1, [pc, #292]	@ (8005390 <HAL_RCC_OscConfig+0x34c>)
 800526c:	400a      	ands	r2, r1
 800526e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fd fc7a 	bl	8002b68 <HAL_GetTick>
 8005274:	0003      	movs	r3, r0
 8005276:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800527a:	f7fd fc75 	bl	8002b68 <HAL_GetTick>
 800527e:	0002      	movs	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e1e3      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800528c:	4b38      	ldr	r3, [pc, #224]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	2380      	movs	r3, #128	@ 0x80
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4013      	ands	r3, r2
 8005296:	d1f0      	bne.n	800527a <HAL_RCC_OscConfig+0x236>
 8005298:	e000      	b.n	800529c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800529a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2208      	movs	r2, #8
 80052a2:	4013      	ands	r3, r2
 80052a4:	d047      	beq.n	8005336 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80052a6:	4b32      	ldr	r3, [pc, #200]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	2238      	movs	r2, #56	@ 0x38
 80052ac:	4013      	ands	r3, r2
 80052ae:	2b18      	cmp	r3, #24
 80052b0:	d10a      	bne.n	80052c8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80052b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80052b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052b6:	2202      	movs	r2, #2
 80052b8:	4013      	ands	r3, r2
 80052ba:	d03c      	beq.n	8005336 <HAL_RCC_OscConfig+0x2f2>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d138      	bne.n	8005336 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e1c5      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d019      	beq.n	8005304 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80052d0:	4b27      	ldr	r3, [pc, #156]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80052d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80052d4:	4b26      	ldr	r3, [pc, #152]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80052d6:	2101      	movs	r1, #1
 80052d8:	430a      	orrs	r2, r1
 80052da:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052dc:	f7fd fc44 	bl	8002b68 <HAL_GetTick>
 80052e0:	0003      	movs	r3, r0
 80052e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052e4:	e008      	b.n	80052f8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e6:	f7fd fc3f 	bl	8002b68 <HAL_GetTick>
 80052ea:	0002      	movs	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e1ad      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 80052fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052fc:	2202      	movs	r2, #2
 80052fe:	4013      	ands	r3, r2
 8005300:	d0f1      	beq.n	80052e6 <HAL_RCC_OscConfig+0x2a2>
 8005302:	e018      	b.n	8005336 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005304:	4b1a      	ldr	r3, [pc, #104]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 8005306:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005308:	4b19      	ldr	r3, [pc, #100]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 800530a:	2101      	movs	r1, #1
 800530c:	438a      	bics	r2, r1
 800530e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005310:	f7fd fc2a 	bl	8002b68 <HAL_GetTick>
 8005314:	0003      	movs	r3, r0
 8005316:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800531a:	f7fd fc25 	bl	8002b68 <HAL_GetTick>
 800531e:	0002      	movs	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e193      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800532c:	4b10      	ldr	r3, [pc, #64]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 800532e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005330:	2202      	movs	r2, #2
 8005332:	4013      	ands	r3, r2
 8005334:	d1f1      	bne.n	800531a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2204      	movs	r2, #4
 800533c:	4013      	ands	r3, r2
 800533e:	d100      	bne.n	8005342 <HAL_RCC_OscConfig+0x2fe>
 8005340:	e0c6      	b.n	80054d0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005342:	231f      	movs	r3, #31
 8005344:	18fb      	adds	r3, r7, r3
 8005346:	2200      	movs	r2, #0
 8005348:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800534a:	4b09      	ldr	r3, [pc, #36]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	2238      	movs	r2, #56	@ 0x38
 8005350:	4013      	ands	r3, r2
 8005352:	2b20      	cmp	r3, #32
 8005354:	d11e      	bne.n	8005394 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005356:	4b06      	ldr	r3, [pc, #24]	@ (8005370 <HAL_RCC_OscConfig+0x32c>)
 8005358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800535a:	2202      	movs	r2, #2
 800535c:	4013      	ands	r3, r2
 800535e:	d100      	bne.n	8005362 <HAL_RCC_OscConfig+0x31e>
 8005360:	e0b6      	b.n	80054d0 <HAL_RCC_OscConfig+0x48c>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d000      	beq.n	800536c <HAL_RCC_OscConfig+0x328>
 800536a:	e0b1      	b.n	80054d0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e171      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
 8005370:	40021000 	.word	0x40021000
 8005374:	fffeffff 	.word	0xfffeffff
 8005378:	fffbffff 	.word	0xfffbffff
 800537c:	ffff80ff 	.word	0xffff80ff
 8005380:	ffffc7ff 	.word	0xffffc7ff
 8005384:	00f42400 	.word	0x00f42400
 8005388:	20000074 	.word	0x20000074
 800538c:	20000078 	.word	0x20000078
 8005390:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005394:	4bb1      	ldr	r3, [pc, #708]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 8005396:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005398:	2380      	movs	r3, #128	@ 0x80
 800539a:	055b      	lsls	r3, r3, #21
 800539c:	4013      	ands	r3, r2
 800539e:	d101      	bne.n	80053a4 <HAL_RCC_OscConfig+0x360>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <HAL_RCC_OscConfig+0x362>
 80053a4:	2300      	movs	r3, #0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d011      	beq.n	80053ce <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80053aa:	4bac      	ldr	r3, [pc, #688]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 80053ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053ae:	4bab      	ldr	r3, [pc, #684]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 80053b0:	2180      	movs	r1, #128	@ 0x80
 80053b2:	0549      	lsls	r1, r1, #21
 80053b4:	430a      	orrs	r2, r1
 80053b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80053b8:	4ba8      	ldr	r3, [pc, #672]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 80053ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053bc:	2380      	movs	r3, #128	@ 0x80
 80053be:	055b      	lsls	r3, r3, #21
 80053c0:	4013      	ands	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80053c6:	231f      	movs	r3, #31
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	2201      	movs	r2, #1
 80053cc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053ce:	4ba4      	ldr	r3, [pc, #656]	@ (8005660 <HAL_RCC_OscConfig+0x61c>)
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	2380      	movs	r3, #128	@ 0x80
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	4013      	ands	r3, r2
 80053d8:	d11a      	bne.n	8005410 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053da:	4ba1      	ldr	r3, [pc, #644]	@ (8005660 <HAL_RCC_OscConfig+0x61c>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4ba0      	ldr	r3, [pc, #640]	@ (8005660 <HAL_RCC_OscConfig+0x61c>)
 80053e0:	2180      	movs	r1, #128	@ 0x80
 80053e2:	0049      	lsls	r1, r1, #1
 80053e4:	430a      	orrs	r2, r1
 80053e6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80053e8:	f7fd fbbe 	bl	8002b68 <HAL_GetTick>
 80053ec:	0003      	movs	r3, r0
 80053ee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053f0:	e008      	b.n	8005404 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053f2:	f7fd fbb9 	bl	8002b68 <HAL_GetTick>
 80053f6:	0002      	movs	r2, r0
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d901      	bls.n	8005404 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e127      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005404:	4b96      	ldr	r3, [pc, #600]	@ (8005660 <HAL_RCC_OscConfig+0x61c>)
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	2380      	movs	r3, #128	@ 0x80
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	4013      	ands	r3, r2
 800540e:	d0f0      	beq.n	80053f2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d106      	bne.n	8005426 <HAL_RCC_OscConfig+0x3e2>
 8005418:	4b90      	ldr	r3, [pc, #576]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 800541a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800541c:	4b8f      	ldr	r3, [pc, #572]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 800541e:	2101      	movs	r1, #1
 8005420:	430a      	orrs	r2, r1
 8005422:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005424:	e01c      	b.n	8005460 <HAL_RCC_OscConfig+0x41c>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2b05      	cmp	r3, #5
 800542c:	d10c      	bne.n	8005448 <HAL_RCC_OscConfig+0x404>
 800542e:	4b8b      	ldr	r3, [pc, #556]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 8005430:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005432:	4b8a      	ldr	r3, [pc, #552]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 8005434:	2104      	movs	r1, #4
 8005436:	430a      	orrs	r2, r1
 8005438:	65da      	str	r2, [r3, #92]	@ 0x5c
 800543a:	4b88      	ldr	r3, [pc, #544]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 800543c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800543e:	4b87      	ldr	r3, [pc, #540]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 8005440:	2101      	movs	r1, #1
 8005442:	430a      	orrs	r2, r1
 8005444:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005446:	e00b      	b.n	8005460 <HAL_RCC_OscConfig+0x41c>
 8005448:	4b84      	ldr	r3, [pc, #528]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 800544a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800544c:	4b83      	ldr	r3, [pc, #524]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 800544e:	2101      	movs	r1, #1
 8005450:	438a      	bics	r2, r1
 8005452:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005454:	4b81      	ldr	r3, [pc, #516]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 8005456:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005458:	4b80      	ldr	r3, [pc, #512]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 800545a:	2104      	movs	r1, #4
 800545c:	438a      	bics	r2, r1
 800545e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d014      	beq.n	8005492 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005468:	f7fd fb7e 	bl	8002b68 <HAL_GetTick>
 800546c:	0003      	movs	r3, r0
 800546e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005470:	e009      	b.n	8005486 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005472:	f7fd fb79 	bl	8002b68 <HAL_GetTick>
 8005476:	0002      	movs	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	4a79      	ldr	r2, [pc, #484]	@ (8005664 <HAL_RCC_OscConfig+0x620>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e0e6      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005486:	4b75      	ldr	r3, [pc, #468]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 8005488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800548a:	2202      	movs	r2, #2
 800548c:	4013      	ands	r3, r2
 800548e:	d0f0      	beq.n	8005472 <HAL_RCC_OscConfig+0x42e>
 8005490:	e013      	b.n	80054ba <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005492:	f7fd fb69 	bl	8002b68 <HAL_GetTick>
 8005496:	0003      	movs	r3, r0
 8005498:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800549a:	e009      	b.n	80054b0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800549c:	f7fd fb64 	bl	8002b68 <HAL_GetTick>
 80054a0:	0002      	movs	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	4a6f      	ldr	r2, [pc, #444]	@ (8005664 <HAL_RCC_OscConfig+0x620>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e0d1      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054b0:	4b6a      	ldr	r3, [pc, #424]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 80054b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b4:	2202      	movs	r2, #2
 80054b6:	4013      	ands	r3, r2
 80054b8:	d1f0      	bne.n	800549c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80054ba:	231f      	movs	r3, #31
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d105      	bne.n	80054d0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80054c4:	4b65      	ldr	r3, [pc, #404]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 80054c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054c8:	4b64      	ldr	r3, [pc, #400]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 80054ca:	4967      	ldr	r1, [pc, #412]	@ (8005668 <HAL_RCC_OscConfig+0x624>)
 80054cc:	400a      	ands	r2, r1
 80054ce:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d100      	bne.n	80054da <HAL_RCC_OscConfig+0x496>
 80054d8:	e0bb      	b.n	8005652 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054da:	4b60      	ldr	r3, [pc, #384]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2238      	movs	r2, #56	@ 0x38
 80054e0:	4013      	ands	r3, r2
 80054e2:	2b10      	cmp	r3, #16
 80054e4:	d100      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4a4>
 80054e6:	e07b      	b.n	80055e0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d156      	bne.n	800559e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f0:	4b5a      	ldr	r3, [pc, #360]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	4b59      	ldr	r3, [pc, #356]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 80054f6:	495d      	ldr	r1, [pc, #372]	@ (800566c <HAL_RCC_OscConfig+0x628>)
 80054f8:	400a      	ands	r2, r1
 80054fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fc:	f7fd fb34 	bl	8002b68 <HAL_GetTick>
 8005500:	0003      	movs	r3, r0
 8005502:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005504:	e008      	b.n	8005518 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005506:	f7fd fb2f 	bl	8002b68 <HAL_GetTick>
 800550a:	0002      	movs	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e09d      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005518:	4b50      	ldr	r3, [pc, #320]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	2380      	movs	r3, #128	@ 0x80
 800551e:	049b      	lsls	r3, r3, #18
 8005520:	4013      	ands	r3, r2
 8005522:	d1f0      	bne.n	8005506 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005524:	4b4d      	ldr	r3, [pc, #308]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	4a51      	ldr	r2, [pc, #324]	@ (8005670 <HAL_RCC_OscConfig+0x62c>)
 800552a:	4013      	ands	r3, r2
 800552c:	0019      	movs	r1, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1a      	ldr	r2, [r3, #32]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553c:	021b      	lsls	r3, r3, #8
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005550:	431a      	orrs	r2, r3
 8005552:	4b42      	ldr	r3, [pc, #264]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 8005554:	430a      	orrs	r2, r1
 8005556:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005558:	4b40      	ldr	r3, [pc, #256]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	4b3f      	ldr	r3, [pc, #252]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 800555e:	2180      	movs	r1, #128	@ 0x80
 8005560:	0449      	lsls	r1, r1, #17
 8005562:	430a      	orrs	r2, r1
 8005564:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005566:	4b3d      	ldr	r3, [pc, #244]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	4b3c      	ldr	r3, [pc, #240]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 800556c:	2180      	movs	r1, #128	@ 0x80
 800556e:	0549      	lsls	r1, r1, #21
 8005570:	430a      	orrs	r2, r1
 8005572:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005574:	f7fd faf8 	bl	8002b68 <HAL_GetTick>
 8005578:	0003      	movs	r3, r0
 800557a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800557e:	f7fd faf3 	bl	8002b68 <HAL_GetTick>
 8005582:	0002      	movs	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e061      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005590:	4b32      	ldr	r3, [pc, #200]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	2380      	movs	r3, #128	@ 0x80
 8005596:	049b      	lsls	r3, r3, #18
 8005598:	4013      	ands	r3, r2
 800559a:	d0f0      	beq.n	800557e <HAL_RCC_OscConfig+0x53a>
 800559c:	e059      	b.n	8005652 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800559e:	4b2f      	ldr	r3, [pc, #188]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	4b2e      	ldr	r3, [pc, #184]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 80055a4:	4931      	ldr	r1, [pc, #196]	@ (800566c <HAL_RCC_OscConfig+0x628>)
 80055a6:	400a      	ands	r2, r1
 80055a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055aa:	f7fd fadd 	bl	8002b68 <HAL_GetTick>
 80055ae:	0003      	movs	r3, r0
 80055b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b4:	f7fd fad8 	bl	8002b68 <HAL_GetTick>
 80055b8:	0002      	movs	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e046      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055c6:	4b25      	ldr	r3, [pc, #148]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	2380      	movs	r3, #128	@ 0x80
 80055cc:	049b      	lsls	r3, r3, #18
 80055ce:	4013      	ands	r3, r2
 80055d0:	d1f0      	bne.n	80055b4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80055d2:	4b22      	ldr	r3, [pc, #136]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	4b21      	ldr	r3, [pc, #132]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 80055d8:	4926      	ldr	r1, [pc, #152]	@ (8005674 <HAL_RCC_OscConfig+0x630>)
 80055da:	400a      	ands	r2, r1
 80055dc:	60da      	str	r2, [r3, #12]
 80055de:	e038      	b.n	8005652 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e033      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80055ec:	4b1b      	ldr	r3, [pc, #108]	@ (800565c <HAL_RCC_OscConfig+0x618>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2203      	movs	r2, #3
 80055f6:	401a      	ands	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d126      	bne.n	800564e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2270      	movs	r2, #112	@ 0x70
 8005604:	401a      	ands	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800560a:	429a      	cmp	r2, r3
 800560c:	d11f      	bne.n	800564e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	23fe      	movs	r3, #254	@ 0xfe
 8005612:	01db      	lsls	r3, r3, #7
 8005614:	401a      	ands	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800561c:	429a      	cmp	r2, r3
 800561e:	d116      	bne.n	800564e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	23f8      	movs	r3, #248	@ 0xf8
 8005624:	039b      	lsls	r3, r3, #14
 8005626:	401a      	ands	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800562c:	429a      	cmp	r2, r3
 800562e:	d10e      	bne.n	800564e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	23e0      	movs	r3, #224	@ 0xe0
 8005634:	051b      	lsls	r3, r3, #20
 8005636:	401a      	ands	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800563c:	429a      	cmp	r2, r3
 800563e:	d106      	bne.n	800564e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	0f5b      	lsrs	r3, r3, #29
 8005644:	075a      	lsls	r2, r3, #29
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800564a:	429a      	cmp	r2, r3
 800564c:	d001      	beq.n	8005652 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	0018      	movs	r0, r3
 8005656:	46bd      	mov	sp, r7
 8005658:	b008      	add	sp, #32
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40021000 	.word	0x40021000
 8005660:	40007000 	.word	0x40007000
 8005664:	00001388 	.word	0x00001388
 8005668:	efffffff 	.word	0xefffffff
 800566c:	feffffff 	.word	0xfeffffff
 8005670:	11c1808c 	.word	0x11c1808c
 8005674:	eefefffc 	.word	0xeefefffc

08005678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e0e9      	b.n	8005860 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800568c:	4b76      	ldr	r3, [pc, #472]	@ (8005868 <HAL_RCC_ClockConfig+0x1f0>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2207      	movs	r2, #7
 8005692:	4013      	ands	r3, r2
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d91e      	bls.n	80056d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800569a:	4b73      	ldr	r3, [pc, #460]	@ (8005868 <HAL_RCC_ClockConfig+0x1f0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2207      	movs	r2, #7
 80056a0:	4393      	bics	r3, r2
 80056a2:	0019      	movs	r1, r3
 80056a4:	4b70      	ldr	r3, [pc, #448]	@ (8005868 <HAL_RCC_ClockConfig+0x1f0>)
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056ac:	f7fd fa5c 	bl	8002b68 <HAL_GetTick>
 80056b0:	0003      	movs	r3, r0
 80056b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056b4:	e009      	b.n	80056ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056b6:	f7fd fa57 	bl	8002b68 <HAL_GetTick>
 80056ba:	0002      	movs	r2, r0
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	4a6a      	ldr	r2, [pc, #424]	@ (800586c <HAL_RCC_ClockConfig+0x1f4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e0ca      	b.n	8005860 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056ca:	4b67      	ldr	r3, [pc, #412]	@ (8005868 <HAL_RCC_ClockConfig+0x1f0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2207      	movs	r2, #7
 80056d0:	4013      	ands	r3, r2
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d1ee      	bne.n	80056b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2202      	movs	r2, #2
 80056de:	4013      	ands	r3, r2
 80056e0:	d015      	beq.n	800570e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2204      	movs	r2, #4
 80056e8:	4013      	ands	r3, r2
 80056ea:	d006      	beq.n	80056fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80056ec:	4b60      	ldr	r3, [pc, #384]	@ (8005870 <HAL_RCC_ClockConfig+0x1f8>)
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	4b5f      	ldr	r3, [pc, #380]	@ (8005870 <HAL_RCC_ClockConfig+0x1f8>)
 80056f2:	21e0      	movs	r1, #224	@ 0xe0
 80056f4:	01c9      	lsls	r1, r1, #7
 80056f6:	430a      	orrs	r2, r1
 80056f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056fa:	4b5d      	ldr	r3, [pc, #372]	@ (8005870 <HAL_RCC_ClockConfig+0x1f8>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	4a5d      	ldr	r2, [pc, #372]	@ (8005874 <HAL_RCC_ClockConfig+0x1fc>)
 8005700:	4013      	ands	r3, r2
 8005702:	0019      	movs	r1, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	4b59      	ldr	r3, [pc, #356]	@ (8005870 <HAL_RCC_ClockConfig+0x1f8>)
 800570a:	430a      	orrs	r2, r1
 800570c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2201      	movs	r2, #1
 8005714:	4013      	ands	r3, r2
 8005716:	d057      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d107      	bne.n	8005730 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005720:	4b53      	ldr	r3, [pc, #332]	@ (8005870 <HAL_RCC_ClockConfig+0x1f8>)
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	2380      	movs	r3, #128	@ 0x80
 8005726:	029b      	lsls	r3, r3, #10
 8005728:	4013      	ands	r3, r2
 800572a:	d12b      	bne.n	8005784 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e097      	b.n	8005860 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2b02      	cmp	r3, #2
 8005736:	d107      	bne.n	8005748 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005738:	4b4d      	ldr	r3, [pc, #308]	@ (8005870 <HAL_RCC_ClockConfig+0x1f8>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	2380      	movs	r3, #128	@ 0x80
 800573e:	049b      	lsls	r3, r3, #18
 8005740:	4013      	ands	r3, r2
 8005742:	d11f      	bne.n	8005784 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e08b      	b.n	8005860 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d107      	bne.n	8005760 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005750:	4b47      	ldr	r3, [pc, #284]	@ (8005870 <HAL_RCC_ClockConfig+0x1f8>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	2380      	movs	r3, #128	@ 0x80
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	4013      	ands	r3, r2
 800575a:	d113      	bne.n	8005784 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e07f      	b.n	8005860 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b03      	cmp	r3, #3
 8005766:	d106      	bne.n	8005776 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005768:	4b41      	ldr	r3, [pc, #260]	@ (8005870 <HAL_RCC_ClockConfig+0x1f8>)
 800576a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800576c:	2202      	movs	r2, #2
 800576e:	4013      	ands	r3, r2
 8005770:	d108      	bne.n	8005784 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e074      	b.n	8005860 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005776:	4b3e      	ldr	r3, [pc, #248]	@ (8005870 <HAL_RCC_ClockConfig+0x1f8>)
 8005778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800577a:	2202      	movs	r2, #2
 800577c:	4013      	ands	r3, r2
 800577e:	d101      	bne.n	8005784 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e06d      	b.n	8005860 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005784:	4b3a      	ldr	r3, [pc, #232]	@ (8005870 <HAL_RCC_ClockConfig+0x1f8>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2207      	movs	r2, #7
 800578a:	4393      	bics	r3, r2
 800578c:	0019      	movs	r1, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	4b37      	ldr	r3, [pc, #220]	@ (8005870 <HAL_RCC_ClockConfig+0x1f8>)
 8005794:	430a      	orrs	r2, r1
 8005796:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005798:	f7fd f9e6 	bl	8002b68 <HAL_GetTick>
 800579c:	0003      	movs	r3, r0
 800579e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a0:	e009      	b.n	80057b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a2:	f7fd f9e1 	bl	8002b68 <HAL_GetTick>
 80057a6:	0002      	movs	r2, r0
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	4a2f      	ldr	r2, [pc, #188]	@ (800586c <HAL_RCC_ClockConfig+0x1f4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e054      	b.n	8005860 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005870 <HAL_RCC_ClockConfig+0x1f8>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	2238      	movs	r2, #56	@ 0x38
 80057bc:	401a      	ands	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d1ec      	bne.n	80057a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057c8:	4b27      	ldr	r3, [pc, #156]	@ (8005868 <HAL_RCC_ClockConfig+0x1f0>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2207      	movs	r2, #7
 80057ce:	4013      	ands	r3, r2
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d21e      	bcs.n	8005814 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d6:	4b24      	ldr	r3, [pc, #144]	@ (8005868 <HAL_RCC_ClockConfig+0x1f0>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2207      	movs	r2, #7
 80057dc:	4393      	bics	r3, r2
 80057de:	0019      	movs	r1, r3
 80057e0:	4b21      	ldr	r3, [pc, #132]	@ (8005868 <HAL_RCC_ClockConfig+0x1f0>)
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057e8:	f7fd f9be 	bl	8002b68 <HAL_GetTick>
 80057ec:	0003      	movs	r3, r0
 80057ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057f0:	e009      	b.n	8005806 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f2:	f7fd f9b9 	bl	8002b68 <HAL_GetTick>
 80057f6:	0002      	movs	r2, r0
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	4a1b      	ldr	r2, [pc, #108]	@ (800586c <HAL_RCC_ClockConfig+0x1f4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e02c      	b.n	8005860 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005806:	4b18      	ldr	r3, [pc, #96]	@ (8005868 <HAL_RCC_ClockConfig+0x1f0>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2207      	movs	r2, #7
 800580c:	4013      	ands	r3, r2
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d1ee      	bne.n	80057f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2204      	movs	r2, #4
 800581a:	4013      	ands	r3, r2
 800581c:	d009      	beq.n	8005832 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800581e:	4b14      	ldr	r3, [pc, #80]	@ (8005870 <HAL_RCC_ClockConfig+0x1f8>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	4a15      	ldr	r2, [pc, #84]	@ (8005878 <HAL_RCC_ClockConfig+0x200>)
 8005824:	4013      	ands	r3, r2
 8005826:	0019      	movs	r1, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	4b10      	ldr	r3, [pc, #64]	@ (8005870 <HAL_RCC_ClockConfig+0x1f8>)
 800582e:	430a      	orrs	r2, r1
 8005830:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005832:	f000 f829 	bl	8005888 <HAL_RCC_GetSysClockFreq>
 8005836:	0001      	movs	r1, r0
 8005838:	4b0d      	ldr	r3, [pc, #52]	@ (8005870 <HAL_RCC_ClockConfig+0x1f8>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	0a1b      	lsrs	r3, r3, #8
 800583e:	220f      	movs	r2, #15
 8005840:	401a      	ands	r2, r3
 8005842:	4b0e      	ldr	r3, [pc, #56]	@ (800587c <HAL_RCC_ClockConfig+0x204>)
 8005844:	0092      	lsls	r2, r2, #2
 8005846:	58d3      	ldr	r3, [r2, r3]
 8005848:	221f      	movs	r2, #31
 800584a:	4013      	ands	r3, r2
 800584c:	000a      	movs	r2, r1
 800584e:	40da      	lsrs	r2, r3
 8005850:	4b0b      	ldr	r3, [pc, #44]	@ (8005880 <HAL_RCC_ClockConfig+0x208>)
 8005852:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005854:	4b0b      	ldr	r3, [pc, #44]	@ (8005884 <HAL_RCC_ClockConfig+0x20c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	0018      	movs	r0, r3
 800585a:	f7fd f929 	bl	8002ab0 <HAL_InitTick>
 800585e:	0003      	movs	r3, r0
}
 8005860:	0018      	movs	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	b004      	add	sp, #16
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40022000 	.word	0x40022000
 800586c:	00001388 	.word	0x00001388
 8005870:	40021000 	.word	0x40021000
 8005874:	fffff0ff 	.word	0xfffff0ff
 8005878:	ffff8fff 	.word	0xffff8fff
 800587c:	080066fc 	.word	0x080066fc
 8005880:	20000074 	.word	0x20000074
 8005884:	20000078 	.word	0x20000078

08005888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800588e:	4b3c      	ldr	r3, [pc, #240]	@ (8005980 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	2238      	movs	r2, #56	@ 0x38
 8005894:	4013      	ands	r3, r2
 8005896:	d10f      	bne.n	80058b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005898:	4b39      	ldr	r3, [pc, #228]	@ (8005980 <HAL_RCC_GetSysClockFreq+0xf8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	0adb      	lsrs	r3, r3, #11
 800589e:	2207      	movs	r2, #7
 80058a0:	4013      	ands	r3, r2
 80058a2:	2201      	movs	r2, #1
 80058a4:	409a      	lsls	r2, r3
 80058a6:	0013      	movs	r3, r2
 80058a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80058aa:	6839      	ldr	r1, [r7, #0]
 80058ac:	4835      	ldr	r0, [pc, #212]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xfc>)
 80058ae:	f7fa fc29 	bl	8000104 <__udivsi3>
 80058b2:	0003      	movs	r3, r0
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	e05d      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058b8:	4b31      	ldr	r3, [pc, #196]	@ (8005980 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2238      	movs	r2, #56	@ 0x38
 80058be:	4013      	ands	r3, r2
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d102      	bne.n	80058ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058c4:	4b30      	ldr	r3, [pc, #192]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x100>)
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	e054      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005980 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2238      	movs	r2, #56	@ 0x38
 80058d0:	4013      	ands	r3, r2
 80058d2:	2b10      	cmp	r3, #16
 80058d4:	d138      	bne.n	8005948 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80058d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005980 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	2203      	movs	r2, #3
 80058dc:	4013      	ands	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058e0:	4b27      	ldr	r3, [pc, #156]	@ (8005980 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	091b      	lsrs	r3, r3, #4
 80058e6:	2207      	movs	r2, #7
 80058e8:	4013      	ands	r3, r2
 80058ea:	3301      	adds	r3, #1
 80058ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d10d      	bne.n	8005910 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	4824      	ldr	r0, [pc, #144]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x100>)
 80058f8:	f7fa fc04 	bl	8000104 <__udivsi3>
 80058fc:	0003      	movs	r3, r0
 80058fe:	0019      	movs	r1, r3
 8005900:	4b1f      	ldr	r3, [pc, #124]	@ (8005980 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	0a1b      	lsrs	r3, r3, #8
 8005906:	227f      	movs	r2, #127	@ 0x7f
 8005908:	4013      	ands	r3, r2
 800590a:	434b      	muls	r3, r1
 800590c:	617b      	str	r3, [r7, #20]
        break;
 800590e:	e00d      	b.n	800592c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	481c      	ldr	r0, [pc, #112]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005914:	f7fa fbf6 	bl	8000104 <__udivsi3>
 8005918:	0003      	movs	r3, r0
 800591a:	0019      	movs	r1, r3
 800591c:	4b18      	ldr	r3, [pc, #96]	@ (8005980 <HAL_RCC_GetSysClockFreq+0xf8>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	0a1b      	lsrs	r3, r3, #8
 8005922:	227f      	movs	r2, #127	@ 0x7f
 8005924:	4013      	ands	r3, r2
 8005926:	434b      	muls	r3, r1
 8005928:	617b      	str	r3, [r7, #20]
        break;
 800592a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800592c:	4b14      	ldr	r3, [pc, #80]	@ (8005980 <HAL_RCC_GetSysClockFreq+0xf8>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	0f5b      	lsrs	r3, r3, #29
 8005932:	2207      	movs	r2, #7
 8005934:	4013      	ands	r3, r2
 8005936:	3301      	adds	r3, #1
 8005938:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	6978      	ldr	r0, [r7, #20]
 800593e:	f7fa fbe1 	bl	8000104 <__udivsi3>
 8005942:	0003      	movs	r3, r0
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	e015      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005948:	4b0d      	ldr	r3, [pc, #52]	@ (8005980 <HAL_RCC_GetSysClockFreq+0xf8>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	2238      	movs	r2, #56	@ 0x38
 800594e:	4013      	ands	r3, r2
 8005950:	2b20      	cmp	r3, #32
 8005952:	d103      	bne.n	800595c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005954:	2380      	movs	r3, #128	@ 0x80
 8005956:	021b      	lsls	r3, r3, #8
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	e00b      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800595c:	4b08      	ldr	r3, [pc, #32]	@ (8005980 <HAL_RCC_GetSysClockFreq+0xf8>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2238      	movs	r2, #56	@ 0x38
 8005962:	4013      	ands	r3, r2
 8005964:	2b18      	cmp	r3, #24
 8005966:	d103      	bne.n	8005970 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005968:	23fa      	movs	r3, #250	@ 0xfa
 800596a:	01db      	lsls	r3, r3, #7
 800596c:	613b      	str	r3, [r7, #16]
 800596e:	e001      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005974:	693b      	ldr	r3, [r7, #16]
}
 8005976:	0018      	movs	r0, r3
 8005978:	46bd      	mov	sp, r7
 800597a:	b006      	add	sp, #24
 800597c:	bd80      	pop	{r7, pc}
 800597e:	46c0      	nop			@ (mov r8, r8)
 8005980:	40021000 	.word	0x40021000
 8005984:	00f42400 	.word	0x00f42400
 8005988:	007a1200 	.word	0x007a1200

0800598c <HAL_RCC_EnableCSS>:
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005990:	4b04      	ldr	r3, [pc, #16]	@ (80059a4 <HAL_RCC_EnableCSS+0x18>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	4b03      	ldr	r3, [pc, #12]	@ (80059a4 <HAL_RCC_EnableCSS+0x18>)
 8005996:	2180      	movs	r1, #128	@ 0x80
 8005998:	0309      	lsls	r1, r1, #12
 800599a:	430a      	orrs	r2, r1
 800599c:	601a      	str	r2, [r3, #0]
}
 800599e:	46c0      	nop			@ (mov r8, r8)
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40021000 	.word	0x40021000

080059a8 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note  This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
  uint32_t itflag = RCC->CIFR;
 80059ae:	4b0d      	ldr	r3, [pc, #52]	@ (80059e4 <HAL_RCC_NMI_IRQHandler+0x3c>)
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	607b      	str	r3, [r7, #4]

  /* Clear interrupt flags related to CSS */
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 80059b4:	4b0b      	ldr	r3, [pc, #44]	@ (80059e4 <HAL_RCC_NMI_IRQHandler+0x3c>)
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	22c0      	movs	r2, #192	@ 0xc0
 80059ba:	0092      	lsls	r2, r2, #2
 80059bc:	400a      	ands	r2, r1
 80059be:	621a      	str	r2, [r3, #32]

  /* Check RCC CSSF interrupt flag  */
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	2380      	movs	r3, #128	@ 0x80
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	4013      	ands	r3, r2
 80059c8:	d001      	beq.n	80059ce <HAL_RCC_NMI_IRQHandler+0x26>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80059ca:	f000 f80d 	bl	80059e8 <HAL_RCC_CSSCallback>
  }

  /* Check RCC LSECSSF interrupt flag  */
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	2380      	movs	r3, #128	@ 0x80
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4013      	ands	r3, r2
 80059d6:	d001      	beq.n	80059dc <HAL_RCC_NMI_IRQHandler+0x34>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_LSECSSCallback();
 80059d8:	f000 f80b 	bl	80059f2 <HAL_RCC_LSECSSCallback>
  }
}
 80059dc:	46c0      	nop			@ (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	b002      	add	sp, #8
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40021000 	.word	0x40021000

080059e8 <HAL_RCC_CSSCallback>:
/**
  * @brief Handle the RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80059ec:	46c0      	nop			@ (mov r8, r8)
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <HAL_RCC_LSECSSCallback>:
/**
  * @brief  RCC LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_LSECSSCallback(void)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 80059f6:	46c0      	nop			@ (mov r8, r8)
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005a04:	2313      	movs	r3, #19
 8005a06:	18fb      	adds	r3, r7, r3
 8005a08:	2200      	movs	r2, #0
 8005a0a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a0c:	2312      	movs	r3, #18
 8005a0e:	18fb      	adds	r3, r7, r3
 8005a10:	2200      	movs	r2, #0
 8005a12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	2380      	movs	r3, #128	@ 0x80
 8005a1a:	029b      	lsls	r3, r3, #10
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d100      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005a20:	e0a3      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a22:	2011      	movs	r0, #17
 8005a24:	183b      	adds	r3, r7, r0
 8005a26:	2200      	movs	r2, #0
 8005a28:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a2a:	4bc3      	ldr	r3, [pc, #780]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a2e:	2380      	movs	r3, #128	@ 0x80
 8005a30:	055b      	lsls	r3, r3, #21
 8005a32:	4013      	ands	r3, r2
 8005a34:	d110      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a36:	4bc0      	ldr	r3, [pc, #768]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a3a:	4bbf      	ldr	r3, [pc, #764]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a3c:	2180      	movs	r1, #128	@ 0x80
 8005a3e:	0549      	lsls	r1, r1, #21
 8005a40:	430a      	orrs	r2, r1
 8005a42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a44:	4bbc      	ldr	r3, [pc, #752]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a48:	2380      	movs	r3, #128	@ 0x80
 8005a4a:	055b      	lsls	r3, r3, #21
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	60bb      	str	r3, [r7, #8]
 8005a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a52:	183b      	adds	r3, r7, r0
 8005a54:	2201      	movs	r2, #1
 8005a56:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a58:	4bb8      	ldr	r3, [pc, #736]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	4bb7      	ldr	r3, [pc, #732]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005a5e:	2180      	movs	r1, #128	@ 0x80
 8005a60:	0049      	lsls	r1, r1, #1
 8005a62:	430a      	orrs	r2, r1
 8005a64:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a66:	f7fd f87f 	bl	8002b68 <HAL_GetTick>
 8005a6a:	0003      	movs	r3, r0
 8005a6c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a6e:	e00b      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a70:	f7fd f87a 	bl	8002b68 <HAL_GetTick>
 8005a74:	0002      	movs	r2, r0
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d904      	bls.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005a7e:	2313      	movs	r3, #19
 8005a80:	18fb      	adds	r3, r7, r3
 8005a82:	2203      	movs	r2, #3
 8005a84:	701a      	strb	r2, [r3, #0]
        break;
 8005a86:	e005      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a88:	4bac      	ldr	r3, [pc, #688]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	2380      	movs	r3, #128	@ 0x80
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	4013      	ands	r3, r2
 8005a92:	d0ed      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005a94:	2313      	movs	r3, #19
 8005a96:	18fb      	adds	r3, r7, r3
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d154      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a9e:	4ba6      	ldr	r3, [pc, #664]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005aa0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005aa2:	23c0      	movs	r3, #192	@ 0xc0
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d019      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d014      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005aba:	4b9f      	ldr	r3, [pc, #636]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005abe:	4aa0      	ldr	r2, [pc, #640]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ac4:	4b9c      	ldr	r3, [pc, #624]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ac6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ac8:	4b9b      	ldr	r3, [pc, #620]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005aca:	2180      	movs	r1, #128	@ 0x80
 8005acc:	0249      	lsls	r1, r1, #9
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ad2:	4b99      	ldr	r3, [pc, #612]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ad4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ad6:	4b98      	ldr	r3, [pc, #608]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ad8:	499a      	ldr	r1, [pc, #616]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005ada:	400a      	ands	r2, r1
 8005adc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ade:	4b96      	ldr	r3, [pc, #600]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d016      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aec:	f7fd f83c 	bl	8002b68 <HAL_GetTick>
 8005af0:	0003      	movs	r3, r0
 8005af2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005af4:	e00c      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005af6:	f7fd f837 	bl	8002b68 <HAL_GetTick>
 8005afa:	0002      	movs	r2, r0
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	4a91      	ldr	r2, [pc, #580]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d904      	bls.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005b06:	2313      	movs	r3, #19
 8005b08:	18fb      	adds	r3, r7, r3
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	701a      	strb	r2, [r3, #0]
            break;
 8005b0e:	e004      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b10:	4b89      	ldr	r3, [pc, #548]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b14:	2202      	movs	r2, #2
 8005b16:	4013      	ands	r3, r2
 8005b18:	d0ed      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005b1a:	2313      	movs	r3, #19
 8005b1c:	18fb      	adds	r3, r7, r3
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b24:	4b84      	ldr	r3, [pc, #528]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b28:	4a85      	ldr	r2, [pc, #532]	@ (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	0019      	movs	r1, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b32:	4b81      	ldr	r3, [pc, #516]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b34:	430a      	orrs	r2, r1
 8005b36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b38:	e00c      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b3a:	2312      	movs	r3, #18
 8005b3c:	18fb      	adds	r3, r7, r3
 8005b3e:	2213      	movs	r2, #19
 8005b40:	18ba      	adds	r2, r7, r2
 8005b42:	7812      	ldrb	r2, [r2, #0]
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	e005      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b48:	2312      	movs	r3, #18
 8005b4a:	18fb      	adds	r3, r7, r3
 8005b4c:	2213      	movs	r2, #19
 8005b4e:	18ba      	adds	r2, r7, r2
 8005b50:	7812      	ldrb	r2, [r2, #0]
 8005b52:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b54:	2311      	movs	r3, #17
 8005b56:	18fb      	adds	r3, r7, r3
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d105      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b5e:	4b76      	ldr	r3, [pc, #472]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b62:	4b75      	ldr	r3, [pc, #468]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b64:	4979      	ldr	r1, [pc, #484]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005b66:	400a      	ands	r2, r1
 8005b68:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	4013      	ands	r3, r2
 8005b72:	d009      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b74:	4b70      	ldr	r3, [pc, #448]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b78:	2203      	movs	r2, #3
 8005b7a:	4393      	bics	r3, r2
 8005b7c:	0019      	movs	r1, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	4b6d      	ldr	r3, [pc, #436]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b84:	430a      	orrs	r2, r1
 8005b86:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d009      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b92:	4b69      	ldr	r3, [pc, #420]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b96:	220c      	movs	r2, #12
 8005b98:	4393      	bics	r3, r2
 8005b9a:	0019      	movs	r1, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	4b65      	ldr	r3, [pc, #404]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2210      	movs	r2, #16
 8005bac:	4013      	ands	r3, r2
 8005bae:	d009      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bb0:	4b61      	ldr	r3, [pc, #388]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb4:	4a66      	ldr	r2, [pc, #408]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	0019      	movs	r1, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	4b5e      	ldr	r3, [pc, #376]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	2380      	movs	r3, #128	@ 0x80
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d009      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bd0:	4b59      	ldr	r3, [pc, #356]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd4:	4a5f      	ldr	r2, [pc, #380]	@ (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	0019      	movs	r1, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699a      	ldr	r2, [r3, #24]
 8005bde:	4b56      	ldr	r3, [pc, #344]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005be0:	430a      	orrs	r2, r1
 8005be2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	2380      	movs	r3, #128	@ 0x80
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	4013      	ands	r3, r2
 8005bee:	d009      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005bf0:	4b51      	ldr	r3, [pc, #324]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf4:	4a58      	ldr	r2, [pc, #352]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	0019      	movs	r1, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69da      	ldr	r2, [r3, #28]
 8005bfe:	4b4e      	ldr	r3, [pc, #312]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c00:	430a      	orrs	r2, r1
 8005c02:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	d009      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c12:	4a52      	ldr	r2, [pc, #328]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	0019      	movs	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	4b46      	ldr	r3, [pc, #280]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	2380      	movs	r3, #128	@ 0x80
 8005c28:	01db      	lsls	r3, r3, #7
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	d015      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c2e:	4b42      	ldr	r3, [pc, #264]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	0899      	lsrs	r1, r3, #2
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1a      	ldr	r2, [r3, #32]
 8005c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1a      	ldr	r2, [r3, #32]
 8005c44:	2380      	movs	r3, #128	@ 0x80
 8005c46:	05db      	lsls	r3, r3, #23
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d106      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005c4c:	4b3a      	ldr	r3, [pc, #232]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	4b39      	ldr	r3, [pc, #228]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c52:	2180      	movs	r1, #128	@ 0x80
 8005c54:	0249      	lsls	r1, r1, #9
 8005c56:	430a      	orrs	r2, r1
 8005c58:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	2380      	movs	r3, #128	@ 0x80
 8005c60:	031b      	lsls	r3, r3, #12
 8005c62:	4013      	ands	r3, r2
 8005c64:	d009      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c66:	4b34      	ldr	r3, [pc, #208]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c6a:	2240      	movs	r2, #64	@ 0x40
 8005c6c:	4393      	bics	r3, r2
 8005c6e:	0019      	movs	r1, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c74:	4b30      	ldr	r3, [pc, #192]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c76:	430a      	orrs	r2, r1
 8005c78:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	2380      	movs	r3, #128	@ 0x80
 8005c80:	039b      	lsls	r3, r3, #14
 8005c82:	4013      	ands	r3, r2
 8005c84:	d016      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005c86:	4b2c      	ldr	r3, [pc, #176]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c8a:	4a35      	ldr	r2, [pc, #212]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	0019      	movs	r1, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c94:	4b28      	ldr	r3, [pc, #160]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c96:	430a      	orrs	r2, r1
 8005c98:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c9e:	2380      	movs	r3, #128	@ 0x80
 8005ca0:	03db      	lsls	r3, r3, #15
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d106      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005ca6:	4b24      	ldr	r3, [pc, #144]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	4b23      	ldr	r3, [pc, #140]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cac:	2180      	movs	r1, #128	@ 0x80
 8005cae:	0449      	lsls	r1, r1, #17
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	2380      	movs	r3, #128	@ 0x80
 8005cba:	03db      	lsls	r3, r3, #15
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	d016      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc4:	4a27      	ldr	r2, [pc, #156]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	0019      	movs	r1, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cce:	4b1a      	ldr	r3, [pc, #104]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd8:	2380      	movs	r3, #128	@ 0x80
 8005cda:	045b      	lsls	r3, r3, #17
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d106      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005ce0:	4b15      	ldr	r3, [pc, #84]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	4b14      	ldr	r3, [pc, #80]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ce6:	2180      	movs	r1, #128	@ 0x80
 8005ce8:	0449      	lsls	r1, r1, #17
 8005cea:	430a      	orrs	r2, r1
 8005cec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	2380      	movs	r3, #128	@ 0x80
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	d016      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	0019      	movs	r1, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	4b0b      	ldr	r3, [pc, #44]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	695a      	ldr	r2, [r3, #20]
 8005d12:	2380      	movs	r3, #128	@ 0x80
 8005d14:	01db      	lsls	r3, r3, #7
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d106      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005d1a:	4b07      	ldr	r3, [pc, #28]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	4b06      	ldr	r3, [pc, #24]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d20:	2180      	movs	r1, #128	@ 0x80
 8005d22:	0249      	lsls	r1, r1, #9
 8005d24:	430a      	orrs	r2, r1
 8005d26:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005d28:	2312      	movs	r3, #18
 8005d2a:	18fb      	adds	r3, r7, r3
 8005d2c:	781b      	ldrb	r3, [r3, #0]
}
 8005d2e:	0018      	movs	r0, r3
 8005d30:	46bd      	mov	sp, r7
 8005d32:	b006      	add	sp, #24
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	46c0      	nop			@ (mov r8, r8)
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	40007000 	.word	0x40007000
 8005d40:	fffffcff 	.word	0xfffffcff
 8005d44:	fffeffff 	.word	0xfffeffff
 8005d48:	00001388 	.word	0x00001388
 8005d4c:	efffffff 	.word	0xefffffff
 8005d50:	fffff3ff 	.word	0xfffff3ff
 8005d54:	fff3ffff 	.word	0xfff3ffff
 8005d58:	ffcfffff 	.word	0xffcfffff
 8005d5c:	ffffcfff 	.word	0xffffcfff
 8005d60:	ffbfffff 	.word	0xffbfffff
 8005d64:	feffffff 	.word	0xfeffffff
 8005d68:	ffff3fff 	.word	0xffff3fff

08005d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e04a      	b.n	8005e14 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	223d      	movs	r2, #61	@ 0x3d
 8005d82:	5c9b      	ldrb	r3, [r3, r2]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d107      	bne.n	8005d9a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	223c      	movs	r2, #60	@ 0x3c
 8005d8e:	2100      	movs	r1, #0
 8005d90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	0018      	movs	r0, r3
 8005d96:	f7fc fd65 	bl	8002864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	223d      	movs	r2, #61	@ 0x3d
 8005d9e:	2102      	movs	r1, #2
 8005da0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3304      	adds	r3, #4
 8005daa:	0019      	movs	r1, r3
 8005dac:	0010      	movs	r0, r2
 8005dae:	f000 fabd 	bl	800632c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2248      	movs	r2, #72	@ 0x48
 8005db6:	2101      	movs	r1, #1
 8005db8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	223e      	movs	r2, #62	@ 0x3e
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	5499      	strb	r1, [r3, r2]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	223f      	movs	r2, #63	@ 0x3f
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	5499      	strb	r1, [r3, r2]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2240      	movs	r2, #64	@ 0x40
 8005dce:	2101      	movs	r1, #1
 8005dd0:	5499      	strb	r1, [r3, r2]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2241      	movs	r2, #65	@ 0x41
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	5499      	strb	r1, [r3, r2]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2242      	movs	r2, #66	@ 0x42
 8005dde:	2101      	movs	r1, #1
 8005de0:	5499      	strb	r1, [r3, r2]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2243      	movs	r2, #67	@ 0x43
 8005de6:	2101      	movs	r1, #1
 8005de8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2244      	movs	r2, #68	@ 0x44
 8005dee:	2101      	movs	r1, #1
 8005df0:	5499      	strb	r1, [r3, r2]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2245      	movs	r2, #69	@ 0x45
 8005df6:	2101      	movs	r1, #1
 8005df8:	5499      	strb	r1, [r3, r2]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2246      	movs	r2, #70	@ 0x46
 8005dfe:	2101      	movs	r1, #1
 8005e00:	5499      	strb	r1, [r3, r2]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2247      	movs	r2, #71	@ 0x47
 8005e06:	2101      	movs	r1, #1
 8005e08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	223d      	movs	r2, #61	@ 0x3d
 8005e0e:	2101      	movs	r1, #1
 8005e10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	0018      	movs	r0, r3
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b002      	add	sp, #8
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	223d      	movs	r2, #61	@ 0x3d
 8005e28:	5c9b      	ldrb	r3, [r3, r2]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d001      	beq.n	8005e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e042      	b.n	8005eba <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	223d      	movs	r2, #61	@ 0x3d
 8005e38:	2102      	movs	r1, #2
 8005e3a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2101      	movs	r1, #1
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1c      	ldr	r2, [pc, #112]	@ (8005ec4 <HAL_TIM_Base_Start_IT+0xa8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00f      	beq.n	8005e76 <HAL_TIM_Base_Start_IT+0x5a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	2380      	movs	r3, #128	@ 0x80
 8005e5c:	05db      	lsls	r3, r3, #23
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d009      	beq.n	8005e76 <HAL_TIM_Base_Start_IT+0x5a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a18      	ldr	r2, [pc, #96]	@ (8005ec8 <HAL_TIM_Base_Start_IT+0xac>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d004      	beq.n	8005e76 <HAL_TIM_Base_Start_IT+0x5a>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a16      	ldr	r2, [pc, #88]	@ (8005ecc <HAL_TIM_Base_Start_IT+0xb0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d116      	bne.n	8005ea4 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	4a14      	ldr	r2, [pc, #80]	@ (8005ed0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e7e:	4013      	ands	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b06      	cmp	r3, #6
 8005e86:	d016      	beq.n	8005eb6 <HAL_TIM_Base_Start_IT+0x9a>
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	2380      	movs	r3, #128	@ 0x80
 8005e8c:	025b      	lsls	r3, r3, #9
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d011      	beq.n	8005eb6 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea2:	e008      	b.n	8005eb6 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2101      	movs	r1, #1
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	e000      	b.n	8005eb8 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	0018      	movs	r0, r3
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	b004      	add	sp, #16
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	46c0      	nop			@ (mov r8, r8)
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40014000 	.word	0x40014000
 8005ed0:	00010007 	.word	0x00010007

08005ed4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	438a      	bics	r2, r1
 8005eea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8005f28 <HAL_TIM_Base_Stop_IT+0x54>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	d10d      	bne.n	8005f14 <HAL_TIM_Base_Stop_IT+0x40>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	4a0b      	ldr	r2, [pc, #44]	@ (8005f2c <HAL_TIM_Base_Stop_IT+0x58>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	d107      	bne.n	8005f14 <HAL_TIM_Base_Stop_IT+0x40>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2101      	movs	r1, #1
 8005f10:	438a      	bics	r2, r1
 8005f12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	223d      	movs	r2, #61	@ 0x3d
 8005f18:	2101      	movs	r1, #1
 8005f1a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	0018      	movs	r0, r3
 8005f20:	46bd      	mov	sp, r7
 8005f22:	b002      	add	sp, #8
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	46c0      	nop			@ (mov r8, r8)
 8005f28:	00001111 	.word	0x00001111
 8005f2c:	00000444 	.word	0x00000444

08005f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d021      	beq.n	8005f94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2202      	movs	r2, #2
 8005f54:	4013      	ands	r3, r2
 8005f56:	d01d      	beq.n	8005f94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2203      	movs	r2, #3
 8005f5e:	4252      	negs	r2, r2
 8005f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	2203      	movs	r2, #3
 8005f70:	4013      	ands	r3, r2
 8005f72:	d004      	beq.n	8005f7e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	0018      	movs	r0, r3
 8005f78:	f000 f9c0 	bl	80062fc <HAL_TIM_IC_CaptureCallback>
 8005f7c:	e007      	b.n	8005f8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	0018      	movs	r0, r3
 8005f82:	f000 f9b3 	bl	80062ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f000 f9bf 	bl	800630c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2204      	movs	r2, #4
 8005f98:	4013      	ands	r3, r2
 8005f9a:	d022      	beq.n	8005fe2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d01e      	beq.n	8005fe2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2205      	movs	r2, #5
 8005faa:	4252      	negs	r2, r2
 8005fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699a      	ldr	r2, [r3, #24]
 8005fba:	23c0      	movs	r3, #192	@ 0xc0
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d004      	beq.n	8005fcc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	f000 f999 	bl	80062fc <HAL_TIM_IC_CaptureCallback>
 8005fca:	e007      	b.n	8005fdc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	0018      	movs	r0, r3
 8005fd0:	f000 f98c 	bl	80062ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	f000 f998 	bl	800630c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2208      	movs	r2, #8
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	d021      	beq.n	800602e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2208      	movs	r2, #8
 8005fee:	4013      	ands	r3, r2
 8005ff0:	d01d      	beq.n	800602e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2209      	movs	r2, #9
 8005ff8:	4252      	negs	r2, r2
 8005ffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2204      	movs	r2, #4
 8006000:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	2203      	movs	r2, #3
 800600a:	4013      	ands	r3, r2
 800600c:	d004      	beq.n	8006018 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	0018      	movs	r0, r3
 8006012:	f000 f973 	bl	80062fc <HAL_TIM_IC_CaptureCallback>
 8006016:	e007      	b.n	8006028 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	0018      	movs	r0, r3
 800601c:	f000 f966 	bl	80062ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	0018      	movs	r0, r3
 8006024:	f000 f972 	bl	800630c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2210      	movs	r2, #16
 8006032:	4013      	ands	r3, r2
 8006034:	d022      	beq.n	800607c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2210      	movs	r2, #16
 800603a:	4013      	ands	r3, r2
 800603c:	d01e      	beq.n	800607c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2211      	movs	r2, #17
 8006044:	4252      	negs	r2, r2
 8006046:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2208      	movs	r2, #8
 800604c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	23c0      	movs	r3, #192	@ 0xc0
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4013      	ands	r3, r2
 800605a:	d004      	beq.n	8006066 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	0018      	movs	r0, r3
 8006060:	f000 f94c 	bl	80062fc <HAL_TIM_IC_CaptureCallback>
 8006064:	e007      	b.n	8006076 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	0018      	movs	r0, r3
 800606a:	f000 f93f 	bl	80062ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	0018      	movs	r0, r3
 8006072:	f000 f94b 	bl	800630c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2201      	movs	r2, #1
 8006080:	4013      	ands	r3, r2
 8006082:	d00c      	beq.n	800609e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	4013      	ands	r3, r2
 800608a:	d008      	beq.n	800609e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2202      	movs	r2, #2
 8006092:	4252      	negs	r2, r2
 8006094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	0018      	movs	r0, r3
 800609a:	f7fc fa5f 	bl	800255c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2280      	movs	r2, #128	@ 0x80
 80060a2:	4013      	ands	r3, r2
 80060a4:	d104      	bne.n	80060b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	2380      	movs	r3, #128	@ 0x80
 80060aa:	019b      	lsls	r3, r3, #6
 80060ac:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80060ae:	d00b      	beq.n	80060c8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2280      	movs	r2, #128	@ 0x80
 80060b4:	4013      	ands	r3, r2
 80060b6:	d007      	beq.n	80060c8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1e      	ldr	r2, [pc, #120]	@ (8006138 <HAL_TIM_IRQHandler+0x208>)
 80060be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	0018      	movs	r0, r3
 80060c4:	f000 fad2 	bl	800666c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	2380      	movs	r3, #128	@ 0x80
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	4013      	ands	r3, r2
 80060d0:	d00b      	beq.n	80060ea <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2280      	movs	r2, #128	@ 0x80
 80060d6:	4013      	ands	r3, r2
 80060d8:	d007      	beq.n	80060ea <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a17      	ldr	r2, [pc, #92]	@ (800613c <HAL_TIM_IRQHandler+0x20c>)
 80060e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	0018      	movs	r0, r3
 80060e6:	f000 fac9 	bl	800667c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2240      	movs	r2, #64	@ 0x40
 80060ee:	4013      	ands	r3, r2
 80060f0:	d00c      	beq.n	800610c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2240      	movs	r2, #64	@ 0x40
 80060f6:	4013      	ands	r3, r2
 80060f8:	d008      	beq.n	800610c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2241      	movs	r2, #65	@ 0x41
 8006100:	4252      	negs	r2, r2
 8006102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	0018      	movs	r0, r3
 8006108:	f000 f908 	bl	800631c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2220      	movs	r2, #32
 8006110:	4013      	ands	r3, r2
 8006112:	d00c      	beq.n	800612e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2220      	movs	r2, #32
 8006118:	4013      	ands	r3, r2
 800611a:	d008      	beq.n	800612e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2221      	movs	r2, #33	@ 0x21
 8006122:	4252      	negs	r2, r2
 8006124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	0018      	movs	r0, r3
 800612a:	f000 fa97 	bl	800665c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800612e:	46c0      	nop			@ (mov r8, r8)
 8006130:	46bd      	mov	sp, r7
 8006132:	b004      	add	sp, #16
 8006134:	bd80      	pop	{r7, pc}
 8006136:	46c0      	nop			@ (mov r8, r8)
 8006138:	ffffdf7f 	.word	0xffffdf7f
 800613c:	fffffeff 	.word	0xfffffeff

08006140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800614a:	230f      	movs	r3, #15
 800614c:	18fb      	adds	r3, r7, r3
 800614e:	2200      	movs	r2, #0
 8006150:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	223c      	movs	r2, #60	@ 0x3c
 8006156:	5c9b      	ldrb	r3, [r3, r2]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_TIM_ConfigClockSource+0x20>
 800615c:	2302      	movs	r3, #2
 800615e:	e0bc      	b.n	80062da <HAL_TIM_ConfigClockSource+0x19a>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	223c      	movs	r2, #60	@ 0x3c
 8006164:	2101      	movs	r1, #1
 8006166:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	223d      	movs	r2, #61	@ 0x3d
 800616c:	2102      	movs	r1, #2
 800616e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	4a5a      	ldr	r2, [pc, #360]	@ (80062e4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800617c:	4013      	ands	r3, r2
 800617e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	4a59      	ldr	r2, [pc, #356]	@ (80062e8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006184:	4013      	ands	r3, r2
 8006186:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2280      	movs	r2, #128	@ 0x80
 8006196:	0192      	lsls	r2, r2, #6
 8006198:	4293      	cmp	r3, r2
 800619a:	d040      	beq.n	800621e <HAL_TIM_ConfigClockSource+0xde>
 800619c:	2280      	movs	r2, #128	@ 0x80
 800619e:	0192      	lsls	r2, r2, #6
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d900      	bls.n	80061a6 <HAL_TIM_ConfigClockSource+0x66>
 80061a4:	e088      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x178>
 80061a6:	2280      	movs	r2, #128	@ 0x80
 80061a8:	0152      	lsls	r2, r2, #5
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d100      	bne.n	80061b0 <HAL_TIM_ConfigClockSource+0x70>
 80061ae:	e088      	b.n	80062c2 <HAL_TIM_ConfigClockSource+0x182>
 80061b0:	2280      	movs	r2, #128	@ 0x80
 80061b2:	0152      	lsls	r2, r2, #5
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d900      	bls.n	80061ba <HAL_TIM_ConfigClockSource+0x7a>
 80061b8:	e07e      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x178>
 80061ba:	2b70      	cmp	r3, #112	@ 0x70
 80061bc:	d018      	beq.n	80061f0 <HAL_TIM_ConfigClockSource+0xb0>
 80061be:	d900      	bls.n	80061c2 <HAL_TIM_ConfigClockSource+0x82>
 80061c0:	e07a      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x178>
 80061c2:	2b60      	cmp	r3, #96	@ 0x60
 80061c4:	d04f      	beq.n	8006266 <HAL_TIM_ConfigClockSource+0x126>
 80061c6:	d900      	bls.n	80061ca <HAL_TIM_ConfigClockSource+0x8a>
 80061c8:	e076      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x178>
 80061ca:	2b50      	cmp	r3, #80	@ 0x50
 80061cc:	d03b      	beq.n	8006246 <HAL_TIM_ConfigClockSource+0x106>
 80061ce:	d900      	bls.n	80061d2 <HAL_TIM_ConfigClockSource+0x92>
 80061d0:	e072      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x178>
 80061d2:	2b40      	cmp	r3, #64	@ 0x40
 80061d4:	d057      	beq.n	8006286 <HAL_TIM_ConfigClockSource+0x146>
 80061d6:	d900      	bls.n	80061da <HAL_TIM_ConfigClockSource+0x9a>
 80061d8:	e06e      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x178>
 80061da:	2b30      	cmp	r3, #48	@ 0x30
 80061dc:	d063      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x166>
 80061de:	d86b      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x178>
 80061e0:	2b20      	cmp	r3, #32
 80061e2:	d060      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x166>
 80061e4:	d868      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x178>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d05d      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x166>
 80061ea:	2b10      	cmp	r3, #16
 80061ec:	d05b      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x166>
 80061ee:	e063      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006200:	f000 f99e 	bl	8006540 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2277      	movs	r2, #119	@ 0x77
 8006210:	4313      	orrs	r3, r2
 8006212:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	609a      	str	r2, [r3, #8]
      break;
 800621c:	e052      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800622e:	f000 f987 	bl	8006540 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2180      	movs	r1, #128	@ 0x80
 800623e:	01c9      	lsls	r1, r1, #7
 8006240:	430a      	orrs	r2, r1
 8006242:	609a      	str	r2, [r3, #8]
      break;
 8006244:	e03e      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006252:	001a      	movs	r2, r3
 8006254:	f000 f8f8 	bl	8006448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2150      	movs	r1, #80	@ 0x50
 800625e:	0018      	movs	r0, r3
 8006260:	f000 f952 	bl	8006508 <TIM_ITRx_SetConfig>
      break;
 8006264:	e02e      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006272:	001a      	movs	r2, r3
 8006274:	f000 f916 	bl	80064a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2160      	movs	r1, #96	@ 0x60
 800627e:	0018      	movs	r0, r3
 8006280:	f000 f942 	bl	8006508 <TIM_ITRx_SetConfig>
      break;
 8006284:	e01e      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006292:	001a      	movs	r2, r3
 8006294:	f000 f8d8 	bl	8006448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2140      	movs	r1, #64	@ 0x40
 800629e:	0018      	movs	r0, r3
 80062a0:	f000 f932 	bl	8006508 <TIM_ITRx_SetConfig>
      break;
 80062a4:	e00e      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	0019      	movs	r1, r3
 80062b0:	0010      	movs	r0, r2
 80062b2:	f000 f929 	bl	8006508 <TIM_ITRx_SetConfig>
      break;
 80062b6:	e005      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80062b8:	230f      	movs	r3, #15
 80062ba:	18fb      	adds	r3, r7, r3
 80062bc:	2201      	movs	r2, #1
 80062be:	701a      	strb	r2, [r3, #0]
      break;
 80062c0:	e000      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80062c2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	223d      	movs	r2, #61	@ 0x3d
 80062c8:	2101      	movs	r1, #1
 80062ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	223c      	movs	r2, #60	@ 0x3c
 80062d0:	2100      	movs	r1, #0
 80062d2:	5499      	strb	r1, [r3, r2]

  return status;
 80062d4:	230f      	movs	r3, #15
 80062d6:	18fb      	adds	r3, r7, r3
 80062d8:	781b      	ldrb	r3, [r3, #0]
}
 80062da:	0018      	movs	r0, r3
 80062dc:	46bd      	mov	sp, r7
 80062de:	b004      	add	sp, #16
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	46c0      	nop			@ (mov r8, r8)
 80062e4:	ffceff88 	.word	0xffceff88
 80062e8:	ffff00ff 	.word	0xffff00ff

080062ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062f4:	46c0      	nop			@ (mov r8, r8)
 80062f6:	46bd      	mov	sp, r7
 80062f8:	b002      	add	sp, #8
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006304:	46c0      	nop			@ (mov r8, r8)
 8006306:	46bd      	mov	sp, r7
 8006308:	b002      	add	sp, #8
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006314:	46c0      	nop			@ (mov r8, r8)
 8006316:	46bd      	mov	sp, r7
 8006318:	b002      	add	sp, #8
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006324:	46c0      	nop			@ (mov r8, r8)
 8006326:	46bd      	mov	sp, r7
 8006328:	b002      	add	sp, #8
 800632a:	bd80      	pop	{r7, pc}

0800632c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a3b      	ldr	r2, [pc, #236]	@ (800642c <TIM_Base_SetConfig+0x100>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d008      	beq.n	8006356 <TIM_Base_SetConfig+0x2a>
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	2380      	movs	r3, #128	@ 0x80
 8006348:	05db      	lsls	r3, r3, #23
 800634a:	429a      	cmp	r2, r3
 800634c:	d003      	beq.n	8006356 <TIM_Base_SetConfig+0x2a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a37      	ldr	r2, [pc, #220]	@ (8006430 <TIM_Base_SetConfig+0x104>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d108      	bne.n	8006368 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2270      	movs	r2, #112	@ 0x70
 800635a:	4393      	bics	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a30      	ldr	r2, [pc, #192]	@ (800642c <TIM_Base_SetConfig+0x100>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d018      	beq.n	80063a2 <TIM_Base_SetConfig+0x76>
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	2380      	movs	r3, #128	@ 0x80
 8006374:	05db      	lsls	r3, r3, #23
 8006376:	429a      	cmp	r2, r3
 8006378:	d013      	beq.n	80063a2 <TIM_Base_SetConfig+0x76>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2c      	ldr	r2, [pc, #176]	@ (8006430 <TIM_Base_SetConfig+0x104>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00f      	beq.n	80063a2 <TIM_Base_SetConfig+0x76>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a2b      	ldr	r2, [pc, #172]	@ (8006434 <TIM_Base_SetConfig+0x108>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00b      	beq.n	80063a2 <TIM_Base_SetConfig+0x76>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2a      	ldr	r2, [pc, #168]	@ (8006438 <TIM_Base_SetConfig+0x10c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d007      	beq.n	80063a2 <TIM_Base_SetConfig+0x76>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a29      	ldr	r2, [pc, #164]	@ (800643c <TIM_Base_SetConfig+0x110>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d003      	beq.n	80063a2 <TIM_Base_SetConfig+0x76>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a28      	ldr	r2, [pc, #160]	@ (8006440 <TIM_Base_SetConfig+0x114>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d108      	bne.n	80063b4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4a27      	ldr	r2, [pc, #156]	@ (8006444 <TIM_Base_SetConfig+0x118>)
 80063a6:	4013      	ands	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2280      	movs	r2, #128	@ 0x80
 80063b8:	4393      	bics	r3, r2
 80063ba:	001a      	movs	r2, r3
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a13      	ldr	r2, [pc, #76]	@ (800642c <TIM_Base_SetConfig+0x100>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00b      	beq.n	80063fa <TIM_Base_SetConfig+0xce>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a14      	ldr	r2, [pc, #80]	@ (8006438 <TIM_Base_SetConfig+0x10c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d007      	beq.n	80063fa <TIM_Base_SetConfig+0xce>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a13      	ldr	r2, [pc, #76]	@ (800643c <TIM_Base_SetConfig+0x110>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d003      	beq.n	80063fa <TIM_Base_SetConfig+0xce>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a12      	ldr	r2, [pc, #72]	@ (8006440 <TIM_Base_SetConfig+0x114>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d103      	bne.n	8006402 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2201      	movs	r2, #1
 800640e:	4013      	ands	r3, r2
 8006410:	2b01      	cmp	r3, #1
 8006412:	d106      	bne.n	8006422 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2201      	movs	r2, #1
 800641a:	4393      	bics	r3, r2
 800641c:	001a      	movs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	611a      	str	r2, [r3, #16]
  }
}
 8006422:	46c0      	nop			@ (mov r8, r8)
 8006424:	46bd      	mov	sp, r7
 8006426:	b004      	add	sp, #16
 8006428:	bd80      	pop	{r7, pc}
 800642a:	46c0      	nop			@ (mov r8, r8)
 800642c:	40012c00 	.word	0x40012c00
 8006430:	40000400 	.word	0x40000400
 8006434:	40002000 	.word	0x40002000
 8006438:	40014000 	.word	0x40014000
 800643c:	40014400 	.word	0x40014400
 8006440:	40014800 	.word	0x40014800
 8006444:	fffffcff 	.word	0xfffffcff

08006448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	2201      	movs	r2, #1
 8006460:	4393      	bics	r3, r2
 8006462:	001a      	movs	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	22f0      	movs	r2, #240	@ 0xf0
 8006472:	4393      	bics	r3, r2
 8006474:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	011b      	lsls	r3, r3, #4
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4313      	orrs	r3, r2
 800647e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	220a      	movs	r2, #10
 8006484:	4393      	bics	r3, r2
 8006486:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	4313      	orrs	r3, r2
 800648e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	621a      	str	r2, [r3, #32]
}
 800649c:	46c0      	nop			@ (mov r8, r8)
 800649e:	46bd      	mov	sp, r7
 80064a0:	b006      	add	sp, #24
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	2210      	movs	r2, #16
 80064bc:	4393      	bics	r3, r2
 80064be:	001a      	movs	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	4a0d      	ldr	r2, [pc, #52]	@ (8006504 <TIM_TI2_ConfigInputStage+0x60>)
 80064ce:	4013      	ands	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	031b      	lsls	r3, r3, #12
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	4313      	orrs	r3, r2
 80064da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	22a0      	movs	r2, #160	@ 0xa0
 80064e0:	4393      	bics	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	46c0      	nop			@ (mov r8, r8)
 80064fc:	46bd      	mov	sp, r7
 80064fe:	b006      	add	sp, #24
 8006500:	bd80      	pop	{r7, pc}
 8006502:	46c0      	nop			@ (mov r8, r8)
 8006504:	ffff0fff 	.word	0xffff0fff

08006508 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4a08      	ldr	r2, [pc, #32]	@ (800653c <TIM_ITRx_SetConfig+0x34>)
 800651c:	4013      	ands	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4313      	orrs	r3, r2
 8006526:	2207      	movs	r2, #7
 8006528:	4313      	orrs	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	609a      	str	r2, [r3, #8]
}
 8006532:	46c0      	nop			@ (mov r8, r8)
 8006534:	46bd      	mov	sp, r7
 8006536:	b004      	add	sp, #16
 8006538:	bd80      	pop	{r7, pc}
 800653a:	46c0      	nop			@ (mov r8, r8)
 800653c:	ffcfff8f 	.word	0xffcfff8f

08006540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
 800654c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	4a09      	ldr	r2, [pc, #36]	@ (800657c <TIM_ETR_SetConfig+0x3c>)
 8006558:	4013      	ands	r3, r2
 800655a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	021a      	lsls	r2, r3, #8
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	431a      	orrs	r2, r3
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4313      	orrs	r3, r2
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	4313      	orrs	r3, r2
 800656c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	609a      	str	r2, [r3, #8]
}
 8006574:	46c0      	nop			@ (mov r8, r8)
 8006576:	46bd      	mov	sp, r7
 8006578:	b006      	add	sp, #24
 800657a:	bd80      	pop	{r7, pc}
 800657c:	ffff00ff 	.word	0xffff00ff

08006580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	223c      	movs	r2, #60	@ 0x3c
 800658e:	5c9b      	ldrb	r3, [r3, r2]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006594:	2302      	movs	r3, #2
 8006596:	e055      	b.n	8006644 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	223c      	movs	r2, #60	@ 0x3c
 800659c:	2101      	movs	r1, #1
 800659e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	223d      	movs	r2, #61	@ 0x3d
 80065a4:	2102      	movs	r1, #2
 80065a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a23      	ldr	r2, [pc, #140]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d108      	bne.n	80065d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4a22      	ldr	r2, [pc, #136]	@ (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80065c6:	4013      	ands	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2270      	movs	r2, #112	@ 0x70
 80065d8:	4393      	bics	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a16      	ldr	r2, [pc, #88]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d00f      	beq.n	8006618 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	2380      	movs	r3, #128	@ 0x80
 80065fe:	05db      	lsls	r3, r3, #23
 8006600:	429a      	cmp	r2, r3
 8006602:	d009      	beq.n	8006618 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a12      	ldr	r2, [pc, #72]	@ (8006654 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d004      	beq.n	8006618 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a11      	ldr	r2, [pc, #68]	@ (8006658 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d10c      	bne.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2280      	movs	r2, #128	@ 0x80
 800661c:	4393      	bics	r3, r2
 800661e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	4313      	orrs	r3, r2
 8006628:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	223d      	movs	r2, #61	@ 0x3d
 8006636:	2101      	movs	r1, #1
 8006638:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	223c      	movs	r2, #60	@ 0x3c
 800663e:	2100      	movs	r1, #0
 8006640:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	0018      	movs	r0, r3
 8006646:	46bd      	mov	sp, r7
 8006648:	b004      	add	sp, #16
 800664a:	bd80      	pop	{r7, pc}
 800664c:	40012c00 	.word	0x40012c00
 8006650:	ff0fffff 	.word	0xff0fffff
 8006654:	40000400 	.word	0x40000400
 8006658:	40014000 	.word	0x40014000

0800665c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006664:	46c0      	nop			@ (mov r8, r8)
 8006666:	46bd      	mov	sp, r7
 8006668:	b002      	add	sp, #8
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006674:	46c0      	nop			@ (mov r8, r8)
 8006676:	46bd      	mov	sp, r7
 8006678:	b002      	add	sp, #8
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006684:	46c0      	nop			@ (mov r8, r8)
 8006686:	46bd      	mov	sp, r7
 8006688:	b002      	add	sp, #8
 800668a:	bd80      	pop	{r7, pc}

0800668c <memset>:
 800668c:	0003      	movs	r3, r0
 800668e:	1882      	adds	r2, r0, r2
 8006690:	4293      	cmp	r3, r2
 8006692:	d100      	bne.n	8006696 <memset+0xa>
 8006694:	4770      	bx	lr
 8006696:	7019      	strb	r1, [r3, #0]
 8006698:	3301      	adds	r3, #1
 800669a:	e7f9      	b.n	8006690 <memset+0x4>

0800669c <__libc_init_array>:
 800669c:	b570      	push	{r4, r5, r6, lr}
 800669e:	2600      	movs	r6, #0
 80066a0:	4c0c      	ldr	r4, [pc, #48]	@ (80066d4 <__libc_init_array+0x38>)
 80066a2:	4d0d      	ldr	r5, [pc, #52]	@ (80066d8 <__libc_init_array+0x3c>)
 80066a4:	1b64      	subs	r4, r4, r5
 80066a6:	10a4      	asrs	r4, r4, #2
 80066a8:	42a6      	cmp	r6, r4
 80066aa:	d109      	bne.n	80066c0 <__libc_init_array+0x24>
 80066ac:	2600      	movs	r6, #0
 80066ae:	f000 f819 	bl	80066e4 <_init>
 80066b2:	4c0a      	ldr	r4, [pc, #40]	@ (80066dc <__libc_init_array+0x40>)
 80066b4:	4d0a      	ldr	r5, [pc, #40]	@ (80066e0 <__libc_init_array+0x44>)
 80066b6:	1b64      	subs	r4, r4, r5
 80066b8:	10a4      	asrs	r4, r4, #2
 80066ba:	42a6      	cmp	r6, r4
 80066bc:	d105      	bne.n	80066ca <__libc_init_array+0x2e>
 80066be:	bd70      	pop	{r4, r5, r6, pc}
 80066c0:	00b3      	lsls	r3, r6, #2
 80066c2:	58eb      	ldr	r3, [r5, r3]
 80066c4:	4798      	blx	r3
 80066c6:	3601      	adds	r6, #1
 80066c8:	e7ee      	b.n	80066a8 <__libc_init_array+0xc>
 80066ca:	00b3      	lsls	r3, r6, #2
 80066cc:	58eb      	ldr	r3, [r5, r3]
 80066ce:	4798      	blx	r3
 80066d0:	3601      	adds	r6, #1
 80066d2:	e7f2      	b.n	80066ba <__libc_init_array+0x1e>
 80066d4:	0800673c 	.word	0x0800673c
 80066d8:	0800673c 	.word	0x0800673c
 80066dc:	08006740 	.word	0x08006740
 80066e0:	0800673c 	.word	0x0800673c

080066e4 <_init>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	46c0      	nop			@ (mov r8, r8)
 80066e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ea:	bc08      	pop	{r3}
 80066ec:	469e      	mov	lr, r3
 80066ee:	4770      	bx	lr

080066f0 <_fini>:
 80066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f2:	46c0      	nop			@ (mov r8, r8)
 80066f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f6:	bc08      	pop	{r3}
 80066f8:	469e      	mov	lr, r3
 80066fa:	4770      	bx	lr
