
PRVL.467143.005_aggregation_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006004  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080060c0  080060c0  000070c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006100  08006100  0000806c  2**0
                  CONTENTS
  4 .ARM          00000000  08006100  08006100  0000806c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006100  08006100  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006100  08006100  00007100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006104  08006104  00007104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006108  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  2000006c  08006174  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08006174  00008438  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecd1  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233c  00000000  00000000  00016d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  000190a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c37  00000000  00000000  0001a020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fcc  00000000  00000000  0001ac57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012786  00000000  00000000  00032c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bb7c  00000000  00000000  000453a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0f25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003848  00000000  00000000  000e0f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e47b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080060a8 	.word	0x080060a8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	080060a8 	.word	0x080060a8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <UpdateLED>:
void UpdateCPU_PSON();
void RebootAdapter(uint8_t adapter_number, uint8_t is_hard_reboot);
void ProcessPins(uint8_t diskIndex);
void Read_disks_connected();
void UpdateLED(LEDState *led)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	if (led->is_blinking) {
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	7d1b      	ldrb	r3, [r3, #20]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d039      	beq.n	80002a0 <UpdateLED+0x84>
		uint32_t current_time = HAL_GetTick();
 800022c:	f002 f954 	bl	80024d8 <HAL_GetTick>
 8000230:	0003      	movs	r3, r0
 8000232:	60fb      	str	r3, [r7, #12]
		uint32_t elapsed_time = current_time - led->blink_start_time;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	68fa      	ldr	r2, [r7, #12]
 800023a:	1ad3      	subs	r3, r2, r3
 800023c:	60bb      	str	r3, [r7, #8]

		if (elapsed_time < led->blink_duration) {
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	68db      	ldr	r3, [r3, #12]
 8000242:	68ba      	ldr	r2, [r7, #8]
 8000244:	429a      	cmp	r2, r3
 8000246:	d21f      	bcs.n	8000288 <UpdateLED+0x6c>
			// Мигание
			if (elapsed_time % led->blink_period < led->blink_period / 2) {
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	691a      	ldr	r2, [r3, #16]
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	0011      	movs	r1, r2
 8000250:	0018      	movs	r0, r3
 8000252:	f7ff ffdd 	bl	8000210 <__aeabi_uidivmod>
 8000256:	000b      	movs	r3, r1
 8000258:	001a      	movs	r2, r3
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	691b      	ldr	r3, [r3, #16]
 800025e:	085b      	lsrs	r3, r3, #1
 8000260:	429a      	cmp	r2, r3
 8000262:	d208      	bcs.n	8000276 <UpdateLED+0x5a>
				HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, SET);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	6818      	ldr	r0, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	889b      	ldrh	r3, [r3, #4]
 800026c:	2201      	movs	r2, #1
 800026e:	0019      	movs	r1, r3
 8000270:	f002 fdc1 	bl	8002df6 <HAL_GPIO_WritePin>
 8000274:	e03e      	b.n	80002f4 <UpdateLED+0xd8>
			} else {
				HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	6818      	ldr	r0, [r3, #0]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	889b      	ldrh	r3, [r3, #4]
 800027e:	2200      	movs	r2, #0
 8000280:	0019      	movs	r1, r3
 8000282:	f002 fdb8 	bl	8002df6 <HAL_GPIO_WritePin>
 8000286:	e035      	b.n	80002f4 <UpdateLED+0xd8>
			}
		} else {
			// Завершение мигания
			HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	6818      	ldr	r0, [r3, #0]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	889b      	ldrh	r3, [r3, #4]
 8000290:	2200      	movs	r2, #0
 8000292:	0019      	movs	r1, r3
 8000294:	f002 fdaf 	bl	8002df6 <HAL_GPIO_WritePin>
			led->is_blinking = 0;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2200      	movs	r2, #0
 800029c:	751a      	strb	r2, [r3, #20]
 800029e:	e029      	b.n	80002f4 <UpdateLED+0xd8>
		}
	} else if (adapter1_state == 1 || adapter2_state == 1)
 80002a0:	4b27      	ldr	r3, [pc, #156]	@ (8000340 <UpdateLED+0x124>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d003      	beq.n	80002b0 <UpdateLED+0x94>
 80002a8:	4b26      	ldr	r3, [pc, #152]	@ (8000344 <UpdateLED+0x128>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d121      	bne.n	80002f4 <UpdateLED+0xd8>
	{
		if(adapter1_state == 1 && led->GPIO_Pin == FP_MB1_PWRLED_Pin) HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, SET);
 80002b0:	4b23      	ldr	r3, [pc, #140]	@ (8000340 <UpdateLED+0x124>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d10d      	bne.n	80002d4 <UpdateLED+0xb8>
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	889a      	ldrh	r2, [r3, #4]
 80002bc:	2380      	movs	r3, #128	@ 0x80
 80002be:	011b      	lsls	r3, r3, #4
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d107      	bne.n	80002d4 <UpdateLED+0xb8>
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	6818      	ldr	r0, [r3, #0]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	889b      	ldrh	r3, [r3, #4]
 80002cc:	2201      	movs	r2, #1
 80002ce:	0019      	movs	r1, r3
 80002d0:	f002 fd91 	bl	8002df6 <HAL_GPIO_WritePin>
		if(adapter2_state == 1 && led->GPIO_Pin == FP_MB2_PWRLED_Pin) HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, SET);
 80002d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <UpdateLED+0x128>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d10b      	bne.n	80002f4 <UpdateLED+0xd8>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	889b      	ldrh	r3, [r3, #4]
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d107      	bne.n	80002f4 <UpdateLED+0xd8>
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6818      	ldr	r0, [r3, #0]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	889b      	ldrh	r3, [r3, #4]
 80002ec:	2201      	movs	r2, #1
 80002ee:	0019      	movs	r1, r3
 80002f0:	f002 fd81 	bl	8002df6 <HAL_GPIO_WritePin>
	}
	if (adapter1_state == 0 && led->GPIO_Pin == FP_MB1_PWRLED_Pin)
 80002f4:	4b12      	ldr	r3, [pc, #72]	@ (8000340 <UpdateLED+0x124>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d10d      	bne.n	8000318 <UpdateLED+0xfc>
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	889a      	ldrh	r2, [r3, #4]
 8000300:	2380      	movs	r3, #128	@ 0x80
 8000302:	011b      	lsls	r3, r3, #4
 8000304:	429a      	cmp	r2, r3
 8000306:	d107      	bne.n	8000318 <UpdateLED+0xfc>
	{
		HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	6818      	ldr	r0, [r3, #0]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	889b      	ldrh	r3, [r3, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	0019      	movs	r1, r3
 8000314:	f002 fd6f 	bl	8002df6 <HAL_GPIO_WritePin>
	}
	if (adapter2_state == 0 && led->GPIO_Pin == FP_MB2_PWRLED_Pin){
 8000318:	4b0a      	ldr	r3, [pc, #40]	@ (8000344 <UpdateLED+0x128>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d10b      	bne.n	8000338 <UpdateLED+0x11c>
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	889b      	ldrh	r3, [r3, #4]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d107      	bne.n	8000338 <UpdateLED+0x11c>
		HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6818      	ldr	r0, [r3, #0]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	889b      	ldrh	r3, [r3, #4]
 8000330:	2200      	movs	r2, #0
 8000332:	0019      	movs	r1, r3
 8000334:	f002 fd5f 	bl	8002df6 <HAL_GPIO_WritePin>
	}


}
 8000338:	46c0      	nop			@ (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	b004      	add	sp, #16
 800033e:	bd80      	pop	{r7, pc}
 8000340:	200003a0 	.word	0x200003a0
 8000344:	200003a1 	.word	0x200003a1

08000348 <StartBlinking>:

void StartBlinking(LEDState *led, uint32_t frequency, uint32_t duration)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
	led->blink_period = 1000 / frequency; // Период мигания в мс
 8000354:	68b9      	ldr	r1, [r7, #8]
 8000356:	23fa      	movs	r3, #250	@ 0xfa
 8000358:	0098      	lsls	r0, r3, #2
 800035a:	f7ff fed3 	bl	8000104 <__udivsi3>
 800035e:	0003      	movs	r3, r0
 8000360:	001a      	movs	r2, r3
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	611a      	str	r2, [r3, #16]
	led->blink_duration = duration;       // Длительность мигания
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	60da      	str	r2, [r3, #12]
	led->blink_start_time = HAL_GetTick(); // Время начала мигания
 800036c:	f002 f8b4 	bl	80024d8 <HAL_GetTick>
 8000370:	0002      	movs	r2, r0
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	609a      	str	r2, [r3, #8]
	led->is_blinking = 1;                 // Включить мигание
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	2201      	movs	r2, #1
 800037a:	751a      	strb	r2, [r3, #20]
}
 800037c:	46c0      	nop			@ (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	b004      	add	sp, #16
 8000382:	bd80      	pop	{r7, pc}

08000384 <HandleButtonAction>:

void HandleButtonAction(uint8_t button_number, uint32_t press_duration)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	0002      	movs	r2, r0
 800038c:	6039      	str	r1, [r7, #0]
 800038e:	1dfb      	adds	r3, r7, #7
 8000390:	701a      	strb	r2, [r3, #0]
	if (button_number == 1) {
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d12e      	bne.n	80003f8 <HandleButtonAction+0x74>
		if (press_duration <= 1000) {
 800039a:	683a      	ldr	r2, [r7, #0]
 800039c:	23fa      	movs	r3, #250	@ 0xfa
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d803      	bhi.n	80003ac <HandleButtonAction+0x28>
			// Короткое нажатие (0-1 сек) - включение адаптера 1
			PowerOnAdapter(1);
 80003a4:	2001      	movs	r0, #1
 80003a6:	f001 fbb7 	bl	8001b18 <PowerOnAdapter>
		} else if (press_duration > 6000) {
			// Очень долгое нажатие (6-10 сек) - выключение адаптера 2
			PowerOffAdapter(2);
		}
	}
}
 80003aa:	e057      	b.n	800045c <HandleButtonAction+0xd8>
		} else if (press_duration <= 3000) {
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	4a2d      	ldr	r2, [pc, #180]	@ (8000464 <HandleButtonAction+0xe0>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d80a      	bhi.n	80003ca <HandleButtonAction+0x46>
			RebootAdapter(1, 0);
 80003b4:	2100      	movs	r1, #0
 80003b6:	2001      	movs	r0, #1
 80003b8:	f001 fca8 	bl	8001d0c <RebootAdapter>
			StartBlinking(&led1, 4, 5000); // Мигание 4 Гц, 5 сек
 80003bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000468 <HandleButtonAction+0xe4>)
 80003be:	4b2b      	ldr	r3, [pc, #172]	@ (800046c <HandleButtonAction+0xe8>)
 80003c0:	2104      	movs	r1, #4
 80003c2:	0018      	movs	r0, r3
 80003c4:	f7ff ffc0 	bl	8000348 <StartBlinking>
}
 80003c8:	e048      	b.n	800045c <HandleButtonAction+0xd8>
		} else if (press_duration <= 6000) {
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	4a28      	ldr	r2, [pc, #160]	@ (8000470 <HandleButtonAction+0xec>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d80a      	bhi.n	80003e8 <HandleButtonAction+0x64>
			RebootAdapter(1, 1);
 80003d2:	2101      	movs	r1, #1
 80003d4:	2001      	movs	r0, #1
 80003d6:	f001 fc99 	bl	8001d0c <RebootAdapter>
			StartBlinking(&led1, 4, 5000); // Мигание 4 Гц, 5 сек
 80003da:	4a23      	ldr	r2, [pc, #140]	@ (8000468 <HandleButtonAction+0xe4>)
 80003dc:	4b23      	ldr	r3, [pc, #140]	@ (800046c <HandleButtonAction+0xe8>)
 80003de:	2104      	movs	r1, #4
 80003e0:	0018      	movs	r0, r3
 80003e2:	f7ff ffb1 	bl	8000348 <StartBlinking>
}
 80003e6:	e039      	b.n	800045c <HandleButtonAction+0xd8>
		} else if (press_duration > 6000) {
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	4a21      	ldr	r2, [pc, #132]	@ (8000470 <HandleButtonAction+0xec>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d935      	bls.n	800045c <HandleButtonAction+0xd8>
			PowerOffAdapter(1);
 80003f0:	2001      	movs	r0, #1
 80003f2:	f001 fc31 	bl	8001c58 <PowerOffAdapter>
}
 80003f6:	e031      	b.n	800045c <HandleButtonAction+0xd8>
	} else if (button_number == 2) {
 80003f8:	1dfb      	adds	r3, r7, #7
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b02      	cmp	r3, #2
 80003fe:	d12d      	bne.n	800045c <HandleButtonAction+0xd8>
		if (press_duration <= 1000) {
 8000400:	683a      	ldr	r2, [r7, #0]
 8000402:	23fa      	movs	r3, #250	@ 0xfa
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	429a      	cmp	r2, r3
 8000408:	d803      	bhi.n	8000412 <HandleButtonAction+0x8e>
			PowerOnAdapter(2);
 800040a:	2002      	movs	r0, #2
 800040c:	f001 fb84 	bl	8001b18 <PowerOnAdapter>
}
 8000410:	e024      	b.n	800045c <HandleButtonAction+0xd8>
		} else if (press_duration <= 3000) {
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	4a13      	ldr	r2, [pc, #76]	@ (8000464 <HandleButtonAction+0xe0>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d80a      	bhi.n	8000430 <HandleButtonAction+0xac>
			RebootAdapter(2, 0);
 800041a:	2100      	movs	r1, #0
 800041c:	2002      	movs	r0, #2
 800041e:	f001 fc75 	bl	8001d0c <RebootAdapter>
			StartBlinking(&led2, 4, 5000); // Мигание 4 Гц, 5 сек
 8000422:	4a11      	ldr	r2, [pc, #68]	@ (8000468 <HandleButtonAction+0xe4>)
 8000424:	4b13      	ldr	r3, [pc, #76]	@ (8000474 <HandleButtonAction+0xf0>)
 8000426:	2104      	movs	r1, #4
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff ff8d 	bl	8000348 <StartBlinking>
}
 800042e:	e015      	b.n	800045c <HandleButtonAction+0xd8>
		} else if (press_duration <= 6000) {
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	4a0f      	ldr	r2, [pc, #60]	@ (8000470 <HandleButtonAction+0xec>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d80a      	bhi.n	800044e <HandleButtonAction+0xca>
			RebootAdapter(2, 1);
 8000438:	2101      	movs	r1, #1
 800043a:	2002      	movs	r0, #2
 800043c:	f001 fc66 	bl	8001d0c <RebootAdapter>
			StartBlinking(&led2, 4, 5000); // Мигание 4 Гц, 5 сек
 8000440:	4a09      	ldr	r2, [pc, #36]	@ (8000468 <HandleButtonAction+0xe4>)
 8000442:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <HandleButtonAction+0xf0>)
 8000444:	2104      	movs	r1, #4
 8000446:	0018      	movs	r0, r3
 8000448:	f7ff ff7e 	bl	8000348 <StartBlinking>
}
 800044c:	e006      	b.n	800045c <HandleButtonAction+0xd8>
		} else if (press_duration > 6000) {
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	4a07      	ldr	r2, [pc, #28]	@ (8000470 <HandleButtonAction+0xec>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d902      	bls.n	800045c <HandleButtonAction+0xd8>
			PowerOffAdapter(2);
 8000456:	2002      	movs	r0, #2
 8000458:	f001 fbfe 	bl	8001c58 <PowerOffAdapter>
}
 800045c:	46c0      	nop			@ (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b002      	add	sp, #8
 8000462:	bd80      	pop	{r7, pc}
 8000464:	00000bb8 	.word	0x00000bb8
 8000468:	00001388 	.word	0x00001388
 800046c:	20000000 	.word	0x20000000
 8000470:	00001770 	.word	0x00001770
 8000474:	20000018 	.word	0x20000018

08000478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000478:	b590      	push	{r4, r7, lr}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047e:	f001 ffaf 	bl	80023e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000482:	f000 f879 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000486:	f000 fa67 	bl	8000958 <MX_GPIO_Init>
  MX_DMA_Init();
 800048a:	f000 fa4f 	bl	800092c <MX_DMA_Init>
  MX_I2C2_Init();
 800048e:	f000 f903 	bl	8000698 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000492:	f000 f9f3 	bl	800087c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000496:	f000 f941 	bl	800071c <MX_TIM1_Init>
  MX_TIM2_Init();
 800049a:	f000 f99b 	bl	80007d4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800049e:	f000 f8c5 	bl	800062c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	ResetBus();
 80004a2:	f000 fca7 	bl	8000df4 <ResetBus>
	HAL_Delay(500);
 80004a6:	23fa      	movs	r3, #250	@ 0xfa
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	0018      	movs	r0, r3
 80004ac:	f002 f81e 	bl	80024ec <HAL_Delay>
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2101      	movs	r1, #1
 80004b4:	2007      	movs	r0, #7
 80004b6:	f002 f8e9 	bl	800268c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004ba:	2007      	movs	r0, #7
 80004bc:	f002 f8fb 	bl	80026b6 <HAL_NVIC_EnableIRQ>

	InitializeDiskPins();
 80004c0:	f001 fa64 	bl	800198c <InitializeDiskPins>

	Initialize_Disks();
 80004c4:	f000 fc34 	bl	8000d30 <Initialize_Disks>

    /* USER CODE BEGIN 3 */


		// Обновление состояния светодиодов
		UpdateLED(&led1);
 80004c8:	4b25      	ldr	r3, [pc, #148]	@ (8000560 <main+0xe8>)
 80004ca:	0018      	movs	r0, r3
 80004cc:	f7ff fea6 	bl	800021c <UpdateLED>
		UpdateLED(&led2);
 80004d0:	4b24      	ldr	r3, [pc, #144]	@ (8000564 <main+0xec>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f7ff fea2 	bl	800021c <UpdateLED>
		for (int i = 0; i < MAX_DISKS; ++i)
 80004d8:	2300      	movs	r3, #0
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	e03c      	b.n	8000558 <main+0xe0>
		{
			ProcessPins(i);  // Обновляем статус каждого диска
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 fc9a 	bl	8001e1c <ProcessPins>
			if (disks[i].activity == 1 && (HAL_GetTick() - activityTimer[i] >= 5000) && sgpio_started != 1) {
 80004e8:	4a1f      	ldr	r2, [pc, #124]	@ (8000568 <main+0xf0>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	18d3      	adds	r3, r2, r3
 80004f0:	3301      	adds	r3, #1
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d12c      	bne.n	8000552 <main+0xda>
 80004f8:	f001 ffee 	bl	80024d8 <HAL_GetTick>
 80004fc:	0001      	movs	r1, r0
 80004fe:	4b1b      	ldr	r3, [pc, #108]	@ (800056c <main+0xf4>)
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	0092      	lsls	r2, r2, #2
 8000504:	58d3      	ldr	r3, [r2, r3]
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <main+0xf8>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d921      	bls.n	8000552 <main+0xda>
 800050e:	4b19      	ldr	r3, [pc, #100]	@ (8000574 <main+0xfc>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d01d      	beq.n	8000552 <main+0xda>
				// Сбрасываем активность
				disks[i].activity = 0;
 8000516:	4a14      	ldr	r2, [pc, #80]	@ (8000568 <main+0xf0>)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	18d3      	adds	r3, r2, r3
 800051e:	3301      	adds	r3, #1
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
				Update_Disk_Status(i, disks[i].activity, disks[i].error, disks[i].locate);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	b2d8      	uxtb	r0, r3
 8000528:	4a0f      	ldr	r2, [pc, #60]	@ (8000568 <main+0xf0>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	18d3      	adds	r3, r2, r3
 8000530:	3301      	adds	r3, #1
 8000532:	7819      	ldrb	r1, [r3, #0]
 8000534:	4a0c      	ldr	r2, [pc, #48]	@ (8000568 <main+0xf0>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	18d3      	adds	r3, r2, r3
 800053c:	3302      	adds	r3, #2
 800053e:	781c      	ldrb	r4, [r3, #0]
 8000540:	4a09      	ldr	r2, [pc, #36]	@ (8000568 <main+0xf0>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	18d3      	adds	r3, r2, r3
 8000548:	3303      	adds	r3, #3
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	0022      	movs	r2, r4
 800054e:	f000 fc1d 	bl	8000d8c <Update_Disk_Status>
		for (int i = 0; i < MAX_DISKS; ++i)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	3301      	adds	r3, #1
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b17      	cmp	r3, #23
 800055c:	ddbf      	ble.n	80004de <main+0x66>
		UpdateLED(&led1);
 800055e:	e7b3      	b.n	80004c8 <main+0x50>
 8000560:	20000000 	.word	0x20000000
 8000564:	20000018 	.word	0x20000018
 8000568:	20000280 	.word	0x20000280
 800056c:	200003c0 	.word	0x200003c0
 8000570:	00001387 	.word	0x00001387
 8000574:	200003a3 	.word	0x200003a3

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b093      	sub	sp, #76	@ 0x4c
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	2410      	movs	r4, #16
 8000580:	193b      	adds	r3, r7, r4
 8000582:	0018      	movs	r0, r3
 8000584:	2338      	movs	r3, #56	@ 0x38
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f005 fd61 	bl	8006050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058e:	003b      	movs	r3, r7
 8000590:	0018      	movs	r0, r3
 8000592:	2310      	movs	r3, #16
 8000594:	001a      	movs	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	f005 fd5a 	bl	8006050 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2380      	movs	r3, #128	@ 0x80
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f004 f9f1 	bl	8004988 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	2280      	movs	r2, #128	@ 0x80
 80005b0:	0252      	lsls	r2, r2, #9
 80005b2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	0021      	movs	r1, r4
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2202      	movs	r2, #2
 80005ba:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2203      	movs	r2, #3
 80005c0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2200      	movs	r2, #0
 80005c6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2210      	movs	r2, #16
 80005cc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2280      	movs	r2, #128	@ 0x80
 80005d2:	0292      	lsls	r2, r2, #10
 80005d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	22c0      	movs	r2, #192	@ 0xc0
 80005da:	04d2      	lsls	r2, r2, #19
 80005dc:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2280      	movs	r2, #128	@ 0x80
 80005e2:	0592      	lsls	r2, r2, #22
 80005e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	0018      	movs	r0, r3
 80005ea:	f004 fa0d 	bl	8004a08 <HAL_RCC_OscConfig>
 80005ee:	1e03      	subs	r3, r0, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005f2:	f001 fd03 	bl	8001ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	003b      	movs	r3, r7
 80005f8:	2207      	movs	r2, #7
 80005fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	003b      	movs	r3, r7
 80005fe:	2202      	movs	r2, #2
 8000600:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	003b      	movs	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	003b      	movs	r3, r7
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800060e:	003b      	movs	r3, r7
 8000610:	2102      	movs	r1, #2
 8000612:	0018      	movs	r0, r3
 8000614:	f004 fd12 	bl	800503c <HAL_RCC_ClockConfig>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800061c:	f001 fcee 	bl	8001ffc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000620:	f004 fe96 	bl	8005350 <HAL_RCC_EnableCSS>
}
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	b013      	add	sp, #76	@ 0x4c
 800062a:	bd90      	pop	{r4, r7, pc}

0800062c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2102      	movs	r1, #2
 8000634:	2009      	movs	r0, #9
 8000636:	f002 f829 	bl	800268c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800063a:	2009      	movs	r0, #9
 800063c:	f002 f83b 	bl	80026b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2102      	movs	r1, #2
 8000644:	200a      	movs	r0, #10
 8000646:	f002 f821 	bl	800268c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800064a:	200a      	movs	r0, #10
 800064c:	f002 f833 	bl	80026b6 <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_UP_TRG_COM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 2, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2102      	movs	r1, #2
 8000654:	200d      	movs	r0, #13
 8000656:	f002 f819 	bl	800268c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800065a:	200d      	movs	r0, #13
 800065c:	f002 f82b 	bl	80026b6 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000660:	2200      	movs	r2, #0
 8000662:	2102      	movs	r1, #2
 8000664:	200f      	movs	r0, #15
 8000666:	f002 f811 	bl	800268c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800066a:	200f      	movs	r0, #15
 800066c:	f002 f823 	bl	80026b6 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	2102      	movs	r1, #2
 8000674:	2010      	movs	r0, #16
 8000676:	f002 f809 	bl	800268c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800067a:	2010      	movs	r0, #16
 800067c:	f002 f81b 	bl	80026b6 <HAL_NVIC_EnableIRQ>
  /* I2C2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_IRQn, 2, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2102      	movs	r1, #2
 8000684:	2018      	movs	r0, #24
 8000686:	f002 f801 	bl	800268c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_IRQn);
 800068a:	2018      	movs	r0, #24
 800068c:	f002 f813 	bl	80026b6 <HAL_NVIC_EnableIRQ>
}
 8000690:	46c0      	nop			@ (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <MX_I2C2_Init+0x78>)
 800069e:	4a1d      	ldr	r2, [pc, #116]	@ (8000714 <MX_I2C2_Init+0x7c>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C12166;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <MX_I2C2_Init+0x78>)
 80006a4:	4a1c      	ldr	r2, [pc, #112]	@ (8000718 <MX_I2C2_Init+0x80>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <MX_I2C2_Init+0x78>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <MX_I2C2_Init+0x78>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <MX_I2C2_Init+0x78>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <MX_I2C2_Init+0x78>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_I2C2_Init+0x78>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_I2C2_Init+0x78>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80006cc:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <MX_I2C2_Init+0x78>)
 80006ce:	2280      	movs	r2, #128	@ 0x80
 80006d0:	0292      	lsls	r2, r2, #10
 80006d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_I2C2_Init+0x78>)
 80006d6:	0018      	movs	r0, r3
 80006d8:	f002 fbd4 	bl	8002e84 <HAL_I2C_Init>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006e0:	f001 fc8c 	bl	8001ffc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <MX_I2C2_Init+0x78>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	0018      	movs	r0, r3
 80006ea:	f004 f8b5 	bl	8004858 <HAL_I2CEx_ConfigAnalogFilter>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80006f2:	f001 fc83 	bl	8001ffc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_I2C2_Init+0x78>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	0018      	movs	r0, r3
 80006fc:	f004 f8f8 	bl	80048f0 <HAL_I2CEx_ConfigDigitalFilter>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000704:	f001 fc7a 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000708:	46c0      	nop			@ (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	20000088 	.word	0x20000088
 8000714:	40005800 	.word	0x40005800
 8000718:	00c12166 	.word	0x00c12166

0800071c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	2310      	movs	r3, #16
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	0018      	movs	r0, r3
 8000728:	2310      	movs	r3, #16
 800072a:	001a      	movs	r2, r3
 800072c:	2100      	movs	r1, #0
 800072e:	f005 fc8f 	bl	8006050 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	0018      	movs	r0, r3
 8000736:	230c      	movs	r3, #12
 8000738:	001a      	movs	r2, r3
 800073a:	2100      	movs	r1, #0
 800073c:	f005 fc88 	bl	8006050 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000740:	4b21      	ldr	r3, [pc, #132]	@ (80007c8 <MX_TIM1_Init+0xac>)
 8000742:	4a22      	ldr	r2, [pc, #136]	@ (80007cc <MX_TIM1_Init+0xb0>)
 8000744:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8000746:	4b20      	ldr	r3, [pc, #128]	@ (80007c8 <MX_TIM1_Init+0xac>)
 8000748:	4a21      	ldr	r2, [pc, #132]	@ (80007d0 <MX_TIM1_Init+0xb4>)
 800074a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074c:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_TIM1_Init+0xac>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 124;
 8000752:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <MX_TIM1_Init+0xac>)
 8000754:	227c      	movs	r2, #124	@ 0x7c
 8000756:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_TIM1_Init+0xac>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800075e:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <MX_TIM1_Init+0xac>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000764:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <MX_TIM1_Init+0xac>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800076a:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_TIM1_Init+0xac>)
 800076c:	0018      	movs	r0, r3
 800076e:	f004 ffdf 	bl	8005730 <HAL_TIM_Base_Init>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000776:	f001 fc41 	bl	8001ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077a:	2110      	movs	r1, #16
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2280      	movs	r2, #128	@ 0x80
 8000780:	0152      	lsls	r2, r2, #5
 8000782:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000784:	187a      	adds	r2, r7, r1
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_TIM1_Init+0xac>)
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f005 f9ba 	bl	8005b04 <HAL_TIM_ConfigClockSource>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000794:	f001 fc32 	bl	8001ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007aa:	1d3a      	adds	r2, r7, #4
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_TIM1_Init+0xac>)
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f005 fbc7 	bl	8005f44 <HAL_TIMEx_MasterConfigSynchronization>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80007ba:	f001 fc1f 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b008      	add	sp, #32
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	20000194 	.word	0x20000194
 80007cc:	40012c00 	.word	0x40012c00
 80007d0:	0000f9ff 	.word	0x0000f9ff

080007d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	2310      	movs	r3, #16
 80007dc:	18fb      	adds	r3, r7, r3
 80007de:	0018      	movs	r0, r3
 80007e0:	2310      	movs	r3, #16
 80007e2:	001a      	movs	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	f005 fc33 	bl	8006050 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	0018      	movs	r0, r3
 80007ee:	230c      	movs	r3, #12
 80007f0:	001a      	movs	r2, r3
 80007f2:	2100      	movs	r1, #0
 80007f4:	f005 fc2c 	bl	8006050 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000874 <MX_TIM2_Init+0xa0>)
 80007fa:	2280      	movs	r2, #128	@ 0x80
 80007fc:	05d2      	lsls	r2, r2, #23
 80007fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000800:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <MX_TIM2_Init+0xa0>)
 8000802:	4a1d      	ldr	r2, [pc, #116]	@ (8000878 <MX_TIM2_Init+0xa4>)
 8000804:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <MX_TIM2_Init+0xa0>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 800080c:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <MX_TIM2_Init+0xa0>)
 800080e:	22f9      	movs	r2, #249	@ 0xf9
 8000810:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000812:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <MX_TIM2_Init+0xa0>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000818:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_TIM2_Init+0xa0>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081e:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <MX_TIM2_Init+0xa0>)
 8000820:	0018      	movs	r0, r3
 8000822:	f004 ff85 	bl	8005730 <HAL_TIM_Base_Init>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800082a:	f001 fbe7 	bl	8001ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082e:	2110      	movs	r1, #16
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2280      	movs	r2, #128	@ 0x80
 8000834:	0152      	lsls	r2, r2, #5
 8000836:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000838:	187a      	adds	r2, r7, r1
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_TIM2_Init+0xa0>)
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f005 f960 	bl	8005b04 <HAL_TIM_ConfigClockSource>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000848:	f001 fbd8 	bl	8001ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000858:	1d3a      	adds	r2, r7, #4
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_TIM2_Init+0xa0>)
 800085c:	0011      	movs	r1, r2
 800085e:	0018      	movs	r0, r3
 8000860:	f005 fb70 	bl	8005f44 <HAL_TIMEx_MasterConfigSynchronization>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000868:	f001 fbc8 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b008      	add	sp, #32
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200001e0 	.word	0x200001e0
 8000878:	0000f9ff 	.word	0x0000f9ff

0800087c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	2310      	movs	r3, #16
 8000884:	18fb      	adds	r3, r7, r3
 8000886:	0018      	movs	r0, r3
 8000888:	2310      	movs	r3, #16
 800088a:	001a      	movs	r2, r3
 800088c:	2100      	movs	r1, #0
 800088e:	f005 fbdf 	bl	8006050 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	0018      	movs	r0, r3
 8000896:	230c      	movs	r3, #12
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f005 fbd8 	bl	8006050 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a0:	4b1e      	ldr	r3, [pc, #120]	@ (800091c <MX_TIM3_Init+0xa0>)
 80008a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000920 <MX_TIM3_Init+0xa4>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <MX_TIM3_Init+0xa0>)
 80008a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000924 <MX_TIM3_Init+0xa8>)
 80008aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <MX_TIM3_Init+0xa0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <MX_TIM3_Init+0xa0>)
 80008b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000928 <MX_TIM3_Init+0xac>)
 80008b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b18      	ldr	r3, [pc, #96]	@ (800091c <MX_TIM3_Init+0xa0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008be:	4b17      	ldr	r3, [pc, #92]	@ (800091c <MX_TIM3_Init+0xa0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008c4:	4b15      	ldr	r3, [pc, #84]	@ (800091c <MX_TIM3_Init+0xa0>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f004 ff32 	bl	8005730 <HAL_TIM_Base_Init>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80008d0:	f001 fb94 	bl	8001ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d4:	2110      	movs	r1, #16
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2280      	movs	r2, #128	@ 0x80
 80008da:	0152      	lsls	r2, r2, #5
 80008dc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008de:	187a      	adds	r2, r7, r1
 80008e0:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <MX_TIM3_Init+0xa0>)
 80008e2:	0011      	movs	r1, r2
 80008e4:	0018      	movs	r0, r3
 80008e6:	f005 f90d 	bl	8005b04 <HAL_TIM_ConfigClockSource>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80008ee:	f001 fb85 	bl	8001ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008fe:	1d3a      	adds	r2, r7, #4
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <MX_TIM3_Init+0xa0>)
 8000902:	0011      	movs	r1, r2
 8000904:	0018      	movs	r0, r3
 8000906:	f005 fb1d 	bl	8005f44 <HAL_TIMEx_MasterConfigSynchronization>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800090e:	f001 fb75 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b008      	add	sp, #32
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	2000022c 	.word	0x2000022c
 8000920:	40000400 	.word	0x40000400
 8000924:	0000f9ff 	.word	0x0000f9ff
 8000928:	000003e7 	.word	0x000003e7

0800092c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000932:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <MX_DMA_Init+0x28>)
 8000934:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000936:	4b07      	ldr	r3, [pc, #28]	@ (8000954 <MX_DMA_Init+0x28>)
 8000938:	2101      	movs	r1, #1
 800093a:	430a      	orrs	r2, r1
 800093c:	639a      	str	r2, [r3, #56]	@ 0x38
 800093e:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <MX_DMA_Init+0x28>)
 8000940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000942:	2201      	movs	r2, #1
 8000944:	4013      	ands	r3, r2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

}
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b002      	add	sp, #8
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	40021000 	.word	0x40021000

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b08b      	sub	sp, #44	@ 0x2c
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	2414      	movs	r4, #20
 8000960:	193b      	adds	r3, r7, r4
 8000962:	0018      	movs	r0, r3
 8000964:	2314      	movs	r3, #20
 8000966:	001a      	movs	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f005 fb71 	bl	8006050 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b8b      	ldr	r3, [pc, #556]	@ (8000b9c <MX_GPIO_Init+0x244>)
 8000970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000972:	4b8a      	ldr	r3, [pc, #552]	@ (8000b9c <MX_GPIO_Init+0x244>)
 8000974:	2104      	movs	r1, #4
 8000976:	430a      	orrs	r2, r1
 8000978:	635a      	str	r2, [r3, #52]	@ 0x34
 800097a:	4b88      	ldr	r3, [pc, #544]	@ (8000b9c <MX_GPIO_Init+0x244>)
 800097c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800097e:	2204      	movs	r2, #4
 8000980:	4013      	ands	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000986:	4b85      	ldr	r3, [pc, #532]	@ (8000b9c <MX_GPIO_Init+0x244>)
 8000988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800098a:	4b84      	ldr	r3, [pc, #528]	@ (8000b9c <MX_GPIO_Init+0x244>)
 800098c:	2120      	movs	r1, #32
 800098e:	430a      	orrs	r2, r1
 8000990:	635a      	str	r2, [r3, #52]	@ 0x34
 8000992:	4b82      	ldr	r3, [pc, #520]	@ (8000b9c <MX_GPIO_Init+0x244>)
 8000994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000996:	2220      	movs	r2, #32
 8000998:	4013      	ands	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b7f      	ldr	r3, [pc, #508]	@ (8000b9c <MX_GPIO_Init+0x244>)
 80009a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009a2:	4b7e      	ldr	r3, [pc, #504]	@ (8000b9c <MX_GPIO_Init+0x244>)
 80009a4:	2101      	movs	r1, #1
 80009a6:	430a      	orrs	r2, r1
 80009a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009aa:	4b7c      	ldr	r3, [pc, #496]	@ (8000b9c <MX_GPIO_Init+0x244>)
 80009ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ae:	2201      	movs	r2, #1
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b79      	ldr	r3, [pc, #484]	@ (8000b9c <MX_GPIO_Init+0x244>)
 80009b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ba:	4b78      	ldr	r3, [pc, #480]	@ (8000b9c <MX_GPIO_Init+0x244>)
 80009bc:	2102      	movs	r1, #2
 80009be:	430a      	orrs	r2, r1
 80009c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80009c2:	4b76      	ldr	r3, [pc, #472]	@ (8000b9c <MX_GPIO_Init+0x244>)
 80009c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009c6:	2202      	movs	r2, #2
 80009c8:	4013      	ands	r3, r2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ce:	4b73      	ldr	r3, [pc, #460]	@ (8000b9c <MX_GPIO_Init+0x244>)
 80009d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009d2:	4b72      	ldr	r3, [pc, #456]	@ (8000b9c <MX_GPIO_Init+0x244>)
 80009d4:	2108      	movs	r1, #8
 80009d6:	430a      	orrs	r2, r1
 80009d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009da:	4b70      	ldr	r3, [pc, #448]	@ (8000b9c <MX_GPIO_Init+0x244>)
 80009dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009de:	2208      	movs	r2, #8
 80009e0:	4013      	ands	r3, r2
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FP_MB1_PWRLED_Pin|FP_MB2_PWRLED_Pin|CPU_PSON_Pin|MB1_PWR_SW_Pin, GPIO_PIN_RESET);
 80009e6:	496e      	ldr	r1, [pc, #440]	@ (8000ba0 <MX_GPIO_Init+0x248>)
 80009e8:	4b6e      	ldr	r3, [pc, #440]	@ (8000ba4 <MX_GPIO_Init+0x24c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	0018      	movs	r0, r3
 80009ee:	f002 fa02 	bl	8002df6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SGPIO_I2C2_RES_G_Pin|SGPIO_I2C2_RES_Pin|SGPIO_I2C1_RES_Pin, GPIO_PIN_SET);
 80009f2:	23c4      	movs	r3, #196	@ 0xc4
 80009f4:	01db      	lsls	r3, r3, #7
 80009f6:	486b      	ldr	r0, [pc, #428]	@ (8000ba4 <MX_GPIO_Init+0x24c>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	0019      	movs	r1, r3
 80009fc:	f002 f9fb 	bl	8002df6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB1_STATUS_LED_Pin|MB2_STATUS_LED_Pin, GPIO_PIN_RESET);
 8000a00:	23a0      	movs	r3, #160	@ 0xa0
 8000a02:	05db      	lsls	r3, r3, #23
 8000a04:	2200      	movs	r2, #0
 8000a06:	2150      	movs	r1, #80	@ 0x50
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f002 f9f4 	bl	8002df6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SGPIO_I2C3_RES_Pin|SGPIO_I2C3RES_G_Pin, GPIO_PIN_SET);
 8000a0e:	4b66      	ldr	r3, [pc, #408]	@ (8000ba8 <MX_GPIO_Init+0x250>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	2106      	movs	r1, #6
 8000a14:	0018      	movs	r0, r3
 8000a16:	f002 f9ee 	bl	8002df6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SGPIO_I2C1_RES_G_Pin|TEMP_I2C2_RES_Pin|TEMP_I2C1_RES_Pin, GPIO_PIN_SET);
 8000a1a:	4b64      	ldr	r3, [pc, #400]	@ (8000bac <MX_GPIO_Init+0x254>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2107      	movs	r1, #7
 8000a20:	0018      	movs	r0, r3
 8000a22:	f002 f9e8 	bl	8002df6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FP_MB1_PWRLED_Pin SGPIO_I2C2_RES_G_Pin SGPIO_I2C2_RES_Pin FP_MB2_PWRLED_Pin
                           CPU_PSON_Pin MB1_PWR_SW_Pin SGPIO_I2C1_RES_Pin */
  GPIO_InitStruct.Pin = FP_MB1_PWRLED_Pin|SGPIO_I2C2_RES_G_Pin|SGPIO_I2C2_RES_Pin|FP_MB2_PWRLED_Pin
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	4a61      	ldr	r2, [pc, #388]	@ (8000bb0 <MX_GPIO_Init+0x258>)
 8000a2a:	601a      	str	r2, [r3, #0]
                          |CPU_PSON_Pin|MB1_PWR_SW_Pin|SGPIO_I2C1_RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	2201      	movs	r2, #1
 8000a30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	4a58      	ldr	r2, [pc, #352]	@ (8000ba4 <MX_GPIO_Init+0x24c>)
 8000a42:	0019      	movs	r1, r3
 8000a44:	0010      	movs	r0, r2
 8000a46:	f002 f855 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_DRIVE4_ACTIVITY_Pin B_DRIVE4_ACTIVITY_Pin B_DRIVE3_ACTIVITY_Pin B_DRIVE2_ACTIVITY_Pin
                           C_DRIVE1_ACTIVITY_Pin C_DRIVE2_ACTIVITY_Pin E_DRIVE1_ACTIVITY_Pin */
  GPIO_InitStruct.Pin = D_DRIVE4_ACTIVITY_Pin|B_DRIVE4_ACTIVITY_Pin|B_DRIVE3_ACTIVITY_Pin|B_DRIVE2_ACTIVITY_Pin
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	4a59      	ldr	r2, [pc, #356]	@ (8000bb4 <MX_GPIO_Init+0x25c>)
 8000a4e:	601a      	str	r2, [r3, #0]
                          |C_DRIVE1_ACTIVITY_Pin|C_DRIVE2_ACTIVITY_Pin|E_DRIVE1_ACTIVITY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	4a51      	ldr	r2, [pc, #324]	@ (8000ba4 <MX_GPIO_Init+0x24c>)
 8000a60:	0019      	movs	r1, r3
 8000a62:	0010      	movs	r0, r2
 8000a64:	f002 f846 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB1_BITCH_Pin MB2_BITCH_Pin CPU_PWROK_Pin A_DRIVE4_ACTIVITY_Pin
                           B_DRIVE1_ACTIVITY_Pin D_DRIVE1_ACTIVITY_Pin D_DRIVE2_ACTIVITY_Pin D_DRIVE3_ACTIVITY_Pin */
  GPIO_InitStruct.Pin = MB1_BITCH_Pin|MB2_BITCH_Pin|CPU_PWROK_Pin|A_DRIVE4_ACTIVITY_Pin
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	4a53      	ldr	r2, [pc, #332]	@ (8000bb8 <MX_GPIO_Init+0x260>)
 8000a6c:	601a      	str	r2, [r3, #0]
                          |B_DRIVE1_ACTIVITY_Pin|D_DRIVE1_ACTIVITY_Pin|D_DRIVE2_ACTIVITY_Pin|D_DRIVE3_ACTIVITY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	193a      	adds	r2, r7, r4
 8000a7c:	23a0      	movs	r3, #160	@ 0xa0
 8000a7e:	05db      	lsls	r3, r3, #23
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f002 f836 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB1_STATUS_LED_Pin MB2_STATUS_LED_Pin */
  GPIO_InitStruct.Pin = MB1_STATUS_LED_Pin|MB2_STATUS_LED_Pin;
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	2250      	movs	r2, #80	@ 0x50
 8000a8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	2201      	movs	r2, #1
 8000a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	193a      	adds	r2, r7, r4
 8000aa2:	23a0      	movs	r3, #160	@ 0xa0
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f002 f823 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB1_ATTACH_Pin A_DRIVE1_ACTIVITY_Pin A_DRIVE2_ACTIVITY_Pin A_DRIVE3_ACTIVITY_Pin
                           F_DRIVE4_ACTIVITY_Pin F_DRIVE3_ACTIVITY_Pin F_DRIVE2_ACTIVITY_Pin F_DRIVE1_ACTIVITY_Pin
                           E_DRIVE4_ACTIVITY_Pin E_DRIVE3_ACTIVITY_Pin E_DRIVE2_ACTIVITY_Pin */
  GPIO_InitStruct.Pin = MB1_ATTACH_Pin|A_DRIVE1_ACTIVITY_Pin|A_DRIVE2_ACTIVITY_Pin|A_DRIVE3_ACTIVITY_Pin
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	4a42      	ldr	r2, [pc, #264]	@ (8000bbc <MX_GPIO_Init+0x264>)
 8000ab2:	601a      	str	r2, [r3, #0]
                          |F_DRIVE4_ACTIVITY_Pin|F_DRIVE3_ACTIVITY_Pin|F_DRIVE2_ACTIVITY_Pin|F_DRIVE1_ACTIVITY_Pin
                          |E_DRIVE4_ACTIVITY_Pin|E_DRIVE3_ACTIVITY_Pin|E_DRIVE2_ACTIVITY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	4a39      	ldr	r2, [pc, #228]	@ (8000ba8 <MX_GPIO_Init+0x250>)
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	0010      	movs	r0, r2
 8000ac8:	f002 f814 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SGPIO_I2C3_RES_Pin SGPIO_I2C3RES_G_Pin */
  GPIO_InitStruct.Pin = SGPIO_I2C3_RES_Pin|SGPIO_I2C3RES_G_Pin;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2206      	movs	r2, #6
 8000ad0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	4a30      	ldr	r2, [pc, #192]	@ (8000ba8 <MX_GPIO_Init+0x250>)
 8000ae8:	0019      	movs	r1, r3
 8000aea:	0010      	movs	r0, r2
 8000aec:	f002 f802 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_DRIVE3_ACTIVITY_Pin C_DRIVE4_ACTIVITY_Pin MB2_ATTACH_Pin MB2_PWR_SW_Pin */
  GPIO_InitStruct.Pin = C_DRIVE3_ACTIVITY_Pin|C_DRIVE4_ACTIVITY_Pin|MB2_ATTACH_Pin|MB2_PWR_SW_Pin;
 8000af0:	0021      	movs	r1, r4
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	22d8      	movs	r2, #216	@ 0xd8
 8000af6:	0092      	lsls	r2, r2, #2
 8000af8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afa:	000c      	movs	r4, r1
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	4a28      	ldr	r2, [pc, #160]	@ (8000bac <MX_GPIO_Init+0x254>)
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	0010      	movs	r0, r2
 8000b10:	f001 fff0 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FP_MB1_PWR_SW_Pin */
  GPIO_InitStruct.Pin = FP_MB1_PWR_SW_Pin;
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	2280      	movs	r2, #128	@ 0x80
 8000b18:	0212      	lsls	r2, r2, #8
 8000b1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	22c4      	movs	r2, #196	@ 0xc4
 8000b20:	0392      	lsls	r2, r2, #14
 8000b22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	2201      	movs	r2, #1
 8000b28:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FP_MB1_PWR_SW_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	193a      	adds	r2, r7, r4
 8000b2c:	23a0      	movs	r3, #160	@ 0xa0
 8000b2e:	05db      	lsls	r3, r3, #23
 8000b30:	0011      	movs	r1, r2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f001 ffde 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FP_MB2_PWR_SW_Pin */
  GPIO_InitStruct.Pin = FP_MB2_PWR_SW_Pin;
 8000b38:	0021      	movs	r1, r4
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2280      	movs	r2, #128	@ 0x80
 8000b3e:	0052      	lsls	r2, r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	22c4      	movs	r2, #196	@ 0xc4
 8000b46:	0392      	lsls	r2, r2, #14
 8000b48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FP_MB2_PWR_SW_GPIO_Port, &GPIO_InitStruct);
 8000b50:	000c      	movs	r4, r1
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	4a13      	ldr	r2, [pc, #76]	@ (8000ba4 <MX_GPIO_Init+0x24c>)
 8000b56:	0019      	movs	r1, r3
 8000b58:	0010      	movs	r0, r2
 8000b5a:	f001 ffcb 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SGPIO_I2C1_RES_G_Pin TEMP_I2C2_RES_Pin TEMP_I2C1_RES_Pin */
  GPIO_InitStruct.Pin = SGPIO_I2C1_RES_G_Pin|TEMP_I2C2_RES_Pin|TEMP_I2C1_RES_Pin;
 8000b5e:	0021      	movs	r1, r4
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2207      	movs	r2, #7
 8000b64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2201      	movs	r2, #1
 8000b6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000bac <MX_GPIO_Init+0x254>)
 8000b7c:	0019      	movs	r1, r3
 8000b7e:	0010      	movs	r0, r2
 8000b80:	f001 ffb8 	bl	8002af4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2101      	movs	r1, #1
 8000b88:	2007      	movs	r0, #7
 8000b8a:	f001 fd7f 	bl	800268c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000b8e:	2007      	movs	r0, #7
 8000b90:	f001 fd91 	bl	80026b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b00b      	add	sp, #44	@ 0x2c
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	00000831 	.word	0x00000831
 8000ba4:	50000800 	.word	0x50000800
 8000ba8:	50000400 	.word	0x50000400
 8000bac:	50000c00 	.word	0x50000c00
 8000bb0:	00006a31 	.word	0x00006a31
 8000bb4:	000084ce 	.word	0x000084ce
 8000bb8:	00001fa8 	.word	0x00001fa8
 8000bbc:	0000e3f9 	.word	0x0000e3f9

08000bc0 <Set_devslp>:

/* USER CODE BEGIN 4 */
void Set_devslp()
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af02      	add	r7, sp, #8
	while (HAL_I2C_IsDeviceReady(&hi2c2, I2C_EXPAND_adr << 1, 3, 100) != HAL_OK);
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	4b51      	ldr	r3, [pc, #324]	@ (8000d10 <Set_devslp+0x150>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	18db      	adds	r3, r3, r3
 8000bce:	b299      	uxth	r1, r3
 8000bd0:	4850      	ldr	r0, [pc, #320]	@ (8000d14 <Set_devslp+0x154>)
 8000bd2:	2364      	movs	r3, #100	@ 0x64
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	f002 fc2d 	bl	8003434 <HAL_I2C_IsDeviceReady>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d1f4      	bne.n	8000bc8 <Set_devslp+0x8>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 1); //DevSLP  0 канал (E/F)
 8000bde:	4b4c      	ldr	r3, [pc, #304]	@ (8000d10 <Set_devslp+0x150>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	18db      	adds	r3, r3, r3
 8000be4:	b299      	uxth	r1, r3
 8000be6:	4a4c      	ldr	r2, [pc, #304]	@ (8000d18 <Set_devslp+0x158>)
 8000be8:	484a      	ldr	r0, [pc, #296]	@ (8000d14 <Set_devslp+0x154>)
 8000bea:	2301      	movs	r3, #1
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f002 f9ee 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000bf4:	2005      	movs	r0, #5
 8000bf6:	f001 fc79 	bl	80024ec <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&hi2c2, Dev_SLP_adr << 1, 3, 100) != HAL_OK);
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	4b47      	ldr	r3, [pc, #284]	@ (8000d1c <Set_devslp+0x15c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	18db      	adds	r3, r3, r3
 8000c02:	b299      	uxth	r1, r3
 8000c04:	4843      	ldr	r0, [pc, #268]	@ (8000d14 <Set_devslp+0x154>)
 8000c06:	2364      	movs	r3, #100	@ 0x64
 8000c08:	2203      	movs	r2, #3
 8000c0a:	f002 fc13 	bl	8003434 <HAL_I2C_IsDeviceReady>
 8000c0e:	1e03      	subs	r3, r0, #0
 8000c10:	d1f4      	bne.n	8000bfc <Set_devslp+0x3c>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), i2cbuff_IN, 3, 1); // init input
 8000c12:	4b42      	ldr	r3, [pc, #264]	@ (8000d1c <Set_devslp+0x15c>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	18db      	adds	r3, r3, r3
 8000c18:	b299      	uxth	r1, r3
 8000c1a:	4a41      	ldr	r2, [pc, #260]	@ (8000d20 <Set_devslp+0x160>)
 8000c1c:	483d      	ldr	r0, [pc, #244]	@ (8000d14 <Set_devslp+0x154>)
 8000c1e:	2301      	movs	r3, #1
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2303      	movs	r3, #3
 8000c24:	f002 f9d4 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000c28:	2005      	movs	r0, #5
 8000c2a:	f001 fc5f 	bl	80024ec <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&hi2c2, Dev_SLP_adr << 1, 3, 100) != HAL_OK);
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	4b3a      	ldr	r3, [pc, #232]	@ (8000d1c <Set_devslp+0x15c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	18db      	adds	r3, r3, r3
 8000c36:	b299      	uxth	r1, r3
 8000c38:	4836      	ldr	r0, [pc, #216]	@ (8000d14 <Set_devslp+0x154>)
 8000c3a:	2364      	movs	r3, #100	@ 0x64
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	f002 fbf9 	bl	8003434 <HAL_I2C_IsDeviceReady>
 8000c42:	1e03      	subs	r3, r0, #0
 8000c44:	d1f4      	bne.n	8000c30 <Set_devslp+0x70>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), Dev_SLP_ON, 3, 1); //write
 8000c46:	4b35      	ldr	r3, [pc, #212]	@ (8000d1c <Set_devslp+0x15c>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	18db      	adds	r3, r3, r3
 8000c4c:	b299      	uxth	r1, r3
 8000c4e:	4a35      	ldr	r2, [pc, #212]	@ (8000d24 <Set_devslp+0x164>)
 8000c50:	4830      	ldr	r0, [pc, #192]	@ (8000d14 <Set_devslp+0x154>)
 8000c52:	2301      	movs	r3, #1
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2303      	movs	r3, #3
 8000c58:	f002 f9ba 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000c5c:	2005      	movs	r0, #5
 8000c5e:	f001 fc45 	bl	80024ec <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 1); //DevSLP  1 канал (C/D)
 8000c62:	4b2b      	ldr	r3, [pc, #172]	@ (8000d10 <Set_devslp+0x150>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	18db      	adds	r3, r3, r3
 8000c68:	b299      	uxth	r1, r3
 8000c6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d28 <Set_devslp+0x168>)
 8000c6c:	4829      	ldr	r0, [pc, #164]	@ (8000d14 <Set_devslp+0x154>)
 8000c6e:	2301      	movs	r3, #1
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2301      	movs	r3, #1
 8000c74:	f002 f9ac 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000c78:	2005      	movs	r0, #5
 8000c7a:	f001 fc37 	bl	80024ec <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), i2cbuff_IN, 3, 1);
 8000c7e:	4b27      	ldr	r3, [pc, #156]	@ (8000d1c <Set_devslp+0x15c>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	18db      	adds	r3, r3, r3
 8000c84:	b299      	uxth	r1, r3
 8000c86:	4a26      	ldr	r2, [pc, #152]	@ (8000d20 <Set_devslp+0x160>)
 8000c88:	4822      	ldr	r0, [pc, #136]	@ (8000d14 <Set_devslp+0x154>)
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2303      	movs	r3, #3
 8000c90:	f002 f99e 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000c94:	2005      	movs	r0, #5
 8000c96:	f001 fc29 	bl	80024ec <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), Dev_SLP_ON, 3, 1);
 8000c9a:	4b20      	ldr	r3, [pc, #128]	@ (8000d1c <Set_devslp+0x15c>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	18db      	adds	r3, r3, r3
 8000ca0:	b299      	uxth	r1, r3
 8000ca2:	4a20      	ldr	r2, [pc, #128]	@ (8000d24 <Set_devslp+0x164>)
 8000ca4:	481b      	ldr	r0, [pc, #108]	@ (8000d14 <Set_devslp+0x154>)
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2303      	movs	r3, #3
 8000cac:	f002 f990 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000cb0:	2005      	movs	r0, #5
 8000cb2:	f001 fc1b 	bl	80024ec <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 1); //DevSLP  2 канал (A/B)
 8000cb6:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <Set_devslp+0x150>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	18db      	adds	r3, r3, r3
 8000cbc:	b299      	uxth	r1, r3
 8000cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8000d2c <Set_devslp+0x16c>)
 8000cc0:	4814      	ldr	r0, [pc, #80]	@ (8000d14 <Set_devslp+0x154>)
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	f002 f982 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000ccc:	2005      	movs	r0, #5
 8000cce:	f001 fc0d 	bl	80024ec <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), i2cbuff_IN, 3, 1);
 8000cd2:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <Set_devslp+0x15c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	18db      	adds	r3, r3, r3
 8000cd8:	b299      	uxth	r1, r3
 8000cda:	4a11      	ldr	r2, [pc, #68]	@ (8000d20 <Set_devslp+0x160>)
 8000cdc:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <Set_devslp+0x154>)
 8000cde:	2301      	movs	r3, #1
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	f002 f974 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000ce8:	2005      	movs	r0, #5
 8000cea:	f001 fbff 	bl	80024ec <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), Dev_SLP_ON, 3, 1);
 8000cee:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <Set_devslp+0x15c>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	18db      	adds	r3, r3, r3
 8000cf4:	b299      	uxth	r1, r3
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	@ (8000d24 <Set_devslp+0x164>)
 8000cf8:	4806      	ldr	r0, [pc, #24]	@ (8000d14 <Set_devslp+0x154>)
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2303      	movs	r3, #3
 8000d00:	f002 f966 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000d04:	2005      	movs	r0, #5
 8000d06:	f001 fbf1 	bl	80024ec <HAL_Delay>
}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000004d 	.word	0x2000004d
 8000d14:	20000088 	.word	0x20000088
 8000d18:	20000038 	.word	0x20000038
 8000d1c:	2000004c 	.word	0x2000004c
 8000d20:	20000034 	.word	0x20000034
 8000d24:	20000050 	.word	0x20000050
 8000d28:	2000003c 	.word	0x2000003c
 8000d2c:	20000040 	.word	0x20000040

08000d30 <Initialize_Disks>:

void Initialize_Disks()
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_DISKS; ++i) {
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	e01c      	b.n	8000d76 <Initialize_Disks+0x46>
		disks[i].isConnected = 0;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <Initialize_Disks+0x58>)
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	0092      	lsls	r2, r2, #2
 8000d42:	2100      	movs	r1, #0
 8000d44:	54d1      	strb	r1, [r2, r3]
		disks[i].activity = 0;
 8000d46:	4a10      	ldr	r2, [pc, #64]	@ (8000d88 <Initialize_Disks+0x58>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	18d3      	adds	r3, r2, r3
 8000d4e:	3301      	adds	r3, #1
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
		disks[i].error = 0;
 8000d54:	4a0c      	ldr	r2, [pc, #48]	@ (8000d88 <Initialize_Disks+0x58>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	18d3      	adds	r3, r2, r3
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
		disks[i].locate = 0;
 8000d62:	4a09      	ldr	r2, [pc, #36]	@ (8000d88 <Initialize_Disks+0x58>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	18d3      	adds	r3, r2, r3
 8000d6a:	3303      	adds	r3, #3
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_DISKS; ++i) {
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3301      	adds	r3, #1
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b17      	cmp	r3, #23
 8000d7a:	dddf      	ble.n	8000d3c <Initialize_Disks+0xc>
	}
}
 8000d7c:	46c0      	nop			@ (mov r8, r8)
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	20000280 	.word	0x20000280

08000d8c <Update_Disk_Status>:

void Update_Disk_Status(uint8_t diskIndex, uint8_t activity, uint8_t error, uint8_t locate)
{
 8000d8c:	b5b0      	push	{r4, r5, r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	0005      	movs	r5, r0
 8000d94:	000c      	movs	r4, r1
 8000d96:	0010      	movs	r0, r2
 8000d98:	0019      	movs	r1, r3
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	1c2a      	adds	r2, r5, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	1dbb      	adds	r3, r7, #6
 8000da2:	1c22      	adds	r2, r4, #0
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	1d7b      	adds	r3, r7, #5
 8000da8:	1c02      	adds	r2, r0, #0
 8000daa:	701a      	strb	r2, [r3, #0]
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	1c0a      	adds	r2, r1, #0
 8000db0:	701a      	strb	r2, [r3, #0]
	disks[diskIndex].activity = activity;
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	4a0e      	ldr	r2, [pc, #56]	@ (8000df0 <Update_Disk_Status+0x64>)
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	18d3      	adds	r3, r2, r3
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	1dba      	adds	r2, r7, #6
 8000dc0:	7812      	ldrb	r2, [r2, #0]
 8000dc2:	701a      	strb	r2, [r3, #0]
	disks[diskIndex].error = error;
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4a09      	ldr	r2, [pc, #36]	@ (8000df0 <Update_Disk_Status+0x64>)
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	18d3      	adds	r3, r2, r3
 8000dce:	3302      	adds	r3, #2
 8000dd0:	1d7a      	adds	r2, r7, #5
 8000dd2:	7812      	ldrb	r2, [r2, #0]
 8000dd4:	701a      	strb	r2, [r3, #0]
	disks[diskIndex].locate = locate;
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4a05      	ldr	r2, [pc, #20]	@ (8000df0 <Update_Disk_Status+0x64>)
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	18d3      	adds	r3, r2, r3
 8000de0:	3303      	adds	r3, #3
 8000de2:	1d3a      	adds	r2, r7, #4
 8000de4:	7812      	ldrb	r2, [r2, #0]
 8000de6:	701a      	strb	r2, [r3, #0]
}
 8000de8:	46c0      	nop			@ (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bdb0      	pop	{r4, r5, r7, pc}
 8000df0:	20000280 	.word	0x20000280

08000df4 <ResetBus>:

	}
}

void ResetBus()
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	flag_update = 10;
 8000df8:	4b37      	ldr	r3, [pc, #220]	@ (8000ed8 <ResetBus+0xe4>)
 8000dfa:	220a      	movs	r2, #10
 8000dfc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TEMP_I2C1_RES_GPIO_Port, TEMP_I2C1_RES_Pin, RESET);
 8000dfe:	4b37      	ldr	r3, [pc, #220]	@ (8000edc <ResetBus+0xe8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	2104      	movs	r1, #4
 8000e04:	0018      	movs	r0, r3
 8000e06:	f001 fff6 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_G_GPIO_Port, SGPIO_I2C1_RES_G_Pin, RESET);
 8000e0a:	4b34      	ldr	r3, [pc, #208]	@ (8000edc <ResetBus+0xe8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2101      	movs	r1, #1
 8000e10:	0018      	movs	r0, r3
 8000e12:	f001 fff0 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_GPIO_Port, SGPIO_I2C1_RES_Pin, RESET);
 8000e16:	2380      	movs	r3, #128	@ 0x80
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4831      	ldr	r0, [pc, #196]	@ (8000ee0 <ResetBus+0xec>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	0019      	movs	r1, r3
 8000e20:	f001 ffe9 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3RES_G_GPIO_Port, SGPIO_I2C3RES_G_Pin, RESET);
 8000e24:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee4 <ResetBus+0xf0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	2104      	movs	r1, #4
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f001 ffe3 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3_RES_GPIO_Port, SGPIO_I2C3_RES_Pin, RESET);
 8000e30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee4 <ResetBus+0xf0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	2102      	movs	r1, #2
 8000e36:	0018      	movs	r0, r3
 8000e38:	f001 ffdd 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_GPIO_Port, SGPIO_I2C2_RES_Pin, RESET);
 8000e3c:	2380      	movs	r3, #128	@ 0x80
 8000e3e:	01db      	lsls	r3, r3, #7
 8000e40:	4827      	ldr	r0, [pc, #156]	@ (8000ee0 <ResetBus+0xec>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	0019      	movs	r1, r3
 8000e46:	f001 ffd6 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_G_GPIO_Port, SGPIO_I2C2_RES_G_Pin, RESET);
 8000e4a:	2380      	movs	r3, #128	@ 0x80
 8000e4c:	019b      	lsls	r3, r3, #6
 8000e4e:	4824      	ldr	r0, [pc, #144]	@ (8000ee0 <ResetBus+0xec>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	0019      	movs	r1, r3
 8000e54:	f001 ffcf 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_I2C2_RES_GPIO_Port, TEMP_I2C2_RES_Pin, RESET);
 8000e58:	4b20      	ldr	r3, [pc, #128]	@ (8000edc <ResetBus+0xe8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f001 ffc9 	bl	8002df6 <HAL_GPIO_WritePin>

	flag_update = 11;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <ResetBus+0xe4>)
 8000e66:	220b      	movs	r2, #11
 8000e68:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TEMP_I2C1_RES_GPIO_Port, TEMP_I2C1_RES_Pin, SET);
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <ResetBus+0xe8>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2104      	movs	r1, #4
 8000e70:	0018      	movs	r0, r3
 8000e72:	f001 ffc0 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_G_GPIO_Port, SGPIO_I2C1_RES_G_Pin, SET);
 8000e76:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <ResetBus+0xe8>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f001 ffba 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_GPIO_Port, SGPIO_I2C1_RES_Pin, SET);
 8000e82:	2380      	movs	r3, #128	@ 0x80
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4816      	ldr	r0, [pc, #88]	@ (8000ee0 <ResetBus+0xec>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	f001 ffb3 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3RES_G_GPIO_Port, SGPIO_I2C3RES_G_Pin, SET);
 8000e90:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <ResetBus+0xf0>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	2104      	movs	r1, #4
 8000e96:	0018      	movs	r0, r3
 8000e98:	f001 ffad 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3_RES_GPIO_Port, SGPIO_I2C3_RES_Pin, SET);
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <ResetBus+0xf0>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f001 ffa7 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_GPIO_Port, SGPIO_I2C2_RES_Pin, SET);
 8000ea8:	2380      	movs	r3, #128	@ 0x80
 8000eaa:	01db      	lsls	r3, r3, #7
 8000eac:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <ResetBus+0xec>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	0019      	movs	r1, r3
 8000eb2:	f001 ffa0 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_G_GPIO_Port, SGPIO_I2C2_RES_G_Pin, SET);
 8000eb6:	2380      	movs	r3, #128	@ 0x80
 8000eb8:	019b      	lsls	r3, r3, #6
 8000eba:	4809      	ldr	r0, [pc, #36]	@ (8000ee0 <ResetBus+0xec>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	0019      	movs	r1, r3
 8000ec0:	f001 ff99 	bl	8002df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_I2C2_RES_GPIO_Port, TEMP_I2C2_RES_Pin, SET);
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <ResetBus+0xe8>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2102      	movs	r1, #2
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f001 ff93 	bl	8002df6 <HAL_GPIO_WritePin>

}
 8000ed0:	46c0      	nop			@ (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	20000279 	.word	0x20000279
 8000edc:	50000c00 	.word	0x50000c00
 8000ee0:	50000800 	.word	0x50000800
 8000ee4:	50000400 	.word	0x50000400

08000ee8 <Set_Led>:

void Set_Led()
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 8000eee:	4b33      	ldr	r3, [pc, #204]	@ (8000fbc <Set_Led+0xd4>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	18db      	adds	r3, r3, r3
 8000ef4:	b299      	uxth	r1, r3
 8000ef6:	4a32      	ldr	r2, [pc, #200]	@ (8000fc0 <Set_Led+0xd8>)
 8000ef8:	4832      	ldr	r0, [pc, #200]	@ (8000fc4 <Set_Led+0xdc>)
 8000efa:	230a      	movs	r3, #10
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2301      	movs	r3, #1
 8000f00:	f002 f866 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 8000f04:	4b30      	ldr	r3, [pc, #192]	@ (8000fc8 <Set_Led+0xe0>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	18db      	adds	r3, r3, r3
 8000f0a:	b299      	uxth	r1, r3
 8000f0c:	4a2f      	ldr	r2, [pc, #188]	@ (8000fcc <Set_Led+0xe4>)
 8000f0e:	482d      	ldr	r0, [pc, #180]	@ (8000fc4 <Set_Led+0xdc>)
 8000f10:	230a      	movs	r3, #10
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2303      	movs	r3, #3
 8000f16:	f002 f85b 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), channel_one, 3, 10);
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc8 <Set_Led+0xe0>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	18db      	adds	r3, r3, r3
 8000f20:	b299      	uxth	r1, r3
 8000f22:	4a2b      	ldr	r2, [pc, #172]	@ (8000fd0 <Set_Led+0xe8>)
 8000f24:	4827      	ldr	r0, [pc, #156]	@ (8000fc4 <Set_Led+0xdc>)
 8000f26:	230a      	movs	r3, #10
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	f002 f850 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 8000f30:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <Set_Led+0xd4>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	18db      	adds	r3, r3, r3
 8000f36:	b299      	uxth	r1, r3
 8000f38:	4a26      	ldr	r2, [pc, #152]	@ (8000fd4 <Set_Led+0xec>)
 8000f3a:	4822      	ldr	r0, [pc, #136]	@ (8000fc4 <Set_Led+0xdc>)
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2301      	movs	r3, #1
 8000f42:	f002 f845 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 8000f46:	4b20      	ldr	r3, [pc, #128]	@ (8000fc8 <Set_Led+0xe0>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	18db      	adds	r3, r3, r3
 8000f4c:	b299      	uxth	r1, r3
 8000f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000fcc <Set_Led+0xe4>)
 8000f50:	481c      	ldr	r0, [pc, #112]	@ (8000fc4 <Set_Led+0xdc>)
 8000f52:	230a      	movs	r3, #10
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2303      	movs	r3, #3
 8000f58:	f002 f83a 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), channel_two, 3, 10);
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <Set_Led+0xe0>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	18db      	adds	r3, r3, r3
 8000f62:	b299      	uxth	r1, r3
 8000f64:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd8 <Set_Led+0xf0>)
 8000f66:	4817      	ldr	r0, [pc, #92]	@ (8000fc4 <Set_Led+0xdc>)
 8000f68:	230a      	movs	r3, #10
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	f002 f82f 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <Set_Led+0xd4>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	18db      	adds	r3, r3, r3
 8000f78:	b299      	uxth	r1, r3
 8000f7a:	4a18      	ldr	r2, [pc, #96]	@ (8000fdc <Set_Led+0xf4>)
 8000f7c:	4811      	ldr	r0, [pc, #68]	@ (8000fc4 <Set_Led+0xdc>)
 8000f7e:	230a      	movs	r3, #10
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	f002 f824 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 8000f88:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <Set_Led+0xe0>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	18db      	adds	r3, r3, r3
 8000f8e:	b299      	uxth	r1, r3
 8000f90:	4a0e      	ldr	r2, [pc, #56]	@ (8000fcc <Set_Led+0xe4>)
 8000f92:	480c      	ldr	r0, [pc, #48]	@ (8000fc4 <Set_Led+0xdc>)
 8000f94:	230a      	movs	r3, #10
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2303      	movs	r3, #3
 8000f9a:	f002 f819 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), channel_three, 3, 10);
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <Set_Led+0xe0>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	18db      	adds	r3, r3, r3
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe0 <Set_Led+0xf8>)
 8000fa8:	4806      	ldr	r0, [pc, #24]	@ (8000fc4 <Set_Led+0xdc>)
 8000faa:	230a      	movs	r3, #10
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2303      	movs	r3, #3
 8000fb0:	f002 f80e 	bl	8002fd0 <HAL_I2C_Master_Transmit>
}
 8000fb4:	46c0      	nop			@ (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	2000004d 	.word	0x2000004d
 8000fc0:	20000038 	.word	0x20000038
 8000fc4:	20000088 	.word	0x20000088
 8000fc8:	2000004b 	.word	0x2000004b
 8000fcc:	20000030 	.word	0x20000030
 8000fd0:	20000054 	.word	0x20000054
 8000fd4:	2000003c 	.word	0x2000003c
 8000fd8:	20000058 	.word	0x20000058
 8000fdc:	20000040 	.word	0x20000040
 8000fe0:	2000005c 	.word	0x2000005c

08000fe4 <Set_Led_On>:

void Set_Led_On()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af02      	add	r7, sp, #8
	flag_update = 5;
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <Set_Led_On+0x5c>)
 8000fec:	2205      	movs	r2, #5
 8000fee:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_IsDeviceReady(&hi2c2, LED_adr << 1, 3, 100) == HAL_OK) {
 8000ff0:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <Set_Led_On+0x60>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	18db      	adds	r3, r3, r3
 8000ff6:	b299      	uxth	r1, r3
 8000ff8:	4813      	ldr	r0, [pc, #76]	@ (8001048 <Set_Led_On+0x64>)
 8000ffa:	2364      	movs	r3, #100	@ 0x64
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	f002 fa19 	bl	8003434 <HAL_I2C_IsDeviceReady>
 8001002:	1e03      	subs	r3, r0, #0
 8001004:	d10b      	bne.n	800101e <Set_Led_On+0x3a>
		HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <Set_Led_On+0x60>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	18db      	adds	r3, r3, r3
 800100c:	b299      	uxth	r1, r3
 800100e:	4a0f      	ldr	r2, [pc, #60]	@ (800104c <Set_Led_On+0x68>)
 8001010:	480d      	ldr	r0, [pc, #52]	@ (8001048 <Set_Led_On+0x64>)
 8001012:	230a      	movs	r3, #10
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2303      	movs	r3, #3
 8001018:	f001 ffda 	bl	8002fd0 <HAL_I2C_Master_Transmit>
 800101c:	e002      	b.n	8001024 <Set_Led_On+0x40>
	} else {
		flag_update = 7;
 800101e:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <Set_Led_On+0x5c>)
 8001020:	2207      	movs	r2, #7
 8001022:	701a      	strb	r2, [r3, #0]
	}


	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), ledbufON, 3, 10);
 8001024:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <Set_Led_On+0x60>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	18db      	adds	r3, r3, r3
 800102a:	b299      	uxth	r1, r3
 800102c:	4a08      	ldr	r2, [pc, #32]	@ (8001050 <Set_Led_On+0x6c>)
 800102e:	4806      	ldr	r0, [pc, #24]	@ (8001048 <Set_Led_On+0x64>)
 8001030:	230a      	movs	r3, #10
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2303      	movs	r3, #3
 8001036:	f001 ffcb 	bl	8002fd0 <HAL_I2C_Master_Transmit>
}
 800103a:	46c0      	nop			@ (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000279 	.word	0x20000279
 8001044:	2000004b 	.word	0x2000004b
 8001048:	20000088 	.word	0x20000088
 800104c:	20000030 	.word	0x20000030
 8001050:	20000044 	.word	0x20000044

08001054 <Set_Led_Off>:

void Set_Led_Off()
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 800105a:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <Set_Led_Off+0x38>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	18db      	adds	r3, r3, r3
 8001060:	b299      	uxth	r1, r3
 8001062:	4a0b      	ldr	r2, [pc, #44]	@ (8001090 <Set_Led_Off+0x3c>)
 8001064:	480b      	ldr	r0, [pc, #44]	@ (8001094 <Set_Led_Off+0x40>)
 8001066:	230a      	movs	r3, #10
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2303      	movs	r3, #3
 800106c:	f001 ffb0 	bl	8002fd0 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), ledbufOFF, 3, 10);
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <Set_Led_Off+0x38>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	18db      	adds	r3, r3, r3
 8001076:	b299      	uxth	r1, r3
 8001078:	4a07      	ldr	r2, [pc, #28]	@ (8001098 <Set_Led_Off+0x44>)
 800107a:	4806      	ldr	r0, [pc, #24]	@ (8001094 <Set_Led_Off+0x40>)
 800107c:	230a      	movs	r3, #10
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2303      	movs	r3, #3
 8001082:	f001 ffa5 	bl	8002fd0 <HAL_I2C_Master_Transmit>

}
 8001086:	46c0      	nop			@ (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2000004b 	.word	0x2000004b
 8001090:	20000030 	.word	0x20000030
 8001094:	20000088 	.word	0x20000088
 8001098:	20000048 	.word	0x20000048

0800109c <Led_Init>:
void Led_Init()
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af02      	add	r7, sp, #8
	flag_update = 1;
 80010a2:	4b36      	ldr	r3, [pc, #216]	@ (800117c <Led_Init+0xe0>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 80010a8:	4b35      	ldr	r3, [pc, #212]	@ (8001180 <Led_Init+0xe4>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	18db      	adds	r3, r3, r3
 80010ae:	b299      	uxth	r1, r3
 80010b0:	4a34      	ldr	r2, [pc, #208]	@ (8001184 <Led_Init+0xe8>)
 80010b2:	4835      	ldr	r0, [pc, #212]	@ (8001188 <Led_Init+0xec>)
 80010b4:	230a      	movs	r3, #10
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2301      	movs	r3, #1
 80010ba:	f001 ff89 	bl	8002fd0 <HAL_I2C_Master_Transmit>
flag_update = 3;
 80010be:	4b2f      	ldr	r3, [pc, #188]	@ (800117c <Led_Init+0xe0>)
 80010c0:	2203      	movs	r2, #3
 80010c2:	701a      	strb	r2, [r3, #0]
Set_Led_On();
 80010c4:	f7ff ff8e 	bl	8000fe4 <Set_Led_On>
HAL_Delay(250);
 80010c8:	20fa      	movs	r0, #250	@ 0xfa
 80010ca:	f001 fa0f 	bl	80024ec <HAL_Delay>

HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 80010ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001180 <Led_Init+0xe4>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	18db      	adds	r3, r3, r3
 80010d4:	b299      	uxth	r1, r3
 80010d6:	4a2d      	ldr	r2, [pc, #180]	@ (800118c <Led_Init+0xf0>)
 80010d8:	482b      	ldr	r0, [pc, #172]	@ (8001188 <Led_Init+0xec>)
 80010da:	230a      	movs	r3, #10
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	f001 ff76 	bl	8002fd0 <HAL_I2C_Master_Transmit>
Set_Led_On();
 80010e4:	f7ff ff7e 	bl	8000fe4 <Set_Led_On>
HAL_Delay(250);
 80010e8:	20fa      	movs	r0, #250	@ 0xfa
 80010ea:	f001 f9ff 	bl	80024ec <HAL_Delay>
HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 80010ee:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <Led_Init+0xe4>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	18db      	adds	r3, r3, r3
 80010f4:	b299      	uxth	r1, r3
 80010f6:	4a26      	ldr	r2, [pc, #152]	@ (8001190 <Led_Init+0xf4>)
 80010f8:	4823      	ldr	r0, [pc, #140]	@ (8001188 <Led_Init+0xec>)
 80010fa:	230a      	movs	r3, #10
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	f001 ff66 	bl	8002fd0 <HAL_I2C_Master_Transmit>
Set_Led_On();
 8001104:	f7ff ff6e 	bl	8000fe4 <Set_Led_On>
HAL_Delay(250);
 8001108:	20fa      	movs	r0, #250	@ 0xfa
 800110a:	f001 f9ef 	bl	80024ec <HAL_Delay>
HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 800110e:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <Led_Init+0xe4>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	18db      	adds	r3, r3, r3
 8001114:	b299      	uxth	r1, r3
 8001116:	4a1b      	ldr	r2, [pc, #108]	@ (8001184 <Led_Init+0xe8>)
 8001118:	481b      	ldr	r0, [pc, #108]	@ (8001188 <Led_Init+0xec>)
 800111a:	230a      	movs	r3, #10
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2301      	movs	r3, #1
 8001120:	f001 ff56 	bl	8002fd0 <HAL_I2C_Master_Transmit>
Set_Led_Off();
 8001124:	f7ff ff96 	bl	8001054 <Set_Led_Off>
HAL_Delay(250);
 8001128:	20fa      	movs	r0, #250	@ 0xfa
 800112a:	f001 f9df 	bl	80024ec <HAL_Delay>
HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <Led_Init+0xe4>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	18db      	adds	r3, r3, r3
 8001134:	b299      	uxth	r1, r3
 8001136:	4a15      	ldr	r2, [pc, #84]	@ (800118c <Led_Init+0xf0>)
 8001138:	4813      	ldr	r0, [pc, #76]	@ (8001188 <Led_Init+0xec>)
 800113a:	230a      	movs	r3, #10
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2301      	movs	r3, #1
 8001140:	f001 ff46 	bl	8002fd0 <HAL_I2C_Master_Transmit>
Set_Led_Off();
 8001144:	f7ff ff86 	bl	8001054 <Set_Led_Off>
HAL_Delay(250);
 8001148:	20fa      	movs	r0, #250	@ 0xfa
 800114a:	f001 f9cf 	bl	80024ec <HAL_Delay>
HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <Led_Init+0xe4>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	18db      	adds	r3, r3, r3
 8001154:	b299      	uxth	r1, r3
 8001156:	4a0e      	ldr	r2, [pc, #56]	@ (8001190 <Led_Init+0xf4>)
 8001158:	480b      	ldr	r0, [pc, #44]	@ (8001188 <Led_Init+0xec>)
 800115a:	230a      	movs	r3, #10
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	f001 ff36 	bl	8002fd0 <HAL_I2C_Master_Transmit>
Set_Led_Off();
 8001164:	f7ff ff76 	bl	8001054 <Set_Led_Off>
HAL_Delay(250);
 8001168:	20fa      	movs	r0, #250	@ 0xfa
 800116a:	f001 f9bf 	bl	80024ec <HAL_Delay>
flag_update = 2;
 800116e:	4b03      	ldr	r3, [pc, #12]	@ (800117c <Led_Init+0xe0>)
 8001170:	2202      	movs	r2, #2
 8001172:	701a      	strb	r2, [r3, #0]
}
 8001174:	46c0      	nop			@ (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	20000279 	.word	0x20000279
 8001180:	2000004d 	.word	0x2000004d
 8001184:	20000038 	.word	0x20000038
 8001188:	20000088 	.word	0x20000088
 800118c:	2000003c 	.word	0x2000003c
 8001190:	20000040 	.word	0x20000040

08001194 <Read_disks_connected>:
}



void Read_disks_connected()
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af02      	add	r7, sp, #8

	ResetBus();
 800119a:	f7ff fe2b 	bl	8000df4 <ResetBus>
	HAL_Delay(10);
 800119e:	200a      	movs	r0, #10
 80011a0:	f001 f9a4 	bl	80024ec <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 80011a4:	4bcf      	ldr	r3, [pc, #828]	@ (80014e4 <Read_disks_connected+0x350>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	18db      	adds	r3, r3, r3
 80011aa:	b299      	uxth	r1, r3
 80011ac:	4ace      	ldr	r2, [pc, #824]	@ (80014e8 <Read_disks_connected+0x354>)
 80011ae:	48cf      	ldr	r0, [pc, #828]	@ (80014ec <Read_disks_connected+0x358>)
 80011b0:	230a      	movs	r3, #10
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	f001 ff0b 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 80011ba:	4bcd      	ldr	r3, [pc, #820]	@ (80014f0 <Read_disks_connected+0x35c>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	001a      	movs	r2, r3
 80011c0:	4bcc      	ldr	r3, [pc, #816]	@ (80014f4 <Read_disks_connected+0x360>)
 80011c2:	0019      	movs	r1, r3
 80011c4:	2001      	movs	r0, #1
 80011c6:	f000 f9a7 	bl	8001518 <Read_Register>


	if (~Buf_PRSTN[0] & 0x02)		//PRSTN F1
 80011ca:	4bca      	ldr	r3, [pc, #808]	@ (80014f4 <Read_disks_connected+0x360>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	001a      	movs	r2, r3
 80011d0:	2302      	movs	r3, #2
 80011d2:	4013      	ands	r3, r2
 80011d4:	d103      	bne.n	80011de <Read_disks_connected+0x4a>
	{
		disks[0].isConnected = 1;
 80011d6:	4bc8      	ldr	r3, [pc, #800]	@ (80014f8 <Read_disks_connected+0x364>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	e002      	b.n	80011e4 <Read_disks_connected+0x50>
	} else {
		disks[0].isConnected = 0;
 80011de:	4bc6      	ldr	r3, [pc, #792]	@ (80014f8 <Read_disks_connected+0x364>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN F2
 80011e4:	4bc3      	ldr	r3, [pc, #780]	@ (80014f4 <Read_disks_connected+0x360>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	001a      	movs	r2, r3
 80011ea:	2308      	movs	r3, #8
 80011ec:	4013      	ands	r3, r2
 80011ee:	d103      	bne.n	80011f8 <Read_disks_connected+0x64>
	{
		disks[1].isConnected = 1;
 80011f0:	4bc1      	ldr	r3, [pc, #772]	@ (80014f8 <Read_disks_connected+0x364>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	711a      	strb	r2, [r3, #4]
 80011f6:	e002      	b.n	80011fe <Read_disks_connected+0x6a>
	} else {
		disks[1].isConnected = 0;
 80011f8:	4bbf      	ldr	r3, [pc, #764]	@ (80014f8 <Read_disks_connected+0x364>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	711a      	strb	r2, [r3, #4]
	}

	if (~Buf_PRSTN[0] & 0x20)		//PRSTN F3
 80011fe:	4bbd      	ldr	r3, [pc, #756]	@ (80014f4 <Read_disks_connected+0x360>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	001a      	movs	r2, r3
 8001204:	2320      	movs	r3, #32
 8001206:	4013      	ands	r3, r2
 8001208:	d103      	bne.n	8001212 <Read_disks_connected+0x7e>
	{
		disks[2].isConnected = 1;
 800120a:	4bbb      	ldr	r3, [pc, #748]	@ (80014f8 <Read_disks_connected+0x364>)
 800120c:	2201      	movs	r2, #1
 800120e:	721a      	strb	r2, [r3, #8]
 8001210:	e002      	b.n	8001218 <Read_disks_connected+0x84>
	} else {
		disks[2].isConnected = 0;
 8001212:	4bb9      	ldr	r3, [pc, #740]	@ (80014f8 <Read_disks_connected+0x364>)
 8001214:	2200      	movs	r2, #0
 8001216:	721a      	strb	r2, [r3, #8]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN F4
 8001218:	4bb6      	ldr	r3, [pc, #728]	@ (80014f4 <Read_disks_connected+0x360>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b25b      	sxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	db03      	blt.n	800122a <Read_disks_connected+0x96>
	{
		disks[3].isConnected = 1;
 8001222:	4bb5      	ldr	r3, [pc, #724]	@ (80014f8 <Read_disks_connected+0x364>)
 8001224:	2201      	movs	r2, #1
 8001226:	731a      	strb	r2, [r3, #12]
 8001228:	e002      	b.n	8001230 <Read_disks_connected+0x9c>
	} else {
		disks[3].isConnected = 0;
 800122a:	4bb3      	ldr	r3, [pc, #716]	@ (80014f8 <Read_disks_connected+0x364>)
 800122c:	2200      	movs	r2, #0
 800122e:	731a      	strb	r2, [r3, #12]
	}

	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 8001230:	4baf      	ldr	r3, [pc, #700]	@ (80014f0 <Read_disks_connected+0x35c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	001a      	movs	r2, r3
 8001236:	4baf      	ldr	r3, [pc, #700]	@ (80014f4 <Read_disks_connected+0x360>)
 8001238:	0019      	movs	r1, r3
 800123a:	2000      	movs	r0, #0
 800123c:	f000 f96c 	bl	8001518 <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN E1
 8001240:	4bac      	ldr	r3, [pc, #688]	@ (80014f4 <Read_disks_connected+0x360>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	001a      	movs	r2, r3
 8001246:	2302      	movs	r3, #2
 8001248:	4013      	ands	r3, r2
 800124a:	d103      	bne.n	8001254 <Read_disks_connected+0xc0>
	{
		disks[4].isConnected = 1;
 800124c:	4baa      	ldr	r3, [pc, #680]	@ (80014f8 <Read_disks_connected+0x364>)
 800124e:	2201      	movs	r2, #1
 8001250:	741a      	strb	r2, [r3, #16]
 8001252:	e002      	b.n	800125a <Read_disks_connected+0xc6>
	} else {
		disks[4].isConnected = 0;
 8001254:	4ba8      	ldr	r3, [pc, #672]	@ (80014f8 <Read_disks_connected+0x364>)
 8001256:	2200      	movs	r2, #0
 8001258:	741a      	strb	r2, [r3, #16]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN E2
 800125a:	4ba6      	ldr	r3, [pc, #664]	@ (80014f4 <Read_disks_connected+0x360>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	001a      	movs	r2, r3
 8001260:	2308      	movs	r3, #8
 8001262:	4013      	ands	r3, r2
 8001264:	d103      	bne.n	800126e <Read_disks_connected+0xda>
	{
		disks[5].isConnected = 1;
 8001266:	4ba4      	ldr	r3, [pc, #656]	@ (80014f8 <Read_disks_connected+0x364>)
 8001268:	2201      	movs	r2, #1
 800126a:	751a      	strb	r2, [r3, #20]
 800126c:	e002      	b.n	8001274 <Read_disks_connected+0xe0>
	} else {
		disks[5].isConnected = 0;
 800126e:	4ba2      	ldr	r3, [pc, #648]	@ (80014f8 <Read_disks_connected+0x364>)
 8001270:	2200      	movs	r2, #0
 8001272:	751a      	strb	r2, [r3, #20]
	}

	if (~Buf_PRSTN[0] & 0x20)		//PRSTN E3
 8001274:	4b9f      	ldr	r3, [pc, #636]	@ (80014f4 <Read_disks_connected+0x360>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	001a      	movs	r2, r3
 800127a:	2320      	movs	r3, #32
 800127c:	4013      	ands	r3, r2
 800127e:	d103      	bne.n	8001288 <Read_disks_connected+0xf4>
	{
		disks[6].isConnected = 1;
 8001280:	4b9d      	ldr	r3, [pc, #628]	@ (80014f8 <Read_disks_connected+0x364>)
 8001282:	2201      	movs	r2, #1
 8001284:	761a      	strb	r2, [r3, #24]
 8001286:	e002      	b.n	800128e <Read_disks_connected+0xfa>
	} else {
		disks[6].isConnected = 0;
 8001288:	4b9b      	ldr	r3, [pc, #620]	@ (80014f8 <Read_disks_connected+0x364>)
 800128a:	2200      	movs	r2, #0
 800128c:	761a      	strb	r2, [r3, #24]
	}

	if (~Buf_PRSTN[0] & 0x80)		//PRSTN E4
 800128e:	4b99      	ldr	r3, [pc, #612]	@ (80014f4 <Read_disks_connected+0x360>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b25b      	sxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	db03      	blt.n	80012a0 <Read_disks_connected+0x10c>

	{
		disks[7].isConnected = 1;
 8001298:	4b97      	ldr	r3, [pc, #604]	@ (80014f8 <Read_disks_connected+0x364>)
 800129a:	2201      	movs	r2, #1
 800129c:	771a      	strb	r2, [r3, #28]
 800129e:	e002      	b.n	80012a6 <Read_disks_connected+0x112>
	} else {
		disks[7].isConnected = 0;
 80012a0:	4b95      	ldr	r3, [pc, #596]	@ (80014f8 <Read_disks_connected+0x364>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	771a      	strb	r2, [r3, #28]
	}

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 80012a6:	4b8f      	ldr	r3, [pc, #572]	@ (80014e4 <Read_disks_connected+0x350>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	18db      	adds	r3, r3, r3
 80012ac:	b299      	uxth	r1, r3
 80012ae:	4a93      	ldr	r2, [pc, #588]	@ (80014fc <Read_disks_connected+0x368>)
 80012b0:	488e      	ldr	r0, [pc, #568]	@ (80014ec <Read_disks_connected+0x358>)
 80012b2:	230a      	movs	r3, #10
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	f001 fe8a 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 80012bc:	4b8c      	ldr	r3, [pc, #560]	@ (80014f0 <Read_disks_connected+0x35c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	001a      	movs	r2, r3
 80012c2:	4b8c      	ldr	r3, [pc, #560]	@ (80014f4 <Read_disks_connected+0x360>)
 80012c4:	0019      	movs	r1, r3
 80012c6:	2001      	movs	r0, #1
 80012c8:	f000 f926 	bl	8001518 <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN D1
 80012cc:	4b89      	ldr	r3, [pc, #548]	@ (80014f4 <Read_disks_connected+0x360>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	001a      	movs	r2, r3
 80012d2:	2302      	movs	r3, #2
 80012d4:	4013      	ands	r3, r2
 80012d6:	d104      	bne.n	80012e2 <Read_disks_connected+0x14e>
	{
		disks[8].isConnected = 1;
 80012d8:	4b87      	ldr	r3, [pc, #540]	@ (80014f8 <Read_disks_connected+0x364>)
 80012da:	2220      	movs	r2, #32
 80012dc:	2101      	movs	r1, #1
 80012de:	5499      	strb	r1, [r3, r2]
 80012e0:	e003      	b.n	80012ea <Read_disks_connected+0x156>
	} else {
		disks[8].isConnected = 0;
 80012e2:	4b85      	ldr	r3, [pc, #532]	@ (80014f8 <Read_disks_connected+0x364>)
 80012e4:	2220      	movs	r2, #32
 80012e6:	2100      	movs	r1, #0
 80012e8:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN D2
 80012ea:	4b82      	ldr	r3, [pc, #520]	@ (80014f4 <Read_disks_connected+0x360>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	001a      	movs	r2, r3
 80012f0:	2308      	movs	r3, #8
 80012f2:	4013      	ands	r3, r2
 80012f4:	d104      	bne.n	8001300 <Read_disks_connected+0x16c>
	{
		disks[9].isConnected = 1;
 80012f6:	4b80      	ldr	r3, [pc, #512]	@ (80014f8 <Read_disks_connected+0x364>)
 80012f8:	2224      	movs	r2, #36	@ 0x24
 80012fa:	2101      	movs	r1, #1
 80012fc:	5499      	strb	r1, [r3, r2]
 80012fe:	e003      	b.n	8001308 <Read_disks_connected+0x174>
	} else {
		disks[9].isConnected = 0;
 8001300:	4b7d      	ldr	r3, [pc, #500]	@ (80014f8 <Read_disks_connected+0x364>)
 8001302:	2224      	movs	r2, #36	@ 0x24
 8001304:	2100      	movs	r1, #0
 8001306:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN D3
 8001308:	4b7a      	ldr	r3, [pc, #488]	@ (80014f4 <Read_disks_connected+0x360>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	001a      	movs	r2, r3
 800130e:	2320      	movs	r3, #32
 8001310:	4013      	ands	r3, r2
 8001312:	d104      	bne.n	800131e <Read_disks_connected+0x18a>
	{
		disks[10].isConnected = 1;
 8001314:	4b78      	ldr	r3, [pc, #480]	@ (80014f8 <Read_disks_connected+0x364>)
 8001316:	2228      	movs	r2, #40	@ 0x28
 8001318:	2101      	movs	r1, #1
 800131a:	5499      	strb	r1, [r3, r2]
 800131c:	e003      	b.n	8001326 <Read_disks_connected+0x192>
	} else {
		disks[10].isConnected = 0;
 800131e:	4b76      	ldr	r3, [pc, #472]	@ (80014f8 <Read_disks_connected+0x364>)
 8001320:	2228      	movs	r2, #40	@ 0x28
 8001322:	2100      	movs	r1, #0
 8001324:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN D4
 8001326:	4b73      	ldr	r3, [pc, #460]	@ (80014f4 <Read_disks_connected+0x360>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b25b      	sxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	db04      	blt.n	800133a <Read_disks_connected+0x1a6>
	{
		disks[11].isConnected = 1;
 8001330:	4b71      	ldr	r3, [pc, #452]	@ (80014f8 <Read_disks_connected+0x364>)
 8001332:	222c      	movs	r2, #44	@ 0x2c
 8001334:	2101      	movs	r1, #1
 8001336:	5499      	strb	r1, [r3, r2]
 8001338:	e003      	b.n	8001342 <Read_disks_connected+0x1ae>
	} else {
		disks[11].isConnected = 0;
 800133a:	4b6f      	ldr	r3, [pc, #444]	@ (80014f8 <Read_disks_connected+0x364>)
 800133c:	222c      	movs	r2, #44	@ 0x2c
 800133e:	2100      	movs	r1, #0
 8001340:	5499      	strb	r1, [r3, r2]
	}
	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 8001342:	4b6b      	ldr	r3, [pc, #428]	@ (80014f0 <Read_disks_connected+0x35c>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	001a      	movs	r2, r3
 8001348:	4b6a      	ldr	r3, [pc, #424]	@ (80014f4 <Read_disks_connected+0x360>)
 800134a:	0019      	movs	r1, r3
 800134c:	2000      	movs	r0, #0
 800134e:	f000 f8e3 	bl	8001518 <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN C1
 8001352:	4b68      	ldr	r3, [pc, #416]	@ (80014f4 <Read_disks_connected+0x360>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	001a      	movs	r2, r3
 8001358:	2302      	movs	r3, #2
 800135a:	4013      	ands	r3, r2
 800135c:	d104      	bne.n	8001368 <Read_disks_connected+0x1d4>
	{
		disks[12].isConnected = 1;
 800135e:	4b66      	ldr	r3, [pc, #408]	@ (80014f8 <Read_disks_connected+0x364>)
 8001360:	2230      	movs	r2, #48	@ 0x30
 8001362:	2101      	movs	r1, #1
 8001364:	5499      	strb	r1, [r3, r2]
 8001366:	e003      	b.n	8001370 <Read_disks_connected+0x1dc>
	} else {
		disks[12].isConnected = 0;
 8001368:	4b63      	ldr	r3, [pc, #396]	@ (80014f8 <Read_disks_connected+0x364>)
 800136a:	2230      	movs	r2, #48	@ 0x30
 800136c:	2100      	movs	r1, #0
 800136e:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN C2
 8001370:	4b60      	ldr	r3, [pc, #384]	@ (80014f4 <Read_disks_connected+0x360>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	001a      	movs	r2, r3
 8001376:	2308      	movs	r3, #8
 8001378:	4013      	ands	r3, r2
 800137a:	d104      	bne.n	8001386 <Read_disks_connected+0x1f2>
	{
		disks[13].isConnected = 1;
 800137c:	4b5e      	ldr	r3, [pc, #376]	@ (80014f8 <Read_disks_connected+0x364>)
 800137e:	2234      	movs	r2, #52	@ 0x34
 8001380:	2101      	movs	r1, #1
 8001382:	5499      	strb	r1, [r3, r2]
 8001384:	e003      	b.n	800138e <Read_disks_connected+0x1fa>
	} else {
		disks[13].isConnected = 0;
 8001386:	4b5c      	ldr	r3, [pc, #368]	@ (80014f8 <Read_disks_connected+0x364>)
 8001388:	2234      	movs	r2, #52	@ 0x34
 800138a:	2100      	movs	r1, #0
 800138c:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN C3
 800138e:	4b59      	ldr	r3, [pc, #356]	@ (80014f4 <Read_disks_connected+0x360>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	001a      	movs	r2, r3
 8001394:	2320      	movs	r3, #32
 8001396:	4013      	ands	r3, r2
 8001398:	d104      	bne.n	80013a4 <Read_disks_connected+0x210>
	{
		disks[14].isConnected = 1;
 800139a:	4b57      	ldr	r3, [pc, #348]	@ (80014f8 <Read_disks_connected+0x364>)
 800139c:	2238      	movs	r2, #56	@ 0x38
 800139e:	2101      	movs	r1, #1
 80013a0:	5499      	strb	r1, [r3, r2]
 80013a2:	e003      	b.n	80013ac <Read_disks_connected+0x218>
	} else {
		disks[14].isConnected = 0;
 80013a4:	4b54      	ldr	r3, [pc, #336]	@ (80014f8 <Read_disks_connected+0x364>)
 80013a6:	2238      	movs	r2, #56	@ 0x38
 80013a8:	2100      	movs	r1, #0
 80013aa:	5499      	strb	r1, [r3, r2]
	}

	if (~Buf_PRSTN[0] & 0x80)		//PRSTN C4
 80013ac:	4b51      	ldr	r3, [pc, #324]	@ (80014f4 <Read_disks_connected+0x360>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db04      	blt.n	80013c0 <Read_disks_connected+0x22c>
	{
		disks[15].isConnected = 1;
 80013b6:	4b50      	ldr	r3, [pc, #320]	@ (80014f8 <Read_disks_connected+0x364>)
 80013b8:	223c      	movs	r2, #60	@ 0x3c
 80013ba:	2101      	movs	r1, #1
 80013bc:	5499      	strb	r1, [r3, r2]
 80013be:	e003      	b.n	80013c8 <Read_disks_connected+0x234>
	} else {
		disks[15].isConnected = 0;
 80013c0:	4b4d      	ldr	r3, [pc, #308]	@ (80014f8 <Read_disks_connected+0x364>)
 80013c2:	223c      	movs	r2, #60	@ 0x3c
 80013c4:	2100      	movs	r1, #0
 80013c6:	5499      	strb	r1, [r3, r2]
	}

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 80013c8:	4b46      	ldr	r3, [pc, #280]	@ (80014e4 <Read_disks_connected+0x350>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	18db      	adds	r3, r3, r3
 80013ce:	b299      	uxth	r1, r3
 80013d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001500 <Read_disks_connected+0x36c>)
 80013d2:	4846      	ldr	r0, [pc, #280]	@ (80014ec <Read_disks_connected+0x358>)
 80013d4:	230a      	movs	r3, #10
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2301      	movs	r3, #1
 80013da:	f001 fdf9 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 80013de:	4b44      	ldr	r3, [pc, #272]	@ (80014f0 <Read_disks_connected+0x35c>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	001a      	movs	r2, r3
 80013e4:	4b43      	ldr	r3, [pc, #268]	@ (80014f4 <Read_disks_connected+0x360>)
 80013e6:	0019      	movs	r1, r3
 80013e8:	2001      	movs	r0, #1
 80013ea:	f000 f895 	bl	8001518 <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN B1
 80013ee:	4b41      	ldr	r3, [pc, #260]	@ (80014f4 <Read_disks_connected+0x360>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	001a      	movs	r2, r3
 80013f4:	2302      	movs	r3, #2
 80013f6:	4013      	ands	r3, r2
 80013f8:	d104      	bne.n	8001404 <Read_disks_connected+0x270>
	{
		disks[16].isConnected = 1;
 80013fa:	4b3f      	ldr	r3, [pc, #252]	@ (80014f8 <Read_disks_connected+0x364>)
 80013fc:	2240      	movs	r2, #64	@ 0x40
 80013fe:	2101      	movs	r1, #1
 8001400:	5499      	strb	r1, [r3, r2]
 8001402:	e003      	b.n	800140c <Read_disks_connected+0x278>
	} else {
		disks[16].isConnected = 0;
 8001404:	4b3c      	ldr	r3, [pc, #240]	@ (80014f8 <Read_disks_connected+0x364>)
 8001406:	2240      	movs	r2, #64	@ 0x40
 8001408:	2100      	movs	r1, #0
 800140a:	5499      	strb	r1, [r3, r2]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN B2
 800140c:	4b39      	ldr	r3, [pc, #228]	@ (80014f4 <Read_disks_connected+0x360>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	001a      	movs	r2, r3
 8001412:	2308      	movs	r3, #8
 8001414:	4013      	ands	r3, r2
 8001416:	d104      	bne.n	8001422 <Read_disks_connected+0x28e>
	{
		disks[17].isConnected = 1;
 8001418:	4b37      	ldr	r3, [pc, #220]	@ (80014f8 <Read_disks_connected+0x364>)
 800141a:	2244      	movs	r2, #68	@ 0x44
 800141c:	2101      	movs	r1, #1
 800141e:	5499      	strb	r1, [r3, r2]
 8001420:	e003      	b.n	800142a <Read_disks_connected+0x296>
	} else {
		disks[17].isConnected = 0;
 8001422:	4b35      	ldr	r3, [pc, #212]	@ (80014f8 <Read_disks_connected+0x364>)
 8001424:	2244      	movs	r2, #68	@ 0x44
 8001426:	2100      	movs	r1, #0
 8001428:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN B3
 800142a:	4b32      	ldr	r3, [pc, #200]	@ (80014f4 <Read_disks_connected+0x360>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	001a      	movs	r2, r3
 8001430:	2320      	movs	r3, #32
 8001432:	4013      	ands	r3, r2
 8001434:	d104      	bne.n	8001440 <Read_disks_connected+0x2ac>
	{
		disks[18].isConnected = 1;
 8001436:	4b30      	ldr	r3, [pc, #192]	@ (80014f8 <Read_disks_connected+0x364>)
 8001438:	2248      	movs	r2, #72	@ 0x48
 800143a:	2101      	movs	r1, #1
 800143c:	5499      	strb	r1, [r3, r2]
 800143e:	e003      	b.n	8001448 <Read_disks_connected+0x2b4>
	} else {
		disks[18].isConnected = 0;
 8001440:	4b2d      	ldr	r3, [pc, #180]	@ (80014f8 <Read_disks_connected+0x364>)
 8001442:	2248      	movs	r2, #72	@ 0x48
 8001444:	2100      	movs	r1, #0
 8001446:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN B4
 8001448:	4b2a      	ldr	r3, [pc, #168]	@ (80014f4 <Read_disks_connected+0x360>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b25b      	sxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	db04      	blt.n	800145c <Read_disks_connected+0x2c8>
	{
		disks[19].isConnected = 1;
 8001452:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <Read_disks_connected+0x364>)
 8001454:	224c      	movs	r2, #76	@ 0x4c
 8001456:	2101      	movs	r1, #1
 8001458:	5499      	strb	r1, [r3, r2]
 800145a:	e003      	b.n	8001464 <Read_disks_connected+0x2d0>
	} else {
		disks[19].isConnected = 0;
 800145c:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <Read_disks_connected+0x364>)
 800145e:	224c      	movs	r2, #76	@ 0x4c
 8001460:	2100      	movs	r1, #0
 8001462:	5499      	strb	r1, [r3, r2]
	}
	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 8001464:	4b22      	ldr	r3, [pc, #136]	@ (80014f0 <Read_disks_connected+0x35c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	001a      	movs	r2, r3
 800146a:	4b22      	ldr	r3, [pc, #136]	@ (80014f4 <Read_disks_connected+0x360>)
 800146c:	0019      	movs	r1, r3
 800146e:	2000      	movs	r0, #0
 8001470:	f000 f852 	bl	8001518 <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN A1
 8001474:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <Read_disks_connected+0x360>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	001a      	movs	r2, r3
 800147a:	2302      	movs	r3, #2
 800147c:	4013      	ands	r3, r2
 800147e:	d104      	bne.n	800148a <Read_disks_connected+0x2f6>
	{
		disks[20].isConnected = 1;
 8001480:	4b1d      	ldr	r3, [pc, #116]	@ (80014f8 <Read_disks_connected+0x364>)
 8001482:	2250      	movs	r2, #80	@ 0x50
 8001484:	2101      	movs	r1, #1
 8001486:	5499      	strb	r1, [r3, r2]
 8001488:	e003      	b.n	8001492 <Read_disks_connected+0x2fe>
	} else {
		disks[20].isConnected = 0;
 800148a:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <Read_disks_connected+0x364>)
 800148c:	2250      	movs	r2, #80	@ 0x50
 800148e:	2100      	movs	r1, #0
 8001490:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN A2
 8001492:	4b18      	ldr	r3, [pc, #96]	@ (80014f4 <Read_disks_connected+0x360>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	001a      	movs	r2, r3
 8001498:	2308      	movs	r3, #8
 800149a:	4013      	ands	r3, r2
 800149c:	d104      	bne.n	80014a8 <Read_disks_connected+0x314>
	{
		disks[21].isConnected = 1;
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <Read_disks_connected+0x364>)
 80014a0:	2254      	movs	r2, #84	@ 0x54
 80014a2:	2101      	movs	r1, #1
 80014a4:	5499      	strb	r1, [r3, r2]
 80014a6:	e003      	b.n	80014b0 <Read_disks_connected+0x31c>
	} else {
		disks[21].isConnected = 0;
 80014a8:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <Read_disks_connected+0x364>)
 80014aa:	2254      	movs	r2, #84	@ 0x54
 80014ac:	2100      	movs	r1, #0
 80014ae:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN A3
 80014b0:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <Read_disks_connected+0x360>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	001a      	movs	r2, r3
 80014b6:	2320      	movs	r3, #32
 80014b8:	4013      	ands	r3, r2
 80014ba:	d104      	bne.n	80014c6 <Read_disks_connected+0x332>
	{
		disks[22].isConnected = 1;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <Read_disks_connected+0x364>)
 80014be:	2258      	movs	r2, #88	@ 0x58
 80014c0:	2101      	movs	r1, #1
 80014c2:	5499      	strb	r1, [r3, r2]
 80014c4:	e003      	b.n	80014ce <Read_disks_connected+0x33a>
	} else {
		disks[22].isConnected = 0;
 80014c6:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <Read_disks_connected+0x364>)
 80014c8:	2258      	movs	r2, #88	@ 0x58
 80014ca:	2100      	movs	r1, #0
 80014cc:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN A4
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <Read_disks_connected+0x360>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db15      	blt.n	8001504 <Read_disks_connected+0x370>
	{
		disks[23].isConnected = 1;
 80014d8:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <Read_disks_connected+0x364>)
 80014da:	225c      	movs	r2, #92	@ 0x5c
 80014dc:	2101      	movs	r1, #1
 80014de:	5499      	strb	r1, [r3, r2]
	} else {
		disks[23].isConnected = 0;
	}
}
 80014e0:	e014      	b.n	800150c <Read_disks_connected+0x378>
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	2000004d 	.word	0x2000004d
 80014e8:	20000038 	.word	0x20000038
 80014ec:	20000088 	.word	0x20000088
 80014f0:	2000004c 	.word	0x2000004c
 80014f4:	2000027c 	.word	0x2000027c
 80014f8:	20000280 	.word	0x20000280
 80014fc:	2000003c 	.word	0x2000003c
 8001500:	20000040 	.word	0x20000040
		disks[23].isConnected = 0;
 8001504:	4b03      	ldr	r3, [pc, #12]	@ (8001514 <Read_disks_connected+0x380>)
 8001506:	225c      	movs	r2, #92	@ 0x5c
 8001508:	2100      	movs	r1, #0
 800150a:	5499      	strb	r1, [r3, r2]
}
 800150c:	46c0      	nop			@ (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	46c0      	nop			@ (mov r8, r8)
 8001514:	20000280 	.word	0x20000280

08001518 <Read_Register>:

void Read_Register(uint8_t register_pointer, uint8_t* receive_buffer, uint16_t adr_rep)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af02      	add	r7, sp, #8
 800151e:	6039      	str	r1, [r7, #0]
 8001520:	0011      	movs	r1, r2
 8001522:	1dfb      	adds	r3, r7, #7
 8001524:	1c02      	adds	r2, r0, #0
 8001526:	701a      	strb	r2, [r3, #0]
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	1c0a      	adds	r2, r1, #0
 800152c:	801a      	strh	r2, [r3, #0]
	//set pointer to register

	HAL_I2C_Master_Transmit(&hi2c2, (adr_rep << 1), &register_pointer, 1, 10);
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	18db      	adds	r3, r3, r3
 8001534:	b299      	uxth	r1, r3
 8001536:	1dfa      	adds	r2, r7, #7
 8001538:	480a      	ldr	r0, [pc, #40]	@ (8001564 <Read_Register+0x4c>)
 800153a:	230a      	movs	r3, #10
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2301      	movs	r3, #1
 8001540:	f001 fd46 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	//receive data to receive_buffer
	HAL_I2C_Master_Receive(&hi2c2, (adr_rep << 1), receive_buffer, 1, 10);
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	18db      	adds	r3, r3, r3
 800154a:	b299      	uxth	r1, r3
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <Read_Register+0x4c>)
 8001550:	230a      	movs	r3, #10
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2301      	movs	r3, #1
 8001556:	f001 fe65 	bl	8003224 <HAL_I2C_Master_Receive>

}
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	46bd      	mov	sp, r7
 800155e:	b002      	add	sp, #8
 8001560:	bd80      	pop	{r7, pc}
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	20000088 	.word	0x20000088

08001568 <UpdateLEDStates>:

void UpdateLEDStates()
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
	static uint8_t blinkState = 0; // Состояние мигания (0 или 1)
	blinkState = !blinkState;     // �?нвертируем состояние каждые 125 мс (4 Гц)
 800156e:	4ba5      	ldr	r3, [pc, #660]	@ (8001804 <UpdateLEDStates+0x29c>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	425a      	negs	r2, r3
 8001574:	4153      	adcs	r3, r2
 8001576:	b2db      	uxtb	r3, r3
 8001578:	001a      	movs	r2, r3
 800157a:	4ba2      	ldr	r3, [pc, #648]	@ (8001804 <UpdateLEDStates+0x29c>)
 800157c:	701a      	strb	r2, [r3, #0]

	// Очищаем буферы каналов
	channel_one[1] = 0xFF; // Все биты установлены в 1 (светодиоды выключены)
 800157e:	4ba2      	ldr	r3, [pc, #648]	@ (8001808 <UpdateLEDStates+0x2a0>)
 8001580:	22ff      	movs	r2, #255	@ 0xff
 8001582:	705a      	strb	r2, [r3, #1]
	channel_one[2] = 0xFF;
 8001584:	4ba0      	ldr	r3, [pc, #640]	@ (8001808 <UpdateLEDStates+0x2a0>)
 8001586:	22ff      	movs	r2, #255	@ 0xff
 8001588:	709a      	strb	r2, [r3, #2]
	channel_two[1] = 0xFF;
 800158a:	4ba0      	ldr	r3, [pc, #640]	@ (800180c <UpdateLEDStates+0x2a4>)
 800158c:	22ff      	movs	r2, #255	@ 0xff
 800158e:	705a      	strb	r2, [r3, #1]
	channel_two[2] = 0xFF;
 8001590:	4b9e      	ldr	r3, [pc, #632]	@ (800180c <UpdateLEDStates+0x2a4>)
 8001592:	22ff      	movs	r2, #255	@ 0xff
 8001594:	709a      	strb	r2, [r3, #2]
	channel_three[1] = 0xFF;
 8001596:	4b9e      	ldr	r3, [pc, #632]	@ (8001810 <UpdateLEDStates+0x2a8>)
 8001598:	22ff      	movs	r2, #255	@ 0xff
 800159a:	705a      	strb	r2, [r3, #1]
	channel_three[2] = 0xFF;
 800159c:	4b9c      	ldr	r3, [pc, #624]	@ (8001810 <UpdateLEDStates+0x2a8>)
 800159e:	22ff      	movs	r2, #255	@ 0xff
 80015a0:	709a      	strb	r2, [r3, #2]

	// Обновляем состояние светодиодов для каждого диска
	for (int i = 0; i < MAX_DISKS; ++i) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	e1e2      	b.n	800196e <UpdateLEDStates+0x406>
		if (disks[i].isConnected) {
 80015a8:	4b9a      	ldr	r3, [pc, #616]	@ (8001814 <UpdateLEDStates+0x2ac>)
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	0092      	lsls	r2, r2, #2
 80015ae:	5cd3      	ldrb	r3, [r2, r3]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d100      	bne.n	80015b6 <UpdateLEDStates+0x4e>
 80015b4:	e1d8      	b.n	8001968 <UpdateLEDStates+0x400>
			// Определяем, какой канал использовать
			uint8_t *channel;
			uint8_t greenBit;
			uint8_t redBit;

			if (i < 8) {
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b07      	cmp	r3, #7
 80015ba:	dc4e      	bgt.n	800165a <UpdateLEDStates+0xf2>
				channel = channel_one;
 80015bc:	4b92      	ldr	r3, [pc, #584]	@ (8001808 <UpdateLEDStates+0x2a0>)
 80015be:	60bb      	str	r3, [r7, #8]
				if (i < 4) {
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	dc24      	bgt.n	8001610 <UpdateLEDStates+0xa8>
					// Диски 0-3: первый байт
					greenBit = (i == 0) ? 6 : (i == 1) ? 4 : (i == 2) ? 2 : 1;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00b      	beq.n	80015e4 <UpdateLEDStates+0x7c>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d006      	beq.n	80015e0 <UpdateLEDStates+0x78>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d101      	bne.n	80015dc <UpdateLEDStates+0x74>
 80015d8:	2302      	movs	r3, #2
 80015da:	e004      	b.n	80015e6 <UpdateLEDStates+0x7e>
 80015dc:	2301      	movs	r3, #1
 80015de:	e002      	b.n	80015e6 <UpdateLEDStates+0x7e>
 80015e0:	2304      	movs	r3, #4
 80015e2:	e000      	b.n	80015e6 <UpdateLEDStates+0x7e>
 80015e4:	2306      	movs	r3, #6
 80015e6:	1dfa      	adds	r2, r7, #7
 80015e8:	7013      	strb	r3, [r2, #0]
					redBit = (i == 0) ? 7 : (i == 1) ? 5 : (i == 2) ? 3 : 0;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00b      	beq.n	8001608 <UpdateLEDStates+0xa0>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d006      	beq.n	8001604 <UpdateLEDStates+0x9c>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d101      	bne.n	8001600 <UpdateLEDStates+0x98>
 80015fc:	2303      	movs	r3, #3
 80015fe:	e004      	b.n	800160a <UpdateLEDStates+0xa2>
 8001600:	2300      	movs	r3, #0
 8001602:	e002      	b.n	800160a <UpdateLEDStates+0xa2>
 8001604:	2305      	movs	r3, #5
 8001606:	e000      	b.n	800160a <UpdateLEDStates+0xa2>
 8001608:	2307      	movs	r3, #7
 800160a:	1dba      	adds	r2, r7, #6
 800160c:	7013      	strb	r3, [r2, #0]
 800160e:	e0c4      	b.n	800179a <UpdateLEDStates+0x232>
				} else {
					// Диски 4-7: второй байт
					greenBit = (i == 4) ? 7 : (i == 5) ? 4 : (i == 6) ? 3 : 1;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b04      	cmp	r3, #4
 8001614:	d00b      	beq.n	800162e <UpdateLEDStates+0xc6>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2b05      	cmp	r3, #5
 800161a:	d006      	beq.n	800162a <UpdateLEDStates+0xc2>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b06      	cmp	r3, #6
 8001620:	d101      	bne.n	8001626 <UpdateLEDStates+0xbe>
 8001622:	2303      	movs	r3, #3
 8001624:	e004      	b.n	8001630 <UpdateLEDStates+0xc8>
 8001626:	2301      	movs	r3, #1
 8001628:	e002      	b.n	8001630 <UpdateLEDStates+0xc8>
 800162a:	2304      	movs	r3, #4
 800162c:	e000      	b.n	8001630 <UpdateLEDStates+0xc8>
 800162e:	2307      	movs	r3, #7
 8001630:	1dfa      	adds	r2, r7, #7
 8001632:	7013      	strb	r3, [r2, #0]
					redBit = (i == 4) ? 6 : (i == 5) ? 5 : (i == 6) ? 2 : 0;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b04      	cmp	r3, #4
 8001638:	d00b      	beq.n	8001652 <UpdateLEDStates+0xea>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b05      	cmp	r3, #5
 800163e:	d006      	beq.n	800164e <UpdateLEDStates+0xe6>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b06      	cmp	r3, #6
 8001644:	d101      	bne.n	800164a <UpdateLEDStates+0xe2>
 8001646:	2302      	movs	r3, #2
 8001648:	e004      	b.n	8001654 <UpdateLEDStates+0xec>
 800164a:	2300      	movs	r3, #0
 800164c:	e002      	b.n	8001654 <UpdateLEDStates+0xec>
 800164e:	2305      	movs	r3, #5
 8001650:	e000      	b.n	8001654 <UpdateLEDStates+0xec>
 8001652:	2306      	movs	r3, #6
 8001654:	1dba      	adds	r2, r7, #6
 8001656:	7013      	strb	r3, [r2, #0]
 8001658:	e09f      	b.n	800179a <UpdateLEDStates+0x232>
				}
			} else if (i < 16) {
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	dc4e      	bgt.n	80016fe <UpdateLEDStates+0x196>
				channel = channel_two;
 8001660:	4b6a      	ldr	r3, [pc, #424]	@ (800180c <UpdateLEDStates+0x2a4>)
 8001662:	60bb      	str	r3, [r7, #8]
				if (i < 12) {
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2b0b      	cmp	r3, #11
 8001668:	dc24      	bgt.n	80016b4 <UpdateLEDStates+0x14c>
					// Диски 8-11: первый байт
					greenBit = (i == 8) ? 6 : (i == 9) ? 5 : (i == 10) ? 2 : 1;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2b08      	cmp	r3, #8
 800166e:	d00b      	beq.n	8001688 <UpdateLEDStates+0x120>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b09      	cmp	r3, #9
 8001674:	d006      	beq.n	8001684 <UpdateLEDStates+0x11c>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b0a      	cmp	r3, #10
 800167a:	d101      	bne.n	8001680 <UpdateLEDStates+0x118>
 800167c:	2302      	movs	r3, #2
 800167e:	e004      	b.n	800168a <UpdateLEDStates+0x122>
 8001680:	2301      	movs	r3, #1
 8001682:	e002      	b.n	800168a <UpdateLEDStates+0x122>
 8001684:	2305      	movs	r3, #5
 8001686:	e000      	b.n	800168a <UpdateLEDStates+0x122>
 8001688:	2306      	movs	r3, #6
 800168a:	1dfa      	adds	r2, r7, #7
 800168c:	7013      	strb	r3, [r2, #0]
					redBit = (i == 8) ? 7 : (i == 9) ? 4 : (i == 10) ? 3 : 0;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2b08      	cmp	r3, #8
 8001692:	d00b      	beq.n	80016ac <UpdateLEDStates+0x144>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b09      	cmp	r3, #9
 8001698:	d006      	beq.n	80016a8 <UpdateLEDStates+0x140>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b0a      	cmp	r3, #10
 800169e:	d101      	bne.n	80016a4 <UpdateLEDStates+0x13c>
 80016a0:	2303      	movs	r3, #3
 80016a2:	e004      	b.n	80016ae <UpdateLEDStates+0x146>
 80016a4:	2300      	movs	r3, #0
 80016a6:	e002      	b.n	80016ae <UpdateLEDStates+0x146>
 80016a8:	2304      	movs	r3, #4
 80016aa:	e000      	b.n	80016ae <UpdateLEDStates+0x146>
 80016ac:	2307      	movs	r3, #7
 80016ae:	1dba      	adds	r2, r7, #6
 80016b0:	7013      	strb	r3, [r2, #0]
 80016b2:	e072      	b.n	800179a <UpdateLEDStates+0x232>
				} else {
					// Диски 12-15: второй байт
					greenBit = (i == 12) ? 6 : (i == 13) ? 4 : (i == 14) ? 2 : 1;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b0c      	cmp	r3, #12
 80016b8:	d00b      	beq.n	80016d2 <UpdateLEDStates+0x16a>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2b0d      	cmp	r3, #13
 80016be:	d006      	beq.n	80016ce <UpdateLEDStates+0x166>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b0e      	cmp	r3, #14
 80016c4:	d101      	bne.n	80016ca <UpdateLEDStates+0x162>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e004      	b.n	80016d4 <UpdateLEDStates+0x16c>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e002      	b.n	80016d4 <UpdateLEDStates+0x16c>
 80016ce:	2304      	movs	r3, #4
 80016d0:	e000      	b.n	80016d4 <UpdateLEDStates+0x16c>
 80016d2:	2306      	movs	r3, #6
 80016d4:	1dfa      	adds	r2, r7, #7
 80016d6:	7013      	strb	r3, [r2, #0]
					redBit = (i == 12) ? 7 : (i == 13) ? 5 : (i == 14) ? 3 : 0;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b0c      	cmp	r3, #12
 80016dc:	d00b      	beq.n	80016f6 <UpdateLEDStates+0x18e>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2b0d      	cmp	r3, #13
 80016e2:	d006      	beq.n	80016f2 <UpdateLEDStates+0x18a>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b0e      	cmp	r3, #14
 80016e8:	d101      	bne.n	80016ee <UpdateLEDStates+0x186>
 80016ea:	2303      	movs	r3, #3
 80016ec:	e004      	b.n	80016f8 <UpdateLEDStates+0x190>
 80016ee:	2300      	movs	r3, #0
 80016f0:	e002      	b.n	80016f8 <UpdateLEDStates+0x190>
 80016f2:	2305      	movs	r3, #5
 80016f4:	e000      	b.n	80016f8 <UpdateLEDStates+0x190>
 80016f6:	2307      	movs	r3, #7
 80016f8:	1dba      	adds	r2, r7, #6
 80016fa:	7013      	strb	r3, [r2, #0]
 80016fc:	e04d      	b.n	800179a <UpdateLEDStates+0x232>
				}
			} else {
				channel = channel_three;
 80016fe:	4b44      	ldr	r3, [pc, #272]	@ (8001810 <UpdateLEDStates+0x2a8>)
 8001700:	60bb      	str	r3, [r7, #8]
				if (i < 20) {
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2b13      	cmp	r3, #19
 8001706:	dc24      	bgt.n	8001752 <UpdateLEDStates+0x1ea>
					// Диски 16-19: первый байт
					greenBit = (i == 16) ? 7 : (i == 17) ? 5 : (i == 18) ? 3 : 1;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b10      	cmp	r3, #16
 800170c:	d00b      	beq.n	8001726 <UpdateLEDStates+0x1be>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2b11      	cmp	r3, #17
 8001712:	d006      	beq.n	8001722 <UpdateLEDStates+0x1ba>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b12      	cmp	r3, #18
 8001718:	d101      	bne.n	800171e <UpdateLEDStates+0x1b6>
 800171a:	2303      	movs	r3, #3
 800171c:	e004      	b.n	8001728 <UpdateLEDStates+0x1c0>
 800171e:	2301      	movs	r3, #1
 8001720:	e002      	b.n	8001728 <UpdateLEDStates+0x1c0>
 8001722:	2305      	movs	r3, #5
 8001724:	e000      	b.n	8001728 <UpdateLEDStates+0x1c0>
 8001726:	2307      	movs	r3, #7
 8001728:	1dfa      	adds	r2, r7, #7
 800172a:	7013      	strb	r3, [r2, #0]
					redBit = (i == 16) ? 6 : (i == 17) ? 4 : (i == 18) ? 2 : 0;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b10      	cmp	r3, #16
 8001730:	d00b      	beq.n	800174a <UpdateLEDStates+0x1e2>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b11      	cmp	r3, #17
 8001736:	d006      	beq.n	8001746 <UpdateLEDStates+0x1de>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b12      	cmp	r3, #18
 800173c:	d101      	bne.n	8001742 <UpdateLEDStates+0x1da>
 800173e:	2302      	movs	r3, #2
 8001740:	e004      	b.n	800174c <UpdateLEDStates+0x1e4>
 8001742:	2300      	movs	r3, #0
 8001744:	e002      	b.n	800174c <UpdateLEDStates+0x1e4>
 8001746:	2304      	movs	r3, #4
 8001748:	e000      	b.n	800174c <UpdateLEDStates+0x1e4>
 800174a:	2306      	movs	r3, #6
 800174c:	1dba      	adds	r2, r7, #6
 800174e:	7013      	strb	r3, [r2, #0]
 8001750:	e023      	b.n	800179a <UpdateLEDStates+0x232>
				} else {
					// Диски 20-23: второй байт
					greenBit = (i == 20) ? 6 : (i == 21) ? 4 : (i == 22) ? 2 : 1;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b14      	cmp	r3, #20
 8001756:	d00b      	beq.n	8001770 <UpdateLEDStates+0x208>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b15      	cmp	r3, #21
 800175c:	d006      	beq.n	800176c <UpdateLEDStates+0x204>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b16      	cmp	r3, #22
 8001762:	d101      	bne.n	8001768 <UpdateLEDStates+0x200>
 8001764:	2302      	movs	r3, #2
 8001766:	e004      	b.n	8001772 <UpdateLEDStates+0x20a>
 8001768:	2301      	movs	r3, #1
 800176a:	e002      	b.n	8001772 <UpdateLEDStates+0x20a>
 800176c:	2304      	movs	r3, #4
 800176e:	e000      	b.n	8001772 <UpdateLEDStates+0x20a>
 8001770:	2306      	movs	r3, #6
 8001772:	1dfa      	adds	r2, r7, #7
 8001774:	7013      	strb	r3, [r2, #0]
					redBit = (i == 20) ? 7 : (i == 21) ? 5 : (i == 22) ? 3 : 0;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2b14      	cmp	r3, #20
 800177a:	d00b      	beq.n	8001794 <UpdateLEDStates+0x22c>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b15      	cmp	r3, #21
 8001780:	d006      	beq.n	8001790 <UpdateLEDStates+0x228>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2b16      	cmp	r3, #22
 8001786:	d101      	bne.n	800178c <UpdateLEDStates+0x224>
 8001788:	2303      	movs	r3, #3
 800178a:	e004      	b.n	8001796 <UpdateLEDStates+0x22e>
 800178c:	2300      	movs	r3, #0
 800178e:	e002      	b.n	8001796 <UpdateLEDStates+0x22e>
 8001790:	2305      	movs	r3, #5
 8001792:	e000      	b.n	8001796 <UpdateLEDStates+0x22e>
 8001794:	2307      	movs	r3, #7
 8001796:	1dba      	adds	r2, r7, #6
 8001798:	7013      	strb	r3, [r2, #0]
				}
			}
			   uint8_t byteIndex = (i < 4 || (i >= 8 && i < 12) || (i >= 16 && i < 20)) ? 2 : 1;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2b03      	cmp	r3, #3
 800179e:	dd0b      	ble.n	80017b8 <UpdateLEDStates+0x250>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b07      	cmp	r3, #7
 80017a4:	dd02      	ble.n	80017ac <UpdateLEDStates+0x244>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b0b      	cmp	r3, #11
 80017aa:	dd05      	ble.n	80017b8 <UpdateLEDStates+0x250>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	dd04      	ble.n	80017bc <UpdateLEDStates+0x254>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b13      	cmp	r3, #19
 80017b6:	dc01      	bgt.n	80017bc <UpdateLEDStates+0x254>
 80017b8:	2202      	movs	r2, #2
 80017ba:	e000      	b.n	80017be <UpdateLEDStates+0x256>
 80017bc:	2201      	movs	r2, #1
 80017be:	1d7b      	adds	r3, r7, #5
 80017c0:	701a      	strb	r2, [r3, #0]
			// Управление светодиодами
			if (disks[i].error) {
 80017c2:	4a14      	ldr	r2, [pc, #80]	@ (8001814 <UpdateLEDStates+0x2ac>)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	18d3      	adds	r3, r2, r3
 80017ca:	3302      	adds	r3, #2
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d022      	beq.n	8001818 <UpdateLEDStates+0x2b0>
				// Ошибка: красный светодиод горит постоянно
				channel[byteIndex] &= ~(1 << (redBit % 8)); // Включаем красный светодиод
 80017d2:	1d7b      	adds	r3, r7, #5
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	18d3      	adds	r3, r2, r3
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	1dba      	adds	r2, r7, #6
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	2107      	movs	r1, #7
 80017e4:	400a      	ands	r2, r1
 80017e6:	2101      	movs	r1, #1
 80017e8:	4091      	lsls	r1, r2
 80017ea:	000a      	movs	r2, r1
 80017ec:	b252      	sxtb	r2, r2
 80017ee:	43d2      	mvns	r2, r2
 80017f0:	b252      	sxtb	r2, r2
 80017f2:	4013      	ands	r3, r2
 80017f4:	b259      	sxtb	r1, r3
 80017f6:	1d7b      	adds	r3, r7, #5
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	18d3      	adds	r3, r2, r3
 80017fe:	b2ca      	uxtb	r2, r1
 8001800:	701a      	strb	r2, [r3, #0]
 8001802:	e0b1      	b.n	8001968 <UpdateLEDStates+0x400>
 8001804:	20000430 	.word	0x20000430
 8001808:	20000054 	.word	0x20000054
 800180c:	20000058 	.word	0x20000058
 8001810:	2000005c 	.word	0x2000005c
 8001814:	20000280 	.word	0x20000280
			} else if (disks[i].locate) {
 8001818:	4a5a      	ldr	r2, [pc, #360]	@ (8001984 <UpdateLEDStates+0x41c>)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	18d3      	adds	r3, r2, r3
 8001820:	3303      	adds	r3, #3
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d061      	beq.n	80018ec <UpdateLEDStates+0x384>
				// Локация: зеленый и красный светодиоды мигают
				if (blinkState) {
 8001828:	4b57      	ldr	r3, [pc, #348]	@ (8001988 <UpdateLEDStates+0x420>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d030      	beq.n	8001892 <UpdateLEDStates+0x32a>
					channel[byteIndex] &= ~(1 << (greenBit % 8)); // Включаем зеленый светодиод
 8001830:	1d7b      	adds	r3, r7, #5
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	18d3      	adds	r3, r2, r3
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b25b      	sxtb	r3, r3
 800183c:	1dfa      	adds	r2, r7, #7
 800183e:	7812      	ldrb	r2, [r2, #0]
 8001840:	2107      	movs	r1, #7
 8001842:	400a      	ands	r2, r1
 8001844:	2101      	movs	r1, #1
 8001846:	4091      	lsls	r1, r2
 8001848:	000a      	movs	r2, r1
 800184a:	b252      	sxtb	r2, r2
 800184c:	43d2      	mvns	r2, r2
 800184e:	b252      	sxtb	r2, r2
 8001850:	4013      	ands	r3, r2
 8001852:	b259      	sxtb	r1, r3
 8001854:	1d7b      	adds	r3, r7, #5
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	18d3      	adds	r3, r2, r3
 800185c:	b2ca      	uxtb	r2, r1
 800185e:	701a      	strb	r2, [r3, #0]
					channel[byteIndex] &= ~(1 << (redBit % 8)); // Включаем красный светодиод
 8001860:	1d7b      	adds	r3, r7, #5
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	18d3      	adds	r3, r2, r3
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b25b      	sxtb	r3, r3
 800186c:	1dba      	adds	r2, r7, #6
 800186e:	7812      	ldrb	r2, [r2, #0]
 8001870:	2107      	movs	r1, #7
 8001872:	400a      	ands	r2, r1
 8001874:	2101      	movs	r1, #1
 8001876:	4091      	lsls	r1, r2
 8001878:	000a      	movs	r2, r1
 800187a:	b252      	sxtb	r2, r2
 800187c:	43d2      	mvns	r2, r2
 800187e:	b252      	sxtb	r2, r2
 8001880:	4013      	ands	r3, r2
 8001882:	b259      	sxtb	r1, r3
 8001884:	1d7b      	adds	r3, r7, #5
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	18d3      	adds	r3, r2, r3
 800188c:	b2ca      	uxtb	r2, r1
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	e06a      	b.n	8001968 <UpdateLEDStates+0x400>
				} else {
					channel[byteIndex] |= (1 << (greenBit % 8));  // Выключаем зеленый светодиод
 8001892:	1d7b      	adds	r3, r7, #5
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	18d3      	adds	r3, r2, r3
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b25a      	sxtb	r2, r3
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2107      	movs	r1, #7
 80018a4:	400b      	ands	r3, r1
 80018a6:	2101      	movs	r1, #1
 80018a8:	4099      	lsls	r1, r3
 80018aa:	000b      	movs	r3, r1
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	4313      	orrs	r3, r2
 80018b0:	b259      	sxtb	r1, r3
 80018b2:	1d7b      	adds	r3, r7, #5
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	18d3      	adds	r3, r2, r3
 80018ba:	b2ca      	uxtb	r2, r1
 80018bc:	701a      	strb	r2, [r3, #0]
					channel[byteIndex] |= (1 << (redBit % 8));  // Выключаем красный светодиод
 80018be:	1d7b      	adds	r3, r7, #5
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	18d3      	adds	r3, r2, r3
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b25a      	sxtb	r2, r3
 80018ca:	1dbb      	adds	r3, r7, #6
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2107      	movs	r1, #7
 80018d0:	400b      	ands	r3, r1
 80018d2:	2101      	movs	r1, #1
 80018d4:	4099      	lsls	r1, r3
 80018d6:	000b      	movs	r3, r1
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	4313      	orrs	r3, r2
 80018dc:	b259      	sxtb	r1, r3
 80018de:	1d7b      	adds	r3, r7, #5
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	18d3      	adds	r3, r2, r3
 80018e6:	b2ca      	uxtb	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	e03d      	b.n	8001968 <UpdateLEDStates+0x400>
				}
			} else if (disks[i].activity) {
 80018ec:	4a25      	ldr	r2, [pc, #148]	@ (8001984 <UpdateLEDStates+0x41c>)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	18d3      	adds	r3, r2, r3
 80018f4:	3301      	adds	r3, #1
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d035      	beq.n	8001968 <UpdateLEDStates+0x400>
				// Активность: зеленый светодиод мигает
				if (blinkState) {
 80018fc:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <UpdateLEDStates+0x420>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d01b      	beq.n	800193c <UpdateLEDStates+0x3d4>
					if(i )
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d02e      	beq.n	8001968 <UpdateLEDStates+0x400>
					channel[byteIndex] &= ~(1 << (greenBit % 8)); // Включаем красный светодиод
 800190a:	1d7b      	adds	r3, r7, #5
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	18d3      	adds	r3, r2, r3
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b25b      	sxtb	r3, r3
 8001916:	1dfa      	adds	r2, r7, #7
 8001918:	7812      	ldrb	r2, [r2, #0]
 800191a:	2107      	movs	r1, #7
 800191c:	400a      	ands	r2, r1
 800191e:	2101      	movs	r1, #1
 8001920:	4091      	lsls	r1, r2
 8001922:	000a      	movs	r2, r1
 8001924:	b252      	sxtb	r2, r2
 8001926:	43d2      	mvns	r2, r2
 8001928:	b252      	sxtb	r2, r2
 800192a:	4013      	ands	r3, r2
 800192c:	b259      	sxtb	r1, r3
 800192e:	1d7b      	adds	r3, r7, #5
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	18d3      	adds	r3, r2, r3
 8001936:	b2ca      	uxtb	r2, r1
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	e015      	b.n	8001968 <UpdateLEDStates+0x400>
				} else {
					channel[byteIndex] |= (1 << (greenBit % 8));  // Выключаем красный светодиод
 800193c:	1d7b      	adds	r3, r7, #5
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	18d3      	adds	r3, r2, r3
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	b25a      	sxtb	r2, r3
 8001948:	1dfb      	adds	r3, r7, #7
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2107      	movs	r1, #7
 800194e:	400b      	ands	r3, r1
 8001950:	2101      	movs	r1, #1
 8001952:	4099      	lsls	r1, r3
 8001954:	000b      	movs	r3, r1
 8001956:	b25b      	sxtb	r3, r3
 8001958:	4313      	orrs	r3, r2
 800195a:	b259      	sxtb	r1, r3
 800195c:	1d7b      	adds	r3, r7, #5
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	18d3      	adds	r3, r2, r3
 8001964:	b2ca      	uxtb	r2, r1
 8001966:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_DISKS; ++i) {
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3301      	adds	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2b17      	cmp	r3, #23
 8001972:	dc00      	bgt.n	8001976 <UpdateLEDStates+0x40e>
 8001974:	e618      	b.n	80015a8 <UpdateLEDStates+0x40>
			}
		}
	}

	// Обновляем светодиоды на расширителе
	Set_Led();
 8001976:	f7ff fab7 	bl	8000ee8 <Set_Led>
}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b004      	add	sp, #16
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			@ (mov r8, r8)
 8001984:	20000280 	.word	0x20000280
 8001988:	20000430 	.word	0x20000430

0800198c <InitializeDiskPins>:

void InitializeDiskPins()

{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	// Диск 0
	diskPins[0].activPort = F_DRIVE1_ACTIVITY_GPIO_Port;
 8001990:	4b5c      	ldr	r3, [pc, #368]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001992:	4a5d      	ldr	r2, [pc, #372]	@ (8001b08 <InitializeDiskPins+0x17c>)
 8001994:	601a      	str	r2, [r3, #0]
	diskPins[0].activPin = F_DRIVE1_ACTIVITY_Pin;
 8001996:	4b5b      	ldr	r3, [pc, #364]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001998:	2240      	movs	r2, #64	@ 0x40
 800199a:	809a      	strh	r2, [r3, #4]
	// Диск 1
	diskPins[1].activPort = F_DRIVE2_ACTIVITY_GPIO_Port;
 800199c:	4b59      	ldr	r3, [pc, #356]	@ (8001b04 <InitializeDiskPins+0x178>)
 800199e:	4a5a      	ldr	r2, [pc, #360]	@ (8001b08 <InitializeDiskPins+0x17c>)
 80019a0:	609a      	str	r2, [r3, #8]
	diskPins[1].activPin = F_DRIVE2_ACTIVITY_Pin;
 80019a2:	4b58      	ldr	r3, [pc, #352]	@ (8001b04 <InitializeDiskPins+0x178>)
 80019a4:	2220      	movs	r2, #32
 80019a6:	819a      	strh	r2, [r3, #12]
	// Диск 2
	diskPins[2].activPort = F_DRIVE3_ACTIVITY_GPIO_Port;
 80019a8:	4b56      	ldr	r3, [pc, #344]	@ (8001b04 <InitializeDiskPins+0x178>)
 80019aa:	4a57      	ldr	r2, [pc, #348]	@ (8001b08 <InitializeDiskPins+0x17c>)
 80019ac:	611a      	str	r2, [r3, #16]
	diskPins[2].activPin = F_DRIVE3_ACTIVITY_Pin;
 80019ae:	4b55      	ldr	r3, [pc, #340]	@ (8001b04 <InitializeDiskPins+0x178>)
 80019b0:	2210      	movs	r2, #16
 80019b2:	829a      	strh	r2, [r3, #20]
	// �? так далее для остальных дисков...
	diskPins[3].activPort = F_DRIVE4_ACTIVITY_GPIO_Port;
 80019b4:	4b53      	ldr	r3, [pc, #332]	@ (8001b04 <InitializeDiskPins+0x178>)
 80019b6:	4a54      	ldr	r2, [pc, #336]	@ (8001b08 <InitializeDiskPins+0x17c>)
 80019b8:	619a      	str	r2, [r3, #24]
	diskPins[3].activPin = F_DRIVE4_ACTIVITY_Pin;
 80019ba:	4b52      	ldr	r3, [pc, #328]	@ (8001b04 <InitializeDiskPins+0x178>)
 80019bc:	2208      	movs	r2, #8
 80019be:	839a      	strh	r2, [r3, #28]
	diskPins[4].activPort = E_DRIVE1_ACTIVITY_GPIO_Port;
 80019c0:	4b50      	ldr	r3, [pc, #320]	@ (8001b04 <InitializeDiskPins+0x178>)
 80019c2:	4a52      	ldr	r2, [pc, #328]	@ (8001b0c <InitializeDiskPins+0x180>)
 80019c4:	621a      	str	r2, [r3, #32]
	diskPins[4].activPin = E_DRIVE1_ACTIVITY_Pin;
 80019c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001b04 <InitializeDiskPins+0x178>)
 80019c8:	2280      	movs	r2, #128	@ 0x80
 80019ca:	00d2      	lsls	r2, r2, #3
 80019cc:	849a      	strh	r2, [r3, #36]	@ 0x24
	diskPins[5].activPort = E_DRIVE2_ACTIVITY_GPIO_Port;
 80019ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001b04 <InitializeDiskPins+0x178>)
 80019d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001b08 <InitializeDiskPins+0x17c>)
 80019d2:	629a      	str	r2, [r3, #40]	@ 0x28
	diskPins[5].activPin = E_DRIVE2_ACTIVITY_Pin;
 80019d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001b04 <InitializeDiskPins+0x178>)
 80019d6:	2280      	movs	r2, #128	@ 0x80
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	859a      	strh	r2, [r3, #44]	@ 0x2c
	diskPins[6].activPort = E_DRIVE3_ACTIVITY_GPIO_Port;
 80019dc:	4b49      	ldr	r3, [pc, #292]	@ (8001b04 <InitializeDiskPins+0x178>)
 80019de:	4a4a      	ldr	r2, [pc, #296]	@ (8001b08 <InitializeDiskPins+0x17c>)
 80019e0:	631a      	str	r2, [r3, #48]	@ 0x30
	diskPins[6].activPin = E_DRIVE3_ACTIVITY_Pin;
 80019e2:	4b48      	ldr	r3, [pc, #288]	@ (8001b04 <InitializeDiskPins+0x178>)
 80019e4:	2280      	movs	r2, #128	@ 0x80
 80019e6:	0052      	lsls	r2, r2, #1
 80019e8:	869a      	strh	r2, [r3, #52]	@ 0x34
	diskPins[7].activPort = E_DRIVE4_ACTIVITY_GPIO_Port;
 80019ea:	4b46      	ldr	r3, [pc, #280]	@ (8001b04 <InitializeDiskPins+0x178>)
 80019ec:	4a46      	ldr	r2, [pc, #280]	@ (8001b08 <InitializeDiskPins+0x17c>)
 80019ee:	639a      	str	r2, [r3, #56]	@ 0x38
	diskPins[7].activPin = E_DRIVE4_ACTIVITY_Pin;
 80019f0:	4b44      	ldr	r3, [pc, #272]	@ (8001b04 <InitializeDiskPins+0x178>)
 80019f2:	2280      	movs	r2, #128	@ 0x80
 80019f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
	diskPins[8].activPort = D_DRIVE1_ACTIVITY_GPIO_Port;
 80019f6:	4b43      	ldr	r3, [pc, #268]	@ (8001b04 <InitializeDiskPins+0x178>)
 80019f8:	22a0      	movs	r2, #160	@ 0xa0
 80019fa:	05d2      	lsls	r2, r2, #23
 80019fc:	641a      	str	r2, [r3, #64]	@ 0x40
	diskPins[8].activPin = D_DRIVE1_ACTIVITY_Pin;
 80019fe:	4b41      	ldr	r3, [pc, #260]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a00:	2244      	movs	r2, #68	@ 0x44
 8001a02:	2180      	movs	r1, #128	@ 0x80
 8001a04:	00c9      	lsls	r1, r1, #3
 8001a06:	5299      	strh	r1, [r3, r2]
	diskPins[9].activPort = D_DRIVE2_ACTIVITY_GPIO_Port;
 8001a08:	4b3e      	ldr	r3, [pc, #248]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a0a:	22a0      	movs	r2, #160	@ 0xa0
 8001a0c:	05d2      	lsls	r2, r2, #23
 8001a0e:	649a      	str	r2, [r3, #72]	@ 0x48
	diskPins[9].activPin = D_DRIVE2_ACTIVITY_Pin;
 8001a10:	4b3c      	ldr	r3, [pc, #240]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a12:	224c      	movs	r2, #76	@ 0x4c
 8001a14:	2180      	movs	r1, #128	@ 0x80
 8001a16:	0109      	lsls	r1, r1, #4
 8001a18:	5299      	strh	r1, [r3, r2]
	diskPins[10].activPort = D_DRIVE3_ACTIVITY_GPIO_Port;
 8001a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a1c:	22a0      	movs	r2, #160	@ 0xa0
 8001a1e:	05d2      	lsls	r2, r2, #23
 8001a20:	651a      	str	r2, [r3, #80]	@ 0x50
	diskPins[10].activPin = D_DRIVE3_ACTIVITY_Pin;
 8001a22:	4b38      	ldr	r3, [pc, #224]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a24:	2254      	movs	r2, #84	@ 0x54
 8001a26:	2180      	movs	r1, #128	@ 0x80
 8001a28:	0149      	lsls	r1, r1, #5
 8001a2a:	5299      	strh	r1, [r3, r2]
	diskPins[11].activPort = D_DRIVE4_ACTIVITY_GPIO_Port;
 8001a2c:	4b35      	ldr	r3, [pc, #212]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a2e:	4a37      	ldr	r2, [pc, #220]	@ (8001b0c <InitializeDiskPins+0x180>)
 8001a30:	659a      	str	r2, [r3, #88]	@ 0x58
	diskPins[11].activPin = D_DRIVE4_ACTIVITY_Pin;
 8001a32:	4b34      	ldr	r3, [pc, #208]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a34:	225c      	movs	r2, #92	@ 0x5c
 8001a36:	4936      	ldr	r1, [pc, #216]	@ (8001b10 <InitializeDiskPins+0x184>)
 8001a38:	5299      	strh	r1, [r3, r2]
	diskPins[12].activPort = C_DRIVE1_ACTIVITY_GPIO_Port;
 8001a3a:	4b32      	ldr	r3, [pc, #200]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a3c:	4a33      	ldr	r2, [pc, #204]	@ (8001b0c <InitializeDiskPins+0x180>)
 8001a3e:	661a      	str	r2, [r3, #96]	@ 0x60
	diskPins[12].activPin = C_DRIVE1_ACTIVITY_Pin;
 8001a40:	4b30      	ldr	r3, [pc, #192]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a42:	2264      	movs	r2, #100	@ 0x64
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	5299      	strh	r1, [r3, r2]
	diskPins[13].activPort = C_DRIVE2_ACTIVITY_GPIO_Port;
 8001a48:	4b2e      	ldr	r3, [pc, #184]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a4a:	4a30      	ldr	r2, [pc, #192]	@ (8001b0c <InitializeDiskPins+0x180>)
 8001a4c:	669a      	str	r2, [r3, #104]	@ 0x68
	diskPins[13].activPin = C_DRIVE2_ACTIVITY_Pin;
 8001a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a50:	226c      	movs	r2, #108	@ 0x6c
 8001a52:	2180      	movs	r1, #128	@ 0x80
 8001a54:	5299      	strh	r1, [r3, r2]
	diskPins[14].activPort = C_DRIVE3_ACTIVITY_GPIO_Port;
 8001a56:	4b2b      	ldr	r3, [pc, #172]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a58:	4a2e      	ldr	r2, [pc, #184]	@ (8001b14 <InitializeDiskPins+0x188>)
 8001a5a:	671a      	str	r2, [r3, #112]	@ 0x70
	diskPins[14].activPin = C_DRIVE3_ACTIVITY_Pin;
 8001a5c:	4b29      	ldr	r3, [pc, #164]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a5e:	2274      	movs	r2, #116	@ 0x74
 8001a60:	2180      	movs	r1, #128	@ 0x80
 8001a62:	0049      	lsls	r1, r1, #1
 8001a64:	5299      	strh	r1, [r3, r2]
	diskPins[15].activPort = C_DRIVE4_ACTIVITY_GPIO_Port;
 8001a66:	4b27      	ldr	r3, [pc, #156]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a68:	4a2a      	ldr	r2, [pc, #168]	@ (8001b14 <InitializeDiskPins+0x188>)
 8001a6a:	679a      	str	r2, [r3, #120]	@ 0x78
	diskPins[15].activPin = C_DRIVE4_ACTIVITY_Pin;
 8001a6c:	4b25      	ldr	r3, [pc, #148]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a6e:	227c      	movs	r2, #124	@ 0x7c
 8001a70:	2180      	movs	r1, #128	@ 0x80
 8001a72:	0089      	lsls	r1, r1, #2
 8001a74:	5299      	strh	r1, [r3, r2]
	diskPins[16].activPort = B_DRIVE1_ACTIVITY_GPIO_Port;
 8001a76:	4b23      	ldr	r3, [pc, #140]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a78:	2180      	movs	r1, #128	@ 0x80
 8001a7a:	22a0      	movs	r2, #160	@ 0xa0
 8001a7c:	05d2      	lsls	r2, r2, #23
 8001a7e:	505a      	str	r2, [r3, r1]
	diskPins[16].activPin = B_DRIVE1_ACTIVITY_Pin;
 8001a80:	4b20      	ldr	r3, [pc, #128]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a82:	2284      	movs	r2, #132	@ 0x84
 8001a84:	2180      	movs	r1, #128	@ 0x80
 8001a86:	0089      	lsls	r1, r1, #2
 8001a88:	5299      	strh	r1, [r3, r2]
	diskPins[17].activPort = B_DRIVE2_ACTIVITY_GPIO_Port;
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a8c:	2288      	movs	r2, #136	@ 0x88
 8001a8e:	491f      	ldr	r1, [pc, #124]	@ (8001b0c <InitializeDiskPins+0x180>)
 8001a90:	5099      	str	r1, [r3, r2]
	diskPins[17].activPin = B_DRIVE2_ACTIVITY_Pin;
 8001a92:	4b1c      	ldr	r3, [pc, #112]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a94:	228c      	movs	r2, #140	@ 0x8c
 8001a96:	2108      	movs	r1, #8
 8001a98:	5299      	strh	r1, [r3, r2]
	diskPins[18].activPort = B_DRIVE3_ACTIVITY_GPIO_Port;
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001a9c:	2290      	movs	r2, #144	@ 0x90
 8001a9e:	491b      	ldr	r1, [pc, #108]	@ (8001b0c <InitializeDiskPins+0x180>)
 8001aa0:	5099      	str	r1, [r3, r2]
	diskPins[18].activPin = B_DRIVE3_ACTIVITY_Pin;
 8001aa2:	4b18      	ldr	r3, [pc, #96]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001aa4:	2294      	movs	r2, #148	@ 0x94
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	5299      	strh	r1, [r3, r2]
	diskPins[19].activPort = B_DRIVE4_ACTIVITY_GPIO_Port;
 8001aaa:	4b16      	ldr	r3, [pc, #88]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001aac:	2298      	movs	r2, #152	@ 0x98
 8001aae:	4917      	ldr	r1, [pc, #92]	@ (8001b0c <InitializeDiskPins+0x180>)
 8001ab0:	5099      	str	r1, [r3, r2]
	diskPins[19].activPin = B_DRIVE4_ACTIVITY_Pin;
 8001ab2:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001ab4:	229c      	movs	r2, #156	@ 0x9c
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	5299      	strh	r1, [r3, r2]
	diskPins[20].activPort = A_DRIVE1_ACTIVITY_GPIO_Port;
 8001aba:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001abc:	22a0      	movs	r2, #160	@ 0xa0
 8001abe:	4912      	ldr	r1, [pc, #72]	@ (8001b08 <InitializeDiskPins+0x17c>)
 8001ac0:	5099      	str	r1, [r3, r2]
	diskPins[20].activPin = A_DRIVE1_ACTIVITY_Pin;
 8001ac2:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001ac4:	22a4      	movs	r2, #164	@ 0xa4
 8001ac6:	2180      	movs	r1, #128	@ 0x80
 8001ac8:	0189      	lsls	r1, r1, #6
 8001aca:	5299      	strh	r1, [r3, r2]
	diskPins[21].activPort = A_DRIVE2_ACTIVITY_GPIO_Port;
 8001acc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001ace:	22a8      	movs	r2, #168	@ 0xa8
 8001ad0:	490d      	ldr	r1, [pc, #52]	@ (8001b08 <InitializeDiskPins+0x17c>)
 8001ad2:	5099      	str	r1, [r3, r2]
	diskPins[21].activPin = A_DRIVE2_ACTIVITY_Pin;
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001ad6:	22ac      	movs	r2, #172	@ 0xac
 8001ad8:	2180      	movs	r1, #128	@ 0x80
 8001ada:	01c9      	lsls	r1, r1, #7
 8001adc:	5299      	strh	r1, [r3, r2]
	diskPins[22].activPort = A_DRIVE3_ACTIVITY_GPIO_Port;
 8001ade:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001ae0:	22b0      	movs	r2, #176	@ 0xb0
 8001ae2:	4909      	ldr	r1, [pc, #36]	@ (8001b08 <InitializeDiskPins+0x17c>)
 8001ae4:	5099      	str	r1, [r3, r2]
	diskPins[22].activPin = A_DRIVE3_ACTIVITY_Pin;
 8001ae6:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001ae8:	22b4      	movs	r2, #180	@ 0xb4
 8001aea:	4909      	ldr	r1, [pc, #36]	@ (8001b10 <InitializeDiskPins+0x184>)
 8001aec:	5299      	strh	r1, [r3, r2]
	diskPins[23].activPort = A_DRIVE3_ACTIVITY_GPIO_Port;
 8001aee:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001af0:	22b8      	movs	r2, #184	@ 0xb8
 8001af2:	4905      	ldr	r1, [pc, #20]	@ (8001b08 <InitializeDiskPins+0x17c>)
 8001af4:	5099      	str	r1, [r3, r2]
	diskPins[23].activPin = A_DRIVE3_ACTIVITY_Pin;
 8001af6:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <InitializeDiskPins+0x178>)
 8001af8:	22bc      	movs	r2, #188	@ 0xbc
 8001afa:	4905      	ldr	r1, [pc, #20]	@ (8001b10 <InitializeDiskPins+0x184>)
 8001afc:	5299      	strh	r1, [r3, r2]

}
 8001afe:	46c0      	nop			@ (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	200002e0 	.word	0x200002e0
 8001b08:	50000400 	.word	0x50000400
 8001b0c:	50000800 	.word	0x50000800
 8001b10:	ffff8000 	.word	0xffff8000
 8001b14:	50000c00 	.word	0x50000c00

08001b18 <PowerOnAdapter>:
	}
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET); // Выключить светодиод после мигания
}

void PowerOnAdapter(uint8_t adapter_number)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	0002      	movs	r2, r0
 8001b20:	1dfb      	adds	r3, r7, #7
 8001b22:	701a      	strb	r2, [r3, #0]


	if (adapter_number == 1 && adapter1_state != 1) {
 8001b24:	1dfb      	adds	r3, r7, #7
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d13b      	bne.n	8001ba4 <PowerOnAdapter+0x8c>
 8001b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c24 <PowerOnAdapter+0x10c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d037      	beq.n	8001ba4 <PowerOnAdapter+0x8c>
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 8001b34:	4b3c      	ldr	r3, [pc, #240]	@ (8001c28 <PowerOnAdapter+0x110>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	2110      	movs	r1, #16
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f001 f95b 	bl	8002df6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MB1_PWR_SW_GPIO_Port, MB1_PWR_SW_Pin, SET);
 8001b40:	4b39      	ldr	r3, [pc, #228]	@ (8001c28 <PowerOnAdapter+0x110>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	2120      	movs	r1, #32
 8001b46:	0018      	movs	r0, r3
 8001b48:	f001 f955 	bl	8002df6 <HAL_GPIO_WritePin>
		adapter1_state = 1;
 8001b4c:	4b35      	ldr	r3, [pc, #212]	@ (8001c24 <PowerOnAdapter+0x10c>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8001b52:	2064      	movs	r0, #100	@ 0x64
 8001b54:	f000 fcca 	bl	80024ec <HAL_Delay>
		flag_update = 13;
 8001b58:	4b34      	ldr	r3, [pc, #208]	@ (8001c2c <PowerOnAdapter+0x114>)
 8001b5a:	220d      	movs	r2, #13
 8001b5c:	701a      	strb	r2, [r3, #0]
		ResetBus();
 8001b5e:	f7ff f949 	bl	8000df4 <ResetBus>
		flag_update = 14;
 8001b62:	4b32      	ldr	r3, [pc, #200]	@ (8001c2c <PowerOnAdapter+0x114>)
 8001b64:	220e      	movs	r2, #14
 8001b66:	701a      	strb	r2, [r3, #0]
		if(BP_ON == 0) Led_Init();
 8001b68:	4b31      	ldr	r3, [pc, #196]	@ (8001c30 <PowerOnAdapter+0x118>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <PowerOnAdapter+0x5c>
 8001b70:	f7ff fa94 	bl	800109c <Led_Init>
		Set_devslp();
 8001b74:	f7ff f824 	bl	8000bc0 <Set_devslp>
		HAL_TIM_Base_Start_IT(&htim1);
 8001b78:	4b2e      	ldr	r3, [pc, #184]	@ (8001c34 <PowerOnAdapter+0x11c>)
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f003 fe30 	bl	80057e0 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim2);
 8001b80:	4b2d      	ldr	r3, [pc, #180]	@ (8001c38 <PowerOnAdapter+0x120>)
 8001b82:	0018      	movs	r0, r3
 8001b84:	f003 fe2c 	bl	80057e0 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001b88:	4b2c      	ldr	r3, [pc, #176]	@ (8001c3c <PowerOnAdapter+0x124>)
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f003 fe28 	bl	80057e0 <HAL_TIM_Base_Start_IT>
		Counter_sgpio_timeout = 0;
 8001b90:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <PowerOnAdapter+0x128>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
		StartBlinking(&led1, 2, 10000); // Мигание 2 Гц, 10 сек
 8001b96:	4a2b      	ldr	r2, [pc, #172]	@ (8001c44 <PowerOnAdapter+0x12c>)
 8001b98:	4b2b      	ldr	r3, [pc, #172]	@ (8001c48 <PowerOnAdapter+0x130>)
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7fe fbd3 	bl	8000348 <StartBlinking>
 8001ba2:	e038      	b.n	8001c16 <PowerOnAdapter+0xfe>
	} else if (adapter_number == 2 && adapter2_state != 1) {
 8001ba4:	1dfb      	adds	r3, r7, #7
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d134      	bne.n	8001c16 <PowerOnAdapter+0xfe>
 8001bac:	4b27      	ldr	r3, [pc, #156]	@ (8001c4c <PowerOnAdapter+0x134>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d030      	beq.n	8001c16 <PowerOnAdapter+0xfe>
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <PowerOnAdapter+0x110>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	2110      	movs	r1, #16
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f001 f91b 	bl	8002df6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MB2_PWR_SW_GPIO_Port, MB2_PWR_SW_Pin, SET);
 8001bc0:	4b23      	ldr	r3, [pc, #140]	@ (8001c50 <PowerOnAdapter+0x138>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	2140      	movs	r1, #64	@ 0x40
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f001 f915 	bl	8002df6 <HAL_GPIO_WritePin>
		adapter2_state = 1;
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c4c <PowerOnAdapter+0x134>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8001bd2:	2064      	movs	r0, #100	@ 0x64
 8001bd4:	f000 fc8a 	bl	80024ec <HAL_Delay>
		ResetBus();
 8001bd8:	f7ff f90c 	bl	8000df4 <ResetBus>
		if(BP_ON == 0) Led_Init();
 8001bdc:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <PowerOnAdapter+0x118>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <PowerOnAdapter+0xd0>
 8001be4:	f7ff fa5a 	bl	800109c <Led_Init>
		Set_devslp();
 8001be8:	f7fe ffea 	bl	8000bc0 <Set_devslp>
		HAL_TIM_Base_Start_IT(&htim1);
 8001bec:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <PowerOnAdapter+0x11c>)
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f003 fdf6 	bl	80057e0 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim2);
 8001bf4:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <PowerOnAdapter+0x120>)
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f003 fdf2 	bl	80057e0 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <PowerOnAdapter+0x124>)
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f003 fdee 	bl	80057e0 <HAL_TIM_Base_Start_IT>
		Counter_sgpio_timeout = 0;
 8001c04:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <PowerOnAdapter+0x128>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
		StartBlinking(&led2, 2, 10000); // Мигание 2 Гц, 10 сек
 8001c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001c44 <PowerOnAdapter+0x12c>)
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <PowerOnAdapter+0x13c>)
 8001c0e:	2102      	movs	r1, #2
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7fe fb99 	bl	8000348 <StartBlinking>
	}
	UpdateCPU_PSON(); // Обновляем состояние CPU_PSON
 8001c16:	f000 f84f 	bl	8001cb8 <UpdateCPU_PSON>
}
 8001c1a:	46c0      	nop			@ (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b002      	add	sp, #8
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	46c0      	nop			@ (mov r8, r8)
 8001c24:	200003a0 	.word	0x200003a0
 8001c28:	50000800 	.word	0x50000800
 8001c2c:	20000279 	.word	0x20000279
 8001c30:	200003a2 	.word	0x200003a2
 8001c34:	20000194 	.word	0x20000194
 8001c38:	200001e0 	.word	0x200001e0
 8001c3c:	2000022c 	.word	0x2000022c
 8001c40:	200003a4 	.word	0x200003a4
 8001c44:	00002710 	.word	0x00002710
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	200003a1 	.word	0x200003a1
 8001c50:	50000c00 	.word	0x50000c00
 8001c54:	20000018 	.word	0x20000018

08001c58 <PowerOffAdapter>:

void PowerOffAdapter(uint8_t adapter_number)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	0002      	movs	r2, r0
 8001c60:	1dfb      	adds	r3, r7, #7
 8001c62:	701a      	strb	r2, [r3, #0]
	if (adapter_number == 1) {
 8001c64:	1dfb      	adds	r3, r7, #7
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d109      	bne.n	8001c80 <PowerOffAdapter+0x28>
		HAL_GPIO_WritePin(MB1_PWR_SW_GPIO_Port, MB1_PWR_SW_Pin, RESET);
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <PowerOffAdapter+0x50>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2120      	movs	r1, #32
 8001c72:	0018      	movs	r0, r3
 8001c74:	f001 f8bf 	bl	8002df6 <HAL_GPIO_WritePin>
		adapter1_state = 0;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <PowerOffAdapter+0x54>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	e00c      	b.n	8001c9a <PowerOffAdapter+0x42>
	} else if (adapter_number == 2) {
 8001c80:	1dfb      	adds	r3, r7, #7
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d108      	bne.n	8001c9a <PowerOffAdapter+0x42>
		HAL_GPIO_WritePin(MB2_PWR_SW_GPIO_Port, MB2_PWR_SW_Pin, RESET);
 8001c88:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <PowerOffAdapter+0x58>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2140      	movs	r1, #64	@ 0x40
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f001 f8b1 	bl	8002df6 <HAL_GPIO_WritePin>
		adapter2_state = 0;
 8001c94:	4b07      	ldr	r3, [pc, #28]	@ (8001cb4 <PowerOffAdapter+0x5c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
	}
	UpdateCPU_PSON(); // Обновляем состояние CPU_PSON
 8001c9a:	f000 f80d 	bl	8001cb8 <UpdateCPU_PSON>
}
 8001c9e:	46c0      	nop			@ (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b002      	add	sp, #8
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			@ (mov r8, r8)
 8001ca8:	50000800 	.word	0x50000800
 8001cac:	200003a0 	.word	0x200003a0
 8001cb0:	50000c00 	.word	0x50000c00
 8001cb4:	200003a1 	.word	0x200003a1

08001cb8 <UpdateCPU_PSON>:

void UpdateCPU_PSON()
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	if (adapter1_state == 1 || adapter2_state == 1) {
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <UpdateCPU_PSON+0x44>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d003      	beq.n	8001ccc <UpdateCPU_PSON+0x14>
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <UpdateCPU_PSON+0x48>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d109      	bne.n	8001ce0 <UpdateCPU_PSON+0x28>
		// Если хотя бы один адаптер включен, выставляем CPU_PSON в 1
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <UpdateCPU_PSON+0x4c>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2110      	movs	r1, #16
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f001 f88f 	bl	8002df6 <HAL_GPIO_WritePin>
		BP_ON = 1;
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <UpdateCPU_PSON+0x50>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	e009      	b.n	8001cf4 <UpdateCPU_PSON+0x3c>
	} else {
		// Если оба адаптера выключены, выставляем CPU_PSON в 0
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, RESET);
 8001ce0:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <UpdateCPU_PSON+0x4c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2110      	movs	r1, #16
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f001 f885 	bl	8002df6 <HAL_GPIO_WritePin>
		BP_ON = 0;
 8001cec:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <UpdateCPU_PSON+0x50>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
	}
}
 8001cf2:	46c0      	nop			@ (mov r8, r8)
 8001cf4:	46c0      	nop			@ (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			@ (mov r8, r8)
 8001cfc:	200003a0 	.word	0x200003a0
 8001d00:	200003a1 	.word	0x200003a1
 8001d04:	50000800 	.word	0x50000800
 8001d08:	200003a2 	.word	0x200003a2

08001d0c <RebootAdapter>:

void RebootAdapter(uint8_t adapter_number, uint8_t is_hard_reboot)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	0002      	movs	r2, r0
 8001d14:	1dfb      	adds	r3, r7, #7
 8001d16:	701a      	strb	r2, [r3, #0]
 8001d18:	1dbb      	adds	r3, r7, #6
 8001d1a:	1c0a      	adds	r2, r1, #0
 8001d1c:	701a      	strb	r2, [r3, #0]

	PowerOffAdapter(adapter_number);
 8001d1e:	1dfb      	adds	r3, r7, #7
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	0018      	movs	r0, r3
 8001d24:	f7ff ff98 	bl	8001c58 <PowerOffAdapter>
	if (adapter_number == 1)StartBlinking(&led1, 4, 5000);
 8001d28:	1dfb      	adds	r3, r7, #7
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d106      	bne.n	8001d3e <RebootAdapter+0x32>
 8001d30:	4a10      	ldr	r2, [pc, #64]	@ (8001d74 <RebootAdapter+0x68>)
 8001d32:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <RebootAdapter+0x6c>)
 8001d34:	2104      	movs	r1, #4
 8001d36:	0018      	movs	r0, r3
 8001d38:	f7fe fb06 	bl	8000348 <StartBlinking>
 8001d3c:	e005      	b.n	8001d4a <RebootAdapter+0x3e>
	else StartBlinking(&led2, 4, 5000);// Мигание 4 Гц, 5 сек
 8001d3e:	4a0d      	ldr	r2, [pc, #52]	@ (8001d74 <RebootAdapter+0x68>)
 8001d40:	4b0e      	ldr	r3, [pc, #56]	@ (8001d7c <RebootAdapter+0x70>)
 8001d42:	2104      	movs	r1, #4
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7fe faff 	bl	8000348 <StartBlinking>
	HAL_Delay(is_hard_reboot ? 1000 : 500); // Задержка для hard/soft reboot
 8001d4a:	1dbb      	adds	r3, r7, #6
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <RebootAdapter+0x4c>
 8001d52:	23fa      	movs	r3, #250	@ 0xfa
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	e001      	b.n	8001d5c <RebootAdapter+0x50>
 8001d58:	23fa      	movs	r3, #250	@ 0xfa
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f000 fbc5 	bl	80024ec <HAL_Delay>
	PowerOnAdapter(adapter_number);
 8001d62:	1dfb      	adds	r3, r7, #7
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	0018      	movs	r0, r3
 8001d68:	f7ff fed6 	bl	8001b18 <PowerOnAdapter>
}
 8001d6c:	46c0      	nop			@ (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	00001388 	.word	0x00001388
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000018 	.word	0x20000018

08001d80 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) // 8 раз в секунду
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d102      	bne.n	8001d98 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		UpdateLEDStates();
 8001d92:	f7ff fbe9 	bl	8001568 <UpdateLEDStates>
																HAL_TIM_Base_Stop_IT(&htim2);

															}
														}
			}
}
 8001d96:	e02d      	b.n	8001df4 <HAL_TIM_PeriodElapsedCallback+0x74>
		if (htim->Instance == TIM2) // 4 раза в секунду
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2380      	movs	r3, #128	@ 0x80
 8001d9e:	05db      	lsls	r3, r3, #23
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d027      	beq.n	8001df4 <HAL_TIM_PeriodElapsedCallback+0x74>
			if (htim->Instance == TIM3) // 1 раз в секунду
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a15      	ldr	r2, [pc, #84]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d122      	bne.n	8001df4 <HAL_TIM_PeriodElapsedCallback+0x74>
				Read_disks_connected();
 8001dae:	f7ff f9f1 	bl	8001194 <Read_disks_connected>
				if(sgpio_started == 0 && (adapter1_state == 1 || adapter2_state == 1))
 8001db2:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d11c      	bne.n	8001df4 <HAL_TIM_PeriodElapsedCallback+0x74>
 8001dba:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d003      	beq.n	8001dca <HAL_TIM_PeriodElapsedCallback+0x4a>
 8001dc2:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d114      	bne.n	8001df4 <HAL_TIM_PeriodElapsedCallback+0x74>
															++Counter_sgpio_timeout;
 8001dca:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001dd4:	701a      	strb	r2, [r3, #0]
															if (Counter_sgpio_timeout > 250 && sgpio_started == 0)
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2bfa      	cmp	r3, #250	@ 0xfa
 8001ddc:	d90a      	bls.n	8001df4 <HAL_TIM_PeriodElapsedCallback+0x74>
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_TIM_PeriodElapsedCallback+0x74>
																sgpio_timeout = 1;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
																HAL_TIM_Base_Stop_IT(&htim2);
 8001dec:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001dee:	0018      	movs	r0, r3
 8001df0:	f003 fd52 	bl	8005898 <HAL_TIM_Base_Stop_IT>
}
 8001df4:	46c0      	nop			@ (mov r8, r8)
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b002      	add	sp, #8
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40012c00 	.word	0x40012c00
 8001e00:	40000400 	.word	0x40000400
 8001e04:	200003a3 	.word	0x200003a3
 8001e08:	200003a0 	.word	0x200003a0
 8001e0c:	200003a1 	.word	0x200003a1
 8001e10:	200003a4 	.word	0x200003a4
 8001e14:	200003a5 	.word	0x200003a5
 8001e18:	200001e0 	.word	0x200001e0

08001e1c <ProcessPins>:

void ProcessPins(uint8_t diskIndex)
{
 8001e1c:	b5b0      	push	{r4, r5, r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	0002      	movs	r2, r0
 8001e24:	1dfb      	adds	r3, r7, #7
 8001e26:	701a      	strb	r2, [r3, #0]

	if (sgpio_started != 1 && disks[diskIndex].isConnected == 1)
 8001e28:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee0 <ProcessPins+0xc4>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d052      	beq.n	8001ed6 <ProcessPins+0xba>
 8001e30:	1dfb      	adds	r3, r7, #7
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee4 <ProcessPins+0xc8>)
 8001e36:	0092      	lsls	r2, r2, #2
 8001e38:	5cd3      	ldrb	r3, [r2, r3]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d14b      	bne.n	8001ed6 <ProcessPins+0xba>
	{
		GPIO_PinState activState = HAL_GPIO_ReadPin(diskPins[diskIndex].activPort, diskPins[diskIndex].activPin);
 8001e3e:	1dfb      	adds	r3, r7, #7
 8001e40:	781a      	ldrb	r2, [r3, #0]
 8001e42:	4b29      	ldr	r3, [pc, #164]	@ (8001ee8 <ProcessPins+0xcc>)
 8001e44:	00d2      	lsls	r2, r2, #3
 8001e46:	58d0      	ldr	r0, [r2, r3]
 8001e48:	1dfb      	adds	r3, r7, #7
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4a26      	ldr	r2, [pc, #152]	@ (8001ee8 <ProcessPins+0xcc>)
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	18d3      	adds	r3, r2, r3
 8001e52:	3304      	adds	r3, #4
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	250f      	movs	r5, #15
 8001e58:	197c      	adds	r4, r7, r5
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	f000 ffae 	bl	8002dbc <HAL_GPIO_ReadPin>
 8001e60:	0003      	movs	r3, r0
 8001e62:	7023      	strb	r3, [r4, #0]

		// Если состояние изменилось
		if ((activState == GPIO_PIN_SET && previousActivity[diskIndex] == 0) ||
 8001e64:	197b      	adds	r3, r7, r5
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d105      	bne.n	8001e78 <ProcessPins+0x5c>
 8001e6c:	1dfb      	adds	r3, r7, #7
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4a1e      	ldr	r2, [pc, #120]	@ (8001eec <ProcessPins+0xd0>)
 8001e72:	5cd3      	ldrb	r3, [r2, r3]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00a      	beq.n	8001e8e <ProcessPins+0x72>
 8001e78:	230f      	movs	r3, #15
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d129      	bne.n	8001ed6 <ProcessPins+0xba>
				(activState == GPIO_PIN_RESET && previousActivity[diskIndex] == 1)) {
 8001e82:	1dfb      	adds	r3, r7, #7
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	4a19      	ldr	r2, [pc, #100]	@ (8001eec <ProcessPins+0xd0>)
 8001e88:	5cd3      	ldrb	r3, [r2, r3]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d123      	bne.n	8001ed6 <ProcessPins+0xba>
			// Обновляем статус активности диска
			disks[diskIndex].activity = 1;
 8001e8e:	1dfb      	adds	r3, r7, #7
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	4a14      	ldr	r2, [pc, #80]	@ (8001ee4 <ProcessPins+0xc8>)
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	18d3      	adds	r3, r2, r3
 8001e98:	3301      	adds	r3, #1
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]

			// Обновляем статус диска
			Update_Disk_Status(diskIndex, disks[diskIndex].activity, 0, 0);
 8001e9e:	1dfb      	adds	r3, r7, #7
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <ProcessPins+0xc8>)
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	18d3      	adds	r3, r2, r3
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	7819      	ldrb	r1, [r3, #0]
 8001eac:	1dfb      	adds	r3, r7, #7
 8001eae:	7818      	ldrb	r0, [r3, #0]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f7fe ff6a 	bl	8000d8c <Update_Disk_Status>

			// Сохраняем текущее состояние как предыдущее
			previousActivity[diskIndex] = activState;
 8001eb8:	1dfb      	adds	r3, r7, #7
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8001eec <ProcessPins+0xd0>)
 8001ebe:	210f      	movs	r1, #15
 8001ec0:	1879      	adds	r1, r7, r1
 8001ec2:	7809      	ldrb	r1, [r1, #0]
 8001ec4:	54d1      	strb	r1, [r2, r3]
			// Запускаем таймер на 5 секунд
			activityTimer[diskIndex] = HAL_GetTick(); // Запоминаем текущее время
 8001ec6:	1dfb      	adds	r3, r7, #7
 8001ec8:	781c      	ldrb	r4, [r3, #0]
 8001eca:	f000 fb05 	bl	80024d8 <HAL_GetTick>
 8001ece:	0001      	movs	r1, r0
 8001ed0:	4b07      	ldr	r3, [pc, #28]	@ (8001ef0 <ProcessPins+0xd4>)
 8001ed2:	00a2      	lsls	r2, r4, #2
 8001ed4:	50d1      	str	r1, [r2, r3]
		}
	}
}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b004      	add	sp, #16
 8001edc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	200003a3 	.word	0x200003a3
 8001ee4:	20000280 	.word	0x20000280
 8001ee8:	200002e0 	.word	0x200002e0
 8001eec:	200003a8 	.word	0x200003a8
 8001ef0:	200003c0 	.word	0x200003c0

08001ef4 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	0002      	movs	r2, r0
 8001efc:	1dbb      	adds	r3, r7, #6
 8001efe:	801a      	strh	r2, [r3, #0]
	uint32_t current_time = HAL_GetTick();
 8001f00:	f000 faea 	bl	80024d8 <HAL_GetTick>
 8001f04:	0003      	movs	r3, r0
 8001f06:	60fb      	str	r3, [r7, #12]

	if (GPIO_Pin == FP_MB1_PWR_SW_Pin)
 8001f08:	1dbb      	adds	r3, r7, #6
 8001f0a:	881a      	ldrh	r2, [r3, #0]
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d113      	bne.n	8001f3c <HAL_GPIO_EXTI_Rising_Callback+0x48>
	{
		if (current_time - button1_debounce_time >= DEBOUNCE_DELAY)
 8001f14:	4b18      	ldr	r3, [pc, #96]	@ (8001f78 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b63      	cmp	r3, #99	@ 0x63
 8001f1e:	d90d      	bls.n	8001f3c <HAL_GPIO_EXTI_Rising_Callback+0x48>
		{
			//  button1_pressed = 0; // Кнопка отпущена
			HandleButtonAction(1, current_time - button1_press_time);
 8001f20:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	0019      	movs	r1, r3
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f7fe fa2a 	bl	8000384 <HandleButtonAction>
			button1_press_time = 0;
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
			button1_debounce_time = current_time; // Обновляем время для обработки дребезга
 8001f36:	4b10      	ldr	r3, [pc, #64]	@ (8001f78 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	601a      	str	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == FP_MB2_PWR_SW_Pin)
 8001f3c:	1dbb      	adds	r3, r7, #6
 8001f3e:	881a      	ldrh	r2, [r3, #0]
 8001f40:	2380      	movs	r3, #128	@ 0x80
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d113      	bne.n	8001f70 <HAL_GPIO_EXTI_Rising_Callback+0x7c>
	{
		if (current_time - button2_debounce_time >= DEBOUNCE_DELAY)
 8001f48:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b63      	cmp	r3, #99	@ 0x63
 8001f52:	d90d      	bls.n	8001f70 <HAL_GPIO_EXTI_Rising_Callback+0x7c>
		{
			//  button2_pressed = 0; // Кнопка отпущена
			HandleButtonAction(2, current_time - button2_press_time);
 8001f54:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	0019      	movs	r1, r3
 8001f5e:	2002      	movs	r0, #2
 8001f60:	f7fe fa10 	bl	8000384 <HandleButtonAction>
			button2_press_time = 0;
 8001f64:	4b07      	ldr	r3, [pc, #28]	@ (8001f84 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
			button2_debounce_time = current_time; // Обновляем время для обработки дребезга
 8001f6a:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001f70:	46c0      	nop			@ (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b004      	add	sp, #16
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000428 	.word	0x20000428
 8001f7c:	20000420 	.word	0x20000420
 8001f80:	2000042c 	.word	0x2000042c
 8001f84:	20000424 	.word	0x20000424

08001f88 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	0002      	movs	r2, r0
 8001f90:	1dbb      	adds	r3, r7, #6
 8001f92:	801a      	strh	r2, [r3, #0]
	uint32_t current_time = HAL_GetTick();
 8001f94:	f000 faa0 	bl	80024d8 <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	60fb      	str	r3, [r7, #12]

	if (GPIO_Pin == FP_MB1_PWR_SW_Pin)
 8001f9c:	1dbb      	adds	r3, r7, #6
 8001f9e:	881a      	ldrh	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	@ 0x80
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_GPIO_EXTI_Falling_Callback+0x38>
	{
		if (current_time - button1_debounce_time >= DEBOUNCE_DELAY)
 8001fa8:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b63      	cmp	r3, #99	@ 0x63
 8001fb2:	d905      	bls.n	8001fc0 <HAL_GPIO_EXTI_Falling_Callback+0x38>
		{
			// button1_pressed = 1; // Кнопка нажата
			button1_press_time = current_time;
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	601a      	str	r2, [r3, #0]
			button1_debounce_time = current_time; // Обновляем время для обработки дребезга
 8001fba:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	601a      	str	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == FP_MB2_PWR_SW_Pin)
 8001fc0:	1dbb      	adds	r3, r7, #6
 8001fc2:	881a      	ldrh	r2, [r3, #0]
 8001fc4:	2380      	movs	r3, #128	@ 0x80
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d10b      	bne.n	8001fe4 <HAL_GPIO_EXTI_Falling_Callback+0x5c>
	{
		if (current_time - button2_debounce_time >= DEBOUNCE_DELAY)
 8001fcc:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b63      	cmp	r3, #99	@ 0x63
 8001fd6:	d905      	bls.n	8001fe4 <HAL_GPIO_EXTI_Falling_Callback+0x5c>
		{
			//  button2_pressed = 1; // Кнопка нажата
			button2_press_time = current_time;
 8001fd8:	4b07      	ldr	r3, [pc, #28]	@ (8001ff8 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	601a      	str	r2, [r3, #0]
			button2_debounce_time = current_time; // Обновляем время для обработки дребезга
 8001fde:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001fe4:	46c0      	nop			@ (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b004      	add	sp, #16
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000428 	.word	0x20000428
 8001ff0:	20000420 	.word	0x20000420
 8001ff4:	2000042c 	.word	0x2000042c
 8001ff8:	20000424 	.word	0x20000424

08001ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
}
 8002002:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	flag_error = 1;
 8002004:	4b02      	ldr	r3, [pc, #8]	@ (8002010 <Error_Handler+0x14>)
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
	while (1)
 800200a:	46c0      	nop			@ (mov r8, r8)
 800200c:	e7fd      	b.n	800200a <Error_Handler+0xe>
 800200e:	46c0      	nop			@ (mov r8, r8)
 8002010:	20000278 	.word	0x20000278

08002014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <HAL_MspInit+0x54>)
 800201c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800201e:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <HAL_MspInit+0x54>)
 8002020:	2101      	movs	r1, #1
 8002022:	430a      	orrs	r2, r1
 8002024:	641a      	str	r2, [r3, #64]	@ 0x40
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <HAL_MspInit+0x54>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	2201      	movs	r2, #1
 800202c:	4013      	ands	r3, r2
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <HAL_MspInit+0x54>)
 8002034:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002036:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <HAL_MspInit+0x54>)
 8002038:	2180      	movs	r1, #128	@ 0x80
 800203a:	0549      	lsls	r1, r1, #21
 800203c:	430a      	orrs	r2, r1
 800203e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002040:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <HAL_MspInit+0x54>)
 8002042:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002044:	2380      	movs	r3, #128	@ 0x80
 8002046:	055b      	lsls	r3, r3, #21
 8002048:	4013      	ands	r3, r2
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2100      	movs	r1, #0
 8002052:	2004      	movs	r0, #4
 8002054:	f000 fb1a 	bl	800268c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002058:	2004      	movs	r0, #4
 800205a:	f000 fb2c 	bl	80026b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800205e:	46c0      	nop			@ (mov r8, r8)
 8002060:	46bd      	mov	sp, r7
 8002062:	b002      	add	sp, #8
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			@ (mov r8, r8)
 8002068:	40021000 	.word	0x40021000

0800206c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b08b      	sub	sp, #44	@ 0x2c
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	2414      	movs	r4, #20
 8002076:	193b      	adds	r3, r7, r4
 8002078:	0018      	movs	r0, r3
 800207a:	2314      	movs	r3, #20
 800207c:	001a      	movs	r2, r3
 800207e:	2100      	movs	r1, #0
 8002080:	f003 ffe6 	bl	8006050 <memset>
  if(hi2c->Instance==I2C2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a45      	ldr	r2, [pc, #276]	@ (80021a0 <HAL_I2C_MspInit+0x134>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d000      	beq.n	8002090 <HAL_I2C_MspInit+0x24>
 800208e:	e082      	b.n	8002196 <HAL_I2C_MspInit+0x12a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002090:	4b44      	ldr	r3, [pc, #272]	@ (80021a4 <HAL_I2C_MspInit+0x138>)
 8002092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002094:	4b43      	ldr	r3, [pc, #268]	@ (80021a4 <HAL_I2C_MspInit+0x138>)
 8002096:	2102      	movs	r1, #2
 8002098:	430a      	orrs	r2, r1
 800209a:	635a      	str	r2, [r3, #52]	@ 0x34
 800209c:	4b41      	ldr	r3, [pc, #260]	@ (80021a4 <HAL_I2C_MspInit+0x138>)
 800209e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = TEMP_I2C1_SCL_Pin|TEMP_I2C1_SDA_Pin;
 80020a8:	193b      	adds	r3, r7, r4
 80020aa:	22c0      	movs	r2, #192	@ 0xc0
 80020ac:	0112      	lsls	r2, r2, #4
 80020ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b0:	0021      	movs	r1, r4
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	2212      	movs	r2, #18
 80020b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	187b      	adds	r3, r7, r1
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	2206      	movs	r2, #6
 80020c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ca:	187b      	adds	r3, r7, r1
 80020cc:	4a36      	ldr	r2, [pc, #216]	@ (80021a8 <HAL_I2C_MspInit+0x13c>)
 80020ce:	0019      	movs	r1, r3
 80020d0:	0010      	movs	r0, r2
 80020d2:	f000 fd0f 	bl	8002af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020d6:	4b33      	ldr	r3, [pc, #204]	@ (80021a4 <HAL_I2C_MspInit+0x138>)
 80020d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020da:	4b32      	ldr	r3, [pc, #200]	@ (80021a4 <HAL_I2C_MspInit+0x138>)
 80020dc:	2180      	movs	r1, #128	@ 0x80
 80020de:	03c9      	lsls	r1, r1, #15
 80020e0:	430a      	orrs	r2, r1
 80020e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020e4:	4b2f      	ldr	r3, [pc, #188]	@ (80021a4 <HAL_I2C_MspInit+0x138>)
 80020e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020e8:	2380      	movs	r3, #128	@ 0x80
 80020ea:	03db      	lsls	r3, r3, #15
 80020ec:	4013      	ands	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel1;
 80020f2:	4b2e      	ldr	r3, [pc, #184]	@ (80021ac <HAL_I2C_MspInit+0x140>)
 80020f4:	4a2e      	ldr	r2, [pc, #184]	@ (80021b0 <HAL_I2C_MspInit+0x144>)
 80020f6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 80020f8:	4b2c      	ldr	r3, [pc, #176]	@ (80021ac <HAL_I2C_MspInit+0x140>)
 80020fa:	220c      	movs	r2, #12
 80020fc:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020fe:	4b2b      	ldr	r3, [pc, #172]	@ (80021ac <HAL_I2C_MspInit+0x140>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002104:	4b29      	ldr	r3, [pc, #164]	@ (80021ac <HAL_I2C_MspInit+0x140>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800210a:	4b28      	ldr	r3, [pc, #160]	@ (80021ac <HAL_I2C_MspInit+0x140>)
 800210c:	2280      	movs	r2, #128	@ 0x80
 800210e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002110:	4b26      	ldr	r3, [pc, #152]	@ (80021ac <HAL_I2C_MspInit+0x140>)
 8002112:	2200      	movs	r2, #0
 8002114:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002116:	4b25      	ldr	r3, [pc, #148]	@ (80021ac <HAL_I2C_MspInit+0x140>)
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800211c:	4b23      	ldr	r3, [pc, #140]	@ (80021ac <HAL_I2C_MspInit+0x140>)
 800211e:	2200      	movs	r2, #0
 8002120:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002122:	4b22      	ldr	r3, [pc, #136]	@ (80021ac <HAL_I2C_MspInit+0x140>)
 8002124:	2200      	movs	r2, #0
 8002126:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002128:	4b20      	ldr	r3, [pc, #128]	@ (80021ac <HAL_I2C_MspInit+0x140>)
 800212a:	0018      	movs	r0, r3
 800212c:	f000 fae0 	bl	80026f0 <HAL_DMA_Init>
 8002130:	1e03      	subs	r3, r0, #0
 8002132:	d001      	beq.n	8002138 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002134:	f7ff ff62 	bl	8001ffc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a1c      	ldr	r2, [pc, #112]	@ (80021ac <HAL_I2C_MspInit+0x140>)
 800213c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800213e:	4b1b      	ldr	r3, [pc, #108]	@ (80021ac <HAL_I2C_MspInit+0x140>)
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel2;
 8002144:	4b1b      	ldr	r3, [pc, #108]	@ (80021b4 <HAL_I2C_MspInit+0x148>)
 8002146:	4a1c      	ldr	r2, [pc, #112]	@ (80021b8 <HAL_I2C_MspInit+0x14c>)
 8002148:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 800214a:	4b1a      	ldr	r3, [pc, #104]	@ (80021b4 <HAL_I2C_MspInit+0x148>)
 800214c:	220d      	movs	r2, #13
 800214e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002150:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <HAL_I2C_MspInit+0x148>)
 8002152:	2210      	movs	r2, #16
 8002154:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002156:	4b17      	ldr	r3, [pc, #92]	@ (80021b4 <HAL_I2C_MspInit+0x148>)
 8002158:	2200      	movs	r2, #0
 800215a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800215c:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <HAL_I2C_MspInit+0x148>)
 800215e:	2280      	movs	r2, #128	@ 0x80
 8002160:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002162:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <HAL_I2C_MspInit+0x148>)
 8002164:	2200      	movs	r2, #0
 8002166:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002168:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <HAL_I2C_MspInit+0x148>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800216e:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <HAL_I2C_MspInit+0x148>)
 8002170:	2200      	movs	r2, #0
 8002172:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002174:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <HAL_I2C_MspInit+0x148>)
 8002176:	2200      	movs	r2, #0
 8002178:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800217a:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <HAL_I2C_MspInit+0x148>)
 800217c:	0018      	movs	r0, r3
 800217e:	f000 fab7 	bl	80026f0 <HAL_DMA_Init>
 8002182:	1e03      	subs	r3, r0, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 8002186:	f7ff ff39 	bl	8001ffc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a09      	ldr	r2, [pc, #36]	@ (80021b4 <HAL_I2C_MspInit+0x148>)
 800218e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002190:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <HAL_I2C_MspInit+0x148>)
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002196:	46c0      	nop			@ (mov r8, r8)
 8002198:	46bd      	mov	sp, r7
 800219a:	b00b      	add	sp, #44	@ 0x2c
 800219c:	bd90      	pop	{r4, r7, pc}
 800219e:	46c0      	nop			@ (mov r8, r8)
 80021a0:	40005800 	.word	0x40005800
 80021a4:	40021000 	.word	0x40021000
 80021a8:	50000400 	.word	0x50000400
 80021ac:	200000dc 	.word	0x200000dc
 80021b0:	40020008 	.word	0x40020008
 80021b4:	20000138 	.word	0x20000138
 80021b8:	4002001c 	.word	0x4002001c

080021bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b093      	sub	sp, #76	@ 0x4c
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021c4:	2414      	movs	r4, #20
 80021c6:	193b      	adds	r3, r7, r4
 80021c8:	0018      	movs	r0, r3
 80021ca:	2334      	movs	r3, #52	@ 0x34
 80021cc:	001a      	movs	r2, r3
 80021ce:	2100      	movs	r1, #0
 80021d0:	f003 ff3e 	bl	8006050 <memset>
  if(htim_base->Instance==TIM1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a24      	ldr	r2, [pc, #144]	@ (800226c <HAL_TIM_Base_MspInit+0xb0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d11d      	bne.n	800221a <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80021de:	193b      	adds	r3, r7, r4
 80021e0:	2280      	movs	r2, #128	@ 0x80
 80021e2:	0392      	lsls	r2, r2, #14
 80021e4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80021e6:	193b      	adds	r3, r7, r4
 80021e8:	2200      	movs	r2, #0
 80021ea:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ec:	193b      	adds	r3, r7, r4
 80021ee:	0018      	movs	r0, r3
 80021f0:	f003 f8e6 	bl	80053c0 <HAL_RCCEx_PeriphCLKConfig>
 80021f4:	1e03      	subs	r3, r0, #0
 80021f6:	d001      	beq.n	80021fc <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80021f8:	f7ff ff00 	bl	8001ffc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002270 <HAL_TIM_Base_MspInit+0xb4>)
 80021fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002200:	4b1b      	ldr	r3, [pc, #108]	@ (8002270 <HAL_TIM_Base_MspInit+0xb4>)
 8002202:	2180      	movs	r1, #128	@ 0x80
 8002204:	0109      	lsls	r1, r1, #4
 8002206:	430a      	orrs	r2, r1
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40
 800220a:	4b19      	ldr	r3, [pc, #100]	@ (8002270 <HAL_TIM_Base_MspInit+0xb4>)
 800220c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002218:	e023      	b.n	8002262 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	2380      	movs	r3, #128	@ 0x80
 8002220:	05db      	lsls	r3, r3, #23
 8002222:	429a      	cmp	r2, r3
 8002224:	d10c      	bne.n	8002240 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002226:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_TIM_Base_MspInit+0xb4>)
 8002228:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800222a:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <HAL_TIM_Base_MspInit+0xb4>)
 800222c:	2101      	movs	r1, #1
 800222e:	430a      	orrs	r2, r1
 8002230:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002232:	4b0f      	ldr	r3, [pc, #60]	@ (8002270 <HAL_TIM_Base_MspInit+0xb4>)
 8002234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002236:	2201      	movs	r2, #1
 8002238:	4013      	ands	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
}
 800223e:	e010      	b.n	8002262 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0b      	ldr	r2, [pc, #44]	@ (8002274 <HAL_TIM_Base_MspInit+0xb8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d10b      	bne.n	8002262 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800224a:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <HAL_TIM_Base_MspInit+0xb4>)
 800224c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800224e:	4b08      	ldr	r3, [pc, #32]	@ (8002270 <HAL_TIM_Base_MspInit+0xb4>)
 8002250:	2102      	movs	r1, #2
 8002252:	430a      	orrs	r2, r1
 8002254:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002256:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_TIM_Base_MspInit+0xb4>)
 8002258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225a:	2202      	movs	r2, #2
 800225c:	4013      	ands	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
}
 8002262:	46c0      	nop			@ (mov r8, r8)
 8002264:	46bd      	mov	sp, r7
 8002266:	b013      	add	sp, #76	@ 0x4c
 8002268:	bd90      	pop	{r4, r7, pc}
 800226a:	46c0      	nop			@ (mov r8, r8)
 800226c:	40012c00 	.word	0x40012c00
 8002270:	40021000 	.word	0x40021000
 8002274:	40000400 	.word	0x40000400

08002278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800227c:	f003 f876 	bl	800536c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002280:	46c0      	nop			@ (mov r8, r8)
 8002282:	e7fd      	b.n	8002280 <NMI_Handler+0x8>

08002284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002288:	46c0      	nop			@ (mov r8, r8)
 800228a:	e7fd      	b.n	8002288 <HardFault_Handler+0x4>

0800228c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002290:	46c0      	nop			@ (mov r8, r8)
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800229a:	46c0      	nop			@ (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a4:	f000 f906 	bl	80024b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a8:	46c0      	nop			@ (mov r8, r8)
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FP_MB2_PWR_SW_Pin);
 80022bc:	2380      	movs	r3, #128	@ 0x80
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	0018      	movs	r0, r3
 80022c2:	f000 fdb5 	bl	8002e30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FP_MB1_PWR_SW_Pin);
 80022c6:	2380      	movs	r3, #128	@ 0x80
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	0018      	movs	r0, r3
 80022cc:	f000 fdb0 	bl	8002e30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80022d0:	46c0      	nop			@ (mov r8, r8)
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80022dc:	4b03      	ldr	r3, [pc, #12]	@ (80022ec <DMA1_Channel1_IRQHandler+0x14>)
 80022de:	0018      	movs	r0, r3
 80022e0:	f000 fafa 	bl	80028d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022e4:	46c0      	nop			@ (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	200000dc 	.word	0x200000dc

080022f0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80022f4:	4b03      	ldr	r3, [pc, #12]	@ (8002304 <DMA1_Channel2_3_IRQHandler+0x14>)
 80022f6:	0018      	movs	r0, r3
 80022f8:	f000 faee 	bl	80028d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80022fc:	46c0      	nop			@ (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	20000138 	.word	0x20000138

08002308 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800230c:	4b03      	ldr	r3, [pc, #12]	@ (800231c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800230e:	0018      	movs	r0, r3
 8002310:	f003 faf0 	bl	80058f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002314:	46c0      	nop			@ (mov r8, r8)
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	20000194 	.word	0x20000194

08002320 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002324:	4b03      	ldr	r3, [pc, #12]	@ (8002334 <TIM2_IRQHandler+0x14>)
 8002326:	0018      	movs	r0, r3
 8002328:	f003 fae4 	bl	80058f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800232c:	46c0      	nop			@ (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	200001e0 	.word	0x200001e0

08002338 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800233c:	4b03      	ldr	r3, [pc, #12]	@ (800234c <TIM3_IRQHandler+0x14>)
 800233e:	0018      	movs	r0, r3
 8002340:	f003 fad8 	bl	80058f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002344:	46c0      	nop			@ (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	46c0      	nop			@ (mov r8, r8)
 800234c:	2000022c 	.word	0x2000022c

08002350 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002354:	4b09      	ldr	r3, [pc, #36]	@ (800237c <I2C2_IRQHandler+0x2c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	23e0      	movs	r3, #224	@ 0xe0
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4013      	ands	r3, r2
 8002360:	d004      	beq.n	800236c <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8002362:	4b06      	ldr	r3, [pc, #24]	@ (800237c <I2C2_IRQHandler+0x2c>)
 8002364:	0018      	movs	r0, r3
 8002366:	f001 f97b 	bl	8003660 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 800236a:	e003      	b.n	8002374 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 800236c:	4b03      	ldr	r3, [pc, #12]	@ (800237c <I2C2_IRQHandler+0x2c>)
 800236e:	0018      	movs	r0, r3
 8002370:	f001 f95c 	bl	800362c <HAL_I2C_EV_IRQHandler>
}
 8002374:	46c0      	nop			@ (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	46c0      	nop			@ (mov r8, r8)
 800237c:	20000088 	.word	0x20000088

08002380 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002384:	46c0      	nop			@ (mov r8, r8)
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800238c:	480d      	ldr	r0, [pc, #52]	@ (80023c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800238e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002390:	f7ff fff6 	bl	8002380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002394:	480c      	ldr	r0, [pc, #48]	@ (80023c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002396:	490d      	ldr	r1, [pc, #52]	@ (80023cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002398:	4a0d      	ldr	r2, [pc, #52]	@ (80023d0 <LoopForever+0xe>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800239c:	e002      	b.n	80023a4 <LoopCopyDataInit>

0800239e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a2:	3304      	adds	r3, #4

080023a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a8:	d3f9      	bcc.n	800239e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023aa:	4a0a      	ldr	r2, [pc, #40]	@ (80023d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023ac:	4c0a      	ldr	r4, [pc, #40]	@ (80023d8 <LoopForever+0x16>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b0:	e001      	b.n	80023b6 <LoopFillZerobss>

080023b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b4:	3204      	adds	r2, #4

080023b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b8:	d3fb      	bcc.n	80023b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80023ba:	f003 fe51 	bl	8006060 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80023be:	f7fe f85b 	bl	8000478 <main>

080023c2 <LoopForever>:

LoopForever:
  b LoopForever
 80023c2:	e7fe      	b.n	80023c2 <LoopForever>
  ldr   r0, =_estack
 80023c4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80023c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023cc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80023d0:	08006108 	.word	0x08006108
  ldr r2, =_sbss
 80023d4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80023d8:	20000438 	.word	0x20000438

080023dc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023dc:	e7fe      	b.n	80023dc <ADC1_COMP_IRQHandler>
	...

080023e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023e6:	1dfb      	adds	r3, r7, #7
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023ec:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <HAL_Init+0x3c>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <HAL_Init+0x3c>)
 80023f2:	2180      	movs	r1, #128	@ 0x80
 80023f4:	0049      	lsls	r1, r1, #1
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023fa:	2000      	movs	r0, #0
 80023fc:	f000 f810 	bl	8002420 <HAL_InitTick>
 8002400:	1e03      	subs	r3, r0, #0
 8002402:	d003      	beq.n	800240c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002404:	1dfb      	adds	r3, r7, #7
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	e001      	b.n	8002410 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800240c:	f7ff fe02 	bl	8002014 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002410:	1dfb      	adds	r3, r7, #7
 8002412:	781b      	ldrb	r3, [r3, #0]
}
 8002414:	0018      	movs	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40022000 	.word	0x40022000

08002420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002428:	230f      	movs	r3, #15
 800242a:	18fb      	adds	r3, r7, r3
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002430:	4b1d      	ldr	r3, [pc, #116]	@ (80024a8 <HAL_InitTick+0x88>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d02b      	beq.n	8002490 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002438:	4b1c      	ldr	r3, [pc, #112]	@ (80024ac <HAL_InitTick+0x8c>)
 800243a:	681c      	ldr	r4, [r3, #0]
 800243c:	4b1a      	ldr	r3, [pc, #104]	@ (80024a8 <HAL_InitTick+0x88>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	0019      	movs	r1, r3
 8002442:	23fa      	movs	r3, #250	@ 0xfa
 8002444:	0098      	lsls	r0, r3, #2
 8002446:	f7fd fe5d 	bl	8000104 <__udivsi3>
 800244a:	0003      	movs	r3, r0
 800244c:	0019      	movs	r1, r3
 800244e:	0020      	movs	r0, r4
 8002450:	f7fd fe58 	bl	8000104 <__udivsi3>
 8002454:	0003      	movs	r3, r0
 8002456:	0018      	movs	r0, r3
 8002458:	f000 f93d 	bl	80026d6 <HAL_SYSTICK_Config>
 800245c:	1e03      	subs	r3, r0, #0
 800245e:	d112      	bne.n	8002486 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b03      	cmp	r3, #3
 8002464:	d80a      	bhi.n	800247c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	2301      	movs	r3, #1
 800246a:	425b      	negs	r3, r3
 800246c:	2200      	movs	r2, #0
 800246e:	0018      	movs	r0, r3
 8002470:	f000 f90c 	bl	800268c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002474:	4b0e      	ldr	r3, [pc, #56]	@ (80024b0 <HAL_InitTick+0x90>)
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	e00d      	b.n	8002498 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800247c:	230f      	movs	r3, #15
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
 8002484:	e008      	b.n	8002498 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002486:	230f      	movs	r3, #15
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
 800248e:	e003      	b.n	8002498 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002490:	230f      	movs	r3, #15
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002498:	230f      	movs	r3, #15
 800249a:	18fb      	adds	r3, r7, r3
 800249c:	781b      	ldrb	r3, [r3, #0]
}
 800249e:	0018      	movs	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b005      	add	sp, #20
 80024a4:	bd90      	pop	{r4, r7, pc}
 80024a6:	46c0      	nop			@ (mov r8, r8)
 80024a8:	20000068 	.word	0x20000068
 80024ac:	20000060 	.word	0x20000060
 80024b0:	20000064 	.word	0x20000064

080024b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b8:	4b05      	ldr	r3, [pc, #20]	@ (80024d0 <HAL_IncTick+0x1c>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	001a      	movs	r2, r3
 80024be:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <HAL_IncTick+0x20>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	18d2      	adds	r2, r2, r3
 80024c4:	4b03      	ldr	r3, [pc, #12]	@ (80024d4 <HAL_IncTick+0x20>)
 80024c6:	601a      	str	r2, [r3, #0]
}
 80024c8:	46c0      	nop			@ (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	46c0      	nop			@ (mov r8, r8)
 80024d0:	20000068 	.word	0x20000068
 80024d4:	20000434 	.word	0x20000434

080024d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  return uwTick;
 80024dc:	4b02      	ldr	r3, [pc, #8]	@ (80024e8 <HAL_GetTick+0x10>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	20000434 	.word	0x20000434

080024ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff fff0 	bl	80024d8 <HAL_GetTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3301      	adds	r3, #1
 8002504:	d005      	beq.n	8002512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002506:	4b0a      	ldr	r3, [pc, #40]	@ (8002530 <HAL_Delay+0x44>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	001a      	movs	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	189b      	adds	r3, r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	f7ff ffe0 	bl	80024d8 <HAL_GetTick>
 8002518:	0002      	movs	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	d8f7      	bhi.n	8002514 <HAL_Delay+0x28>
  {
  }
}
 8002524:	46c0      	nop			@ (mov r8, r8)
 8002526:	46c0      	nop			@ (mov r8, r8)
 8002528:	46bd      	mov	sp, r7
 800252a:	b004      	add	sp, #16
 800252c:	bd80      	pop	{r7, pc}
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	20000068 	.word	0x20000068

08002534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	0002      	movs	r2, r0
 800253c:	1dfb      	adds	r3, r7, #7
 800253e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002540:	1dfb      	adds	r3, r7, #7
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b7f      	cmp	r3, #127	@ 0x7f
 8002546:	d809      	bhi.n	800255c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002548:	1dfb      	adds	r3, r7, #7
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	001a      	movs	r2, r3
 800254e:	231f      	movs	r3, #31
 8002550:	401a      	ands	r2, r3
 8002552:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <__NVIC_EnableIRQ+0x30>)
 8002554:	2101      	movs	r1, #1
 8002556:	4091      	lsls	r1, r2
 8002558:	000a      	movs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800255c:	46c0      	nop			@ (mov r8, r8)
 800255e:	46bd      	mov	sp, r7
 8002560:	b002      	add	sp, #8
 8002562:	bd80      	pop	{r7, pc}
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	0002      	movs	r2, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	1dfb      	adds	r3, r7, #7
 8002574:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002576:	1dfb      	adds	r3, r7, #7
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b7f      	cmp	r3, #127	@ 0x7f
 800257c:	d828      	bhi.n	80025d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800257e:	4a2f      	ldr	r2, [pc, #188]	@ (800263c <__NVIC_SetPriority+0xd4>)
 8002580:	1dfb      	adds	r3, r7, #7
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	b25b      	sxtb	r3, r3
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	33c0      	adds	r3, #192	@ 0xc0
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	589b      	ldr	r3, [r3, r2]
 800258e:	1dfa      	adds	r2, r7, #7
 8002590:	7812      	ldrb	r2, [r2, #0]
 8002592:	0011      	movs	r1, r2
 8002594:	2203      	movs	r2, #3
 8002596:	400a      	ands	r2, r1
 8002598:	00d2      	lsls	r2, r2, #3
 800259a:	21ff      	movs	r1, #255	@ 0xff
 800259c:	4091      	lsls	r1, r2
 800259e:	000a      	movs	r2, r1
 80025a0:	43d2      	mvns	r2, r2
 80025a2:	401a      	ands	r2, r3
 80025a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	019b      	lsls	r3, r3, #6
 80025aa:	22ff      	movs	r2, #255	@ 0xff
 80025ac:	401a      	ands	r2, r3
 80025ae:	1dfb      	adds	r3, r7, #7
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	0018      	movs	r0, r3
 80025b4:	2303      	movs	r3, #3
 80025b6:	4003      	ands	r3, r0
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025bc:	481f      	ldr	r0, [pc, #124]	@ (800263c <__NVIC_SetPriority+0xd4>)
 80025be:	1dfb      	adds	r3, r7, #7
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	089b      	lsrs	r3, r3, #2
 80025c6:	430a      	orrs	r2, r1
 80025c8:	33c0      	adds	r3, #192	@ 0xc0
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80025ce:	e031      	b.n	8002634 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002640 <__NVIC_SetPriority+0xd8>)
 80025d2:	1dfb      	adds	r3, r7, #7
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	0019      	movs	r1, r3
 80025d8:	230f      	movs	r3, #15
 80025da:	400b      	ands	r3, r1
 80025dc:	3b08      	subs	r3, #8
 80025de:	089b      	lsrs	r3, r3, #2
 80025e0:	3306      	adds	r3, #6
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	18d3      	adds	r3, r2, r3
 80025e6:	3304      	adds	r3, #4
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	1dfa      	adds	r2, r7, #7
 80025ec:	7812      	ldrb	r2, [r2, #0]
 80025ee:	0011      	movs	r1, r2
 80025f0:	2203      	movs	r2, #3
 80025f2:	400a      	ands	r2, r1
 80025f4:	00d2      	lsls	r2, r2, #3
 80025f6:	21ff      	movs	r1, #255	@ 0xff
 80025f8:	4091      	lsls	r1, r2
 80025fa:	000a      	movs	r2, r1
 80025fc:	43d2      	mvns	r2, r2
 80025fe:	401a      	ands	r2, r3
 8002600:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	019b      	lsls	r3, r3, #6
 8002606:	22ff      	movs	r2, #255	@ 0xff
 8002608:	401a      	ands	r2, r3
 800260a:	1dfb      	adds	r3, r7, #7
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	0018      	movs	r0, r3
 8002610:	2303      	movs	r3, #3
 8002612:	4003      	ands	r3, r0
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002618:	4809      	ldr	r0, [pc, #36]	@ (8002640 <__NVIC_SetPriority+0xd8>)
 800261a:	1dfb      	adds	r3, r7, #7
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	001c      	movs	r4, r3
 8002620:	230f      	movs	r3, #15
 8002622:	4023      	ands	r3, r4
 8002624:	3b08      	subs	r3, #8
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	430a      	orrs	r2, r1
 800262a:	3306      	adds	r3, #6
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	18c3      	adds	r3, r0, r3
 8002630:	3304      	adds	r3, #4
 8002632:	601a      	str	r2, [r3, #0]
}
 8002634:	46c0      	nop			@ (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b003      	add	sp, #12
 800263a:	bd90      	pop	{r4, r7, pc}
 800263c:	e000e100 	.word	0xe000e100
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	1e5a      	subs	r2, r3, #1
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	045b      	lsls	r3, r3, #17
 8002654:	429a      	cmp	r2, r3
 8002656:	d301      	bcc.n	800265c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002658:	2301      	movs	r3, #1
 800265a:	e010      	b.n	800267e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265c:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <SysTick_Config+0x44>)
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	3a01      	subs	r2, #1
 8002662:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002664:	2301      	movs	r3, #1
 8002666:	425b      	negs	r3, r3
 8002668:	2103      	movs	r1, #3
 800266a:	0018      	movs	r0, r3
 800266c:	f7ff ff7c 	bl	8002568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002670:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <SysTick_Config+0x44>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002676:	4b04      	ldr	r3, [pc, #16]	@ (8002688 <SysTick_Config+0x44>)
 8002678:	2207      	movs	r2, #7
 800267a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800267c:	2300      	movs	r3, #0
}
 800267e:	0018      	movs	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	b002      	add	sp, #8
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			@ (mov r8, r8)
 8002688:	e000e010 	.word	0xe000e010

0800268c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	210f      	movs	r1, #15
 8002698:	187b      	adds	r3, r7, r1
 800269a:	1c02      	adds	r2, r0, #0
 800269c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	b25b      	sxtb	r3, r3
 80026a6:	0011      	movs	r1, r2
 80026a8:	0018      	movs	r0, r3
 80026aa:	f7ff ff5d 	bl	8002568 <__NVIC_SetPriority>
}
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b004      	add	sp, #16
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	0002      	movs	r2, r0
 80026be:	1dfb      	adds	r3, r7, #7
 80026c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c2:	1dfb      	adds	r3, r7, #7
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	0018      	movs	r0, r3
 80026ca:	f7ff ff33 	bl	8002534 <__NVIC_EnableIRQ>
}
 80026ce:	46c0      	nop			@ (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b002      	add	sp, #8
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7ff ffaf 	bl	8002644 <SysTick_Config>
 80026e6:	0003      	movs	r3, r0
}
 80026e8:	0018      	movs	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b002      	add	sp, #8
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e077      	b.n	80027f2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a3d      	ldr	r2, [pc, #244]	@ (80027fc <HAL_DMA_Init+0x10c>)
 8002708:	4694      	mov	ip, r2
 800270a:	4463      	add	r3, ip
 800270c:	2114      	movs	r1, #20
 800270e:	0018      	movs	r0, r3
 8002710:	f7fd fcf8 	bl	8000104 <__udivsi3>
 8002714:	0003      	movs	r3, r0
 8002716:	009a      	lsls	r2, r3, #2
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2225      	movs	r2, #37	@ 0x25
 8002720:	2102      	movs	r1, #2
 8002722:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4934      	ldr	r1, [pc, #208]	@ (8002800 <HAL_DMA_Init+0x110>)
 8002730:	400a      	ands	r2, r1
 8002732:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6819      	ldr	r1, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	0018      	movs	r0, r3
 800276e:	f000 f971 	bl	8002a54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	2380      	movs	r3, #128	@ 0x80
 8002778:	01db      	lsls	r3, r3, #7
 800277a:	429a      	cmp	r2, r3
 800277c:	d102      	bne.n	8002784 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278c:	213f      	movs	r1, #63	@ 0x3f
 800278e:	400a      	ands	r2, r1
 8002790:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800279a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d011      	beq.n	80027c8 <HAL_DMA_Init+0xd8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d80d      	bhi.n	80027c8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 f97c 	bl	8002aac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	e008      	b.n	80027da <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2225      	movs	r2, #37	@ 0x25
 80027e4:	2101      	movs	r1, #1
 80027e6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2224      	movs	r2, #36	@ 0x24
 80027ec:	2100      	movs	r1, #0
 80027ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b002      	add	sp, #8
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	46c0      	nop			@ (mov r8, r8)
 80027fc:	bffdfff8 	.word	0xbffdfff8
 8002800:	ffff800f 	.word	0xffff800f

08002804 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800280c:	210f      	movs	r1, #15
 800280e:	187b      	adds	r3, r7, r1
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2225      	movs	r2, #37	@ 0x25
 8002818:	5c9b      	ldrb	r3, [r3, r2]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d006      	beq.n	800282e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2204      	movs	r2, #4
 8002824:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002826:	187b      	adds	r3, r7, r1
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
 800282c:	e049      	b.n	80028c2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	210e      	movs	r1, #14
 800283a:	438a      	bics	r2, r1
 800283c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2101      	movs	r1, #1
 800284a:	438a      	bics	r2, r1
 800284c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002858:	491d      	ldr	r1, [pc, #116]	@ (80028d0 <HAL_DMA_Abort_IT+0xcc>)
 800285a:	400a      	ands	r2, r1
 800285c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800285e:	4b1d      	ldr	r3, [pc, #116]	@ (80028d4 <HAL_DMA_Abort_IT+0xd0>)
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	221c      	movs	r2, #28
 8002868:	4013      	ands	r3, r2
 800286a:	2201      	movs	r2, #1
 800286c:	409a      	lsls	r2, r3
 800286e:	4b19      	ldr	r3, [pc, #100]	@ (80028d4 <HAL_DMA_Abort_IT+0xd0>)
 8002870:	430a      	orrs	r2, r1
 8002872:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800287c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00c      	beq.n	80028a0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002890:	490f      	ldr	r1, [pc, #60]	@ (80028d0 <HAL_DMA_Abort_IT+0xcc>)
 8002892:	400a      	ands	r2, r1
 8002894:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800289e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2225      	movs	r2, #37	@ 0x25
 80028a4:	2101      	movs	r1, #1
 80028a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2224      	movs	r2, #36	@ 0x24
 80028ac:	2100      	movs	r1, #0
 80028ae:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d004      	beq.n	80028c2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	0010      	movs	r0, r2
 80028c0:	4798      	blx	r3
    }
  }
  return status;
 80028c2:	230f      	movs	r3, #15
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	781b      	ldrb	r3, [r3, #0]
}
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b004      	add	sp, #16
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	fffffeff 	.word	0xfffffeff
 80028d4:	40020000 	.word	0x40020000

080028d8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80028e0:	4b55      	ldr	r3, [pc, #340]	@ (8002a38 <HAL_DMA_IRQHandler+0x160>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	221c      	movs	r2, #28
 80028f4:	4013      	ands	r3, r2
 80028f6:	2204      	movs	r2, #4
 80028f8:	409a      	lsls	r2, r3
 80028fa:	0013      	movs	r3, r2
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4013      	ands	r3, r2
 8002900:	d027      	beq.n	8002952 <HAL_DMA_IRQHandler+0x7a>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2204      	movs	r2, #4
 8002906:	4013      	ands	r3, r2
 8002908:	d023      	beq.n	8002952 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2220      	movs	r2, #32
 8002912:	4013      	ands	r3, r2
 8002914:	d107      	bne.n	8002926 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2104      	movs	r1, #4
 8002922:	438a      	bics	r2, r1
 8002924:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002926:	4b44      	ldr	r3, [pc, #272]	@ (8002a38 <HAL_DMA_IRQHandler+0x160>)
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	221c      	movs	r2, #28
 8002930:	4013      	ands	r3, r2
 8002932:	2204      	movs	r2, #4
 8002934:	409a      	lsls	r2, r3
 8002936:	4b40      	ldr	r3, [pc, #256]	@ (8002a38 <HAL_DMA_IRQHandler+0x160>)
 8002938:	430a      	orrs	r2, r1
 800293a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002940:	2b00      	cmp	r3, #0
 8002942:	d100      	bne.n	8002946 <HAL_DMA_IRQHandler+0x6e>
 8002944:	e073      	b.n	8002a2e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	0010      	movs	r0, r2
 800294e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002950:	e06d      	b.n	8002a2e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	221c      	movs	r2, #28
 8002958:	4013      	ands	r3, r2
 800295a:	2202      	movs	r2, #2
 800295c:	409a      	lsls	r2, r3
 800295e:	0013      	movs	r3, r2
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4013      	ands	r3, r2
 8002964:	d02e      	beq.n	80029c4 <HAL_DMA_IRQHandler+0xec>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2202      	movs	r2, #2
 800296a:	4013      	ands	r3, r2
 800296c:	d02a      	beq.n	80029c4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2220      	movs	r2, #32
 8002976:	4013      	ands	r3, r2
 8002978:	d10b      	bne.n	8002992 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	210a      	movs	r1, #10
 8002986:	438a      	bics	r2, r1
 8002988:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2225      	movs	r2, #37	@ 0x25
 800298e:	2101      	movs	r1, #1
 8002990:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002992:	4b29      	ldr	r3, [pc, #164]	@ (8002a38 <HAL_DMA_IRQHandler+0x160>)
 8002994:	6859      	ldr	r1, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	221c      	movs	r2, #28
 800299c:	4013      	ands	r3, r2
 800299e:	2202      	movs	r2, #2
 80029a0:	409a      	lsls	r2, r3
 80029a2:	4b25      	ldr	r3, [pc, #148]	@ (8002a38 <HAL_DMA_IRQHandler+0x160>)
 80029a4:	430a      	orrs	r2, r1
 80029a6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2224      	movs	r2, #36	@ 0x24
 80029ac:	2100      	movs	r1, #0
 80029ae:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d03a      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	0010      	movs	r0, r2
 80029c0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80029c2:	e034      	b.n	8002a2e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	221c      	movs	r2, #28
 80029ca:	4013      	ands	r3, r2
 80029cc:	2208      	movs	r2, #8
 80029ce:	409a      	lsls	r2, r3
 80029d0:	0013      	movs	r3, r2
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4013      	ands	r3, r2
 80029d6:	d02b      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x158>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2208      	movs	r2, #8
 80029dc:	4013      	ands	r3, r2
 80029de:	d027      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	210e      	movs	r1, #14
 80029ec:	438a      	bics	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80029f0:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <HAL_DMA_IRQHandler+0x160>)
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	221c      	movs	r2, #28
 80029fa:	4013      	ands	r3, r2
 80029fc:	2201      	movs	r2, #1
 80029fe:	409a      	lsls	r2, r3
 8002a00:	4b0d      	ldr	r3, [pc, #52]	@ (8002a38 <HAL_DMA_IRQHandler+0x160>)
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2225      	movs	r2, #37	@ 0x25
 8002a10:	2101      	movs	r1, #1
 8002a12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2224      	movs	r2, #36	@ 0x24
 8002a18:	2100      	movs	r1, #0
 8002a1a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	0010      	movs	r0, r2
 8002a2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a2e:	46c0      	nop			@ (mov r8, r8)
 8002a30:	46c0      	nop			@ (mov r8, r8)
}
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b004      	add	sp, #16
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40020000 	.word	0x40020000

08002a3c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2225      	movs	r2, #37	@ 0x25
 8002a48:	5c9b      	ldrb	r3, [r3, r2]
 8002a4a:	b2db      	uxtb	r3, r3
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	089b      	lsrs	r3, r3, #2
 8002a62:	4a10      	ldr	r2, [pc, #64]	@ (8002aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002a64:	4694      	mov	ip, r2
 8002a66:	4463      	add	r3, ip
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	001a      	movs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	001a      	movs	r2, r3
 8002a76:	23ff      	movs	r3, #255	@ 0xff
 8002a78:	4013      	ands	r3, r2
 8002a7a:	3b08      	subs	r3, #8
 8002a7c:	2114      	movs	r1, #20
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f7fd fb40 	bl	8000104 <__udivsi3>
 8002a84:	0003      	movs	r3, r0
 8002a86:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a07      	ldr	r2, [pc, #28]	@ (8002aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002a8c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	221f      	movs	r2, #31
 8002a92:	4013      	ands	r3, r2
 8002a94:	2201      	movs	r2, #1
 8002a96:	409a      	lsls	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002a9c:	46c0      	nop			@ (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b004      	add	sp, #16
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	10008200 	.word	0x10008200
 8002aa8:	40020880 	.word	0x40020880

08002aac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	223f      	movs	r2, #63	@ 0x3f
 8002aba:	4013      	ands	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8002aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002ac2:	4694      	mov	ip, r2
 8002ac4:	4463      	add	r3, ip
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	001a      	movs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a07      	ldr	r2, [pc, #28]	@ (8002af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002ad2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	2203      	movs	r2, #3
 8002ada:	4013      	ands	r3, r2
 8002adc:	2201      	movs	r2, #1
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002ae4:	46c0      	nop			@ (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b004      	add	sp, #16
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	1000823f 	.word	0x1000823f
 8002af0:	40020940 	.word	0x40020940

08002af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b02:	e147      	b.n	8002d94 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2101      	movs	r1, #1
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4091      	lsls	r1, r2
 8002b0e:	000a      	movs	r2, r1
 8002b10:	4013      	ands	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d100      	bne.n	8002b1c <HAL_GPIO_Init+0x28>
 8002b1a:	e138      	b.n	8002d8e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2203      	movs	r2, #3
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d005      	beq.n	8002b34 <HAL_GPIO_Init+0x40>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d130      	bne.n	8002b96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	409a      	lsls	r2, r3
 8002b42:	0013      	movs	r3, r2
 8002b44:	43da      	mvns	r2, r3
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	409a      	lsls	r2, r3
 8002b56:	0013      	movs	r3, r2
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	0013      	movs	r3, r2
 8002b72:	43da      	mvns	r2, r3
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	091b      	lsrs	r3, r3, #4
 8002b80:	2201      	movs	r2, #1
 8002b82:	401a      	ands	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	409a      	lsls	r2, r3
 8002b88:	0013      	movs	r3, r2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d017      	beq.n	8002bd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	0013      	movs	r3, r2
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	0013      	movs	r3, r2
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d123      	bne.n	8002c26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	08da      	lsrs	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3208      	adds	r2, #8
 8002be6:	0092      	lsls	r2, r2, #2
 8002be8:	58d3      	ldr	r3, [r2, r3]
 8002bea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2207      	movs	r2, #7
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	220f      	movs	r2, #15
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	0013      	movs	r3, r2
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2107      	movs	r1, #7
 8002c0a:	400b      	ands	r3, r1
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	0013      	movs	r3, r2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	08da      	lsrs	r2, r3, #3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3208      	adds	r2, #8
 8002c20:	0092      	lsls	r2, r2, #2
 8002c22:	6939      	ldr	r1, [r7, #16]
 8002c24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	2203      	movs	r2, #3
 8002c32:	409a      	lsls	r2, r3
 8002c34:	0013      	movs	r3, r2
 8002c36:	43da      	mvns	r2, r3
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2203      	movs	r2, #3
 8002c44:	401a      	ands	r2, r3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	0013      	movs	r3, r2
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	23c0      	movs	r3, #192	@ 0xc0
 8002c60:	029b      	lsls	r3, r3, #10
 8002c62:	4013      	ands	r3, r2
 8002c64:	d100      	bne.n	8002c68 <HAL_GPIO_Init+0x174>
 8002c66:	e092      	b.n	8002d8e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002c68:	4a50      	ldr	r2, [pc, #320]	@ (8002dac <HAL_GPIO_Init+0x2b8>)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3318      	adds	r3, #24
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	589b      	ldr	r3, [r3, r2]
 8002c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2203      	movs	r2, #3
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	220f      	movs	r2, #15
 8002c80:	409a      	lsls	r2, r3
 8002c82:	0013      	movs	r3, r2
 8002c84:	43da      	mvns	r2, r3
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	23a0      	movs	r3, #160	@ 0xa0
 8002c90:	05db      	lsls	r3, r3, #23
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d013      	beq.n	8002cbe <HAL_GPIO_Init+0x1ca>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a45      	ldr	r2, [pc, #276]	@ (8002db0 <HAL_GPIO_Init+0x2bc>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00d      	beq.n	8002cba <HAL_GPIO_Init+0x1c6>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a44      	ldr	r2, [pc, #272]	@ (8002db4 <HAL_GPIO_Init+0x2c0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d007      	beq.n	8002cb6 <HAL_GPIO_Init+0x1c2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a43      	ldr	r2, [pc, #268]	@ (8002db8 <HAL_GPIO_Init+0x2c4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d101      	bne.n	8002cb2 <HAL_GPIO_Init+0x1be>
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e006      	b.n	8002cc0 <HAL_GPIO_Init+0x1cc>
 8002cb2:	2305      	movs	r3, #5
 8002cb4:	e004      	b.n	8002cc0 <HAL_GPIO_Init+0x1cc>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e002      	b.n	8002cc0 <HAL_GPIO_Init+0x1cc>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <HAL_GPIO_Init+0x1cc>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	2103      	movs	r1, #3
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	00d2      	lsls	r2, r2, #3
 8002cc8:	4093      	lsls	r3, r2
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002cd0:	4936      	ldr	r1, [pc, #216]	@ (8002dac <HAL_GPIO_Init+0x2b8>)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	3318      	adds	r3, #24
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cde:	4b33      	ldr	r3, [pc, #204]	@ (8002dac <HAL_GPIO_Init+0x2b8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	2380      	movs	r3, #128	@ 0x80
 8002cf4:	035b      	lsls	r3, r3, #13
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d02:	4b2a      	ldr	r3, [pc, #168]	@ (8002dac <HAL_GPIO_Init+0x2b8>)
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002d08:	4b28      	ldr	r3, [pc, #160]	@ (8002dac <HAL_GPIO_Init+0x2b8>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	43da      	mvns	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	039b      	lsls	r3, r3, #14
 8002d20:	4013      	ands	r3, r2
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002dac <HAL_GPIO_Init+0x2b8>)
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d32:	4a1e      	ldr	r2, [pc, #120]	@ (8002dac <HAL_GPIO_Init+0x2b8>)
 8002d34:	2384      	movs	r3, #132	@ 0x84
 8002d36:	58d3      	ldr	r3, [r2, r3]
 8002d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	2380      	movs	r3, #128	@ 0x80
 8002d4a:	029b      	lsls	r3, r3, #10
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d58:	4914      	ldr	r1, [pc, #80]	@ (8002dac <HAL_GPIO_Init+0x2b8>)
 8002d5a:	2284      	movs	r2, #132	@ 0x84
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002d60:	4a12      	ldr	r2, [pc, #72]	@ (8002dac <HAL_GPIO_Init+0x2b8>)
 8002d62:	2380      	movs	r3, #128	@ 0x80
 8002d64:	58d3      	ldr	r3, [r2, r3]
 8002d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	2380      	movs	r3, #128	@ 0x80
 8002d78:	025b      	lsls	r3, r3, #9
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d86:	4909      	ldr	r1, [pc, #36]	@ (8002dac <HAL_GPIO_Init+0x2b8>)
 8002d88:	2280      	movs	r2, #128	@ 0x80
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	3301      	adds	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	40da      	lsrs	r2, r3
 8002d9c:	1e13      	subs	r3, r2, #0
 8002d9e:	d000      	beq.n	8002da2 <HAL_GPIO_Init+0x2ae>
 8002da0:	e6b0      	b.n	8002b04 <HAL_GPIO_Init+0x10>
  }
}
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	46c0      	nop			@ (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b006      	add	sp, #24
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021800 	.word	0x40021800
 8002db0:	50000400 	.word	0x50000400
 8002db4:	50000800 	.word	0x50000800
 8002db8:	50000c00 	.word	0x50000c00

08002dbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	000a      	movs	r2, r1
 8002dc6:	1cbb      	adds	r3, r7, #2
 8002dc8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	1cba      	adds	r2, r7, #2
 8002dd0:	8812      	ldrh	r2, [r2, #0]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d004      	beq.n	8002de0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002dd6:	230f      	movs	r3, #15
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]
 8002dde:	e003      	b.n	8002de8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002de0:	230f      	movs	r3, #15
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002de8:	230f      	movs	r3, #15
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	781b      	ldrb	r3, [r3, #0]
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b004      	add	sp, #16
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	0008      	movs	r0, r1
 8002e00:	0011      	movs	r1, r2
 8002e02:	1cbb      	adds	r3, r7, #2
 8002e04:	1c02      	adds	r2, r0, #0
 8002e06:	801a      	strh	r2, [r3, #0]
 8002e08:	1c7b      	adds	r3, r7, #1
 8002e0a:	1c0a      	adds	r2, r1, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e0e:	1c7b      	adds	r3, r7, #1
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d004      	beq.n	8002e20 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e16:	1cbb      	adds	r3, r7, #2
 8002e18:	881a      	ldrh	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e1e:	e003      	b.n	8002e28 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e20:	1cbb      	adds	r3, r7, #2
 8002e22:	881a      	ldrh	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e28:	46c0      	nop			@ (mov r8, r8)
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b002      	add	sp, #8
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	0002      	movs	r2, r0
 8002e38:	1dbb      	adds	r3, r7, #6
 8002e3a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002e3c:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	1dba      	adds	r2, r7, #6
 8002e42:	8812      	ldrh	r2, [r2, #0]
 8002e44:	4013      	ands	r3, r2
 8002e46:	d008      	beq.n	8002e5a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002e48:	4b0d      	ldr	r3, [pc, #52]	@ (8002e80 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e4a:	1dba      	adds	r2, r7, #6
 8002e4c:	8812      	ldrh	r2, [r2, #0]
 8002e4e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002e50:	1dbb      	adds	r3, r7, #6
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	0018      	movs	r0, r3
 8002e56:	f7ff f84d 	bl	8001ef4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002e5a:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	1dba      	adds	r2, r7, #6
 8002e60:	8812      	ldrh	r2, [r2, #0]
 8002e62:	4013      	ands	r3, r2
 8002e64:	d008      	beq.n	8002e78 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002e66:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e68:	1dba      	adds	r2, r7, #6
 8002e6a:	8812      	ldrh	r2, [r2, #0]
 8002e6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002e6e:	1dbb      	adds	r3, r7, #6
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7ff f888 	bl	8001f88 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002e78:	46c0      	nop			@ (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b002      	add	sp, #8
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021800 	.word	0x40021800

08002e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e08f      	b.n	8002fb6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2241      	movs	r2, #65	@ 0x41
 8002e9a:	5c9b      	ldrb	r3, [r3, r2]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d107      	bne.n	8002eb2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2240      	movs	r2, #64	@ 0x40
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	0018      	movs	r0, r3
 8002eae:	f7ff f8dd 	bl	800206c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2241      	movs	r2, #65	@ 0x41
 8002eb6:	2124      	movs	r1, #36	@ 0x24
 8002eb8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	438a      	bics	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	493b      	ldr	r1, [pc, #236]	@ (8002fc0 <HAL_I2C_Init+0x13c>)
 8002ed4:	400a      	ands	r2, r1
 8002ed6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4938      	ldr	r1, [pc, #224]	@ (8002fc4 <HAL_I2C_Init+0x140>)
 8002ee4:	400a      	ands	r2, r1
 8002ee6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d108      	bne.n	8002f02 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2180      	movs	r1, #128	@ 0x80
 8002efa:	0209      	lsls	r1, r1, #8
 8002efc:	430a      	orrs	r2, r1
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	e007      	b.n	8002f12 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2184      	movs	r1, #132	@ 0x84
 8002f0c:	0209      	lsls	r1, r1, #8
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d109      	bne.n	8002f2e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2180      	movs	r1, #128	@ 0x80
 8002f26:	0109      	lsls	r1, r1, #4
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	605a      	str	r2, [r3, #4]
 8002f2c:	e007      	b.n	8002f3e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4923      	ldr	r1, [pc, #140]	@ (8002fc8 <HAL_I2C_Init+0x144>)
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4920      	ldr	r1, [pc, #128]	@ (8002fcc <HAL_I2C_Init+0x148>)
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	491a      	ldr	r1, [pc, #104]	@ (8002fc4 <HAL_I2C_Init+0x140>)
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69d9      	ldr	r1, [r3, #28]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1a      	ldr	r2, [r3, #32]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2101      	movs	r1, #1
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2241      	movs	r2, #65	@ 0x41
 8002fa2:	2120      	movs	r1, #32
 8002fa4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2242      	movs	r2, #66	@ 0x42
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b002      	add	sp, #8
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			@ (mov r8, r8)
 8002fc0:	f0ffffff 	.word	0xf0ffffff
 8002fc4:	ffff7fff 	.word	0xffff7fff
 8002fc8:	fffff7ff 	.word	0xfffff7ff
 8002fcc:	02008000 	.word	0x02008000

08002fd0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b089      	sub	sp, #36	@ 0x24
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	0008      	movs	r0, r1
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	0019      	movs	r1, r3
 8002fde:	230a      	movs	r3, #10
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	1c02      	adds	r2, r0, #0
 8002fe4:	801a      	strh	r2, [r3, #0]
 8002fe6:	2308      	movs	r3, #8
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	1c0a      	adds	r2, r1, #0
 8002fec:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2241      	movs	r2, #65	@ 0x41
 8002ff2:	5c9b      	ldrb	r3, [r3, r2]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d000      	beq.n	8002ffc <HAL_I2C_Master_Transmit+0x2c>
 8002ffa:	e10a      	b.n	8003212 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2240      	movs	r2, #64	@ 0x40
 8003000:	5c9b      	ldrb	r3, [r3, r2]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_I2C_Master_Transmit+0x3a>
 8003006:	2302      	movs	r3, #2
 8003008:	e104      	b.n	8003214 <HAL_I2C_Master_Transmit+0x244>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2240      	movs	r2, #64	@ 0x40
 800300e:	2101      	movs	r1, #1
 8003010:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003012:	f7ff fa61 	bl	80024d8 <HAL_GetTick>
 8003016:	0003      	movs	r3, r0
 8003018:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800301a:	2380      	movs	r3, #128	@ 0x80
 800301c:	0219      	lsls	r1, r3, #8
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	2319      	movs	r3, #25
 8003026:	2201      	movs	r2, #1
 8003028:	f001 f900 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 800302c:	1e03      	subs	r3, r0, #0
 800302e:	d001      	beq.n	8003034 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0ef      	b.n	8003214 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2241      	movs	r2, #65	@ 0x41
 8003038:	2121      	movs	r1, #33	@ 0x21
 800303a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2242      	movs	r2, #66	@ 0x42
 8003040:	2110      	movs	r1, #16
 8003042:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2208      	movs	r2, #8
 8003054:	18ba      	adds	r2, r7, r2
 8003056:	8812      	ldrh	r2, [r2, #0]
 8003058:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	2bff      	cmp	r3, #255	@ 0xff
 8003068:	d906      	bls.n	8003078 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	22ff      	movs	r2, #255	@ 0xff
 800306e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003070:	2380      	movs	r3, #128	@ 0x80
 8003072:	045b      	lsls	r3, r3, #17
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	e007      	b.n	8003088 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003082:	2380      	movs	r3, #128	@ 0x80
 8003084:	049b      	lsls	r3, r3, #18
 8003086:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308c:	2b00      	cmp	r3, #0
 800308e:	d027      	beq.n	80030e0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	3301      	adds	r3, #1
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	697c      	ldr	r4, [r7, #20]
 80030cc:	230a      	movs	r3, #10
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	8819      	ldrh	r1, [r3, #0]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	4b51      	ldr	r3, [pc, #324]	@ (800321c <HAL_I2C_Master_Transmit+0x24c>)
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	0023      	movs	r3, r4
 80030da:	f001 fb1f 	bl	800471c <I2C_TransferConfig>
 80030de:	e06f      	b.n	80031c0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	697c      	ldr	r4, [r7, #20]
 80030e8:	230a      	movs	r3, #10
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	8819      	ldrh	r1, [r3, #0]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	4b4a      	ldr	r3, [pc, #296]	@ (800321c <HAL_I2C_Master_Transmit+0x24c>)
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	0023      	movs	r3, r4
 80030f6:	f001 fb11 	bl	800471c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030fa:	e061      	b.n	80031c0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	0018      	movs	r0, r3
 8003104:	f001 f8ea 	bl	80042dc <I2C_WaitOnTXISFlagUntilTimeout>
 8003108:	1e03      	subs	r3, r0, #0
 800310a:	d001      	beq.n	8003110 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e081      	b.n	8003214 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	781a      	ldrb	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d03a      	beq.n	80031c0 <HAL_I2C_Master_Transmit+0x1f0>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314e:	2b00      	cmp	r3, #0
 8003150:	d136      	bne.n	80031c0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003152:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	0013      	movs	r3, r2
 800315c:	2200      	movs	r2, #0
 800315e:	2180      	movs	r1, #128	@ 0x80
 8003160:	f001 f864 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 8003164:	1e03      	subs	r3, r0, #0
 8003166:	d001      	beq.n	800316c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e053      	b.n	8003214 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2bff      	cmp	r3, #255	@ 0xff
 8003174:	d911      	bls.n	800319a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	22ff      	movs	r2, #255	@ 0xff
 800317a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003180:	b2da      	uxtb	r2, r3
 8003182:	2380      	movs	r3, #128	@ 0x80
 8003184:	045c      	lsls	r4, r3, #17
 8003186:	230a      	movs	r3, #10
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	8819      	ldrh	r1, [r3, #0]
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	2300      	movs	r3, #0
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	0023      	movs	r3, r4
 8003194:	f001 fac2 	bl	800471c <I2C_TransferConfig>
 8003198:	e012      	b.n	80031c0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	2380      	movs	r3, #128	@ 0x80
 80031ac:	049c      	lsls	r4, r3, #18
 80031ae:	230a      	movs	r3, #10
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	8819      	ldrh	r1, [r3, #0]
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	2300      	movs	r3, #0
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	0023      	movs	r3, r4
 80031bc:	f001 faae 	bl	800471c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d198      	bne.n	80030fc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f001 f8c9 	bl	8004368 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031d6:	1e03      	subs	r3, r0, #0
 80031d8:	d001      	beq.n	80031de <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e01a      	b.n	8003214 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2220      	movs	r2, #32
 80031e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	490b      	ldr	r1, [pc, #44]	@ (8003220 <HAL_I2C_Master_Transmit+0x250>)
 80031f2:	400a      	ands	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2241      	movs	r2, #65	@ 0x41
 80031fa:	2120      	movs	r1, #32
 80031fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2242      	movs	r2, #66	@ 0x42
 8003202:	2100      	movs	r1, #0
 8003204:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2240      	movs	r2, #64	@ 0x40
 800320a:	2100      	movs	r1, #0
 800320c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	e000      	b.n	8003214 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003212:	2302      	movs	r3, #2
  }
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	b007      	add	sp, #28
 800321a:	bd90      	pop	{r4, r7, pc}
 800321c:	80002000 	.word	0x80002000
 8003220:	fe00e800 	.word	0xfe00e800

08003224 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003224:	b590      	push	{r4, r7, lr}
 8003226:	b089      	sub	sp, #36	@ 0x24
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	0008      	movs	r0, r1
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	0019      	movs	r1, r3
 8003232:	230a      	movs	r3, #10
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	1c02      	adds	r2, r0, #0
 8003238:	801a      	strh	r2, [r3, #0]
 800323a:	2308      	movs	r3, #8
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	1c0a      	adds	r2, r1, #0
 8003240:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2241      	movs	r2, #65	@ 0x41
 8003246:	5c9b      	ldrb	r3, [r3, r2]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b20      	cmp	r3, #32
 800324c:	d000      	beq.n	8003250 <HAL_I2C_Master_Receive+0x2c>
 800324e:	e0e8      	b.n	8003422 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	5c9b      	ldrb	r3, [r3, r2]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_I2C_Master_Receive+0x3a>
 800325a:	2302      	movs	r3, #2
 800325c:	e0e2      	b.n	8003424 <HAL_I2C_Master_Receive+0x200>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2240      	movs	r2, #64	@ 0x40
 8003262:	2101      	movs	r1, #1
 8003264:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003266:	f7ff f937 	bl	80024d8 <HAL_GetTick>
 800326a:	0003      	movs	r3, r0
 800326c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800326e:	2380      	movs	r3, #128	@ 0x80
 8003270:	0219      	lsls	r1, r3, #8
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	2319      	movs	r3, #25
 800327a:	2201      	movs	r2, #1
 800327c:	f000 ffd6 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 8003280:	1e03      	subs	r3, r0, #0
 8003282:	d001      	beq.n	8003288 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0cd      	b.n	8003424 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2241      	movs	r2, #65	@ 0x41
 800328c:	2122      	movs	r1, #34	@ 0x22
 800328e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2242      	movs	r2, #66	@ 0x42
 8003294:	2110      	movs	r1, #16
 8003296:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2208      	movs	r2, #8
 80032a8:	18ba      	adds	r2, r7, r2
 80032aa:	8812      	ldrh	r2, [r2, #0]
 80032ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2bff      	cmp	r3, #255	@ 0xff
 80032bc:	d911      	bls.n	80032e2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	22ff      	movs	r2, #255	@ 0xff
 80032c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	2380      	movs	r3, #128	@ 0x80
 80032cc:	045c      	lsls	r4, r3, #17
 80032ce:	230a      	movs	r3, #10
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	8819      	ldrh	r1, [r3, #0]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	4b55      	ldr	r3, [pc, #340]	@ (800342c <HAL_I2C_Master_Receive+0x208>)
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	0023      	movs	r3, r4
 80032dc:	f001 fa1e 	bl	800471c <I2C_TransferConfig>
 80032e0:	e076      	b.n	80033d0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	2380      	movs	r3, #128	@ 0x80
 80032f4:	049c      	lsls	r4, r3, #18
 80032f6:	230a      	movs	r3, #10
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	8819      	ldrh	r1, [r3, #0]
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	4b4b      	ldr	r3, [pc, #300]	@ (800342c <HAL_I2C_Master_Receive+0x208>)
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	0023      	movs	r3, r4
 8003304:	f001 fa0a 	bl	800471c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003308:	e062      	b.n	80033d0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	0018      	movs	r0, r3
 8003312:	f001 f86d 	bl	80043f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003316:	1e03      	subs	r3, r0, #0
 8003318:	d001      	beq.n	800331e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e082      	b.n	8003424 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d03a      	beq.n	80033d0 <HAL_I2C_Master_Receive+0x1ac>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335e:	2b00      	cmp	r3, #0
 8003360:	d136      	bne.n	80033d0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003362:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	0013      	movs	r3, r2
 800336c:	2200      	movs	r2, #0
 800336e:	2180      	movs	r1, #128	@ 0x80
 8003370:	f000 ff5c 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 8003374:	1e03      	subs	r3, r0, #0
 8003376:	d001      	beq.n	800337c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e053      	b.n	8003424 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003380:	b29b      	uxth	r3, r3
 8003382:	2bff      	cmp	r3, #255	@ 0xff
 8003384:	d911      	bls.n	80033aa <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	22ff      	movs	r2, #255	@ 0xff
 800338a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003390:	b2da      	uxtb	r2, r3
 8003392:	2380      	movs	r3, #128	@ 0x80
 8003394:	045c      	lsls	r4, r3, #17
 8003396:	230a      	movs	r3, #10
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	8819      	ldrh	r1, [r3, #0]
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	2300      	movs	r3, #0
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	0023      	movs	r3, r4
 80033a4:	f001 f9ba 	bl	800471c <I2C_TransferConfig>
 80033a8:	e012      	b.n	80033d0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	2380      	movs	r3, #128	@ 0x80
 80033bc:	049c      	lsls	r4, r3, #18
 80033be:	230a      	movs	r3, #10
 80033c0:	18fb      	adds	r3, r7, r3
 80033c2:	8819      	ldrh	r1, [r3, #0]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	2300      	movs	r3, #0
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	0023      	movs	r3, r4
 80033cc:	f001 f9a6 	bl	800471c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d197      	bne.n	800330a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	0018      	movs	r0, r3
 80033e2:	f000 ffc1 	bl	8004368 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033e6:	1e03      	subs	r3, r0, #0
 80033e8:	d001      	beq.n	80033ee <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e01a      	b.n	8003424 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2220      	movs	r2, #32
 80033f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	490b      	ldr	r1, [pc, #44]	@ (8003430 <HAL_I2C_Master_Receive+0x20c>)
 8003402:	400a      	ands	r2, r1
 8003404:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2241      	movs	r2, #65	@ 0x41
 800340a:	2120      	movs	r1, #32
 800340c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2242      	movs	r2, #66	@ 0x42
 8003412:	2100      	movs	r1, #0
 8003414:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2240      	movs	r2, #64	@ 0x40
 800341a:	2100      	movs	r1, #0
 800341c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	e000      	b.n	8003424 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003422:	2302      	movs	r3, #2
  }
}
 8003424:	0018      	movs	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	b007      	add	sp, #28
 800342a:	bd90      	pop	{r4, r7, pc}
 800342c:	80002400 	.word	0x80002400
 8003430:	fe00e800 	.word	0xfe00e800

08003434 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	@ 0x28
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	607a      	str	r2, [r7, #4]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	230a      	movs	r3, #10
 8003442:	18fb      	adds	r3, r7, r3
 8003444:	1c0a      	adds	r2, r1, #0
 8003446:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2241      	movs	r2, #65	@ 0x41
 8003450:	5c9b      	ldrb	r3, [r3, r2]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b20      	cmp	r3, #32
 8003456:	d000      	beq.n	800345a <HAL_I2C_IsDeviceReady+0x26>
 8003458:	e0df      	b.n	800361a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699a      	ldr	r2, [r3, #24]
 8003460:	2380      	movs	r3, #128	@ 0x80
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	401a      	ands	r2, r3
 8003466:	2380      	movs	r3, #128	@ 0x80
 8003468:	021b      	lsls	r3, r3, #8
 800346a:	429a      	cmp	r2, r3
 800346c:	d101      	bne.n	8003472 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800346e:	2302      	movs	r3, #2
 8003470:	e0d4      	b.n	800361c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2240      	movs	r2, #64	@ 0x40
 8003476:	5c9b      	ldrb	r3, [r3, r2]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_I2C_IsDeviceReady+0x4c>
 800347c:	2302      	movs	r3, #2
 800347e:	e0cd      	b.n	800361c <HAL_I2C_IsDeviceReady+0x1e8>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2240      	movs	r2, #64	@ 0x40
 8003484:	2101      	movs	r1, #1
 8003486:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2241      	movs	r2, #65	@ 0x41
 800348c:	2124      	movs	r1, #36	@ 0x24
 800348e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d107      	bne.n	80034ae <HAL_I2C_IsDeviceReady+0x7a>
 800349e:	230a      	movs	r3, #10
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	059b      	lsls	r3, r3, #22
 80034a6:	0d9b      	lsrs	r3, r3, #22
 80034a8:	4a5e      	ldr	r2, [pc, #376]	@ (8003624 <HAL_I2C_IsDeviceReady+0x1f0>)
 80034aa:	431a      	orrs	r2, r3
 80034ac:	e006      	b.n	80034bc <HAL_I2C_IsDeviceReady+0x88>
 80034ae:	230a      	movs	r3, #10
 80034b0:	18fb      	adds	r3, r7, r3
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	059b      	lsls	r3, r3, #22
 80034b6:	0d9b      	lsrs	r3, r3, #22
 80034b8:	4a5b      	ldr	r2, [pc, #364]	@ (8003628 <HAL_I2C_IsDeviceReady+0x1f4>)
 80034ba:	431a      	orrs	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80034c2:	f7ff f809 	bl	80024d8 <HAL_GetTick>
 80034c6:	0003      	movs	r3, r0
 80034c8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2220      	movs	r2, #32
 80034d2:	4013      	ands	r3, r2
 80034d4:	3b20      	subs	r3, #32
 80034d6:	425a      	negs	r2, r3
 80034d8:	4153      	adcs	r3, r2
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	231f      	movs	r3, #31
 80034de:	18fb      	adds	r3, r7, r3
 80034e0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2210      	movs	r2, #16
 80034ea:	4013      	ands	r3, r2
 80034ec:	3b10      	subs	r3, #16
 80034ee:	425a      	negs	r2, r3
 80034f0:	4153      	adcs	r3, r2
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	231e      	movs	r3, #30
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80034fa:	e035      	b.n	8003568 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	3301      	adds	r3, #1
 8003500:	d01a      	beq.n	8003538 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003502:	f7fe ffe9 	bl	80024d8 <HAL_GetTick>
 8003506:	0002      	movs	r2, r0
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d302      	bcc.n	8003518 <HAL_I2C_IsDeviceReady+0xe4>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10f      	bne.n	8003538 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2241      	movs	r2, #65	@ 0x41
 800351c:	2120      	movs	r1, #32
 800351e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003524:	2220      	movs	r2, #32
 8003526:	431a      	orrs	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2240      	movs	r2, #64	@ 0x40
 8003530:	2100      	movs	r1, #0
 8003532:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e071      	b.n	800361c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2220      	movs	r2, #32
 8003540:	4013      	ands	r3, r2
 8003542:	3b20      	subs	r3, #32
 8003544:	425a      	negs	r2, r3
 8003546:	4153      	adcs	r3, r2
 8003548:	b2da      	uxtb	r2, r3
 800354a:	231f      	movs	r3, #31
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	2210      	movs	r2, #16
 8003558:	4013      	ands	r3, r2
 800355a:	3b10      	subs	r3, #16
 800355c:	425a      	negs	r2, r3
 800355e:	4153      	adcs	r3, r2
 8003560:	b2da      	uxtb	r2, r3
 8003562:	231e      	movs	r3, #30
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003568:	231f      	movs	r3, #31
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d104      	bne.n	800357c <HAL_I2C_IsDeviceReady+0x148>
 8003572:	231e      	movs	r3, #30
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0bf      	beq.n	80034fc <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	2210      	movs	r2, #16
 8003584:	4013      	ands	r3, r2
 8003586:	2b10      	cmp	r3, #16
 8003588:	d01a      	beq.n	80035c0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	0013      	movs	r3, r2
 8003594:	2200      	movs	r2, #0
 8003596:	2120      	movs	r1, #32
 8003598:	f000 fe48 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 800359c:	1e03      	subs	r3, r0, #0
 800359e:	d001      	beq.n	80035a4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e03b      	b.n	800361c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2220      	movs	r2, #32
 80035aa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2241      	movs	r2, #65	@ 0x41
 80035b0:	2120      	movs	r1, #32
 80035b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2240      	movs	r2, #64	@ 0x40
 80035b8:	2100      	movs	r1, #0
 80035ba:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e02d      	b.n	800361c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	0013      	movs	r3, r2
 80035ca:	2200      	movs	r2, #0
 80035cc:	2120      	movs	r1, #32
 80035ce:	f000 fe2d 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 80035d2:	1e03      	subs	r3, r0, #0
 80035d4:	d001      	beq.n	80035da <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e020      	b.n	800361c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2210      	movs	r2, #16
 80035e0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2220      	movs	r2, #32
 80035e8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	3301      	adds	r3, #1
 80035ee:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d900      	bls.n	80035fa <HAL_I2C_IsDeviceReady+0x1c6>
 80035f8:	e74d      	b.n	8003496 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2241      	movs	r2, #65	@ 0x41
 80035fe:	2120      	movs	r1, #32
 8003600:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	2220      	movs	r2, #32
 8003608:	431a      	orrs	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2240      	movs	r2, #64	@ 0x40
 8003612:	2100      	movs	r1, #0
 8003614:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800361a:	2302      	movs	r3, #2
  }
}
 800361c:	0018      	movs	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	b008      	add	sp, #32
 8003622:	bd80      	pop	{r7, pc}
 8003624:	02002000 	.word	0x02002000
 8003628:	02002800 	.word	0x02002800

0800362c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	68f9      	ldr	r1, [r7, #12]
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	4798      	blx	r3
  }
}
 8003658:	46c0      	nop			@ (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	b004      	add	sp, #16
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	2380      	movs	r3, #128	@ 0x80
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	4013      	ands	r3, r2
 8003680:	d00e      	beq.n	80036a0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2280      	movs	r2, #128	@ 0x80
 8003686:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003688:	d00a      	beq.n	80036a0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	2201      	movs	r2, #1
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2280      	movs	r2, #128	@ 0x80
 800369c:	0052      	lsls	r2, r2, #1
 800369e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	2380      	movs	r3, #128	@ 0x80
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4013      	ands	r3, r2
 80036a8:	d00e      	beq.n	80036c8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2280      	movs	r2, #128	@ 0x80
 80036ae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80036b0:	d00a      	beq.n	80036c8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b6:	2208      	movs	r2, #8
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2280      	movs	r2, #128	@ 0x80
 80036c4:	00d2      	lsls	r2, r2, #3
 80036c6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	2380      	movs	r3, #128	@ 0x80
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4013      	ands	r3, r2
 80036d0:	d00e      	beq.n	80036f0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	2280      	movs	r2, #128	@ 0x80
 80036d6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80036d8:	d00a      	beq.n	80036f0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036de:	2202      	movs	r2, #2
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2280      	movs	r2, #128	@ 0x80
 80036ec:	0092      	lsls	r2, r2, #2
 80036ee:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	220b      	movs	r2, #11
 80036fa:	4013      	ands	r3, r2
 80036fc:	d005      	beq.n	800370a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	0011      	movs	r1, r2
 8003704:	0018      	movs	r0, r3
 8003706:	f000 fc25 	bl	8003f54 <I2C_ITError>
  }
}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	b006      	add	sp, #24
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	46bd      	mov	sp, r7
 800371e:	b002      	add	sp, #8
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	b002      	add	sp, #8
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	0008      	movs	r0, r1
 800373c:	0011      	movs	r1, r2
 800373e:	1cfb      	adds	r3, r7, #3
 8003740:	1c02      	adds	r2, r0, #0
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	003b      	movs	r3, r7
 8003746:	1c0a      	adds	r2, r1, #0
 8003748:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	46bd      	mov	sp, r7
 800374e:	b002      	add	sp, #8
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800375a:	46c0      	nop			@ (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	b002      	add	sp, #8
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	b002      	add	sp, #8
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800377a:	46c0      	nop			@ (mov r8, r8)
 800377c:	46bd      	mov	sp, r7
 800377e:	b002      	add	sp, #8
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003794:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2240      	movs	r2, #64	@ 0x40
 800379e:	5c9b      	ldrb	r3, [r3, r2]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <I2C_Slave_ISR_IT+0x24>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e0e7      	b.n	8003978 <I2C_Slave_ISR_IT+0x1f4>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2240      	movs	r2, #64	@ 0x40
 80037ac:	2101      	movs	r1, #1
 80037ae:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	2220      	movs	r2, #32
 80037b4:	4013      	ands	r3, r2
 80037b6:	d00a      	beq.n	80037ce <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037be:	d006      	beq.n	80037ce <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	0011      	movs	r1, r2
 80037c6:	0018      	movs	r0, r3
 80037c8:	f000 f9e4 	bl	8003b94 <I2C_ITSlaveCplt>
 80037cc:	e0cf      	b.n	800396e <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2210      	movs	r2, #16
 80037d2:	4013      	ands	r3, r2
 80037d4:	d052      	beq.n	800387c <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2210      	movs	r2, #16
 80037da:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80037dc:	d04e      	beq.n	800387c <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d12d      	bne.n	8003844 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2241      	movs	r2, #65	@ 0x41
 80037ec:	5c9b      	ldrb	r3, [r3, r2]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b28      	cmp	r3, #40	@ 0x28
 80037f2:	d10b      	bne.n	800380c <I2C_Slave_ISR_IT+0x88>
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	2380      	movs	r3, #128	@ 0x80
 80037f8:	049b      	lsls	r3, r3, #18
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d106      	bne.n	800380c <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	0011      	movs	r1, r2
 8003804:	0018      	movs	r0, r3
 8003806:	f000 fb4d 	bl	8003ea4 <I2C_ITListenCplt>
 800380a:	e036      	b.n	800387a <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2241      	movs	r2, #65	@ 0x41
 8003810:	5c9b      	ldrb	r3, [r3, r2]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b29      	cmp	r3, #41	@ 0x29
 8003816:	d110      	bne.n	800383a <I2C_Slave_ISR_IT+0xb6>
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	4a59      	ldr	r2, [pc, #356]	@ (8003980 <I2C_Slave_ISR_IT+0x1fc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00c      	beq.n	800383a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2210      	movs	r2, #16
 8003826:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	0018      	movs	r0, r3
 800382c:	f000 fcbd 	bl	80041aa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	0018      	movs	r0, r3
 8003834:	f000 f94a 	bl	8003acc <I2C_ITSlaveSeqCplt>
 8003838:	e01f      	b.n	800387a <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2210      	movs	r2, #16
 8003840:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003842:	e091      	b.n	8003968 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2210      	movs	r2, #16
 800384a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003850:	2204      	movs	r2, #4
 8003852:	431a      	orrs	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <I2C_Slave_ISR_IT+0xe6>
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	2380      	movs	r3, #128	@ 0x80
 8003862:	045b      	lsls	r3, r3, #17
 8003864:	429a      	cmp	r2, r3
 8003866:	d000      	beq.n	800386a <I2C_Slave_ISR_IT+0xe6>
 8003868:	e07e      	b.n	8003968 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	0011      	movs	r1, r2
 8003872:	0018      	movs	r0, r3
 8003874:	f000 fb6e 	bl	8003f54 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003878:	e076      	b.n	8003968 <I2C_Slave_ISR_IT+0x1e4>
 800387a:	e075      	b.n	8003968 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	2204      	movs	r2, #4
 8003880:	4013      	ands	r3, r2
 8003882:	d02f      	beq.n	80038e4 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2204      	movs	r2, #4
 8003888:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800388a:	d02b      	beq.n	80038e4 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d018      	beq.n	80038c8 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d14c      	bne.n	800396c <I2C_Slave_ISR_IT+0x1e8>
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003980 <I2C_Slave_ISR_IT+0x1fc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d048      	beq.n	800396c <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	0018      	movs	r0, r3
 80038de:	f000 f8f5 	bl	8003acc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80038e2:	e043      	b.n	800396c <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2208      	movs	r2, #8
 80038e8:	4013      	ands	r3, r2
 80038ea:	d00a      	beq.n	8003902 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2208      	movs	r2, #8
 80038f0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80038f2:	d006      	beq.n	8003902 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	0011      	movs	r1, r2
 80038fa:	0018      	movs	r0, r3
 80038fc:	f000 f842 	bl	8003984 <I2C_ITAddrCplt>
 8003900:	e035      	b.n	800396e <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2202      	movs	r2, #2
 8003906:	4013      	ands	r3, r2
 8003908:	d031      	beq.n	800396e <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003910:	d02d      	beq.n	800396e <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d018      	beq.n	800394e <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	781a      	ldrb	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800394c:	e00f      	b.n	800396e <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	2380      	movs	r3, #128	@ 0x80
 8003952:	045b      	lsls	r3, r3, #17
 8003954:	429a      	cmp	r2, r3
 8003956:	d002      	beq.n	800395e <I2C_Slave_ISR_IT+0x1da>
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d107      	bne.n	800396e <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	0018      	movs	r0, r3
 8003962:	f000 f8b3 	bl	8003acc <I2C_ITSlaveSeqCplt>
 8003966:	e002      	b.n	800396e <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8003968:	46c0      	nop			@ (mov r8, r8)
 800396a:	e000      	b.n	800396e <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 800396c:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2240      	movs	r2, #64	@ 0x40
 8003972:	2100      	movs	r1, #0
 8003974:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	0018      	movs	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	b006      	add	sp, #24
 800397e:	bd80      	pop	{r7, pc}
 8003980:	ffff0000 	.word	0xffff0000

08003984 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003984:	b5b0      	push	{r4, r5, r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2241      	movs	r2, #65	@ 0x41
 8003992:	5c9b      	ldrb	r3, [r3, r2]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	001a      	movs	r2, r3
 8003998:	2328      	movs	r3, #40	@ 0x28
 800399a:	4013      	ands	r3, r2
 800399c:	2b28      	cmp	r3, #40	@ 0x28
 800399e:	d000      	beq.n	80039a2 <I2C_ITAddrCplt+0x1e>
 80039a0:	e088      	b.n	8003ab4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	0c1b      	lsrs	r3, r3, #16
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	250f      	movs	r5, #15
 80039ae:	197b      	adds	r3, r7, r5
 80039b0:	2101      	movs	r1, #1
 80039b2:	400a      	ands	r2, r1
 80039b4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	0c1b      	lsrs	r3, r3, #16
 80039be:	b29a      	uxth	r2, r3
 80039c0:	200c      	movs	r0, #12
 80039c2:	183b      	adds	r3, r7, r0
 80039c4:	21fe      	movs	r1, #254	@ 0xfe
 80039c6:	400a      	ands	r2, r1
 80039c8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	240a      	movs	r4, #10
 80039d4:	193b      	adds	r3, r7, r4
 80039d6:	0592      	lsls	r2, r2, #22
 80039d8:	0d92      	lsrs	r2, r2, #22
 80039da:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	2308      	movs	r3, #8
 80039e6:	18fb      	adds	r3, r7, r3
 80039e8:	21fe      	movs	r1, #254	@ 0xfe
 80039ea:	400a      	ands	r2, r1
 80039ec:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d148      	bne.n	8003a88 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80039f6:	0021      	movs	r1, r4
 80039f8:	187b      	adds	r3, r7, r1
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	09db      	lsrs	r3, r3, #7
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	183b      	adds	r3, r7, r0
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	4053      	eors	r3, r2
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	001a      	movs	r2, r3
 8003a0a:	2306      	movs	r3, #6
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d120      	bne.n	8003a52 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003a10:	183b      	adds	r3, r7, r0
 8003a12:	187a      	adds	r2, r7, r1
 8003a14:	8812      	ldrh	r2, [r2, #0]
 8003a16:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d14c      	bne.n	8003ac4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2208      	movs	r2, #8
 8003a36:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2240      	movs	r2, #64	@ 0x40
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a40:	183b      	adds	r3, r7, r0
 8003a42:	881a      	ldrh	r2, [r3, #0]
 8003a44:	197b      	adds	r3, r7, r5
 8003a46:	7819      	ldrb	r1, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7ff fe71 	bl	8003732 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a50:	e038      	b.n	8003ac4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8003a52:	240c      	movs	r4, #12
 8003a54:	193b      	adds	r3, r7, r4
 8003a56:	2208      	movs	r2, #8
 8003a58:	18ba      	adds	r2, r7, r2
 8003a5a:	8812      	ldrh	r2, [r2, #0]
 8003a5c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a5e:	2380      	movs	r3, #128	@ 0x80
 8003a60:	021a      	lsls	r2, r3, #8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0011      	movs	r1, r2
 8003a66:	0018      	movs	r0, r3
 8003a68:	f000 fe92 	bl	8004790 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2240      	movs	r2, #64	@ 0x40
 8003a70:	2100      	movs	r1, #0
 8003a72:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a74:	193b      	adds	r3, r7, r4
 8003a76:	881a      	ldrh	r2, [r3, #0]
 8003a78:	230f      	movs	r3, #15
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	7819      	ldrb	r1, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	0018      	movs	r0, r3
 8003a82:	f7ff fe56 	bl	8003732 <HAL_I2C_AddrCallback>
}
 8003a86:	e01d      	b.n	8003ac4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a88:	2380      	movs	r3, #128	@ 0x80
 8003a8a:	021a      	lsls	r2, r3, #8
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	0011      	movs	r1, r2
 8003a90:	0018      	movs	r0, r3
 8003a92:	f000 fe7d 	bl	8004790 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2240      	movs	r2, #64	@ 0x40
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	18fb      	adds	r3, r7, r3
 8003aa2:	881a      	ldrh	r2, [r3, #0]
 8003aa4:	230f      	movs	r3, #15
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	7819      	ldrb	r1, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	0018      	movs	r0, r3
 8003aae:	f7ff fe40 	bl	8003732 <HAL_I2C_AddrCallback>
}
 8003ab2:	e007      	b.n	8003ac4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2208      	movs	r2, #8
 8003aba:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2240      	movs	r2, #64	@ 0x40
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	5499      	strb	r1, [r3, r2]
}
 8003ac4:	46c0      	nop			@ (mov r8, r8)
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b004      	add	sp, #16
 8003aca:	bdb0      	pop	{r4, r5, r7, pc}

08003acc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2242      	movs	r2, #66	@ 0x42
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	2380      	movs	r3, #128	@ 0x80
 8003ae8:	01db      	lsls	r3, r3, #7
 8003aea:	4013      	ands	r3, r2
 8003aec:	d008      	beq.n	8003b00 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4924      	ldr	r1, [pc, #144]	@ (8003b8c <I2C_ITSlaveSeqCplt+0xc0>)
 8003afa:	400a      	ands	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	e00c      	b.n	8003b1a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	2380      	movs	r3, #128	@ 0x80
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	4013      	ands	r3, r2
 8003b08:	d007      	beq.n	8003b1a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	491e      	ldr	r1, [pc, #120]	@ (8003b90 <I2C_ITSlaveSeqCplt+0xc4>)
 8003b16:	400a      	ands	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2241      	movs	r2, #65	@ 0x41
 8003b1e:	5c9b      	ldrb	r3, [r3, r2]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b29      	cmp	r3, #41	@ 0x29
 8003b24:	d114      	bne.n	8003b50 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2241      	movs	r2, #65	@ 0x41
 8003b2a:	2128      	movs	r1, #40	@ 0x28
 8003b2c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2221      	movs	r2, #33	@ 0x21
 8003b32:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2101      	movs	r1, #1
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f000 fe29 	bl	8004790 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2240      	movs	r2, #64	@ 0x40
 8003b42:	2100      	movs	r1, #0
 8003b44:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f7ff fde2 	bl	8003712 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003b4e:	e019      	b.n	8003b84 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2241      	movs	r2, #65	@ 0x41
 8003b54:	5c9b      	ldrb	r3, [r3, r2]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b5a:	d113      	bne.n	8003b84 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2241      	movs	r2, #65	@ 0x41
 8003b60:	2128      	movs	r1, #40	@ 0x28
 8003b62:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2222      	movs	r2, #34	@ 0x22
 8003b68:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2102      	movs	r1, #2
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f000 fe0e 	bl	8004790 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2240      	movs	r2, #64	@ 0x40
 8003b78:	2100      	movs	r1, #0
 8003b7a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7ff fdcf 	bl	8003722 <HAL_I2C_SlaveRxCpltCallback>
}
 8003b84:	46c0      	nop			@ (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b004      	add	sp, #16
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	ffffbfff 	.word	0xffffbfff
 8003b90:	ffff7fff 	.word	0xffff7fff

08003b94 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003bb0:	200b      	movs	r0, #11
 8003bb2:	183b      	adds	r3, r7, r0
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	2141      	movs	r1, #65	@ 0x41
 8003bb8:	5c52      	ldrb	r2, [r2, r1]
 8003bba:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bc4:	183b      	adds	r3, r7, r0
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b21      	cmp	r3, #33	@ 0x21
 8003bca:	d003      	beq.n	8003bd4 <I2C_ITSlaveCplt+0x40>
 8003bcc:	183b      	adds	r3, r7, r0
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b29      	cmp	r3, #41	@ 0x29
 8003bd2:	d109      	bne.n	8003be8 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003bd4:	4aac      	ldr	r2, [pc, #688]	@ (8003e88 <I2C_ITSlaveCplt+0x2f4>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	0011      	movs	r1, r2
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f000 fdd8 	bl	8004790 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2221      	movs	r2, #33	@ 0x21
 8003be4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003be6:	e020      	b.n	8003c2a <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003be8:	220b      	movs	r2, #11
 8003bea:	18bb      	adds	r3, r7, r2
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b22      	cmp	r3, #34	@ 0x22
 8003bf0:	d003      	beq.n	8003bfa <I2C_ITSlaveCplt+0x66>
 8003bf2:	18bb      	adds	r3, r7, r2
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bf8:	d109      	bne.n	8003c0e <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003bfa:	4aa4      	ldr	r2, [pc, #656]	@ (8003e8c <I2C_ITSlaveCplt+0x2f8>)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	0011      	movs	r1, r2
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 fdc5 	bl	8004790 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2222      	movs	r2, #34	@ 0x22
 8003c0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c0c:	e00d      	b.n	8003c2a <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003c0e:	230b      	movs	r3, #11
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b28      	cmp	r3, #40	@ 0x28
 8003c16:	d108      	bne.n	8003c2a <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003c18:	4a9d      	ldr	r2, [pc, #628]	@ (8003e90 <I2C_ITSlaveCplt+0x2fc>)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	0011      	movs	r1, r2
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f000 fdb6 	bl	8004790 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2180      	movs	r1, #128	@ 0x80
 8003c36:	0209      	lsls	r1, r1, #8
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4993      	ldr	r1, [pc, #588]	@ (8003e94 <I2C_ITSlaveCplt+0x300>)
 8003c48:	400a      	ands	r2, r1
 8003c4a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 faab 	bl	80041aa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	2380      	movs	r3, #128	@ 0x80
 8003c58:	01db      	lsls	r3, r3, #7
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d013      	beq.n	8003c86 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	498b      	ldr	r1, [pc, #556]	@ (8003e98 <I2C_ITSlaveCplt+0x304>)
 8003c6a:	400a      	ands	r2, r1
 8003c6c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d01f      	beq.n	8003cb6 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c84:	e017      	b.n	8003cb6 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	2380      	movs	r3, #128	@ 0x80
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d012      	beq.n	8003cb6 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4980      	ldr	r1, [pc, #512]	@ (8003e9c <I2C_ITSlaveCplt+0x308>)
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d006      	beq.n	8003cb6 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2204      	movs	r2, #4
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d020      	beq.n	8003d00 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	4393      	bics	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00c      	beq.n	8003d00 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0e:	2204      	movs	r2, #4
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2210      	movs	r2, #16
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d04f      	beq.n	8003dbe <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2210      	movs	r2, #16
 8003d22:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003d24:	d04b      	beq.n	8003dbe <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d12d      	bne.n	8003d8c <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2241      	movs	r2, #65	@ 0x41
 8003d34:	5c9b      	ldrb	r3, [r3, r2]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b28      	cmp	r3, #40	@ 0x28
 8003d3a:	d10b      	bne.n	8003d54 <I2C_ITSlaveCplt+0x1c0>
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	2380      	movs	r3, #128	@ 0x80
 8003d40:	049b      	lsls	r3, r3, #18
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d106      	bne.n	8003d54 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	0011      	movs	r1, r2
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f000 f8a9 	bl	8003ea4 <I2C_ITListenCplt>
 8003d52:	e034      	b.n	8003dbe <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2241      	movs	r2, #65	@ 0x41
 8003d58:	5c9b      	ldrb	r3, [r3, r2]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b29      	cmp	r3, #41	@ 0x29
 8003d5e:	d110      	bne.n	8003d82 <I2C_ITSlaveCplt+0x1ee>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a4f      	ldr	r2, [pc, #316]	@ (8003ea0 <I2C_ITSlaveCplt+0x30c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00c      	beq.n	8003d82 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	0018      	movs	r0, r3
 8003d74:	f000 fa19 	bl	80041aa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7ff fea6 	bl	8003acc <I2C_ITSlaveSeqCplt>
 8003d80:	e01d      	b.n	8003dbe <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2210      	movs	r2, #16
 8003d88:	61da      	str	r2, [r3, #28]
 8003d8a:	e018      	b.n	8003dbe <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2210      	movs	r2, #16
 8003d92:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d98:	2204      	movs	r2, #4
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <I2C_ITSlaveCplt+0x21c>
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	2380      	movs	r3, #128	@ 0x80
 8003daa:	045b      	lsls	r3, r3, #17
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d106      	bne.n	8003dbe <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	0011      	movs	r1, r2
 8003db8:	0018      	movs	r0, r3
 8003dba:	f000 f8cb 	bl	8003f54 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2242      	movs	r2, #66	@ 0x42
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d013      	beq.n	8003dfc <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	0011      	movs	r1, r2
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f000 f8b9 	bl	8003f54 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2241      	movs	r2, #65	@ 0x41
 8003de6:	5c9b      	ldrb	r3, [r3, r2]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b28      	cmp	r3, #40	@ 0x28
 8003dec:	d147      	bne.n	8003e7e <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	0011      	movs	r1, r2
 8003df4:	0018      	movs	r0, r3
 8003df6:	f000 f855 	bl	8003ea4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003dfa:	e040      	b.n	8003e7e <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e00:	4a27      	ldr	r2, [pc, #156]	@ (8003ea0 <I2C_ITSlaveCplt+0x30c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d016      	beq.n	8003e34 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f7ff fe5f 	bl	8003acc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a23      	ldr	r2, [pc, #140]	@ (8003ea0 <I2C_ITSlaveCplt+0x30c>)
 8003e12:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2241      	movs	r2, #65	@ 0x41
 8003e18:	2120      	movs	r1, #32
 8003e1a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2240      	movs	r2, #64	@ 0x40
 8003e26:	2100      	movs	r1, #0
 8003e28:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7ff fc90 	bl	8003752 <HAL_I2C_ListenCpltCallback>
}
 8003e32:	e024      	b.n	8003e7e <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2241      	movs	r2, #65	@ 0x41
 8003e38:	5c9b      	ldrb	r3, [r3, r2]
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b22      	cmp	r3, #34	@ 0x22
 8003e3e:	d10f      	bne.n	8003e60 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2241      	movs	r2, #65	@ 0x41
 8003e44:	2120      	movs	r1, #32
 8003e46:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2240      	movs	r2, #64	@ 0x40
 8003e52:	2100      	movs	r1, #0
 8003e54:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7ff fc62 	bl	8003722 <HAL_I2C_SlaveRxCpltCallback>
}
 8003e5e:	e00e      	b.n	8003e7e <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2241      	movs	r2, #65	@ 0x41
 8003e64:	2120      	movs	r1, #32
 8003e66:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2240      	movs	r2, #64	@ 0x40
 8003e72:	2100      	movs	r1, #0
 8003e74:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f7ff fc4a 	bl	8003712 <HAL_I2C_SlaveTxCpltCallback>
}
 8003e7e:	46c0      	nop			@ (mov r8, r8)
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b006      	add	sp, #24
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			@ (mov r8, r8)
 8003e88:	00008001 	.word	0x00008001
 8003e8c:	00008002 	.word	0x00008002
 8003e90:	00008003 	.word	0x00008003
 8003e94:	fe00e800 	.word	0xfe00e800
 8003e98:	ffffbfff 	.word	0xffffbfff
 8003e9c:	ffff7fff 	.word	0xffff7fff
 8003ea0:	ffff0000 	.word	0xffff0000

08003ea4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a26      	ldr	r2, [pc, #152]	@ (8003f4c <I2C_ITListenCplt+0xa8>)
 8003eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2241      	movs	r2, #65	@ 0x41
 8003ebe:	2120      	movs	r1, #32
 8003ec0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2242      	movs	r2, #66	@ 0x42
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d022      	beq.n	8003f1e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d012      	beq.n	8003f1e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f16:	2204      	movs	r2, #4
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8003f50 <I2C_ITListenCplt+0xac>)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	0011      	movs	r1, r2
 8003f24:	0018      	movs	r0, r3
 8003f26:	f000 fc33 	bl	8004790 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2210      	movs	r2, #16
 8003f30:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2240      	movs	r2, #64	@ 0x40
 8003f36:	2100      	movs	r1, #0
 8003f38:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f7ff fc08 	bl	8003752 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b002      	add	sp, #8
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	ffff0000 	.word	0xffff0000
 8003f50:	00008003 	.word	0x00008003

08003f54 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003f5e:	200f      	movs	r0, #15
 8003f60:	183b      	adds	r3, r7, r0
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	2141      	movs	r1, #65	@ 0x41
 8003f66:	5c52      	ldrb	r2, [r2, r1]
 8003f68:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2242      	movs	r2, #66	@ 0x42
 8003f6e:	2100      	movs	r1, #0
 8003f70:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a72      	ldr	r2, [pc, #456]	@ (8004140 <I2C_ITError+0x1ec>)
 8003f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003f8a:	183b      	adds	r3, r7, r0
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b28      	cmp	r3, #40	@ 0x28
 8003f90:	d007      	beq.n	8003fa2 <I2C_ITError+0x4e>
 8003f92:	183b      	adds	r3, r7, r0
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b29      	cmp	r3, #41	@ 0x29
 8003f98:	d003      	beq.n	8003fa2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003f9a:	183b      	adds	r3, r7, r0
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fa0:	d10c      	bne.n	8003fbc <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2103      	movs	r1, #3
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f000 fbf2 	bl	8004790 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2241      	movs	r2, #65	@ 0x41
 8003fb0:	2128      	movs	r1, #40	@ 0x28
 8003fb2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a63      	ldr	r2, [pc, #396]	@ (8004144 <I2C_ITError+0x1f0>)
 8003fb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fba:	e032      	b.n	8004022 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003fbc:	4a62      	ldr	r2, [pc, #392]	@ (8004148 <I2C_ITError+0x1f4>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	0011      	movs	r1, r2
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f000 fbe4 	bl	8004790 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f000 f8ed 	bl	80041aa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2241      	movs	r2, #65	@ 0x41
 8003fd4:	5c9b      	ldrb	r3, [r3, r2]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b60      	cmp	r3, #96	@ 0x60
 8003fda:	d01f      	beq.n	800401c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2241      	movs	r2, #65	@ 0x41
 8003fe0:	2120      	movs	r1, #32
 8003fe2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	2220      	movs	r2, #32
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d114      	bne.n	800401c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b10      	cmp	r3, #16
 8003ffe:	d109      	bne.n	8004014 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2210      	movs	r2, #16
 8004006:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400c:	2204      	movs	r2, #4
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2220      	movs	r2, #32
 800401a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004026:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402c:	2b00      	cmp	r3, #0
 800402e:	d03b      	beq.n	80040a8 <I2C_ITError+0x154>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b11      	cmp	r3, #17
 8004034:	d002      	beq.n	800403c <I2C_ITError+0xe8>
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b21      	cmp	r3, #33	@ 0x21
 800403a:	d135      	bne.n	80040a8 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	2380      	movs	r3, #128	@ 0x80
 8004044:	01db      	lsls	r3, r3, #7
 8004046:	401a      	ands	r2, r3
 8004048:	2380      	movs	r3, #128	@ 0x80
 800404a:	01db      	lsls	r3, r3, #7
 800404c:	429a      	cmp	r2, r3
 800404e:	d107      	bne.n	8004060 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	493c      	ldr	r1, [pc, #240]	@ (800414c <I2C_ITError+0x1f8>)
 800405c:	400a      	ands	r2, r1
 800405e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004064:	0018      	movs	r0, r3
 8004066:	f7fe fce9 	bl	8002a3c <HAL_DMA_GetState>
 800406a:	0003      	movs	r3, r0
 800406c:	2b01      	cmp	r3, #1
 800406e:	d016      	beq.n	800409e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004074:	4a36      	ldr	r2, [pc, #216]	@ (8004150 <I2C_ITError+0x1fc>)
 8004076:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2240      	movs	r2, #64	@ 0x40
 800407c:	2100      	movs	r1, #0
 800407e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004084:	0018      	movs	r0, r3
 8004086:	f7fe fbbd 	bl	8002804 <HAL_DMA_Abort_IT>
 800408a:	1e03      	subs	r3, r0, #0
 800408c:	d051      	beq.n	8004132 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004098:	0018      	movs	r0, r3
 800409a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800409c:	e049      	b.n	8004132 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	0018      	movs	r0, r3
 80040a2:	f000 f859 	bl	8004158 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040a6:	e044      	b.n	8004132 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d03b      	beq.n	8004128 <I2C_ITError+0x1d4>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b12      	cmp	r3, #18
 80040b4:	d002      	beq.n	80040bc <I2C_ITError+0x168>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b22      	cmp	r3, #34	@ 0x22
 80040ba:	d135      	bne.n	8004128 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	2380      	movs	r3, #128	@ 0x80
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	401a      	ands	r2, r3
 80040c8:	2380      	movs	r3, #128	@ 0x80
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d107      	bne.n	80040e0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	491e      	ldr	r1, [pc, #120]	@ (8004154 <I2C_ITError+0x200>)
 80040dc:	400a      	ands	r2, r1
 80040de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7fe fca9 	bl	8002a3c <HAL_DMA_GetState>
 80040ea:	0003      	movs	r3, r0
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d016      	beq.n	800411e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f4:	4a16      	ldr	r2, [pc, #88]	@ (8004150 <I2C_ITError+0x1fc>)
 80040f6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2240      	movs	r2, #64	@ 0x40
 80040fc:	2100      	movs	r1, #0
 80040fe:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004104:	0018      	movs	r0, r3
 8004106:	f7fe fb7d 	bl	8002804 <HAL_DMA_Abort_IT>
 800410a:	1e03      	subs	r3, r0, #0
 800410c:	d013      	beq.n	8004136 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004112:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004118:	0018      	movs	r0, r3
 800411a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800411c:	e00b      	b.n	8004136 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	0018      	movs	r0, r3
 8004122:	f000 f819 	bl	8004158 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004126:	e006      	b.n	8004136 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	0018      	movs	r0, r3
 800412c:	f000 f814 	bl	8004158 <I2C_TreatErrorCallback>
  }
}
 8004130:	e002      	b.n	8004138 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004132:	46c0      	nop			@ (mov r8, r8)
 8004134:	e000      	b.n	8004138 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004136:	46c0      	nop			@ (mov r8, r8)
}
 8004138:	46c0      	nop			@ (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	b004      	add	sp, #16
 800413e:	bd80      	pop	{r7, pc}
 8004140:	ffff0000 	.word	0xffff0000
 8004144:	08003785 	.word	0x08003785
 8004148:	00008003 	.word	0x00008003
 800414c:	ffffbfff 	.word	0xffffbfff
 8004150:	080041ef 	.word	0x080041ef
 8004154:	ffff7fff 	.word	0xffff7fff

08004158 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2241      	movs	r2, #65	@ 0x41
 8004164:	5c9b      	ldrb	r3, [r3, r2]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b60      	cmp	r3, #96	@ 0x60
 800416a:	d10f      	bne.n	800418c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2241      	movs	r2, #65	@ 0x41
 8004170:	2120      	movs	r1, #32
 8004172:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2240      	movs	r2, #64	@ 0x40
 800417e:	2100      	movs	r1, #0
 8004180:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	0018      	movs	r0, r3
 8004186:	f7ff faf4 	bl	8003772 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800418a:	e00a      	b.n	80041a2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2240      	movs	r2, #64	@ 0x40
 8004196:	2100      	movs	r1, #0
 8004198:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	0018      	movs	r0, r3
 800419e:	f7ff fae0 	bl	8003762 <HAL_I2C_ErrorCallback>
}
 80041a2:	46c0      	nop			@ (mov r8, r8)
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b002      	add	sp, #8
 80041a8:	bd80      	pop	{r7, pc}

080041aa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2202      	movs	r2, #2
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d103      	bne.n	80041c8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2200      	movs	r2, #0
 80041c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	2201      	movs	r2, #1
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d007      	beq.n	80041e6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699a      	ldr	r2, [r3, #24]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2101      	movs	r1, #1
 80041e2:	430a      	orrs	r2, r1
 80041e4:	619a      	str	r2, [r3, #24]
  }
}
 80041e6:	46c0      	nop			@ (mov r8, r8)
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b002      	add	sp, #8
 80041ec:	bd80      	pop	{r7, pc}

080041ee <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004208:	2200      	movs	r2, #0
 800420a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004218:	2200      	movs	r2, #0
 800421a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	0018      	movs	r0, r3
 8004220:	f7ff ff9a 	bl	8004158 <I2C_TreatErrorCallback>
}
 8004224:	46c0      	nop			@ (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	b004      	add	sp, #16
 800422a:	bd80      	pop	{r7, pc}

0800422c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	1dfb      	adds	r3, r7, #7
 800423a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800423c:	e03a      	b.n	80042b4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	6839      	ldr	r1, [r7, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	0018      	movs	r0, r3
 8004246:	f000 f971 	bl	800452c <I2C_IsErrorOccurred>
 800424a:	1e03      	subs	r3, r0, #0
 800424c:	d001      	beq.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e040      	b.n	80042d4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	3301      	adds	r3, #1
 8004256:	d02d      	beq.n	80042b4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004258:	f7fe f93e 	bl	80024d8 <HAL_GetTick>
 800425c:	0002      	movs	r2, r0
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d302      	bcc.n	800426e <I2C_WaitOnFlagUntilTimeout+0x42>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d122      	bne.n	80042b4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	4013      	ands	r3, r2
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	425a      	negs	r2, r3
 800427e:	4153      	adcs	r3, r2
 8004280:	b2db      	uxtb	r3, r3
 8004282:	001a      	movs	r2, r3
 8004284:	1dfb      	adds	r3, r7, #7
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d113      	bne.n	80042b4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004290:	2220      	movs	r2, #32
 8004292:	431a      	orrs	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2241      	movs	r2, #65	@ 0x41
 800429c:	2120      	movs	r1, #32
 800429e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2242      	movs	r2, #66	@ 0x42
 80042a4:	2100      	movs	r1, #0
 80042a6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2240      	movs	r2, #64	@ 0x40
 80042ac:	2100      	movs	r1, #0
 80042ae:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e00f      	b.n	80042d4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	4013      	ands	r3, r2
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	425a      	negs	r2, r3
 80042c4:	4153      	adcs	r3, r2
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	001a      	movs	r2, r3
 80042ca:	1dfb      	adds	r3, r7, #7
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d0b5      	beq.n	800423e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	0018      	movs	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b004      	add	sp, #16
 80042da:	bd80      	pop	{r7, pc}

080042dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042e8:	e032      	b.n	8004350 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	0018      	movs	r0, r3
 80042f2:	f000 f91b 	bl	800452c <I2C_IsErrorOccurred>
 80042f6:	1e03      	subs	r3, r0, #0
 80042f8:	d001      	beq.n	80042fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e030      	b.n	8004360 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	3301      	adds	r3, #1
 8004302:	d025      	beq.n	8004350 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004304:	f7fe f8e8 	bl	80024d8 <HAL_GetTick>
 8004308:	0002      	movs	r2, r0
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	429a      	cmp	r2, r3
 8004312:	d302      	bcc.n	800431a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d11a      	bne.n	8004350 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	2202      	movs	r2, #2
 8004322:	4013      	ands	r3, r2
 8004324:	2b02      	cmp	r3, #2
 8004326:	d013      	beq.n	8004350 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432c:	2220      	movs	r2, #32
 800432e:	431a      	orrs	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2241      	movs	r2, #65	@ 0x41
 8004338:	2120      	movs	r1, #32
 800433a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2242      	movs	r2, #66	@ 0x42
 8004340:	2100      	movs	r1, #0
 8004342:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2240      	movs	r2, #64	@ 0x40
 8004348:	2100      	movs	r1, #0
 800434a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e007      	b.n	8004360 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2202      	movs	r2, #2
 8004358:	4013      	ands	r3, r2
 800435a:	2b02      	cmp	r3, #2
 800435c:	d1c5      	bne.n	80042ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	0018      	movs	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	b004      	add	sp, #16
 8004366:	bd80      	pop	{r7, pc}

08004368 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004374:	e02f      	b.n	80043d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	0018      	movs	r0, r3
 800437e:	f000 f8d5 	bl	800452c <I2C_IsErrorOccurred>
 8004382:	1e03      	subs	r3, r0, #0
 8004384:	d001      	beq.n	800438a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e02d      	b.n	80043e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438a:	f7fe f8a5 	bl	80024d8 <HAL_GetTick>
 800438e:	0002      	movs	r2, r0
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	429a      	cmp	r2, r3
 8004398:	d302      	bcc.n	80043a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11a      	bne.n	80043d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2220      	movs	r2, #32
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	d013      	beq.n	80043d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b2:	2220      	movs	r2, #32
 80043b4:	431a      	orrs	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2241      	movs	r2, #65	@ 0x41
 80043be:	2120      	movs	r1, #32
 80043c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2242      	movs	r2, #66	@ 0x42
 80043c6:	2100      	movs	r1, #0
 80043c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2240      	movs	r2, #64	@ 0x40
 80043ce:	2100      	movs	r1, #0
 80043d0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e007      	b.n	80043e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	2220      	movs	r2, #32
 80043de:	4013      	ands	r3, r2
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d1c8      	bne.n	8004376 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	0018      	movs	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b004      	add	sp, #16
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043fc:	2317      	movs	r3, #23
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004404:	e07b      	b.n	80044fe <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	0018      	movs	r0, r3
 800440e:	f000 f88d 	bl	800452c <I2C_IsErrorOccurred>
 8004412:	1e03      	subs	r3, r0, #0
 8004414:	d003      	beq.n	800441e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004416:	2317      	movs	r3, #23
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	2201      	movs	r2, #1
 800441c:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	2220      	movs	r2, #32
 8004426:	4013      	ands	r3, r2
 8004428:	2b20      	cmp	r3, #32
 800442a:	d140      	bne.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 800442c:	2117      	movs	r1, #23
 800442e:	187b      	adds	r3, r7, r1
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d13b      	bne.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	2204      	movs	r2, #4
 800443e:	4013      	ands	r3, r2
 8004440:	2b04      	cmp	r3, #4
 8004442:	d106      	bne.n	8004452 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800444c:	187b      	adds	r3, r7, r1
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	2210      	movs	r2, #16
 800445a:	4013      	ands	r3, r2
 800445c:	2b10      	cmp	r3, #16
 800445e:	d123      	bne.n	80044a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2210      	movs	r2, #16
 8004466:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2204      	movs	r2, #4
 800446c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2220      	movs	r2, #32
 8004474:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4929      	ldr	r1, [pc, #164]	@ (8004528 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004482:	400a      	ands	r2, r1
 8004484:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2241      	movs	r2, #65	@ 0x41
 800448a:	2120      	movs	r1, #32
 800448c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2242      	movs	r2, #66	@ 0x42
 8004492:	2100      	movs	r1, #0
 8004494:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2240      	movs	r2, #64	@ 0x40
 800449a:	2100      	movs	r1, #0
 800449c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800449e:	2317      	movs	r3, #23
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	2201      	movs	r2, #1
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	e002      	b.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80044ae:	f7fe f813 	bl	80024d8 <HAL_GetTick>
 80044b2:	0002      	movs	r2, r0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d302      	bcc.n	80044c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d11c      	bne.n	80044fe <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80044c4:	2017      	movs	r0, #23
 80044c6:	183b      	adds	r3, r7, r0
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d117      	bne.n	80044fe <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2204      	movs	r2, #4
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d010      	beq.n	80044fe <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e0:	2220      	movs	r2, #32
 80044e2:	431a      	orrs	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2241      	movs	r2, #65	@ 0x41
 80044ec:	2120      	movs	r1, #32
 80044ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2240      	movs	r2, #64	@ 0x40
 80044f4:	2100      	movs	r1, #0
 80044f6:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80044f8:	183b      	adds	r3, r7, r0
 80044fa:	2201      	movs	r2, #1
 80044fc:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2204      	movs	r2, #4
 8004506:	4013      	ands	r3, r2
 8004508:	2b04      	cmp	r3, #4
 800450a:	d005      	beq.n	8004518 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800450c:	2317      	movs	r3, #23
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d100      	bne.n	8004518 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004516:	e776      	b.n	8004406 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004518:	2317      	movs	r3, #23
 800451a:	18fb      	adds	r3, r7, r3
 800451c:	781b      	ldrb	r3, [r3, #0]
}
 800451e:	0018      	movs	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	b006      	add	sp, #24
 8004524:	bd80      	pop	{r7, pc}
 8004526:	46c0      	nop			@ (mov r8, r8)
 8004528:	fe00e800 	.word	0xfe00e800

0800452c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	@ 0x28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004538:	2327      	movs	r3, #39	@ 0x27
 800453a:	18fb      	adds	r3, r7, r3
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2210      	movs	r2, #16
 8004554:	4013      	ands	r3, r2
 8004556:	d100      	bne.n	800455a <I2C_IsErrorOccurred+0x2e>
 8004558:	e079      	b.n	800464e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2210      	movs	r2, #16
 8004560:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004562:	e057      	b.n	8004614 <I2C_IsErrorOccurred+0xe8>
 8004564:	2227      	movs	r2, #39	@ 0x27
 8004566:	18bb      	adds	r3, r7, r2
 8004568:	18ba      	adds	r2, r7, r2
 800456a:	7812      	ldrb	r2, [r2, #0]
 800456c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	3301      	adds	r3, #1
 8004572:	d04f      	beq.n	8004614 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004574:	f7fd ffb0 	bl	80024d8 <HAL_GetTick>
 8004578:	0002      	movs	r2, r0
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	429a      	cmp	r2, r3
 8004582:	d302      	bcc.n	800458a <I2C_IsErrorOccurred+0x5e>
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d144      	bne.n	8004614 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	2380      	movs	r3, #128	@ 0x80
 8004592:	01db      	lsls	r3, r3, #7
 8004594:	4013      	ands	r3, r2
 8004596:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004598:	2013      	movs	r0, #19
 800459a:	183b      	adds	r3, r7, r0
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	2142      	movs	r1, #66	@ 0x42
 80045a0:	5c52      	ldrb	r2, [r2, r1]
 80045a2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	2380      	movs	r3, #128	@ 0x80
 80045ac:	021b      	lsls	r3, r3, #8
 80045ae:	401a      	ands	r2, r3
 80045b0:	2380      	movs	r3, #128	@ 0x80
 80045b2:	021b      	lsls	r3, r3, #8
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d126      	bne.n	8004606 <I2C_IsErrorOccurred+0xda>
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	2380      	movs	r3, #128	@ 0x80
 80045bc:	01db      	lsls	r3, r3, #7
 80045be:	429a      	cmp	r2, r3
 80045c0:	d021      	beq.n	8004606 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80045c2:	183b      	adds	r3, r7, r0
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d01d      	beq.n	8004606 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2180      	movs	r1, #128	@ 0x80
 80045d6:	01c9      	lsls	r1, r1, #7
 80045d8:	430a      	orrs	r2, r1
 80045da:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045dc:	f7fd ff7c 	bl	80024d8 <HAL_GetTick>
 80045e0:	0003      	movs	r3, r0
 80045e2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045e4:	e00f      	b.n	8004606 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045e6:	f7fd ff77 	bl	80024d8 <HAL_GetTick>
 80045ea:	0002      	movs	r2, r0
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b19      	cmp	r3, #25
 80045f2:	d908      	bls.n	8004606 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	2220      	movs	r2, #32
 80045f8:	4313      	orrs	r3, r2
 80045fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80045fc:	2327      	movs	r3, #39	@ 0x27
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	2201      	movs	r2, #1
 8004602:	701a      	strb	r2, [r3, #0]

              break;
 8004604:	e006      	b.n	8004614 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	2220      	movs	r2, #32
 800460e:	4013      	ands	r3, r2
 8004610:	2b20      	cmp	r3, #32
 8004612:	d1e8      	bne.n	80045e6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2220      	movs	r2, #32
 800461c:	4013      	ands	r3, r2
 800461e:	2b20      	cmp	r3, #32
 8004620:	d004      	beq.n	800462c <I2C_IsErrorOccurred+0x100>
 8004622:	2327      	movs	r3, #39	@ 0x27
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d09b      	beq.n	8004564 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800462c:	2327      	movs	r3, #39	@ 0x27
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2220      	movs	r2, #32
 800463c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	2204      	movs	r2, #4
 8004642:	4313      	orrs	r3, r2
 8004644:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004646:	2327      	movs	r3, #39	@ 0x27
 8004648:	18fb      	adds	r3, r7, r3
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	2380      	movs	r3, #128	@ 0x80
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	4013      	ands	r3, r2
 800465e:	d00c      	beq.n	800467a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	2201      	movs	r2, #1
 8004664:	4313      	orrs	r3, r2
 8004666:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2280      	movs	r2, #128	@ 0x80
 800466e:	0052      	lsls	r2, r2, #1
 8004670:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004672:	2327      	movs	r3, #39	@ 0x27
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	2201      	movs	r2, #1
 8004678:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	2380      	movs	r3, #128	@ 0x80
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4013      	ands	r3, r2
 8004682:	d00c      	beq.n	800469e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	2208      	movs	r2, #8
 8004688:	4313      	orrs	r3, r2
 800468a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2280      	movs	r2, #128	@ 0x80
 8004692:	00d2      	lsls	r2, r2, #3
 8004694:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004696:	2327      	movs	r3, #39	@ 0x27
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	2201      	movs	r2, #1
 800469c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	2380      	movs	r3, #128	@ 0x80
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4013      	ands	r3, r2
 80046a6:	d00c      	beq.n	80046c2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	2202      	movs	r2, #2
 80046ac:	4313      	orrs	r3, r2
 80046ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2280      	movs	r2, #128	@ 0x80
 80046b6:	0092      	lsls	r2, r2, #2
 80046b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046ba:	2327      	movs	r3, #39	@ 0x27
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	2201      	movs	r2, #1
 80046c0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80046c2:	2327      	movs	r3, #39	@ 0x27
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01d      	beq.n	8004708 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	0018      	movs	r0, r3
 80046d0:	f7ff fd6b 	bl	80041aa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	490e      	ldr	r1, [pc, #56]	@ (8004718 <I2C_IsErrorOccurred+0x1ec>)
 80046e0:	400a      	ands	r2, r1
 80046e2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2241      	movs	r2, #65	@ 0x41
 80046f4:	2120      	movs	r1, #32
 80046f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2242      	movs	r2, #66	@ 0x42
 80046fc:	2100      	movs	r1, #0
 80046fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2240      	movs	r2, #64	@ 0x40
 8004704:	2100      	movs	r1, #0
 8004706:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004708:	2327      	movs	r3, #39	@ 0x27
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	781b      	ldrb	r3, [r3, #0]
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b00a      	add	sp, #40	@ 0x28
 8004714:	bd80      	pop	{r7, pc}
 8004716:	46c0      	nop			@ (mov r8, r8)
 8004718:	fe00e800 	.word	0xfe00e800

0800471c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	0008      	movs	r0, r1
 8004726:	0011      	movs	r1, r2
 8004728:	607b      	str	r3, [r7, #4]
 800472a:	240a      	movs	r4, #10
 800472c:	193b      	adds	r3, r7, r4
 800472e:	1c02      	adds	r2, r0, #0
 8004730:	801a      	strh	r2, [r3, #0]
 8004732:	2009      	movs	r0, #9
 8004734:	183b      	adds	r3, r7, r0
 8004736:	1c0a      	adds	r2, r1, #0
 8004738:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800473a:	193b      	adds	r3, r7, r4
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	059b      	lsls	r3, r3, #22
 8004740:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004742:	183b      	adds	r3, r7, r0
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	0419      	lsls	r1, r3, #16
 8004748:	23ff      	movs	r3, #255	@ 0xff
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800474e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004756:	4313      	orrs	r3, r2
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004766:	0d51      	lsrs	r1, r2, #21
 8004768:	2280      	movs	r2, #128	@ 0x80
 800476a:	00d2      	lsls	r2, r2, #3
 800476c:	400a      	ands	r2, r1
 800476e:	4907      	ldr	r1, [pc, #28]	@ (800478c <I2C_TransferConfig+0x70>)
 8004770:	430a      	orrs	r2, r1
 8004772:	43d2      	mvns	r2, r2
 8004774:	401a      	ands	r2, r3
 8004776:	0011      	movs	r1, r2
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	430a      	orrs	r2, r1
 8004780:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004782:	46c0      	nop			@ (mov r8, r8)
 8004784:	46bd      	mov	sp, r7
 8004786:	b007      	add	sp, #28
 8004788:	bd90      	pop	{r4, r7, pc}
 800478a:	46c0      	nop			@ (mov r8, r8)
 800478c:	03ff63ff 	.word	0x03ff63ff

08004790 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	000a      	movs	r2, r1
 800479a:	1cbb      	adds	r3, r7, #2
 800479c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80047a2:	1cbb      	adds	r3, r7, #2
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	2201      	movs	r2, #1
 80047a8:	4013      	ands	r3, r2
 80047aa:	d010      	beq.n	80047ce <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2242      	movs	r2, #66	@ 0x42
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2241      	movs	r2, #65	@ 0x41
 80047b8:	5c9b      	ldrb	r3, [r3, r2]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	001a      	movs	r2, r3
 80047be:	2328      	movs	r3, #40	@ 0x28
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b28      	cmp	r3, #40	@ 0x28
 80047c4:	d003      	beq.n	80047ce <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	22b0      	movs	r2, #176	@ 0xb0
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80047ce:	1cbb      	adds	r3, r7, #2
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	2202      	movs	r2, #2
 80047d4:	4013      	ands	r3, r2
 80047d6:	d010      	beq.n	80047fa <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2244      	movs	r2, #68	@ 0x44
 80047dc:	4313      	orrs	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2241      	movs	r2, #65	@ 0x41
 80047e4:	5c9b      	ldrb	r3, [r3, r2]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	001a      	movs	r2, r3
 80047ea:	2328      	movs	r3, #40	@ 0x28
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b28      	cmp	r3, #40	@ 0x28
 80047f0:	d003      	beq.n	80047fa <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	22b0      	movs	r2, #176	@ 0xb0
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80047fa:	1cbb      	adds	r3, r7, #2
 80047fc:	2200      	movs	r2, #0
 80047fe:	5e9b      	ldrsh	r3, [r3, r2]
 8004800:	2b00      	cmp	r3, #0
 8004802:	da03      	bge.n	800480c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	22b8      	movs	r2, #184	@ 0xb8
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800480c:	1cbb      	adds	r3, r7, #2
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	2b10      	cmp	r3, #16
 8004812:	d103      	bne.n	800481c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2290      	movs	r2, #144	@ 0x90
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800481c:	1cbb      	adds	r3, r7, #2
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	2b20      	cmp	r3, #32
 8004822:	d103      	bne.n	800482c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800482c:	1cbb      	adds	r3, r7, #2
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	2b40      	cmp	r3, #64	@ 0x40
 8004832:	d103      	bne.n	800483c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2240      	movs	r2, #64	@ 0x40
 8004838:	4313      	orrs	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	43d9      	mvns	r1, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	400a      	ands	r2, r1
 800484c:	601a      	str	r2, [r3, #0]
}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	46bd      	mov	sp, r7
 8004852:	b004      	add	sp, #16
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2241      	movs	r2, #65	@ 0x41
 8004866:	5c9b      	ldrb	r3, [r3, r2]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b20      	cmp	r3, #32
 800486c:	d138      	bne.n	80048e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2240      	movs	r2, #64	@ 0x40
 8004872:	5c9b      	ldrb	r3, [r3, r2]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004878:	2302      	movs	r3, #2
 800487a:	e032      	b.n	80048e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2240      	movs	r2, #64	@ 0x40
 8004880:	2101      	movs	r1, #1
 8004882:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2241      	movs	r2, #65	@ 0x41
 8004888:	2124      	movs	r1, #36	@ 0x24
 800488a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2101      	movs	r1, #1
 8004898:	438a      	bics	r2, r1
 800489a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4911      	ldr	r1, [pc, #68]	@ (80048ec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80048a8:	400a      	ands	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6819      	ldr	r1, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2101      	movs	r1, #1
 80048c8:	430a      	orrs	r2, r1
 80048ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2241      	movs	r2, #65	@ 0x41
 80048d0:	2120      	movs	r1, #32
 80048d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2240      	movs	r2, #64	@ 0x40
 80048d8:	2100      	movs	r1, #0
 80048da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	e000      	b.n	80048e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048e0:	2302      	movs	r3, #2
  }
}
 80048e2:	0018      	movs	r0, r3
 80048e4:	46bd      	mov	sp, r7
 80048e6:	b002      	add	sp, #8
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	46c0      	nop			@ (mov r8, r8)
 80048ec:	ffffefff 	.word	0xffffefff

080048f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2241      	movs	r2, #65	@ 0x41
 80048fe:	5c9b      	ldrb	r3, [r3, r2]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b20      	cmp	r3, #32
 8004904:	d139      	bne.n	800497a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2240      	movs	r2, #64	@ 0x40
 800490a:	5c9b      	ldrb	r3, [r3, r2]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004910:	2302      	movs	r3, #2
 8004912:	e033      	b.n	800497c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2240      	movs	r2, #64	@ 0x40
 8004918:	2101      	movs	r1, #1
 800491a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2241      	movs	r2, #65	@ 0x41
 8004920:	2124      	movs	r1, #36	@ 0x24
 8004922:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2101      	movs	r1, #1
 8004930:	438a      	bics	r2, r1
 8004932:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a11      	ldr	r2, [pc, #68]	@ (8004984 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004940:	4013      	ands	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2101      	movs	r1, #1
 8004962:	430a      	orrs	r2, r1
 8004964:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2241      	movs	r2, #65	@ 0x41
 800496a:	2120      	movs	r1, #32
 800496c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2240      	movs	r2, #64	@ 0x40
 8004972:	2100      	movs	r1, #0
 8004974:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	e000      	b.n	800497c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800497a:	2302      	movs	r3, #2
  }
}
 800497c:	0018      	movs	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	b004      	add	sp, #16
 8004982:	bd80      	pop	{r7, pc}
 8004984:	fffff0ff 	.word	0xfffff0ff

08004988 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004990:	4b19      	ldr	r3, [pc, #100]	@ (80049f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a19      	ldr	r2, [pc, #100]	@ (80049fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004996:	4013      	ands	r3, r2
 8004998:	0019      	movs	r1, r3
 800499a:	4b17      	ldr	r3, [pc, #92]	@ (80049f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	430a      	orrs	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	2380      	movs	r3, #128	@ 0x80
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d11f      	bne.n	80049ec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80049ac:	4b14      	ldr	r3, [pc, #80]	@ (8004a00 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	0013      	movs	r3, r2
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	189b      	adds	r3, r3, r2
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	4912      	ldr	r1, [pc, #72]	@ (8004a04 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80049ba:	0018      	movs	r0, r3
 80049bc:	f7fb fba2 	bl	8000104 <__udivsi3>
 80049c0:	0003      	movs	r3, r0
 80049c2:	3301      	adds	r3, #1
 80049c4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049c6:	e008      	b.n	80049da <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	e001      	b.n	80049da <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e009      	b.n	80049ee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049da:	4b07      	ldr	r3, [pc, #28]	@ (80049f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80049dc:	695a      	ldr	r2, [r3, #20]
 80049de:	2380      	movs	r3, #128	@ 0x80
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	401a      	ands	r2, r3
 80049e4:	2380      	movs	r3, #128	@ 0x80
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d0ed      	beq.n	80049c8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	0018      	movs	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b004      	add	sp, #16
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	40007000 	.word	0x40007000
 80049fc:	fffff9ff 	.word	0xfffff9ff
 8004a00:	20000060 	.word	0x20000060
 8004a04:	000f4240 	.word	0x000f4240

08004a08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e2fe      	b.n	8005018 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	4013      	ands	r3, r2
 8004a22:	d100      	bne.n	8004a26 <HAL_RCC_OscConfig+0x1e>
 8004a24:	e07c      	b.n	8004b20 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a26:	4bc3      	ldr	r3, [pc, #780]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2238      	movs	r2, #56	@ 0x38
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a30:	4bc0      	ldr	r3, [pc, #768]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	2203      	movs	r2, #3
 8004a36:	4013      	ands	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b10      	cmp	r3, #16
 8004a3e:	d102      	bne.n	8004a46 <HAL_RCC_OscConfig+0x3e>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d002      	beq.n	8004a4c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d10b      	bne.n	8004a64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a4c:	4bb9      	ldr	r3, [pc, #740]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	2380      	movs	r3, #128	@ 0x80
 8004a52:	029b      	lsls	r3, r3, #10
 8004a54:	4013      	ands	r3, r2
 8004a56:	d062      	beq.n	8004b1e <HAL_RCC_OscConfig+0x116>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d15e      	bne.n	8004b1e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e2d9      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	2380      	movs	r3, #128	@ 0x80
 8004a6a:	025b      	lsls	r3, r3, #9
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d107      	bne.n	8004a80 <HAL_RCC_OscConfig+0x78>
 8004a70:	4bb0      	ldr	r3, [pc, #704]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	4baf      	ldr	r3, [pc, #700]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a76:	2180      	movs	r1, #128	@ 0x80
 8004a78:	0249      	lsls	r1, r1, #9
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	e020      	b.n	8004ac2 <HAL_RCC_OscConfig+0xba>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	23a0      	movs	r3, #160	@ 0xa0
 8004a86:	02db      	lsls	r3, r3, #11
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d10e      	bne.n	8004aaa <HAL_RCC_OscConfig+0xa2>
 8004a8c:	4ba9      	ldr	r3, [pc, #676]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4ba8      	ldr	r3, [pc, #672]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a92:	2180      	movs	r1, #128	@ 0x80
 8004a94:	02c9      	lsls	r1, r1, #11
 8004a96:	430a      	orrs	r2, r1
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	4ba6      	ldr	r3, [pc, #664]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4ba5      	ldr	r3, [pc, #660]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004aa0:	2180      	movs	r1, #128	@ 0x80
 8004aa2:	0249      	lsls	r1, r1, #9
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	e00b      	b.n	8004ac2 <HAL_RCC_OscConfig+0xba>
 8004aaa:	4ba2      	ldr	r3, [pc, #648]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4ba1      	ldr	r3, [pc, #644]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004ab0:	49a1      	ldr	r1, [pc, #644]	@ (8004d38 <HAL_RCC_OscConfig+0x330>)
 8004ab2:	400a      	ands	r2, r1
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	4b9f      	ldr	r3, [pc, #636]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4b9e      	ldr	r3, [pc, #632]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004abc:	499f      	ldr	r1, [pc, #636]	@ (8004d3c <HAL_RCC_OscConfig+0x334>)
 8004abe:	400a      	ands	r2, r1
 8004ac0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d014      	beq.n	8004af4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aca:	f7fd fd05 	bl	80024d8 <HAL_GetTick>
 8004ace:	0003      	movs	r3, r0
 8004ad0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fd fd00 	bl	80024d8 <HAL_GetTick>
 8004ad8:	0002      	movs	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	@ 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e298      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ae6:	4b93      	ldr	r3, [pc, #588]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	2380      	movs	r3, #128	@ 0x80
 8004aec:	029b      	lsls	r3, r3, #10
 8004aee:	4013      	ands	r3, r2
 8004af0:	d0f0      	beq.n	8004ad4 <HAL_RCC_OscConfig+0xcc>
 8004af2:	e015      	b.n	8004b20 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fd fcf0 	bl	80024d8 <HAL_GetTick>
 8004af8:	0003      	movs	r3, r0
 8004afa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004afe:	f7fd fceb 	bl	80024d8 <HAL_GetTick>
 8004b02:	0002      	movs	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b64      	cmp	r3, #100	@ 0x64
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e283      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b10:	4b88      	ldr	r3, [pc, #544]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	2380      	movs	r3, #128	@ 0x80
 8004b16:	029b      	lsls	r3, r3, #10
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d1f0      	bne.n	8004afe <HAL_RCC_OscConfig+0xf6>
 8004b1c:	e000      	b.n	8004b20 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b1e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2202      	movs	r2, #2
 8004b26:	4013      	ands	r3, r2
 8004b28:	d100      	bne.n	8004b2c <HAL_RCC_OscConfig+0x124>
 8004b2a:	e099      	b.n	8004c60 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b2c:	4b81      	ldr	r3, [pc, #516]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2238      	movs	r2, #56	@ 0x38
 8004b32:	4013      	ands	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b36:	4b7f      	ldr	r3, [pc, #508]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d102      	bne.n	8004b4c <HAL_RCC_OscConfig+0x144>
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d002      	beq.n	8004b52 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d135      	bne.n	8004bbe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b52:	4b78      	ldr	r3, [pc, #480]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	2380      	movs	r3, #128	@ 0x80
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d005      	beq.n	8004b6a <HAL_RCC_OscConfig+0x162>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e256      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6a:	4b72      	ldr	r3, [pc, #456]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	4a74      	ldr	r2, [pc, #464]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	0019      	movs	r1, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	021a      	lsls	r2, r3, #8
 8004b7a:	4b6e      	ldr	r3, [pc, #440]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d112      	bne.n	8004bac <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b86:	4b6b      	ldr	r3, [pc, #428]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a6e      	ldr	r2, [pc, #440]	@ (8004d44 <HAL_RCC_OscConfig+0x33c>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	0019      	movs	r1, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	4b67      	ldr	r3, [pc, #412]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b96:	430a      	orrs	r2, r1
 8004b98:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004b9a:	4b66      	ldr	r3, [pc, #408]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	0adb      	lsrs	r3, r3, #11
 8004ba0:	2207      	movs	r2, #7
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	4a68      	ldr	r2, [pc, #416]	@ (8004d48 <HAL_RCC_OscConfig+0x340>)
 8004ba6:	40da      	lsrs	r2, r3
 8004ba8:	4b68      	ldr	r3, [pc, #416]	@ (8004d4c <HAL_RCC_OscConfig+0x344>)
 8004baa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004bac:	4b68      	ldr	r3, [pc, #416]	@ (8004d50 <HAL_RCC_OscConfig+0x348>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f7fd fc35 	bl	8002420 <HAL_InitTick>
 8004bb6:	1e03      	subs	r3, r0, #0
 8004bb8:	d051      	beq.n	8004c5e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e22c      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d030      	beq.n	8004c28 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004bc6:	4b5b      	ldr	r3, [pc, #364]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a5e      	ldr	r2, [pc, #376]	@ (8004d44 <HAL_RCC_OscConfig+0x33c>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	0019      	movs	r1, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	4b57      	ldr	r3, [pc, #348]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004bda:	4b56      	ldr	r3, [pc, #344]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4b55      	ldr	r3, [pc, #340]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004be0:	2180      	movs	r1, #128	@ 0x80
 8004be2:	0049      	lsls	r1, r1, #1
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fd fc76 	bl	80024d8 <HAL_GetTick>
 8004bec:	0003      	movs	r3, r0
 8004bee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf2:	f7fd fc71 	bl	80024d8 <HAL_GetTick>
 8004bf6:	0002      	movs	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e209      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c04:	4b4b      	ldr	r3, [pc, #300]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	2380      	movs	r3, #128	@ 0x80
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d0f0      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c10:	4b48      	ldr	r3, [pc, #288]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	4a4a      	ldr	r2, [pc, #296]	@ (8004d40 <HAL_RCC_OscConfig+0x338>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	0019      	movs	r1, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	021a      	lsls	r2, r3, #8
 8004c20:	4b44      	ldr	r3, [pc, #272]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
 8004c26:	e01b      	b.n	8004c60 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004c28:	4b42      	ldr	r3, [pc, #264]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4b41      	ldr	r3, [pc, #260]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c2e:	4949      	ldr	r1, [pc, #292]	@ (8004d54 <HAL_RCC_OscConfig+0x34c>)
 8004c30:	400a      	ands	r2, r1
 8004c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fd fc50 	bl	80024d8 <HAL_GetTick>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c3e:	f7fd fc4b 	bl	80024d8 <HAL_GetTick>
 8004c42:	0002      	movs	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e1e3      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c50:	4b38      	ldr	r3, [pc, #224]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	2380      	movs	r3, #128	@ 0x80
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d1f0      	bne.n	8004c3e <HAL_RCC_OscConfig+0x236>
 8004c5c:	e000      	b.n	8004c60 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c5e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2208      	movs	r2, #8
 8004c66:	4013      	ands	r3, r2
 8004c68:	d047      	beq.n	8004cfa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c6a:	4b32      	ldr	r3, [pc, #200]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2238      	movs	r2, #56	@ 0x38
 8004c70:	4013      	ands	r3, r2
 8004c72:	2b18      	cmp	r3, #24
 8004c74:	d10a      	bne.n	8004c8c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004c76:	4b2f      	ldr	r3, [pc, #188]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d03c      	beq.n	8004cfa <HAL_RCC_OscConfig+0x2f2>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d138      	bne.n	8004cfa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e1c5      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d019      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004c94:	4b27      	ldr	r3, [pc, #156]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c96:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004c98:	4b26      	ldr	r3, [pc, #152]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fd fc1a 	bl	80024d8 <HAL_GetTick>
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004caa:	f7fd fc15 	bl	80024d8 <HAL_GetTick>
 8004cae:	0002      	movs	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e1ad      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d0f1      	beq.n	8004caa <HAL_RCC_OscConfig+0x2a2>
 8004cc6:	e018      	b.n	8004cfa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004cca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004ccc:	4b19      	ldr	r3, [pc, #100]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004cce:	2101      	movs	r1, #1
 8004cd0:	438a      	bics	r2, r1
 8004cd2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fd fc00 	bl	80024d8 <HAL_GetTick>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cde:	f7fd fbfb 	bl	80024d8 <HAL_GetTick>
 8004ce2:	0002      	movs	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e193      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cf0:	4b10      	ldr	r3, [pc, #64]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d1f1      	bne.n	8004cde <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2204      	movs	r2, #4
 8004d00:	4013      	ands	r3, r2
 8004d02:	d100      	bne.n	8004d06 <HAL_RCC_OscConfig+0x2fe>
 8004d04:	e0c6      	b.n	8004e94 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d06:	231f      	movs	r3, #31
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004d0e:	4b09      	ldr	r3, [pc, #36]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2238      	movs	r2, #56	@ 0x38
 8004d14:	4013      	ands	r3, r2
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	d11e      	bne.n	8004d58 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004d1a:	4b06      	ldr	r3, [pc, #24]	@ (8004d34 <HAL_RCC_OscConfig+0x32c>)
 8004d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d1e:	2202      	movs	r2, #2
 8004d20:	4013      	ands	r3, r2
 8004d22:	d100      	bne.n	8004d26 <HAL_RCC_OscConfig+0x31e>
 8004d24:	e0b6      	b.n	8004e94 <HAL_RCC_OscConfig+0x48c>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d000      	beq.n	8004d30 <HAL_RCC_OscConfig+0x328>
 8004d2e:	e0b1      	b.n	8004e94 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e171      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
 8004d34:	40021000 	.word	0x40021000
 8004d38:	fffeffff 	.word	0xfffeffff
 8004d3c:	fffbffff 	.word	0xfffbffff
 8004d40:	ffff80ff 	.word	0xffff80ff
 8004d44:	ffffc7ff 	.word	0xffffc7ff
 8004d48:	00f42400 	.word	0x00f42400
 8004d4c:	20000060 	.word	0x20000060
 8004d50:	20000064 	.word	0x20000064
 8004d54:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d58:	4bb1      	ldr	r3, [pc, #708]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004d5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d5c:	2380      	movs	r3, #128	@ 0x80
 8004d5e:	055b      	lsls	r3, r3, #21
 8004d60:	4013      	ands	r3, r2
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_OscConfig+0x360>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <HAL_RCC_OscConfig+0x362>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d011      	beq.n	8004d92 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004d6e:	4bac      	ldr	r3, [pc, #688]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004d70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d72:	4bab      	ldr	r3, [pc, #684]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004d74:	2180      	movs	r1, #128	@ 0x80
 8004d76:	0549      	lsls	r1, r1, #21
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004d7c:	4ba8      	ldr	r3, [pc, #672]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004d7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d80:	2380      	movs	r3, #128	@ 0x80
 8004d82:	055b      	lsls	r3, r3, #21
 8004d84:	4013      	ands	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004d8a:	231f      	movs	r3, #31
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	2201      	movs	r2, #1
 8004d90:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d92:	4ba4      	ldr	r3, [pc, #656]	@ (8005024 <HAL_RCC_OscConfig+0x61c>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	2380      	movs	r3, #128	@ 0x80
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d11a      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d9e:	4ba1      	ldr	r3, [pc, #644]	@ (8005024 <HAL_RCC_OscConfig+0x61c>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4ba0      	ldr	r3, [pc, #640]	@ (8005024 <HAL_RCC_OscConfig+0x61c>)
 8004da4:	2180      	movs	r1, #128	@ 0x80
 8004da6:	0049      	lsls	r1, r1, #1
 8004da8:	430a      	orrs	r2, r1
 8004daa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004dac:	f7fd fb94 	bl	80024d8 <HAL_GetTick>
 8004db0:	0003      	movs	r3, r0
 8004db2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db6:	f7fd fb8f 	bl	80024d8 <HAL_GetTick>
 8004dba:	0002      	movs	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e127      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dc8:	4b96      	ldr	r3, [pc, #600]	@ (8005024 <HAL_RCC_OscConfig+0x61c>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	2380      	movs	r3, #128	@ 0x80
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d106      	bne.n	8004dea <HAL_RCC_OscConfig+0x3e2>
 8004ddc:	4b90      	ldr	r3, [pc, #576]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004dde:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004de0:	4b8f      	ldr	r3, [pc, #572]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004de2:	2101      	movs	r1, #1
 8004de4:	430a      	orrs	r2, r1
 8004de6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004de8:	e01c      	b.n	8004e24 <HAL_RCC_OscConfig+0x41c>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b05      	cmp	r3, #5
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCC_OscConfig+0x404>
 8004df2:	4b8b      	ldr	r3, [pc, #556]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004df4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004df6:	4b8a      	ldr	r3, [pc, #552]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004df8:	2104      	movs	r1, #4
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004dfe:	4b88      	ldr	r3, [pc, #544]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004e00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e02:	4b87      	ldr	r3, [pc, #540]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004e04:	2101      	movs	r1, #1
 8004e06:	430a      	orrs	r2, r1
 8004e08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e0a:	e00b      	b.n	8004e24 <HAL_RCC_OscConfig+0x41c>
 8004e0c:	4b84      	ldr	r3, [pc, #528]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004e0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e10:	4b83      	ldr	r3, [pc, #524]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004e12:	2101      	movs	r1, #1
 8004e14:	438a      	bics	r2, r1
 8004e16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e18:	4b81      	ldr	r3, [pc, #516]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004e1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e1c:	4b80      	ldr	r3, [pc, #512]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004e1e:	2104      	movs	r1, #4
 8004e20:	438a      	bics	r2, r1
 8004e22:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d014      	beq.n	8004e56 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fd fb54 	bl	80024d8 <HAL_GetTick>
 8004e30:	0003      	movs	r3, r0
 8004e32:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e34:	e009      	b.n	8004e4a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e36:	f7fd fb4f 	bl	80024d8 <HAL_GetTick>
 8004e3a:	0002      	movs	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	4a79      	ldr	r2, [pc, #484]	@ (8005028 <HAL_RCC_OscConfig+0x620>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e0e6      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e4a:	4b75      	ldr	r3, [pc, #468]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4e:	2202      	movs	r2, #2
 8004e50:	4013      	ands	r3, r2
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x42e>
 8004e54:	e013      	b.n	8004e7e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e56:	f7fd fb3f 	bl	80024d8 <HAL_GetTick>
 8004e5a:	0003      	movs	r3, r0
 8004e5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e5e:	e009      	b.n	8004e74 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e60:	f7fd fb3a 	bl	80024d8 <HAL_GetTick>
 8004e64:	0002      	movs	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	4a6f      	ldr	r2, [pc, #444]	@ (8005028 <HAL_RCC_OscConfig+0x620>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e0d1      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e74:	4b6a      	ldr	r3, [pc, #424]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e78:	2202      	movs	r2, #2
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d1f0      	bne.n	8004e60 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004e7e:	231f      	movs	r3, #31
 8004e80:	18fb      	adds	r3, r7, r3
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004e88:	4b65      	ldr	r3, [pc, #404]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004e8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e8c:	4b64      	ldr	r3, [pc, #400]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004e8e:	4967      	ldr	r1, [pc, #412]	@ (800502c <HAL_RCC_OscConfig+0x624>)
 8004e90:	400a      	ands	r2, r1
 8004e92:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d100      	bne.n	8004e9e <HAL_RCC_OscConfig+0x496>
 8004e9c:	e0bb      	b.n	8005016 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e9e:	4b60      	ldr	r3, [pc, #384]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2238      	movs	r2, #56	@ 0x38
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	2b10      	cmp	r3, #16
 8004ea8:	d100      	bne.n	8004eac <HAL_RCC_OscConfig+0x4a4>
 8004eaa:	e07b      	b.n	8004fa4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d156      	bne.n	8004f62 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb4:	4b5a      	ldr	r3, [pc, #360]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	4b59      	ldr	r3, [pc, #356]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004eba:	495d      	ldr	r1, [pc, #372]	@ (8005030 <HAL_RCC_OscConfig+0x628>)
 8004ebc:	400a      	ands	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fd fb0a 	bl	80024d8 <HAL_GetTick>
 8004ec4:	0003      	movs	r3, r0
 8004ec6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eca:	f7fd fb05 	bl	80024d8 <HAL_GetTick>
 8004ece:	0002      	movs	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e09d      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004edc:	4b50      	ldr	r3, [pc, #320]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	2380      	movs	r3, #128	@ 0x80
 8004ee2:	049b      	lsls	r3, r3, #18
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d1f0      	bne.n	8004eca <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee8:	4b4d      	ldr	r3, [pc, #308]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4a51      	ldr	r2, [pc, #324]	@ (8005034 <HAL_RCC_OscConfig+0x62c>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	0019      	movs	r1, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1a      	ldr	r2, [r3, #32]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f14:	431a      	orrs	r2, r3
 8004f16:	4b42      	ldr	r3, [pc, #264]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f1c:	4b40      	ldr	r3, [pc, #256]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4b3f      	ldr	r3, [pc, #252]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004f22:	2180      	movs	r1, #128	@ 0x80
 8004f24:	0449      	lsls	r1, r1, #17
 8004f26:	430a      	orrs	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	4b3c      	ldr	r3, [pc, #240]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004f30:	2180      	movs	r1, #128	@ 0x80
 8004f32:	0549      	lsls	r1, r1, #21
 8004f34:	430a      	orrs	r2, r1
 8004f36:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fd face 	bl	80024d8 <HAL_GetTick>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f42:	f7fd fac9 	bl	80024d8 <HAL_GetTick>
 8004f46:	0002      	movs	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e061      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f54:	4b32      	ldr	r3, [pc, #200]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	2380      	movs	r3, #128	@ 0x80
 8004f5a:	049b      	lsls	r3, r3, #18
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x53a>
 8004f60:	e059      	b.n	8005016 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f62:	4b2f      	ldr	r3, [pc, #188]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b2e      	ldr	r3, [pc, #184]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004f68:	4931      	ldr	r1, [pc, #196]	@ (8005030 <HAL_RCC_OscConfig+0x628>)
 8004f6a:	400a      	ands	r2, r1
 8004f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6e:	f7fd fab3 	bl	80024d8 <HAL_GetTick>
 8004f72:	0003      	movs	r3, r0
 8004f74:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f78:	f7fd faae 	bl	80024d8 <HAL_GetTick>
 8004f7c:	0002      	movs	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e046      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f8a:	4b25      	ldr	r3, [pc, #148]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	2380      	movs	r3, #128	@ 0x80
 8004f90:	049b      	lsls	r3, r3, #18
 8004f92:	4013      	ands	r3, r2
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004f96:	4b22      	ldr	r3, [pc, #136]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	4b21      	ldr	r3, [pc, #132]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004f9c:	4926      	ldr	r1, [pc, #152]	@ (8005038 <HAL_RCC_OscConfig+0x630>)
 8004f9e:	400a      	ands	r2, r1
 8004fa0:	60da      	str	r2, [r3, #12]
 8004fa2:	e038      	b.n	8005016 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e033      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8005020 <HAL_RCC_OscConfig+0x618>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2203      	movs	r2, #3
 8004fba:	401a      	ands	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d126      	bne.n	8005012 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2270      	movs	r2, #112	@ 0x70
 8004fc8:	401a      	ands	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d11f      	bne.n	8005012 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	23fe      	movs	r3, #254	@ 0xfe
 8004fd6:	01db      	lsls	r3, r3, #7
 8004fd8:	401a      	ands	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fde:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d116      	bne.n	8005012 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	23f8      	movs	r3, #248	@ 0xf8
 8004fe8:	039b      	lsls	r3, r3, #14
 8004fea:	401a      	ands	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d10e      	bne.n	8005012 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	23e0      	movs	r3, #224	@ 0xe0
 8004ff8:	051b      	lsls	r3, r3, #20
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005000:	429a      	cmp	r2, r3
 8005002:	d106      	bne.n	8005012 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	0f5b      	lsrs	r3, r3, #29
 8005008:	075a      	lsls	r2, r3, #29
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800500e:	429a      	cmp	r2, r3
 8005010:	d001      	beq.n	8005016 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	0018      	movs	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	b008      	add	sp, #32
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40021000 	.word	0x40021000
 8005024:	40007000 	.word	0x40007000
 8005028:	00001388 	.word	0x00001388
 800502c:	efffffff 	.word	0xefffffff
 8005030:	feffffff 	.word	0xfeffffff
 8005034:	11c1808c 	.word	0x11c1808c
 8005038:	eefefffc 	.word	0xeefefffc

0800503c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e0e9      	b.n	8005224 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005050:	4b76      	ldr	r3, [pc, #472]	@ (800522c <HAL_RCC_ClockConfig+0x1f0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2207      	movs	r2, #7
 8005056:	4013      	ands	r3, r2
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d91e      	bls.n	800509c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505e:	4b73      	ldr	r3, [pc, #460]	@ (800522c <HAL_RCC_ClockConfig+0x1f0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2207      	movs	r2, #7
 8005064:	4393      	bics	r3, r2
 8005066:	0019      	movs	r1, r3
 8005068:	4b70      	ldr	r3, [pc, #448]	@ (800522c <HAL_RCC_ClockConfig+0x1f0>)
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005070:	f7fd fa32 	bl	80024d8 <HAL_GetTick>
 8005074:	0003      	movs	r3, r0
 8005076:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005078:	e009      	b.n	800508e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800507a:	f7fd fa2d 	bl	80024d8 <HAL_GetTick>
 800507e:	0002      	movs	r2, r0
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	4a6a      	ldr	r2, [pc, #424]	@ (8005230 <HAL_RCC_ClockConfig+0x1f4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d901      	bls.n	800508e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e0ca      	b.n	8005224 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800508e:	4b67      	ldr	r3, [pc, #412]	@ (800522c <HAL_RCC_ClockConfig+0x1f0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2207      	movs	r2, #7
 8005094:	4013      	ands	r3, r2
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d1ee      	bne.n	800507a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2202      	movs	r2, #2
 80050a2:	4013      	ands	r3, r2
 80050a4:	d015      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2204      	movs	r2, #4
 80050ac:	4013      	ands	r3, r2
 80050ae:	d006      	beq.n	80050be <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80050b0:	4b60      	ldr	r3, [pc, #384]	@ (8005234 <HAL_RCC_ClockConfig+0x1f8>)
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	4b5f      	ldr	r3, [pc, #380]	@ (8005234 <HAL_RCC_ClockConfig+0x1f8>)
 80050b6:	21e0      	movs	r1, #224	@ 0xe0
 80050b8:	01c9      	lsls	r1, r1, #7
 80050ba:	430a      	orrs	r2, r1
 80050bc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050be:	4b5d      	ldr	r3, [pc, #372]	@ (8005234 <HAL_RCC_ClockConfig+0x1f8>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	4a5d      	ldr	r2, [pc, #372]	@ (8005238 <HAL_RCC_ClockConfig+0x1fc>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	0019      	movs	r1, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	4b59      	ldr	r3, [pc, #356]	@ (8005234 <HAL_RCC_ClockConfig+0x1f8>)
 80050ce:	430a      	orrs	r2, r1
 80050d0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2201      	movs	r2, #1
 80050d8:	4013      	ands	r3, r2
 80050da:	d057      	beq.n	800518c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d107      	bne.n	80050f4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050e4:	4b53      	ldr	r3, [pc, #332]	@ (8005234 <HAL_RCC_ClockConfig+0x1f8>)
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	2380      	movs	r3, #128	@ 0x80
 80050ea:	029b      	lsls	r3, r3, #10
 80050ec:	4013      	ands	r3, r2
 80050ee:	d12b      	bne.n	8005148 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e097      	b.n	8005224 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d107      	bne.n	800510c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050fc:	4b4d      	ldr	r3, [pc, #308]	@ (8005234 <HAL_RCC_ClockConfig+0x1f8>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	2380      	movs	r3, #128	@ 0x80
 8005102:	049b      	lsls	r3, r3, #18
 8005104:	4013      	ands	r3, r2
 8005106:	d11f      	bne.n	8005148 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e08b      	b.n	8005224 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d107      	bne.n	8005124 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005114:	4b47      	ldr	r3, [pc, #284]	@ (8005234 <HAL_RCC_ClockConfig+0x1f8>)
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	2380      	movs	r3, #128	@ 0x80
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4013      	ands	r3, r2
 800511e:	d113      	bne.n	8005148 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e07f      	b.n	8005224 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2b03      	cmp	r3, #3
 800512a:	d106      	bne.n	800513a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800512c:	4b41      	ldr	r3, [pc, #260]	@ (8005234 <HAL_RCC_ClockConfig+0x1f8>)
 800512e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005130:	2202      	movs	r2, #2
 8005132:	4013      	ands	r3, r2
 8005134:	d108      	bne.n	8005148 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e074      	b.n	8005224 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800513a:	4b3e      	ldr	r3, [pc, #248]	@ (8005234 <HAL_RCC_ClockConfig+0x1f8>)
 800513c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800513e:	2202      	movs	r2, #2
 8005140:	4013      	ands	r3, r2
 8005142:	d101      	bne.n	8005148 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e06d      	b.n	8005224 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005148:	4b3a      	ldr	r3, [pc, #232]	@ (8005234 <HAL_RCC_ClockConfig+0x1f8>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2207      	movs	r2, #7
 800514e:	4393      	bics	r3, r2
 8005150:	0019      	movs	r1, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	4b37      	ldr	r3, [pc, #220]	@ (8005234 <HAL_RCC_ClockConfig+0x1f8>)
 8005158:	430a      	orrs	r2, r1
 800515a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800515c:	f7fd f9bc 	bl	80024d8 <HAL_GetTick>
 8005160:	0003      	movs	r3, r0
 8005162:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005164:	e009      	b.n	800517a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005166:	f7fd f9b7 	bl	80024d8 <HAL_GetTick>
 800516a:	0002      	movs	r2, r0
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	4a2f      	ldr	r2, [pc, #188]	@ (8005230 <HAL_RCC_ClockConfig+0x1f4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d901      	bls.n	800517a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e054      	b.n	8005224 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517a:	4b2e      	ldr	r3, [pc, #184]	@ (8005234 <HAL_RCC_ClockConfig+0x1f8>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2238      	movs	r2, #56	@ 0x38
 8005180:	401a      	ands	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	429a      	cmp	r2, r3
 800518a:	d1ec      	bne.n	8005166 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800518c:	4b27      	ldr	r3, [pc, #156]	@ (800522c <HAL_RCC_ClockConfig+0x1f0>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2207      	movs	r2, #7
 8005192:	4013      	ands	r3, r2
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d21e      	bcs.n	80051d8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519a:	4b24      	ldr	r3, [pc, #144]	@ (800522c <HAL_RCC_ClockConfig+0x1f0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2207      	movs	r2, #7
 80051a0:	4393      	bics	r3, r2
 80051a2:	0019      	movs	r1, r3
 80051a4:	4b21      	ldr	r3, [pc, #132]	@ (800522c <HAL_RCC_ClockConfig+0x1f0>)
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051ac:	f7fd f994 	bl	80024d8 <HAL_GetTick>
 80051b0:	0003      	movs	r3, r0
 80051b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051b4:	e009      	b.n	80051ca <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051b6:	f7fd f98f 	bl	80024d8 <HAL_GetTick>
 80051ba:	0002      	movs	r2, r0
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005230 <HAL_RCC_ClockConfig+0x1f4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e02c      	b.n	8005224 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051ca:	4b18      	ldr	r3, [pc, #96]	@ (800522c <HAL_RCC_ClockConfig+0x1f0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2207      	movs	r2, #7
 80051d0:	4013      	ands	r3, r2
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d1ee      	bne.n	80051b6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2204      	movs	r2, #4
 80051de:	4013      	ands	r3, r2
 80051e0:	d009      	beq.n	80051f6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80051e2:	4b14      	ldr	r3, [pc, #80]	@ (8005234 <HAL_RCC_ClockConfig+0x1f8>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	4a15      	ldr	r2, [pc, #84]	@ (800523c <HAL_RCC_ClockConfig+0x200>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	0019      	movs	r1, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	4b10      	ldr	r3, [pc, #64]	@ (8005234 <HAL_RCC_ClockConfig+0x1f8>)
 80051f2:	430a      	orrs	r2, r1
 80051f4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80051f6:	f000 f829 	bl	800524c <HAL_RCC_GetSysClockFreq>
 80051fa:	0001      	movs	r1, r0
 80051fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005234 <HAL_RCC_ClockConfig+0x1f8>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	0a1b      	lsrs	r3, r3, #8
 8005202:	220f      	movs	r2, #15
 8005204:	401a      	ands	r2, r3
 8005206:	4b0e      	ldr	r3, [pc, #56]	@ (8005240 <HAL_RCC_ClockConfig+0x204>)
 8005208:	0092      	lsls	r2, r2, #2
 800520a:	58d3      	ldr	r3, [r2, r3]
 800520c:	221f      	movs	r2, #31
 800520e:	4013      	ands	r3, r2
 8005210:	000a      	movs	r2, r1
 8005212:	40da      	lsrs	r2, r3
 8005214:	4b0b      	ldr	r3, [pc, #44]	@ (8005244 <HAL_RCC_ClockConfig+0x208>)
 8005216:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005218:	4b0b      	ldr	r3, [pc, #44]	@ (8005248 <HAL_RCC_ClockConfig+0x20c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	0018      	movs	r0, r3
 800521e:	f7fd f8ff 	bl	8002420 <HAL_InitTick>
 8005222:	0003      	movs	r3, r0
}
 8005224:	0018      	movs	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	b004      	add	sp, #16
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40022000 	.word	0x40022000
 8005230:	00001388 	.word	0x00001388
 8005234:	40021000 	.word	0x40021000
 8005238:	fffff0ff 	.word	0xfffff0ff
 800523c:	ffff8fff 	.word	0xffff8fff
 8005240:	080060c0 	.word	0x080060c0
 8005244:	20000060 	.word	0x20000060
 8005248:	20000064 	.word	0x20000064

0800524c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005252:	4b3c      	ldr	r3, [pc, #240]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2238      	movs	r2, #56	@ 0x38
 8005258:	4013      	ands	r3, r2
 800525a:	d10f      	bne.n	800527c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800525c:	4b39      	ldr	r3, [pc, #228]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xf8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	0adb      	lsrs	r3, r3, #11
 8005262:	2207      	movs	r2, #7
 8005264:	4013      	ands	r3, r2
 8005266:	2201      	movs	r2, #1
 8005268:	409a      	lsls	r2, r3
 800526a:	0013      	movs	r3, r2
 800526c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800526e:	6839      	ldr	r1, [r7, #0]
 8005270:	4835      	ldr	r0, [pc, #212]	@ (8005348 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005272:	f7fa ff47 	bl	8000104 <__udivsi3>
 8005276:	0003      	movs	r3, r0
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	e05d      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800527c:	4b31      	ldr	r3, [pc, #196]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xf8>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2238      	movs	r2, #56	@ 0x38
 8005282:	4013      	ands	r3, r2
 8005284:	2b08      	cmp	r3, #8
 8005286:	d102      	bne.n	800528e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005288:	4b30      	ldr	r3, [pc, #192]	@ (800534c <HAL_RCC_GetSysClockFreq+0x100>)
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	e054      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800528e:	4b2d      	ldr	r3, [pc, #180]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2238      	movs	r2, #56	@ 0x38
 8005294:	4013      	ands	r3, r2
 8005296:	2b10      	cmp	r3, #16
 8005298:	d138      	bne.n	800530c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800529a:	4b2a      	ldr	r3, [pc, #168]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xf8>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	2203      	movs	r2, #3
 80052a0:	4013      	ands	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052a4:	4b27      	ldr	r3, [pc, #156]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	091b      	lsrs	r3, r3, #4
 80052aa:	2207      	movs	r2, #7
 80052ac:	4013      	ands	r3, r2
 80052ae:	3301      	adds	r3, #1
 80052b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d10d      	bne.n	80052d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	4824      	ldr	r0, [pc, #144]	@ (800534c <HAL_RCC_GetSysClockFreq+0x100>)
 80052bc:	f7fa ff22 	bl	8000104 <__udivsi3>
 80052c0:	0003      	movs	r3, r0
 80052c2:	0019      	movs	r1, r3
 80052c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	0a1b      	lsrs	r3, r3, #8
 80052ca:	227f      	movs	r2, #127	@ 0x7f
 80052cc:	4013      	ands	r3, r2
 80052ce:	434b      	muls	r3, r1
 80052d0:	617b      	str	r3, [r7, #20]
        break;
 80052d2:	e00d      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	481c      	ldr	r0, [pc, #112]	@ (8005348 <HAL_RCC_GetSysClockFreq+0xfc>)
 80052d8:	f7fa ff14 	bl	8000104 <__udivsi3>
 80052dc:	0003      	movs	r3, r0
 80052de:	0019      	movs	r1, r3
 80052e0:	4b18      	ldr	r3, [pc, #96]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	0a1b      	lsrs	r3, r3, #8
 80052e6:	227f      	movs	r2, #127	@ 0x7f
 80052e8:	4013      	ands	r3, r2
 80052ea:	434b      	muls	r3, r1
 80052ec:	617b      	str	r3, [r7, #20]
        break;
 80052ee:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80052f0:	4b14      	ldr	r3, [pc, #80]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	0f5b      	lsrs	r3, r3, #29
 80052f6:	2207      	movs	r2, #7
 80052f8:	4013      	ands	r3, r2
 80052fa:	3301      	adds	r3, #1
 80052fc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	6978      	ldr	r0, [r7, #20]
 8005302:	f7fa feff 	bl	8000104 <__udivsi3>
 8005306:	0003      	movs	r3, r0
 8005308:	613b      	str	r3, [r7, #16]
 800530a:	e015      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800530c:	4b0d      	ldr	r3, [pc, #52]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xf8>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	2238      	movs	r2, #56	@ 0x38
 8005312:	4013      	ands	r3, r2
 8005314:	2b20      	cmp	r3, #32
 8005316:	d103      	bne.n	8005320 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005318:	2380      	movs	r3, #128	@ 0x80
 800531a:	021b      	lsls	r3, r3, #8
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	e00b      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005320:	4b08      	ldr	r3, [pc, #32]	@ (8005344 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2238      	movs	r2, #56	@ 0x38
 8005326:	4013      	ands	r3, r2
 8005328:	2b18      	cmp	r3, #24
 800532a:	d103      	bne.n	8005334 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800532c:	23fa      	movs	r3, #250	@ 0xfa
 800532e:	01db      	lsls	r3, r3, #7
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	e001      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005338:	693b      	ldr	r3, [r7, #16]
}
 800533a:	0018      	movs	r0, r3
 800533c:	46bd      	mov	sp, r7
 800533e:	b006      	add	sp, #24
 8005340:	bd80      	pop	{r7, pc}
 8005342:	46c0      	nop			@ (mov r8, r8)
 8005344:	40021000 	.word	0x40021000
 8005348:	00f42400 	.word	0x00f42400
 800534c:	007a1200 	.word	0x007a1200

08005350 <HAL_RCC_EnableCSS>:
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005354:	4b04      	ldr	r3, [pc, #16]	@ (8005368 <HAL_RCC_EnableCSS+0x18>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4b03      	ldr	r3, [pc, #12]	@ (8005368 <HAL_RCC_EnableCSS+0x18>)
 800535a:	2180      	movs	r1, #128	@ 0x80
 800535c:	0309      	lsls	r1, r1, #12
 800535e:	430a      	orrs	r2, r1
 8005360:	601a      	str	r2, [r3, #0]
}
 8005362:	46c0      	nop			@ (mov r8, r8)
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40021000 	.word	0x40021000

0800536c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note  This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
  uint32_t itflag = RCC->CIFR;
 8005372:	4b0d      	ldr	r3, [pc, #52]	@ (80053a8 <HAL_RCC_NMI_IRQHandler+0x3c>)
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	607b      	str	r3, [r7, #4]

  /* Clear interrupt flags related to CSS */
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 8005378:	4b0b      	ldr	r3, [pc, #44]	@ (80053a8 <HAL_RCC_NMI_IRQHandler+0x3c>)
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	22c0      	movs	r2, #192	@ 0xc0
 800537e:	0092      	lsls	r2, r2, #2
 8005380:	400a      	ands	r2, r1
 8005382:	621a      	str	r2, [r3, #32]

  /* Check RCC CSSF interrupt flag  */
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	2380      	movs	r3, #128	@ 0x80
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	4013      	ands	r3, r2
 800538c:	d001      	beq.n	8005392 <HAL_RCC_NMI_IRQHandler+0x26>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800538e:	f000 f80d 	bl	80053ac <HAL_RCC_CSSCallback>
  }

  /* Check RCC LSECSSF interrupt flag  */
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	2380      	movs	r3, #128	@ 0x80
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4013      	ands	r3, r2
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_NMI_IRQHandler+0x34>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_LSECSSCallback();
 800539c:	f000 f80b 	bl	80053b6 <HAL_RCC_LSECSSCallback>
  }
}
 80053a0:	46c0      	nop			@ (mov r8, r8)
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b002      	add	sp, #8
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40021000 	.word	0x40021000

080053ac <HAL_RCC_CSSCallback>:
/**
  * @brief Handle the RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80053b0:	46c0      	nop			@ (mov r8, r8)
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_RCC_LSECSSCallback>:
/**
  * @brief  RCC LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_LSECSSCallback(void)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 80053ba:	46c0      	nop			@ (mov r8, r8)
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80053c8:	2313      	movs	r3, #19
 80053ca:	18fb      	adds	r3, r7, r3
 80053cc:	2200      	movs	r2, #0
 80053ce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053d0:	2312      	movs	r3, #18
 80053d2:	18fb      	adds	r3, r7, r3
 80053d4:	2200      	movs	r2, #0
 80053d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	2380      	movs	r3, #128	@ 0x80
 80053de:	029b      	lsls	r3, r3, #10
 80053e0:	4013      	ands	r3, r2
 80053e2:	d100      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80053e4:	e0a3      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053e6:	2011      	movs	r0, #17
 80053e8:	183b      	adds	r3, r7, r0
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ee:	4bc3      	ldr	r3, [pc, #780]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053f2:	2380      	movs	r3, #128	@ 0x80
 80053f4:	055b      	lsls	r3, r3, #21
 80053f6:	4013      	ands	r3, r2
 80053f8:	d110      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053fa:	4bc0      	ldr	r3, [pc, #768]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053fe:	4bbf      	ldr	r3, [pc, #764]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005400:	2180      	movs	r1, #128	@ 0x80
 8005402:	0549      	lsls	r1, r1, #21
 8005404:	430a      	orrs	r2, r1
 8005406:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005408:	4bbc      	ldr	r3, [pc, #752]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800540a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800540c:	2380      	movs	r3, #128	@ 0x80
 800540e:	055b      	lsls	r3, r3, #21
 8005410:	4013      	ands	r3, r2
 8005412:	60bb      	str	r3, [r7, #8]
 8005414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005416:	183b      	adds	r3, r7, r0
 8005418:	2201      	movs	r2, #1
 800541a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800541c:	4bb8      	ldr	r3, [pc, #736]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	4bb7      	ldr	r3, [pc, #732]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005422:	2180      	movs	r1, #128	@ 0x80
 8005424:	0049      	lsls	r1, r1, #1
 8005426:	430a      	orrs	r2, r1
 8005428:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800542a:	f7fd f855 	bl	80024d8 <HAL_GetTick>
 800542e:	0003      	movs	r3, r0
 8005430:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005432:	e00b      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005434:	f7fd f850 	bl	80024d8 <HAL_GetTick>
 8005438:	0002      	movs	r2, r0
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d904      	bls.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005442:	2313      	movs	r3, #19
 8005444:	18fb      	adds	r3, r7, r3
 8005446:	2203      	movs	r2, #3
 8005448:	701a      	strb	r2, [r3, #0]
        break;
 800544a:	e005      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800544c:	4bac      	ldr	r3, [pc, #688]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	2380      	movs	r3, #128	@ 0x80
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	4013      	ands	r3, r2
 8005456:	d0ed      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005458:	2313      	movs	r3, #19
 800545a:	18fb      	adds	r3, r7, r3
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d154      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005462:	4ba6      	ldr	r3, [pc, #664]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005464:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005466:	23c0      	movs	r3, #192	@ 0xc0
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4013      	ands	r3, r2
 800546c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d019      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	429a      	cmp	r2, r3
 800547c:	d014      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800547e:	4b9f      	ldr	r3, [pc, #636]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005482:	4aa0      	ldr	r2, [pc, #640]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005484:	4013      	ands	r3, r2
 8005486:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005488:	4b9c      	ldr	r3, [pc, #624]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800548a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800548c:	4b9b      	ldr	r3, [pc, #620]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800548e:	2180      	movs	r1, #128	@ 0x80
 8005490:	0249      	lsls	r1, r1, #9
 8005492:	430a      	orrs	r2, r1
 8005494:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005496:	4b99      	ldr	r3, [pc, #612]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005498:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800549a:	4b98      	ldr	r3, [pc, #608]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800549c:	499a      	ldr	r1, [pc, #616]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800549e:	400a      	ands	r2, r1
 80054a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054a2:	4b96      	ldr	r3, [pc, #600]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	2201      	movs	r2, #1
 80054ac:	4013      	ands	r3, r2
 80054ae:	d016      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7fd f812 	bl	80024d8 <HAL_GetTick>
 80054b4:	0003      	movs	r3, r0
 80054b6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054b8:	e00c      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ba:	f7fd f80d 	bl	80024d8 <HAL_GetTick>
 80054be:	0002      	movs	r2, r0
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	4a91      	ldr	r2, [pc, #580]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d904      	bls.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80054ca:	2313      	movs	r3, #19
 80054cc:	18fb      	adds	r3, r7, r3
 80054ce:	2203      	movs	r2, #3
 80054d0:	701a      	strb	r2, [r3, #0]
            break;
 80054d2:	e004      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054d4:	4b89      	ldr	r3, [pc, #548]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d8:	2202      	movs	r2, #2
 80054da:	4013      	ands	r3, r2
 80054dc:	d0ed      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80054de:	2313      	movs	r3, #19
 80054e0:	18fb      	adds	r3, r7, r3
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054e8:	4b84      	ldr	r3, [pc, #528]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ec:	4a85      	ldr	r2, [pc, #532]	@ (8005704 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80054ee:	4013      	ands	r3, r2
 80054f0:	0019      	movs	r1, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054f6:	4b81      	ldr	r3, [pc, #516]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054f8:	430a      	orrs	r2, r1
 80054fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80054fc:	e00c      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054fe:	2312      	movs	r3, #18
 8005500:	18fb      	adds	r3, r7, r3
 8005502:	2213      	movs	r2, #19
 8005504:	18ba      	adds	r2, r7, r2
 8005506:	7812      	ldrb	r2, [r2, #0]
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	e005      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550c:	2312      	movs	r3, #18
 800550e:	18fb      	adds	r3, r7, r3
 8005510:	2213      	movs	r2, #19
 8005512:	18ba      	adds	r2, r7, r2
 8005514:	7812      	ldrb	r2, [r2, #0]
 8005516:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005518:	2311      	movs	r3, #17
 800551a:	18fb      	adds	r3, r7, r3
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d105      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005522:	4b76      	ldr	r3, [pc, #472]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005524:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005526:	4b75      	ldr	r3, [pc, #468]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005528:	4979      	ldr	r1, [pc, #484]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800552a:	400a      	ands	r2, r1
 800552c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2201      	movs	r2, #1
 8005534:	4013      	ands	r3, r2
 8005536:	d009      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005538:	4b70      	ldr	r3, [pc, #448]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800553a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553c:	2203      	movs	r2, #3
 800553e:	4393      	bics	r3, r2
 8005540:	0019      	movs	r1, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	4b6d      	ldr	r3, [pc, #436]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005548:	430a      	orrs	r2, r1
 800554a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2202      	movs	r2, #2
 8005552:	4013      	ands	r3, r2
 8005554:	d009      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005556:	4b69      	ldr	r3, [pc, #420]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555a:	220c      	movs	r2, #12
 800555c:	4393      	bics	r3, r2
 800555e:	0019      	movs	r1, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	4b65      	ldr	r3, [pc, #404]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005566:	430a      	orrs	r2, r1
 8005568:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2210      	movs	r2, #16
 8005570:	4013      	ands	r3, r2
 8005572:	d009      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005574:	4b61      	ldr	r3, [pc, #388]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005578:	4a66      	ldr	r2, [pc, #408]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800557a:	4013      	ands	r3, r2
 800557c:	0019      	movs	r1, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	4b5e      	ldr	r3, [pc, #376]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005584:	430a      	orrs	r2, r1
 8005586:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	2380      	movs	r3, #128	@ 0x80
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4013      	ands	r3, r2
 8005592:	d009      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005594:	4b59      	ldr	r3, [pc, #356]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005598:	4a5f      	ldr	r2, [pc, #380]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800559a:	4013      	ands	r3, r2
 800559c:	0019      	movs	r1, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699a      	ldr	r2, [r3, #24]
 80055a2:	4b56      	ldr	r3, [pc, #344]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055a4:	430a      	orrs	r2, r1
 80055a6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	2380      	movs	r3, #128	@ 0x80
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	4013      	ands	r3, r2
 80055b2:	d009      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055b4:	4b51      	ldr	r3, [pc, #324]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b8:	4a58      	ldr	r2, [pc, #352]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	0019      	movs	r1, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69da      	ldr	r2, [r3, #28]
 80055c2:	4b4e      	ldr	r3, [pc, #312]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055c4:	430a      	orrs	r2, r1
 80055c6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2220      	movs	r2, #32
 80055ce:	4013      	ands	r3, r2
 80055d0:	d009      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055d2:	4b4a      	ldr	r3, [pc, #296]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d6:	4a52      	ldr	r2, [pc, #328]	@ (8005720 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80055d8:	4013      	ands	r3, r2
 80055da:	0019      	movs	r1, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	4b46      	ldr	r3, [pc, #280]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055e2:	430a      	orrs	r2, r1
 80055e4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	2380      	movs	r3, #128	@ 0x80
 80055ec:	01db      	lsls	r3, r3, #7
 80055ee:	4013      	ands	r3, r2
 80055f0:	d015      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055f2:	4b42      	ldr	r3, [pc, #264]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	0899      	lsrs	r1, r3, #2
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1a      	ldr	r2, [r3, #32]
 80055fe:	4b3f      	ldr	r3, [pc, #252]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005600:	430a      	orrs	r2, r1
 8005602:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a1a      	ldr	r2, [r3, #32]
 8005608:	2380      	movs	r3, #128	@ 0x80
 800560a:	05db      	lsls	r3, r3, #23
 800560c:	429a      	cmp	r2, r3
 800560e:	d106      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005610:	4b3a      	ldr	r3, [pc, #232]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	4b39      	ldr	r3, [pc, #228]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005616:	2180      	movs	r1, #128	@ 0x80
 8005618:	0249      	lsls	r1, r1, #9
 800561a:	430a      	orrs	r2, r1
 800561c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	2380      	movs	r3, #128	@ 0x80
 8005624:	031b      	lsls	r3, r3, #12
 8005626:	4013      	ands	r3, r2
 8005628:	d009      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800562a:	4b34      	ldr	r3, [pc, #208]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800562c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562e:	2240      	movs	r2, #64	@ 0x40
 8005630:	4393      	bics	r3, r2
 8005632:	0019      	movs	r1, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005638:	4b30      	ldr	r3, [pc, #192]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800563a:	430a      	orrs	r2, r1
 800563c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	2380      	movs	r3, #128	@ 0x80
 8005644:	039b      	lsls	r3, r3, #14
 8005646:	4013      	ands	r3, r2
 8005648:	d016      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800564a:	4b2c      	ldr	r3, [pc, #176]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800564c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564e:	4a35      	ldr	r2, [pc, #212]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005650:	4013      	ands	r3, r2
 8005652:	0019      	movs	r1, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005658:	4b28      	ldr	r3, [pc, #160]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800565a:	430a      	orrs	r2, r1
 800565c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005662:	2380      	movs	r3, #128	@ 0x80
 8005664:	03db      	lsls	r3, r3, #15
 8005666:	429a      	cmp	r2, r3
 8005668:	d106      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800566a:	4b24      	ldr	r3, [pc, #144]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	4b23      	ldr	r3, [pc, #140]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005670:	2180      	movs	r1, #128	@ 0x80
 8005672:	0449      	lsls	r1, r1, #17
 8005674:	430a      	orrs	r2, r1
 8005676:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	2380      	movs	r3, #128	@ 0x80
 800567e:	03db      	lsls	r3, r3, #15
 8005680:	4013      	ands	r3, r2
 8005682:	d016      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005684:	4b1d      	ldr	r3, [pc, #116]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005688:	4a27      	ldr	r2, [pc, #156]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800568a:	4013      	ands	r3, r2
 800568c:	0019      	movs	r1, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005692:	4b1a      	ldr	r3, [pc, #104]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005694:	430a      	orrs	r2, r1
 8005696:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800569c:	2380      	movs	r3, #128	@ 0x80
 800569e:	045b      	lsls	r3, r3, #17
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d106      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80056a4:	4b15      	ldr	r3, [pc, #84]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	4b14      	ldr	r3, [pc, #80]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056aa:	2180      	movs	r1, #128	@ 0x80
 80056ac:	0449      	lsls	r1, r1, #17
 80056ae:	430a      	orrs	r2, r1
 80056b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	2380      	movs	r3, #128	@ 0x80
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	4013      	ands	r3, r2
 80056bc:	d016      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80056be:	4b0f      	ldr	r3, [pc, #60]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c2:	4a1a      	ldr	r2, [pc, #104]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	0019      	movs	r1, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	695a      	ldr	r2, [r3, #20]
 80056cc:	4b0b      	ldr	r3, [pc, #44]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056ce:	430a      	orrs	r2, r1
 80056d0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695a      	ldr	r2, [r3, #20]
 80056d6:	2380      	movs	r3, #128	@ 0x80
 80056d8:	01db      	lsls	r3, r3, #7
 80056da:	429a      	cmp	r2, r3
 80056dc:	d106      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80056de:	4b07      	ldr	r3, [pc, #28]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	4b06      	ldr	r3, [pc, #24]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80056e4:	2180      	movs	r1, #128	@ 0x80
 80056e6:	0249      	lsls	r1, r1, #9
 80056e8:	430a      	orrs	r2, r1
 80056ea:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80056ec:	2312      	movs	r3, #18
 80056ee:	18fb      	adds	r3, r7, r3
 80056f0:	781b      	ldrb	r3, [r3, #0]
}
 80056f2:	0018      	movs	r0, r3
 80056f4:	46bd      	mov	sp, r7
 80056f6:	b006      	add	sp, #24
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	46c0      	nop			@ (mov r8, r8)
 80056fc:	40021000 	.word	0x40021000
 8005700:	40007000 	.word	0x40007000
 8005704:	fffffcff 	.word	0xfffffcff
 8005708:	fffeffff 	.word	0xfffeffff
 800570c:	00001388 	.word	0x00001388
 8005710:	efffffff 	.word	0xefffffff
 8005714:	fffff3ff 	.word	0xfffff3ff
 8005718:	fff3ffff 	.word	0xfff3ffff
 800571c:	ffcfffff 	.word	0xffcfffff
 8005720:	ffffcfff 	.word	0xffffcfff
 8005724:	ffbfffff 	.word	0xffbfffff
 8005728:	feffffff 	.word	0xfeffffff
 800572c:	ffff3fff 	.word	0xffff3fff

08005730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e04a      	b.n	80057d8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	223d      	movs	r2, #61	@ 0x3d
 8005746:	5c9b      	ldrb	r3, [r3, r2]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d107      	bne.n	800575e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	223c      	movs	r2, #60	@ 0x3c
 8005752:	2100      	movs	r1, #0
 8005754:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	0018      	movs	r0, r3
 800575a:	f7fc fd2f 	bl	80021bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	223d      	movs	r2, #61	@ 0x3d
 8005762:	2102      	movs	r1, #2
 8005764:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3304      	adds	r3, #4
 800576e:	0019      	movs	r1, r3
 8005770:	0010      	movs	r0, r2
 8005772:	f000 fabd 	bl	8005cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2248      	movs	r2, #72	@ 0x48
 800577a:	2101      	movs	r1, #1
 800577c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	223e      	movs	r2, #62	@ 0x3e
 8005782:	2101      	movs	r1, #1
 8005784:	5499      	strb	r1, [r3, r2]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	223f      	movs	r2, #63	@ 0x3f
 800578a:	2101      	movs	r1, #1
 800578c:	5499      	strb	r1, [r3, r2]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2240      	movs	r2, #64	@ 0x40
 8005792:	2101      	movs	r1, #1
 8005794:	5499      	strb	r1, [r3, r2]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2241      	movs	r2, #65	@ 0x41
 800579a:	2101      	movs	r1, #1
 800579c:	5499      	strb	r1, [r3, r2]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2242      	movs	r2, #66	@ 0x42
 80057a2:	2101      	movs	r1, #1
 80057a4:	5499      	strb	r1, [r3, r2]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2243      	movs	r2, #67	@ 0x43
 80057aa:	2101      	movs	r1, #1
 80057ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2244      	movs	r2, #68	@ 0x44
 80057b2:	2101      	movs	r1, #1
 80057b4:	5499      	strb	r1, [r3, r2]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2245      	movs	r2, #69	@ 0x45
 80057ba:	2101      	movs	r1, #1
 80057bc:	5499      	strb	r1, [r3, r2]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2246      	movs	r2, #70	@ 0x46
 80057c2:	2101      	movs	r1, #1
 80057c4:	5499      	strb	r1, [r3, r2]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2247      	movs	r2, #71	@ 0x47
 80057ca:	2101      	movs	r1, #1
 80057cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	223d      	movs	r2, #61	@ 0x3d
 80057d2:	2101      	movs	r1, #1
 80057d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	0018      	movs	r0, r3
 80057da:	46bd      	mov	sp, r7
 80057dc:	b002      	add	sp, #8
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	223d      	movs	r2, #61	@ 0x3d
 80057ec:	5c9b      	ldrb	r3, [r3, r2]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d001      	beq.n	80057f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e042      	b.n	800587e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	223d      	movs	r2, #61	@ 0x3d
 80057fc:	2102      	movs	r1, #2
 80057fe:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2101      	movs	r1, #1
 800580c:	430a      	orrs	r2, r1
 800580e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a1c      	ldr	r2, [pc, #112]	@ (8005888 <HAL_TIM_Base_Start_IT+0xa8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00f      	beq.n	800583a <HAL_TIM_Base_Start_IT+0x5a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	2380      	movs	r3, #128	@ 0x80
 8005820:	05db      	lsls	r3, r3, #23
 8005822:	429a      	cmp	r2, r3
 8005824:	d009      	beq.n	800583a <HAL_TIM_Base_Start_IT+0x5a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a18      	ldr	r2, [pc, #96]	@ (800588c <HAL_TIM_Base_Start_IT+0xac>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d004      	beq.n	800583a <HAL_TIM_Base_Start_IT+0x5a>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a16      	ldr	r2, [pc, #88]	@ (8005890 <HAL_TIM_Base_Start_IT+0xb0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d116      	bne.n	8005868 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	4a14      	ldr	r2, [pc, #80]	@ (8005894 <HAL_TIM_Base_Start_IT+0xb4>)
 8005842:	4013      	ands	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b06      	cmp	r3, #6
 800584a:	d016      	beq.n	800587a <HAL_TIM_Base_Start_IT+0x9a>
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	2380      	movs	r3, #128	@ 0x80
 8005850:	025b      	lsls	r3, r3, #9
 8005852:	429a      	cmp	r2, r3
 8005854:	d011      	beq.n	800587a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2101      	movs	r1, #1
 8005862:	430a      	orrs	r2, r1
 8005864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005866:	e008      	b.n	800587a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2101      	movs	r1, #1
 8005874:	430a      	orrs	r2, r1
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	e000      	b.n	800587c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	0018      	movs	r0, r3
 8005880:	46bd      	mov	sp, r7
 8005882:	b004      	add	sp, #16
 8005884:	bd80      	pop	{r7, pc}
 8005886:	46c0      	nop			@ (mov r8, r8)
 8005888:	40012c00 	.word	0x40012c00
 800588c:	40000400 	.word	0x40000400
 8005890:	40014000 	.word	0x40014000
 8005894:	00010007 	.word	0x00010007

08005898 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68da      	ldr	r2, [r3, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2101      	movs	r1, #1
 80058ac:	438a      	bics	r2, r1
 80058ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	4a0d      	ldr	r2, [pc, #52]	@ (80058ec <HAL_TIM_Base_Stop_IT+0x54>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	d10d      	bne.n	80058d8 <HAL_TIM_Base_Stop_IT+0x40>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	4a0b      	ldr	r2, [pc, #44]	@ (80058f0 <HAL_TIM_Base_Stop_IT+0x58>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	d107      	bne.n	80058d8 <HAL_TIM_Base_Stop_IT+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2101      	movs	r1, #1
 80058d4:	438a      	bics	r2, r1
 80058d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	223d      	movs	r2, #61	@ 0x3d
 80058dc:	2101      	movs	r1, #1
 80058de:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	0018      	movs	r0, r3
 80058e4:	46bd      	mov	sp, r7
 80058e6:	b002      	add	sp, #8
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	46c0      	nop			@ (mov r8, r8)
 80058ec:	00001111 	.word	0x00001111
 80058f0:	00000444 	.word	0x00000444

080058f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2202      	movs	r2, #2
 8005910:	4013      	ands	r3, r2
 8005912:	d021      	beq.n	8005958 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2202      	movs	r2, #2
 8005918:	4013      	ands	r3, r2
 800591a:	d01d      	beq.n	8005958 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2203      	movs	r2, #3
 8005922:	4252      	negs	r2, r2
 8005924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	2203      	movs	r2, #3
 8005934:	4013      	ands	r3, r2
 8005936:	d004      	beq.n	8005942 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	0018      	movs	r0, r3
 800593c:	f000 f9c0 	bl	8005cc0 <HAL_TIM_IC_CaptureCallback>
 8005940:	e007      	b.n	8005952 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	0018      	movs	r0, r3
 8005946:	f000 f9b3 	bl	8005cb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	0018      	movs	r0, r3
 800594e:	f000 f9bf 	bl	8005cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2204      	movs	r2, #4
 800595c:	4013      	ands	r3, r2
 800595e:	d022      	beq.n	80059a6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2204      	movs	r2, #4
 8005964:	4013      	ands	r3, r2
 8005966:	d01e      	beq.n	80059a6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2205      	movs	r2, #5
 800596e:	4252      	negs	r2, r2
 8005970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2202      	movs	r2, #2
 8005976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	23c0      	movs	r3, #192	@ 0xc0
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4013      	ands	r3, r2
 8005984:	d004      	beq.n	8005990 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	0018      	movs	r0, r3
 800598a:	f000 f999 	bl	8005cc0 <HAL_TIM_IC_CaptureCallback>
 800598e:	e007      	b.n	80059a0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	0018      	movs	r0, r3
 8005994:	f000 f98c 	bl	8005cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	0018      	movs	r0, r3
 800599c:	f000 f998 	bl	8005cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2208      	movs	r2, #8
 80059aa:	4013      	ands	r3, r2
 80059ac:	d021      	beq.n	80059f2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2208      	movs	r2, #8
 80059b2:	4013      	ands	r3, r2
 80059b4:	d01d      	beq.n	80059f2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2209      	movs	r2, #9
 80059bc:	4252      	negs	r2, r2
 80059be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2204      	movs	r2, #4
 80059c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	2203      	movs	r2, #3
 80059ce:	4013      	ands	r3, r2
 80059d0:	d004      	beq.n	80059dc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	0018      	movs	r0, r3
 80059d6:	f000 f973 	bl	8005cc0 <HAL_TIM_IC_CaptureCallback>
 80059da:	e007      	b.n	80059ec <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	0018      	movs	r0, r3
 80059e0:	f000 f966 	bl	8005cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	0018      	movs	r0, r3
 80059e8:	f000 f972 	bl	8005cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2210      	movs	r2, #16
 80059f6:	4013      	ands	r3, r2
 80059f8:	d022      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2210      	movs	r2, #16
 80059fe:	4013      	ands	r3, r2
 8005a00:	d01e      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2211      	movs	r2, #17
 8005a08:	4252      	negs	r2, r2
 8005a0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2208      	movs	r2, #8
 8005a10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	23c0      	movs	r3, #192	@ 0xc0
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d004      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	0018      	movs	r0, r3
 8005a24:	f000 f94c 	bl	8005cc0 <HAL_TIM_IC_CaptureCallback>
 8005a28:	e007      	b.n	8005a3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	f000 f93f 	bl	8005cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	0018      	movs	r0, r3
 8005a36:	f000 f94b 	bl	8005cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2201      	movs	r2, #1
 8005a44:	4013      	ands	r3, r2
 8005a46:	d00c      	beq.n	8005a62 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	d008      	beq.n	8005a62 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2202      	movs	r2, #2
 8005a56:	4252      	negs	r2, r2
 8005a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f7fc f98f 	bl	8001d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2280      	movs	r2, #128	@ 0x80
 8005a66:	4013      	ands	r3, r2
 8005a68:	d104      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	2380      	movs	r3, #128	@ 0x80
 8005a6e:	019b      	lsls	r3, r3, #6
 8005a70:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a72:	d00b      	beq.n	8005a8c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2280      	movs	r2, #128	@ 0x80
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d007      	beq.n	8005a8c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1e      	ldr	r2, [pc, #120]	@ (8005afc <HAL_TIM_IRQHandler+0x208>)
 8005a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	0018      	movs	r0, r3
 8005a88:	f000 fad2 	bl	8006030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	2380      	movs	r3, #128	@ 0x80
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	4013      	ands	r3, r2
 8005a94:	d00b      	beq.n	8005aae <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2280      	movs	r2, #128	@ 0x80
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d007      	beq.n	8005aae <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a17      	ldr	r2, [pc, #92]	@ (8005b00 <HAL_TIM_IRQHandler+0x20c>)
 8005aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	f000 fac9 	bl	8006040 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2240      	movs	r2, #64	@ 0x40
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	d00c      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2240      	movs	r2, #64	@ 0x40
 8005aba:	4013      	ands	r3, r2
 8005abc:	d008      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2241      	movs	r2, #65	@ 0x41
 8005ac4:	4252      	negs	r2, r2
 8005ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	0018      	movs	r0, r3
 8005acc:	f000 f908 	bl	8005ce0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	d00c      	beq.n	8005af2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	4013      	ands	r3, r2
 8005ade:	d008      	beq.n	8005af2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2221      	movs	r2, #33	@ 0x21
 8005ae6:	4252      	negs	r2, r2
 8005ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	0018      	movs	r0, r3
 8005aee:	f000 fa97 	bl	8006020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005af2:	46c0      	nop			@ (mov r8, r8)
 8005af4:	46bd      	mov	sp, r7
 8005af6:	b004      	add	sp, #16
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	46c0      	nop			@ (mov r8, r8)
 8005afc:	ffffdf7f 	.word	0xffffdf7f
 8005b00:	fffffeff 	.word	0xfffffeff

08005b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b0e:	230f      	movs	r3, #15
 8005b10:	18fb      	adds	r3, r7, r3
 8005b12:	2200      	movs	r2, #0
 8005b14:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	223c      	movs	r2, #60	@ 0x3c
 8005b1a:	5c9b      	ldrb	r3, [r3, r2]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_TIM_ConfigClockSource+0x20>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e0bc      	b.n	8005c9e <HAL_TIM_ConfigClockSource+0x19a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	223c      	movs	r2, #60	@ 0x3c
 8005b28:	2101      	movs	r1, #1
 8005b2a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	223d      	movs	r2, #61	@ 0x3d
 8005b30:	2102      	movs	r1, #2
 8005b32:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	4a5a      	ldr	r2, [pc, #360]	@ (8005ca8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	4a59      	ldr	r2, [pc, #356]	@ (8005cac <HAL_TIM_ConfigClockSource+0x1a8>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2280      	movs	r2, #128	@ 0x80
 8005b5a:	0192      	lsls	r2, r2, #6
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d040      	beq.n	8005be2 <HAL_TIM_ConfigClockSource+0xde>
 8005b60:	2280      	movs	r2, #128	@ 0x80
 8005b62:	0192      	lsls	r2, r2, #6
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d900      	bls.n	8005b6a <HAL_TIM_ConfigClockSource+0x66>
 8005b68:	e088      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x178>
 8005b6a:	2280      	movs	r2, #128	@ 0x80
 8005b6c:	0152      	lsls	r2, r2, #5
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d100      	bne.n	8005b74 <HAL_TIM_ConfigClockSource+0x70>
 8005b72:	e088      	b.n	8005c86 <HAL_TIM_ConfigClockSource+0x182>
 8005b74:	2280      	movs	r2, #128	@ 0x80
 8005b76:	0152      	lsls	r2, r2, #5
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d900      	bls.n	8005b7e <HAL_TIM_ConfigClockSource+0x7a>
 8005b7c:	e07e      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x178>
 8005b7e:	2b70      	cmp	r3, #112	@ 0x70
 8005b80:	d018      	beq.n	8005bb4 <HAL_TIM_ConfigClockSource+0xb0>
 8005b82:	d900      	bls.n	8005b86 <HAL_TIM_ConfigClockSource+0x82>
 8005b84:	e07a      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x178>
 8005b86:	2b60      	cmp	r3, #96	@ 0x60
 8005b88:	d04f      	beq.n	8005c2a <HAL_TIM_ConfigClockSource+0x126>
 8005b8a:	d900      	bls.n	8005b8e <HAL_TIM_ConfigClockSource+0x8a>
 8005b8c:	e076      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x178>
 8005b8e:	2b50      	cmp	r3, #80	@ 0x50
 8005b90:	d03b      	beq.n	8005c0a <HAL_TIM_ConfigClockSource+0x106>
 8005b92:	d900      	bls.n	8005b96 <HAL_TIM_ConfigClockSource+0x92>
 8005b94:	e072      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x178>
 8005b96:	2b40      	cmp	r3, #64	@ 0x40
 8005b98:	d057      	beq.n	8005c4a <HAL_TIM_ConfigClockSource+0x146>
 8005b9a:	d900      	bls.n	8005b9e <HAL_TIM_ConfigClockSource+0x9a>
 8005b9c:	e06e      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x178>
 8005b9e:	2b30      	cmp	r3, #48	@ 0x30
 8005ba0:	d063      	beq.n	8005c6a <HAL_TIM_ConfigClockSource+0x166>
 8005ba2:	d86b      	bhi.n	8005c7c <HAL_TIM_ConfigClockSource+0x178>
 8005ba4:	2b20      	cmp	r3, #32
 8005ba6:	d060      	beq.n	8005c6a <HAL_TIM_ConfigClockSource+0x166>
 8005ba8:	d868      	bhi.n	8005c7c <HAL_TIM_ConfigClockSource+0x178>
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d05d      	beq.n	8005c6a <HAL_TIM_ConfigClockSource+0x166>
 8005bae:	2b10      	cmp	r3, #16
 8005bb0:	d05b      	beq.n	8005c6a <HAL_TIM_ConfigClockSource+0x166>
 8005bb2:	e063      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bc4:	f000 f99e 	bl	8005f04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2277      	movs	r2, #119	@ 0x77
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	609a      	str	r2, [r3, #8]
      break;
 8005be0:	e052      	b.n	8005c88 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bf2:	f000 f987 	bl	8005f04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2180      	movs	r1, #128	@ 0x80
 8005c02:	01c9      	lsls	r1, r1, #7
 8005c04:	430a      	orrs	r2, r1
 8005c06:	609a      	str	r2, [r3, #8]
      break;
 8005c08:	e03e      	b.n	8005c88 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c16:	001a      	movs	r2, r3
 8005c18:	f000 f8f8 	bl	8005e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2150      	movs	r1, #80	@ 0x50
 8005c22:	0018      	movs	r0, r3
 8005c24:	f000 f952 	bl	8005ecc <TIM_ITRx_SetConfig>
      break;
 8005c28:	e02e      	b.n	8005c88 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c36:	001a      	movs	r2, r3
 8005c38:	f000 f916 	bl	8005e68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2160      	movs	r1, #96	@ 0x60
 8005c42:	0018      	movs	r0, r3
 8005c44:	f000 f942 	bl	8005ecc <TIM_ITRx_SetConfig>
      break;
 8005c48:	e01e      	b.n	8005c88 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c56:	001a      	movs	r2, r3
 8005c58:	f000 f8d8 	bl	8005e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2140      	movs	r1, #64	@ 0x40
 8005c62:	0018      	movs	r0, r3
 8005c64:	f000 f932 	bl	8005ecc <TIM_ITRx_SetConfig>
      break;
 8005c68:	e00e      	b.n	8005c88 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	0019      	movs	r1, r3
 8005c74:	0010      	movs	r0, r2
 8005c76:	f000 f929 	bl	8005ecc <TIM_ITRx_SetConfig>
      break;
 8005c7a:	e005      	b.n	8005c88 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005c7c:	230f      	movs	r3, #15
 8005c7e:	18fb      	adds	r3, r7, r3
 8005c80:	2201      	movs	r2, #1
 8005c82:	701a      	strb	r2, [r3, #0]
      break;
 8005c84:	e000      	b.n	8005c88 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005c86:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	223d      	movs	r2, #61	@ 0x3d
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	223c      	movs	r2, #60	@ 0x3c
 8005c94:	2100      	movs	r1, #0
 8005c96:	5499      	strb	r1, [r3, r2]

  return status;
 8005c98:	230f      	movs	r3, #15
 8005c9a:	18fb      	adds	r3, r7, r3
 8005c9c:	781b      	ldrb	r3, [r3, #0]
}
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	b004      	add	sp, #16
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	46c0      	nop			@ (mov r8, r8)
 8005ca8:	ffceff88 	.word	0xffceff88
 8005cac:	ffff00ff 	.word	0xffff00ff

08005cb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cb8:	46c0      	nop			@ (mov r8, r8)
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	b002      	add	sp, #8
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cc8:	46c0      	nop			@ (mov r8, r8)
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	b002      	add	sp, #8
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cd8:	46c0      	nop			@ (mov r8, r8)
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b002      	add	sp, #8
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ce8:	46c0      	nop			@ (mov r8, r8)
 8005cea:	46bd      	mov	sp, r7
 8005cec:	b002      	add	sp, #8
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a3b      	ldr	r2, [pc, #236]	@ (8005df0 <TIM_Base_SetConfig+0x100>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d008      	beq.n	8005d1a <TIM_Base_SetConfig+0x2a>
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	2380      	movs	r3, #128	@ 0x80
 8005d0c:	05db      	lsls	r3, r3, #23
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d003      	beq.n	8005d1a <TIM_Base_SetConfig+0x2a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a37      	ldr	r2, [pc, #220]	@ (8005df4 <TIM_Base_SetConfig+0x104>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d108      	bne.n	8005d2c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2270      	movs	r2, #112	@ 0x70
 8005d1e:	4393      	bics	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a30      	ldr	r2, [pc, #192]	@ (8005df0 <TIM_Base_SetConfig+0x100>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d018      	beq.n	8005d66 <TIM_Base_SetConfig+0x76>
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	2380      	movs	r3, #128	@ 0x80
 8005d38:	05db      	lsls	r3, r3, #23
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d013      	beq.n	8005d66 <TIM_Base_SetConfig+0x76>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a2c      	ldr	r2, [pc, #176]	@ (8005df4 <TIM_Base_SetConfig+0x104>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00f      	beq.n	8005d66 <TIM_Base_SetConfig+0x76>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a2b      	ldr	r2, [pc, #172]	@ (8005df8 <TIM_Base_SetConfig+0x108>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00b      	beq.n	8005d66 <TIM_Base_SetConfig+0x76>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a2a      	ldr	r2, [pc, #168]	@ (8005dfc <TIM_Base_SetConfig+0x10c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d007      	beq.n	8005d66 <TIM_Base_SetConfig+0x76>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a29      	ldr	r2, [pc, #164]	@ (8005e00 <TIM_Base_SetConfig+0x110>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d003      	beq.n	8005d66 <TIM_Base_SetConfig+0x76>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a28      	ldr	r2, [pc, #160]	@ (8005e04 <TIM_Base_SetConfig+0x114>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d108      	bne.n	8005d78 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4a27      	ldr	r2, [pc, #156]	@ (8005e08 <TIM_Base_SetConfig+0x118>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2280      	movs	r2, #128	@ 0x80
 8005d7c:	4393      	bics	r3, r2
 8005d7e:	001a      	movs	r2, r3
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a13      	ldr	r2, [pc, #76]	@ (8005df0 <TIM_Base_SetConfig+0x100>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00b      	beq.n	8005dbe <TIM_Base_SetConfig+0xce>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a14      	ldr	r2, [pc, #80]	@ (8005dfc <TIM_Base_SetConfig+0x10c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d007      	beq.n	8005dbe <TIM_Base_SetConfig+0xce>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a13      	ldr	r2, [pc, #76]	@ (8005e00 <TIM_Base_SetConfig+0x110>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d003      	beq.n	8005dbe <TIM_Base_SetConfig+0xce>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a12      	ldr	r2, [pc, #72]	@ (8005e04 <TIM_Base_SetConfig+0x114>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d103      	bne.n	8005dc6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d106      	bne.n	8005de6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	4393      	bics	r3, r2
 8005de0:	001a      	movs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	611a      	str	r2, [r3, #16]
  }
}
 8005de6:	46c0      	nop			@ (mov r8, r8)
 8005de8:	46bd      	mov	sp, r7
 8005dea:	b004      	add	sp, #16
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	46c0      	nop			@ (mov r8, r8)
 8005df0:	40012c00 	.word	0x40012c00
 8005df4:	40000400 	.word	0x40000400
 8005df8:	40002000 	.word	0x40002000
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40014400 	.word	0x40014400
 8005e04:	40014800 	.word	0x40014800
 8005e08:	fffffcff 	.word	0xfffffcff

08005e0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	2201      	movs	r2, #1
 8005e24:	4393      	bics	r3, r2
 8005e26:	001a      	movs	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	22f0      	movs	r2, #240	@ 0xf0
 8005e36:	4393      	bics	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	220a      	movs	r2, #10
 8005e48:	4393      	bics	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	621a      	str	r2, [r3, #32]
}
 8005e60:	46c0      	nop			@ (mov r8, r8)
 8005e62:	46bd      	mov	sp, r7
 8005e64:	b006      	add	sp, #24
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	2210      	movs	r2, #16
 8005e80:	4393      	bics	r3, r2
 8005e82:	001a      	movs	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	4a0d      	ldr	r2, [pc, #52]	@ (8005ec8 <TIM_TI2_ConfigInputStage+0x60>)
 8005e92:	4013      	ands	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	031b      	lsls	r3, r3, #12
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	22a0      	movs	r2, #160	@ 0xa0
 8005ea4:	4393      	bics	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	621a      	str	r2, [r3, #32]
}
 8005ebe:	46c0      	nop			@ (mov r8, r8)
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	b006      	add	sp, #24
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	46c0      	nop			@ (mov r8, r8)
 8005ec8:	ffff0fff 	.word	0xffff0fff

08005ecc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4a08      	ldr	r2, [pc, #32]	@ (8005f00 <TIM_ITRx_SetConfig+0x34>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	2207      	movs	r2, #7
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	609a      	str	r2, [r3, #8]
}
 8005ef6:	46c0      	nop			@ (mov r8, r8)
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	b004      	add	sp, #16
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	46c0      	nop			@ (mov r8, r8)
 8005f00:	ffcfff8f 	.word	0xffcfff8f

08005f04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	4a09      	ldr	r2, [pc, #36]	@ (8005f40 <TIM_ETR_SetConfig+0x3c>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	021a      	lsls	r2, r3, #8
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	431a      	orrs	r2, r3
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	609a      	str	r2, [r3, #8]
}
 8005f38:	46c0      	nop			@ (mov r8, r8)
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	b006      	add	sp, #24
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	ffff00ff 	.word	0xffff00ff

08005f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	223c      	movs	r2, #60	@ 0x3c
 8005f52:	5c9b      	ldrb	r3, [r3, r2]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d101      	bne.n	8005f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e055      	b.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	223c      	movs	r2, #60	@ 0x3c
 8005f60:	2101      	movs	r1, #1
 8005f62:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	223d      	movs	r2, #61	@ 0x3d
 8005f68:	2102      	movs	r1, #2
 8005f6a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a23      	ldr	r2, [pc, #140]	@ (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d108      	bne.n	8005f98 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4a22      	ldr	r2, [pc, #136]	@ (8006014 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2270      	movs	r2, #112	@ 0x70
 8005f9c:	4393      	bics	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a16      	ldr	r2, [pc, #88]	@ (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00f      	beq.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	2380      	movs	r3, #128	@ 0x80
 8005fc2:	05db      	lsls	r3, r3, #23
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d009      	beq.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a12      	ldr	r2, [pc, #72]	@ (8006018 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d004      	beq.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a11      	ldr	r2, [pc, #68]	@ (800601c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d10c      	bne.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2280      	movs	r2, #128	@ 0x80
 8005fe0:	4393      	bics	r3, r2
 8005fe2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	223d      	movs	r2, #61	@ 0x3d
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	223c      	movs	r2, #60	@ 0x3c
 8006002:	2100      	movs	r1, #0
 8006004:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	0018      	movs	r0, r3
 800600a:	46bd      	mov	sp, r7
 800600c:	b004      	add	sp, #16
 800600e:	bd80      	pop	{r7, pc}
 8006010:	40012c00 	.word	0x40012c00
 8006014:	ff0fffff 	.word	0xff0fffff
 8006018:	40000400 	.word	0x40000400
 800601c:	40014000 	.word	0x40014000

08006020 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006028:	46c0      	nop			@ (mov r8, r8)
 800602a:	46bd      	mov	sp, r7
 800602c:	b002      	add	sp, #8
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006038:	46c0      	nop			@ (mov r8, r8)
 800603a:	46bd      	mov	sp, r7
 800603c:	b002      	add	sp, #8
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006048:	46c0      	nop			@ (mov r8, r8)
 800604a:	46bd      	mov	sp, r7
 800604c:	b002      	add	sp, #8
 800604e:	bd80      	pop	{r7, pc}

08006050 <memset>:
 8006050:	0003      	movs	r3, r0
 8006052:	1882      	adds	r2, r0, r2
 8006054:	4293      	cmp	r3, r2
 8006056:	d100      	bne.n	800605a <memset+0xa>
 8006058:	4770      	bx	lr
 800605a:	7019      	strb	r1, [r3, #0]
 800605c:	3301      	adds	r3, #1
 800605e:	e7f9      	b.n	8006054 <memset+0x4>

08006060 <__libc_init_array>:
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	2600      	movs	r6, #0
 8006064:	4c0c      	ldr	r4, [pc, #48]	@ (8006098 <__libc_init_array+0x38>)
 8006066:	4d0d      	ldr	r5, [pc, #52]	@ (800609c <__libc_init_array+0x3c>)
 8006068:	1b64      	subs	r4, r4, r5
 800606a:	10a4      	asrs	r4, r4, #2
 800606c:	42a6      	cmp	r6, r4
 800606e:	d109      	bne.n	8006084 <__libc_init_array+0x24>
 8006070:	2600      	movs	r6, #0
 8006072:	f000 f819 	bl	80060a8 <_init>
 8006076:	4c0a      	ldr	r4, [pc, #40]	@ (80060a0 <__libc_init_array+0x40>)
 8006078:	4d0a      	ldr	r5, [pc, #40]	@ (80060a4 <__libc_init_array+0x44>)
 800607a:	1b64      	subs	r4, r4, r5
 800607c:	10a4      	asrs	r4, r4, #2
 800607e:	42a6      	cmp	r6, r4
 8006080:	d105      	bne.n	800608e <__libc_init_array+0x2e>
 8006082:	bd70      	pop	{r4, r5, r6, pc}
 8006084:	00b3      	lsls	r3, r6, #2
 8006086:	58eb      	ldr	r3, [r5, r3]
 8006088:	4798      	blx	r3
 800608a:	3601      	adds	r6, #1
 800608c:	e7ee      	b.n	800606c <__libc_init_array+0xc>
 800608e:	00b3      	lsls	r3, r6, #2
 8006090:	58eb      	ldr	r3, [r5, r3]
 8006092:	4798      	blx	r3
 8006094:	3601      	adds	r6, #1
 8006096:	e7f2      	b.n	800607e <__libc_init_array+0x1e>
 8006098:	08006100 	.word	0x08006100
 800609c:	08006100 	.word	0x08006100
 80060a0:	08006104 	.word	0x08006104
 80060a4:	08006100 	.word	0x08006100

080060a8 <_init>:
 80060a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060aa:	46c0      	nop			@ (mov r8, r8)
 80060ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ae:	bc08      	pop	{r3}
 80060b0:	469e      	mov	lr, r3
 80060b2:	4770      	bx	lr

080060b4 <_fini>:
 80060b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b6:	46c0      	nop			@ (mov r8, r8)
 80060b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ba:	bc08      	pop	{r3}
 80060bc:	469e      	mov	lr, r3
 80060be:	4770      	bx	lr
