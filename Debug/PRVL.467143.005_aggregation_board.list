
PRVL.467143.005_aggregation_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006920  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080069dc  080069dc  000079dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a1c  08006a1c  0000807c  2**0
                  CONTENTS
  4 .ARM          00000000  08006a1c  08006a1c  0000807c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a1c  08006a1c  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a1c  08006a1c  00007a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a20  08006a20  00007a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08006a24  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  2000007c  08006aa0  0000807c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08006aa0  000083d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee24  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002385  00000000  00000000  00016ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00019250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c39  00000000  00000000  0001a1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fde  00000000  00000000  0001ae19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012931  00000000  00000000  00032df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bcaa  00000000  00000000  00045728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e13d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038a8  00000000  00000000  000e1418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e4cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000007c 	.word	0x2000007c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080069c4 	.word	0x080069c4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000080 	.word	0x20000080
 8000100:	080069c4 	.word	0x080069c4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <i2c_read>:
void RebootAdapter(uint8_t adapter_number);
void ProcessPins(uint8_t diskIndex);
void Read_disks_connected();
void HardResetAdapter(uint8_t adapter_number);
void TransmitTemperature();
HAL_StatusTypeDef i2c_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint8_t len) {
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b087      	sub	sp, #28
 8000220:	af04      	add	r7, sp, #16
 8000222:	0004      	movs	r4, r0
 8000224:	0008      	movs	r0, r1
 8000226:	603a      	str	r2, [r7, #0]
 8000228:	0019      	movs	r1, r3
 800022a:	1dfb      	adds	r3, r7, #7
 800022c:	1c22      	adds	r2, r4, #0
 800022e:	701a      	strb	r2, [r3, #0]
 8000230:	1dbb      	adds	r3, r7, #6
 8000232:	1c02      	adds	r2, r0, #0
 8000234:	701a      	strb	r2, [r3, #0]
 8000236:	1d7b      	adds	r3, r7, #5
 8000238:	1c0a      	adds	r2, r1, #0
 800023a:	701a      	strb	r2, [r3, #0]
	// Чтение данных из регистра reg_addr устройства с адресом dev_addr
	return HAL_I2C_Mem_Read(&hi2c2, dev_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	b299      	uxth	r1, r3
 8000242:	1dbb      	adds	r3, r7, #6
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	b29c      	uxth	r4, r3
 8000248:	1d7b      	adds	r3, r7, #5
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	b29b      	uxth	r3, r3
 800024e:	4808      	ldr	r0, [pc, #32]	@ (8000270 <i2c_read+0x54>)
 8000250:	2201      	movs	r2, #1
 8000252:	4252      	negs	r2, r2
 8000254:	9202      	str	r2, [sp, #8]
 8000256:	9301      	str	r3, [sp, #4]
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	9300      	str	r3, [sp, #0]
 800025c:	2301      	movs	r3, #1
 800025e:	0022      	movs	r2, r4
 8000260:	f003 fbe0 	bl	8003a24 <HAL_I2C_Mem_Read>
 8000264:	0003      	movs	r3, r0
}
 8000266:	0018      	movs	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	b003      	add	sp, #12
 800026c:	bd90      	pop	{r4, r7, pc}
 800026e:	46c0      	nop			@ (mov r8, r8)
 8000270:	20000098 	.word	0x20000098

08000274 <UpdateLED>:

void UpdateLED(LEDState *led)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	if (led->is_blinking) {
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	7d1b      	ldrb	r3, [r3, #20]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d039      	beq.n	80002f8 <UpdateLED+0x84>
		uint32_t current_time = HAL_GetTick();
 8000284:	f002 fc16 	bl	8002ab4 <HAL_GetTick>
 8000288:	0003      	movs	r3, r0
 800028a:	60fb      	str	r3, [r7, #12]
		uint32_t elapsed_time = current_time - led->blink_start_time;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	68fa      	ldr	r2, [r7, #12]
 8000292:	1ad3      	subs	r3, r2, r3
 8000294:	60bb      	str	r3, [r7, #8]

		if (elapsed_time < led->blink_duration) {
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	429a      	cmp	r2, r3
 800029e:	d21f      	bcs.n	80002e0 <UpdateLED+0x6c>
			// Мигание
			if (elapsed_time % led->blink_period < led->blink_period / 2) {
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	691a      	ldr	r2, [r3, #16]
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	0011      	movs	r1, r2
 80002a8:	0018      	movs	r0, r3
 80002aa:	f7ff ffb1 	bl	8000210 <__aeabi_uidivmod>
 80002ae:	000b      	movs	r3, r1
 80002b0:	001a      	movs	r2, r3
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	691b      	ldr	r3, [r3, #16]
 80002b6:	085b      	lsrs	r3, r3, #1
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d208      	bcs.n	80002ce <UpdateLED+0x5a>
				HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, SET);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	6818      	ldr	r0, [r3, #0]
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	889b      	ldrh	r3, [r3, #4]
 80002c4:	2201      	movs	r2, #1
 80002c6:	0019      	movs	r1, r3
 80002c8:	f003 f883 	bl	80033d2 <HAL_GPIO_WritePin>
 80002cc:	e04e      	b.n	800036c <UpdateLED+0xf8>
			} else {
				HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	6818      	ldr	r0, [r3, #0]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	889b      	ldrh	r3, [r3, #4]
 80002d6:	2200      	movs	r2, #0
 80002d8:	0019      	movs	r1, r3
 80002da:	f003 f87a 	bl	80033d2 <HAL_GPIO_WritePin>
 80002de:	e045      	b.n	800036c <UpdateLED+0xf8>
			}
		} else {
			// Завершение мигания
			HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	6818      	ldr	r0, [r3, #0]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	889b      	ldrh	r3, [r3, #4]
 80002e8:	2200      	movs	r2, #0
 80002ea:	0019      	movs	r1, r3
 80002ec:	f003 f871 	bl	80033d2 <HAL_GPIO_WritePin>
			led->is_blinking = 0;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2200      	movs	r2, #0
 80002f4:	751a      	strb	r2, [r3, #20]
 80002f6:	e039      	b.n	800036c <UpdateLED+0xf8>
		}
	} else if ((adapter1_state == 1 && MB1_attach == 0) || (adapter2_state == 1 && MB2_attach == 0))
 80002f8:	4b41      	ldr	r3, [pc, #260]	@ (8000400 <UpdateLED+0x18c>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d103      	bne.n	8000308 <UpdateLED+0x94>
 8000300:	4b40      	ldr	r3, [pc, #256]	@ (8000404 <UpdateLED+0x190>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d007      	beq.n	8000318 <UpdateLED+0xa4>
 8000308:	4b3f      	ldr	r3, [pc, #252]	@ (8000408 <UpdateLED+0x194>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d12d      	bne.n	800036c <UpdateLED+0xf8>
 8000310:	4b3e      	ldr	r3, [pc, #248]	@ (800040c <UpdateLED+0x198>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d129      	bne.n	800036c <UpdateLED+0xf8>
	{
		if(adapter1_state == 1 && led->GPIO_Pin == FP_MB1_PWRLED_Pin && MB1_attach == 0) HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, SET);
 8000318:	4b39      	ldr	r3, [pc, #228]	@ (8000400 <UpdateLED+0x18c>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d111      	bne.n	8000344 <UpdateLED+0xd0>
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	889a      	ldrh	r2, [r3, #4]
 8000324:	2380      	movs	r3, #128	@ 0x80
 8000326:	011b      	lsls	r3, r3, #4
 8000328:	429a      	cmp	r2, r3
 800032a:	d10b      	bne.n	8000344 <UpdateLED+0xd0>
 800032c:	4b35      	ldr	r3, [pc, #212]	@ (8000404 <UpdateLED+0x190>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d107      	bne.n	8000344 <UpdateLED+0xd0>
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	6818      	ldr	r0, [r3, #0]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	889b      	ldrh	r3, [r3, #4]
 800033c:	2201      	movs	r2, #1
 800033e:	0019      	movs	r1, r3
 8000340:	f003 f847 	bl	80033d2 <HAL_GPIO_WritePin>
		if(adapter2_state == 1 && led->GPIO_Pin == FP_MB2_PWRLED_Pin && MB2_attach == 0) HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, SET);
 8000344:	4b30      	ldr	r3, [pc, #192]	@ (8000408 <UpdateLED+0x194>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d10f      	bne.n	800036c <UpdateLED+0xf8>
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	889b      	ldrh	r3, [r3, #4]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d10b      	bne.n	800036c <UpdateLED+0xf8>
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <UpdateLED+0x198>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d107      	bne.n	800036c <UpdateLED+0xf8>
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	6818      	ldr	r0, [r3, #0]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	889b      	ldrh	r3, [r3, #4]
 8000364:	2201      	movs	r2, #1
 8000366:	0019      	movs	r1, r3
 8000368:	f003 f833 	bl	80033d2 <HAL_GPIO_WritePin>
	}
	if (MB1_attach == 1 && led->GPIO_Pin == FP_MB1_PWRLED_Pin){
 800036c:	4b25      	ldr	r3, [pc, #148]	@ (8000404 <UpdateLED+0x190>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d10e      	bne.n	8000392 <UpdateLED+0x11e>
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	889a      	ldrh	r2, [r3, #4]
 8000378:	2380      	movs	r3, #128	@ 0x80
 800037a:	011b      	lsls	r3, r3, #4
 800037c:	429a      	cmp	r2, r3
 800037e:	d108      	bne.n	8000392 <UpdateLED+0x11e>
		HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	6818      	ldr	r0, [r3, #0]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	889b      	ldrh	r3, [r3, #4]
 8000388:	2200      	movs	r2, #0
 800038a:	0019      	movs	r1, r3
 800038c:	f003 f821 	bl	80033d2 <HAL_GPIO_WritePin>
 8000390:	e011      	b.n	80003b6 <UpdateLED+0x142>
	}else if (adapter1_state == 0 && led->GPIO_Pin == FP_MB1_PWRLED_Pin)
 8000392:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <UpdateLED+0x18c>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d10d      	bne.n	80003b6 <UpdateLED+0x142>
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	889a      	ldrh	r2, [r3, #4]
 800039e:	2380      	movs	r3, #128	@ 0x80
 80003a0:	011b      	lsls	r3, r3, #4
 80003a2:	429a      	cmp	r2, r3
 80003a4:	d107      	bne.n	80003b6 <UpdateLED+0x142>
	{
		HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	6818      	ldr	r0, [r3, #0]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	889b      	ldrh	r3, [r3, #4]
 80003ae:	2200      	movs	r2, #0
 80003b0:	0019      	movs	r1, r3
 80003b2:	f003 f80e 	bl	80033d2 <HAL_GPIO_WritePin>
	}
	if (MB2_attach == 1 && led->GPIO_Pin == FP_MB2_PWRLED_Pin){
 80003b6:	4b15      	ldr	r3, [pc, #84]	@ (800040c <UpdateLED+0x198>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d10c      	bne.n	80003d8 <UpdateLED+0x164>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	889b      	ldrh	r3, [r3, #4]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d108      	bne.n	80003d8 <UpdateLED+0x164>
		HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	6818      	ldr	r0, [r3, #0]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	889b      	ldrh	r3, [r3, #4]
 80003ce:	2200      	movs	r2, #0
 80003d0:	0019      	movs	r1, r3
 80003d2:	f002 fffe 	bl	80033d2 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
	}


}
 80003d6:	e00f      	b.n	80003f8 <UpdateLED+0x184>
	}else if (adapter2_state == 0 && led->GPIO_Pin == FP_MB2_PWRLED_Pin)
 80003d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000408 <UpdateLED+0x194>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d10b      	bne.n	80003f8 <UpdateLED+0x184>
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	889b      	ldrh	r3, [r3, #4]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d107      	bne.n	80003f8 <UpdateLED+0x184>
		HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	6818      	ldr	r0, [r3, #0]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	889b      	ldrh	r3, [r3, #4]
 80003f0:	2200      	movs	r2, #0
 80003f2:	0019      	movs	r1, r3
 80003f4:	f002 ffed 	bl	80033d2 <HAL_GPIO_WritePin>
}
 80003f8:	46c0      	nop			@ (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b004      	add	sp, #16
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	200003b8 	.word	0x200003b8
 8000404:	2000006b 	.word	0x2000006b
 8000408:	200003b9 	.word	0x200003b9
 800040c:	2000006c 	.word	0x2000006c

08000410 <StartBlinking>:

void StartBlinking(LEDState *led, uint32_t frequency, uint32_t duration)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
	led->blink_period = 1000 / frequency; // Период мигания в мс
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	23fa      	movs	r3, #250	@ 0xfa
 8000420:	0098      	lsls	r0, r3, #2
 8000422:	f7ff fe6f 	bl	8000104 <__udivsi3>
 8000426:	0003      	movs	r3, r0
 8000428:	001a      	movs	r2, r3
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	611a      	str	r2, [r3, #16]
	led->blink_duration = duration;       // Длительность мигания
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	60da      	str	r2, [r3, #12]
	led->blink_start_time = HAL_GetTick(); // Время начала мигания
 8000434:	f002 fb3e 	bl	8002ab4 <HAL_GetTick>
 8000438:	0002      	movs	r2, r0
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	609a      	str	r2, [r3, #8]
	led->is_blinking = 1;                 // Включить мигание
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	2201      	movs	r2, #1
 8000442:	751a      	strb	r2, [r3, #20]
}
 8000444:	46c0      	nop			@ (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	b004      	add	sp, #16
 800044a:	bd80      	pop	{r7, pc}

0800044c <HandleButtonAction>:

void HandleButtonAction(uint8_t button_number, uint32_t press_duration)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	0002      	movs	r2, r0
 8000454:	6039      	str	r1, [r7, #0]
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MB1_STATUS_LED_GPIO_Port, MB1_STATUS_LED_Pin, SET);
 800045a:	23a0      	movs	r3, #160	@ 0xa0
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	2201      	movs	r2, #1
 8000460:	2110      	movs	r1, #16
 8000462:	0018      	movs	r0, r3
 8000464:	f002 ffb5 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MB2_STATUS_LED_GPIO_Port, MB2_STATUS_LED_Pin, SET);
 8000468:	23a0      	movs	r3, #160	@ 0xa0
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	2201      	movs	r2, #1
 800046e:	2140      	movs	r1, #64	@ 0x40
 8000470:	0018      	movs	r0, r3
 8000472:	f002 ffae 	bl	80033d2 <HAL_GPIO_WritePin>
	if (button_number == 1) {
 8000476:	1dfb      	adds	r3, r7, #7
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b01      	cmp	r3, #1
 800047c:	d11e      	bne.n	80004bc <HandleButtonAction+0x70>
		if (press_duration <= 2000) {
 800047e:	683a      	ldr	r2, [r7, #0]
 8000480:	23fa      	movs	r3, #250	@ 0xfa
 8000482:	00db      	lsls	r3, r3, #3
 8000484:	429a      	cmp	r2, r3
 8000486:	d803      	bhi.n	8000490 <HandleButtonAction+0x44>
			// Короткое нажатие (0-1 сек) - включение адаптера 1
			PowerOnAdapter(1);
 8000488:	2001      	movs	r0, #1
 800048a:	f001 fd27 	bl	8001edc <PowerOnAdapter>
 800048e:	e037      	b.n	8000500 <HandleButtonAction+0xb4>
		} else if (press_duration <= 5000) {
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	4a29      	ldr	r2, [pc, #164]	@ (8000538 <HandleButtonAction+0xec>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d809      	bhi.n	80004ac <HandleButtonAction+0x60>
			// Долгое нажатие (3-6 сек) - жесткая перезагрузка адаптера 1
			HardResetAdapter(1);
 8000498:	2001      	movs	r0, #1
 800049a:	f001 fef3 	bl	8002284 <HardResetAdapter>
			StartBlinking(&led1, 4, 5000); // Мигание 4 Гц, 5 сек
 800049e:	4a26      	ldr	r2, [pc, #152]	@ (8000538 <HandleButtonAction+0xec>)
 80004a0:	4b26      	ldr	r3, [pc, #152]	@ (800053c <HandleButtonAction+0xf0>)
 80004a2:	2104      	movs	r1, #4
 80004a4:	0018      	movs	r0, r3
 80004a6:	f7ff ffb3 	bl	8000410 <StartBlinking>
 80004aa:	e029      	b.n	8000500 <HandleButtonAction+0xb4>
		} else if (press_duration > 5000) {
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	4a22      	ldr	r2, [pc, #136]	@ (8000538 <HandleButtonAction+0xec>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d925      	bls.n	8000500 <HandleButtonAction+0xb4>
			// Очень долгое нажатие (6-10 сек) - выключение адаптера 1
			PowerOffAdapter(1);
 80004b4:	2001      	movs	r0, #1
 80004b6:	f001 fe2f 	bl	8002118 <PowerOffAdapter>
 80004ba:	e021      	b.n	8000500 <HandleButtonAction+0xb4>
		}
	} else if (button_number == 2) {
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d11d      	bne.n	8000500 <HandleButtonAction+0xb4>
		if (press_duration <= 2000) {
 80004c4:	683a      	ldr	r2, [r7, #0]
 80004c6:	23fa      	movs	r3, #250	@ 0xfa
 80004c8:	00db      	lsls	r3, r3, #3
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d803      	bhi.n	80004d6 <HandleButtonAction+0x8a>
			// Короткое нажатие (0-1 сек) - включение адаптера 1
			PowerOnAdapter(2);
 80004ce:	2002      	movs	r0, #2
 80004d0:	f001 fd04 	bl	8001edc <PowerOnAdapter>
 80004d4:	e014      	b.n	8000500 <HandleButtonAction+0xb4>
		} else if (press_duration <= 5000) {
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	4a17      	ldr	r2, [pc, #92]	@ (8000538 <HandleButtonAction+0xec>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d809      	bhi.n	80004f2 <HandleButtonAction+0xa6>
			// Долгое нажатие (3-6 сек) - жесткая перезагрузка адаптера 1
			HardResetAdapter(2);
 80004de:	2002      	movs	r0, #2
 80004e0:	f001 fed0 	bl	8002284 <HardResetAdapter>
			StartBlinking(&led2, 4, 5000); // Мигание 4 Гц, 5 сек
 80004e4:	4a14      	ldr	r2, [pc, #80]	@ (8000538 <HandleButtonAction+0xec>)
 80004e6:	4b16      	ldr	r3, [pc, #88]	@ (8000540 <HandleButtonAction+0xf4>)
 80004e8:	2104      	movs	r1, #4
 80004ea:	0018      	movs	r0, r3
 80004ec:	f7ff ff90 	bl	8000410 <StartBlinking>
 80004f0:	e006      	b.n	8000500 <HandleButtonAction+0xb4>
		} else if (press_duration > 5000) {
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	4a10      	ldr	r2, [pc, #64]	@ (8000538 <HandleButtonAction+0xec>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d902      	bls.n	8000500 <HandleButtonAction+0xb4>
			// Очень долгое нажатие (6-10 сек) - выключение адаптера 1
			PowerOffAdapter(2);
 80004fa:	2002      	movs	r0, #2
 80004fc:	f001 fe0c 	bl	8002118 <PowerOffAdapter>
		}
	}
	HAL_Delay(500);
 8000500:	23fa      	movs	r3, #250	@ 0xfa
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	0018      	movs	r0, r3
 8000506:	f002 fadf 	bl	8002ac8 <HAL_Delay>
	HAL_GPIO_WritePin(MB1_STATUS_LED_GPIO_Port, MB1_STATUS_LED_Pin, RESET);
 800050a:	23a0      	movs	r3, #160	@ 0xa0
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	2200      	movs	r2, #0
 8000510:	2110      	movs	r1, #16
 8000512:	0018      	movs	r0, r3
 8000514:	f002 ff5d 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MB2_STATUS_LED_GPIO_Port, MB2_STATUS_LED_Pin, RESET);
 8000518:	23a0      	movs	r3, #160	@ 0xa0
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	2200      	movs	r2, #0
 800051e:	2140      	movs	r1, #64	@ 0x40
 8000520:	0018      	movs	r0, r3
 8000522:	f002 ff56 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim3);
 8000526:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <HandleButtonAction+0xf8>)
 8000528:	0018      	movs	r0, r3
 800052a:	f005 fde7 	bl	80060fc <HAL_TIM_Base_Start_IT>
}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	00001388 	.word	0x00001388
 800053c:	20000004 	.word	0x20000004
 8000540:	2000001c 	.word	0x2000001c
 8000544:	2000023c 	.word	0x2000023c

08000548 <UpdateDiskStatus>:

void UpdateDiskStatus(uint8_t diskIndex, uint8_t activity, uint8_t error, uint8_t locate) //функция для обновления данных о дисках
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	0005      	movs	r5, r0
 8000550:	000c      	movs	r4, r1
 8000552:	0010      	movs	r0, r2
 8000554:	0019      	movs	r1, r3
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	1c2a      	adds	r2, r5, #0
 800055a:	701a      	strb	r2, [r3, #0]
 800055c:	1dbb      	adds	r3, r7, #6
 800055e:	1c22      	adds	r2, r4, #0
 8000560:	701a      	strb	r2, [r3, #0]
 8000562:	1d7b      	adds	r3, r7, #5
 8000564:	1c02      	adds	r2, r0, #0
 8000566:	701a      	strb	r2, [r3, #0]
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	1c0a      	adds	r2, r1, #0
 800056c:	701a      	strb	r2, [r3, #0]
	disks[diskIndex].activity = activity;
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	4a0e      	ldr	r2, [pc, #56]	@ (80005ac <UpdateDiskStatus+0x64>)
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	18d3      	adds	r3, r2, r3
 8000578:	3301      	adds	r3, #1
 800057a:	1dba      	adds	r2, r7, #6
 800057c:	7812      	ldrb	r2, [r2, #0]
 800057e:	701a      	strb	r2, [r3, #0]
	disks[diskIndex].error = error;
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	4a09      	ldr	r2, [pc, #36]	@ (80005ac <UpdateDiskStatus+0x64>)
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	18d3      	adds	r3, r2, r3
 800058a:	3302      	adds	r3, #2
 800058c:	1d7a      	adds	r2, r7, #5
 800058e:	7812      	ldrb	r2, [r2, #0]
 8000590:	701a      	strb	r2, [r3, #0]
	disks[diskIndex].locate = locate;
 8000592:	1dfb      	adds	r3, r7, #7
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	4a05      	ldr	r2, [pc, #20]	@ (80005ac <UpdateDiskStatus+0x64>)
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	18d3      	adds	r3, r2, r3
 800059c:	3303      	adds	r3, #3
 800059e:	1d3a      	adds	r2, r7, #4
 80005a0:	7812      	ldrb	r2, [r2, #0]
 80005a2:	701a      	strb	r2, [r3, #0]
}
 80005a4:	46c0      	nop			@ (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b002      	add	sp, #8
 80005aa:	bdb0      	pop	{r4, r5, r7, pc}
 80005ac:	20000298 	.word	0x20000298

080005b0 <Read_Disk_Status>:

void Read_Disk_Status(uint16_t slave_address, uint8_t *data, uint16_t size) {
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	6039      	str	r1, [r7, #0]
 80005b8:	0011      	movs	r1, r2
 80005ba:	1dbb      	adds	r3, r7, #6
 80005bc:	1c02      	adds	r2, r0, #0
 80005be:	801a      	strh	r2, [r3, #0]
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	1c0a      	adds	r2, r1, #0
 80005c4:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_0, 1, HAL_MAX_DELAY);
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <Read_Disk_Status+0x58>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	18db      	adds	r3, r3, r3
 80005cc:	b299      	uxth	r1, r3
 80005ce:	4a0f      	ldr	r2, [pc, #60]	@ (800060c <Read_Disk_Status+0x5c>)
 80005d0:	480f      	ldr	r0, [pc, #60]	@ (8000610 <Read_Disk_Status+0x60>)
 80005d2:	2301      	movs	r3, #1
 80005d4:	425b      	negs	r3, r3
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2301      	movs	r3, #1
 80005da:	f002 fff1 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 80005de:	2032      	movs	r0, #50	@ 0x32
 80005e0:	f002 fa72 	bl	8002ac8 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, slave_address << 1, data, size, HAL_MAX_DELAY);
 80005e4:	1dbb      	adds	r3, r7, #6
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	18db      	adds	r3, r3, r3
 80005ea:	b299      	uxth	r1, r3
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	881c      	ldrh	r4, [r3, #0]
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	4807      	ldr	r0, [pc, #28]	@ (8000610 <Read_Disk_Status+0x60>)
 80005f4:	2301      	movs	r3, #1
 80005f6:	425b      	negs	r3, r3
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	0023      	movs	r3, r4
 80005fc:	f003 f90a 	bl	8003814 <HAL_I2C_Master_Receive>
}
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b003      	add	sp, #12
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	2000005a 	.word	0x2000005a
 800060c:	20000040 	.word	0x20000040
 8000610:	20000098 	.word	0x20000098

08000614 <Decode_Disk_Status>:

void Decode_Disk_Status(uint8_t *data) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	for (uint8_t disk_id = 0; disk_id < 24; disk_id++) {
 800061c:	230f      	movs	r3, #15
 800061e:	18fb      	adds	r3, r7, r3
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	e057      	b.n	80006d6 <Decode_Disk_Status+0xc2>
		uint8_t byte_index = disk_id / 4; // �?ндекс байта
 8000626:	210e      	movs	r1, #14
 8000628:	187b      	adds	r3, r7, r1
 800062a:	200f      	movs	r0, #15
 800062c:	183a      	adds	r2, r7, r0
 800062e:	7812      	ldrb	r2, [r2, #0]
 8000630:	0892      	lsrs	r2, r2, #2
 8000632:	701a      	strb	r2, [r3, #0]
		uint8_t bit_offset = (disk_id % 4) * 2; // Смещение в байте
 8000634:	183b      	adds	r3, r7, r0
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2203      	movs	r2, #3
 800063a:	4013      	ands	r3, r2
 800063c:	b2db      	uxtb	r3, r3
 800063e:	200d      	movs	r0, #13
 8000640:	183a      	adds	r2, r7, r0
 8000642:	18db      	adds	r3, r3, r3
 8000644:	7013      	strb	r3, [r2, #0]
		uint8_t status = (data[byte_index] >> bit_offset) & 0x03; // �?звлечение статуса
 8000646:	187b      	adds	r3, r7, r1
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	18d3      	adds	r3, r2, r3
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	001a      	movs	r2, r3
 8000652:	183b      	adds	r3, r7, r0
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	411a      	asrs	r2, r3
 8000658:	0013      	movs	r3, r2
 800065a:	b2da      	uxtb	r2, r3
 800065c:	200c      	movs	r0, #12
 800065e:	183b      	adds	r3, r7, r0
 8000660:	2103      	movs	r1, #3
 8000662:	400a      	ands	r2, r1
 8000664:	701a      	strb	r2, [r3, #0]

		// Декодирование статуса
		switch (status) {
 8000666:	183b      	adds	r3, r7, r0
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b03      	cmp	r3, #3
 800066c:	d023      	beq.n	80006b6 <Decode_Disk_Status+0xa2>
 800066e:	dc2b      	bgt.n	80006c8 <Decode_Disk_Status+0xb4>
 8000670:	2b02      	cmp	r3, #2
 8000672:	d017      	beq.n	80006a4 <Decode_Disk_Status+0x90>
 8000674:	dc28      	bgt.n	80006c8 <Decode_Disk_Status+0xb4>
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <Decode_Disk_Status+0x6c>
 800067a:	2b01      	cmp	r3, #1
 800067c:	d009      	beq.n	8000692 <Decode_Disk_Status+0x7e>
			break;
		case 0x03:
			UpdateDiskStatus(disk_id, 0, 0, 1);
			break;
		default:
			break;
 800067e:	e023      	b.n	80006c8 <Decode_Disk_Status+0xb4>
			UpdateDiskStatus(disk_id, 0, 0, 0);
 8000680:	230f      	movs	r3, #15
 8000682:	18fb      	adds	r3, r7, r3
 8000684:	7818      	ldrb	r0, [r3, #0]
 8000686:	2300      	movs	r3, #0
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	f7ff ff5c 	bl	8000548 <UpdateDiskStatus>
			break;
 8000690:	e01b      	b.n	80006ca <Decode_Disk_Status+0xb6>
			UpdateDiskStatus(disk_id, 1, 0, 0);
 8000692:	230f      	movs	r3, #15
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	7818      	ldrb	r0, [r3, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	2200      	movs	r2, #0
 800069c:	2101      	movs	r1, #1
 800069e:	f7ff ff53 	bl	8000548 <UpdateDiskStatus>
			break;
 80006a2:	e012      	b.n	80006ca <Decode_Disk_Status+0xb6>
			UpdateDiskStatus(disk_id, 0, 1, 0);
 80006a4:	230f      	movs	r3, #15
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	7818      	ldrb	r0, [r3, #0]
 80006aa:	2300      	movs	r3, #0
 80006ac:	2201      	movs	r2, #1
 80006ae:	2100      	movs	r1, #0
 80006b0:	f7ff ff4a 	bl	8000548 <UpdateDiskStatus>
			break;
 80006b4:	e009      	b.n	80006ca <Decode_Disk_Status+0xb6>
			UpdateDiskStatus(disk_id, 0, 0, 1);
 80006b6:	230f      	movs	r3, #15
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	7818      	ldrb	r0, [r3, #0]
 80006bc:	2301      	movs	r3, #1
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	f7ff ff41 	bl	8000548 <UpdateDiskStatus>
			break;
 80006c6:	e000      	b.n	80006ca <Decode_Disk_Status+0xb6>
			break;
 80006c8:	46c0      	nop			@ (mov r8, r8)
	for (uint8_t disk_id = 0; disk_id < 24; disk_id++) {
 80006ca:	210f      	movs	r1, #15
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	781a      	ldrb	r2, [r3, #0]
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	3201      	adds	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
 80006d6:	230f      	movs	r3, #15
 80006d8:	18fb      	adds	r3, r7, r3
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b17      	cmp	r3, #23
 80006de:	d9a2      	bls.n	8000626 <Decode_Disk_Status+0x12>
		}
	}
}
 80006e0:	46c0      	nop			@ (mov r8, r8)
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b004      	add	sp, #16
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f002 f964 	bl	80029bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f8ca 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f8:	f000 fab8 	bl	8000c6c <MX_GPIO_Init>
  MX_DMA_Init();
 80006fc:	f000 faa0 	bl	8000c40 <MX_DMA_Init>
  MX_I2C2_Init();
 8000700:	f000 f954 	bl	80009ac <MX_I2C2_Init>
  MX_TIM3_Init();
 8000704:	f000 fa44 	bl	8000b90 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000708:	f000 f990 	bl	8000a2c <MX_TIM1_Init>
  MX_TIM2_Init();
 800070c:	f000 f9ea 	bl	8000ae4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000710:	f000 f916 	bl	8000940 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


	ResetBus();
 8000714:	f000 fcc4 	bl	80010a0 <ResetBus>
	HAL_Delay(500);
 8000718:	23fa      	movs	r3, #250	@ 0xfa
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	0018      	movs	r0, r3
 800071e:	f002 f9d3 	bl	8002ac8 <HAL_Delay>
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2101      	movs	r1, #1
 8000726:	2007      	movs	r0, #7
 8000728:	f002 fa9e 	bl	8002c68 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800072c:	2007      	movs	r0, #7
 800072e:	f002 fab0 	bl	8002c92 <HAL_NVIC_EnableIRQ>

	InitializeDiskPins();
 8000732:	f001 fb0d 	bl	8001d50 <InitializeDiskPins>

	Initialize_Disks();
 8000736:	f000 fc85 	bl	8001044 <Initialize_Disks>
	HAL_TIM_Base_Start_IT(&htim1);
 800073a:	4b43      	ldr	r3, [pc, #268]	@ (8000848 <main+0x15c>)
 800073c:	0018      	movs	r0, r3
 800073e:	f005 fcdd 	bl	80060fc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000742:	4b42      	ldr	r3, [pc, #264]	@ (800084c <main+0x160>)
 8000744:	0018      	movs	r0, r3
 8000746:	f005 fcd9 	bl	80060fc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800074a:	4b41      	ldr	r3, [pc, #260]	@ (8000850 <main+0x164>)
 800074c:	0018      	movs	r0, r3
 800074e:	f005 fcd5 	bl	80060fc <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */


		// Обновление состояния светодиодов
		UpdateLED(&led1);
 8000752:	4b40      	ldr	r3, [pc, #256]	@ (8000854 <main+0x168>)
 8000754:	0018      	movs	r0, r3
 8000756:	f7ff fd8d 	bl	8000274 <UpdateLED>
		UpdateLED(&led2);
 800075a:	4b3f      	ldr	r3, [pc, #252]	@ (8000858 <main+0x16c>)
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff fd89 	bl	8000274 <UpdateLED>


		button1_state = HAL_GPIO_ReadPin(FP_MB1_PWR_SW_GPIO_Port, FP_MB1_PWR_SW_Pin);
 8000762:	2380      	movs	r3, #128	@ 0x80
 8000764:	021a      	lsls	r2, r3, #8
 8000766:	23a0      	movs	r3, #160	@ 0xa0
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f002 fe13 	bl	8003398 <HAL_GPIO_ReadPin>
 8000772:	0003      	movs	r3, r0
 8000774:	001a      	movs	r2, r3
 8000776:	4b39      	ldr	r3, [pc, #228]	@ (800085c <main+0x170>)
 8000778:	701a      	strb	r2, [r3, #0]
		button2_state = HAL_GPIO_ReadPin(FP_MB2_PWR_SW_GPIO_Port, FP_MB2_PWR_SW_Pin);
 800077a:	2380      	movs	r3, #128	@ 0x80
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	4a38      	ldr	r2, [pc, #224]	@ (8000860 <main+0x174>)
 8000780:	0019      	movs	r1, r3
 8000782:	0010      	movs	r0, r2
 8000784:	f002 fe08 	bl	8003398 <HAL_GPIO_ReadPin>
 8000788:	0003      	movs	r3, r0
 800078a:	001a      	movs	r2, r3
 800078c:	4b35      	ldr	r3, [pc, #212]	@ (8000864 <main+0x178>)
 800078e:	701a      	strb	r2, [r3, #0]

		if (button1_pressed && button1_state == BUTTON_STATE_RELEASED) {
 8000790:	4b35      	ldr	r3, [pc, #212]	@ (8000868 <main+0x17c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	2b00      	cmp	r3, #0
 8000798:	d010      	beq.n	80007bc <main+0xd0>
 800079a:	4b30      	ldr	r3, [pc, #192]	@ (800085c <main+0x170>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d10c      	bne.n	80007bc <main+0xd0>
			HandleButtonAction(1, HAL_GetTick() - button1_press_time);
 80007a2:	f002 f987 	bl	8002ab4 <HAL_GetTick>
 80007a6:	0002      	movs	r2, r0
 80007a8:	4b30      	ldr	r3, [pc, #192]	@ (800086c <main+0x180>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	0019      	movs	r1, r3
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff fe4b 	bl	800044c <HandleButtonAction>
			button1_pressed = 0;
 80007b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000868 <main+0x17c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
		}
		if (button2_pressed && button2_state == BUTTON_STATE_RELEASED) {
 80007bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000870 <main+0x184>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d010      	beq.n	80007e8 <main+0xfc>
 80007c6:	4b27      	ldr	r3, [pc, #156]	@ (8000864 <main+0x178>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d10c      	bne.n	80007e8 <main+0xfc>
			HandleButtonAction(2, HAL_GetTick() - button2_press_time);
 80007ce:	f002 f971 	bl	8002ab4 <HAL_GetTick>
 80007d2:	0002      	movs	r2, r0
 80007d4:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <main+0x188>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	0019      	movs	r1, r3
 80007dc:	2002      	movs	r0, #2
 80007de:	f7ff fe35 	bl	800044c <HandleButtonAction>
			button2_pressed = 0;
 80007e2:	4b23      	ldr	r3, [pc, #140]	@ (8000870 <main+0x184>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
		}

		temperature = getMaxTemperature();
 80007e8:	f000 fe69 	bl	80014be <getMaxTemperature>
 80007ec:	0003      	movs	r3, r0
 80007ee:	001a      	movs	r2, r3
 80007f0:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <main+0x18c>)
 80007f2:	701a      	strb	r2, [r3, #0]

		if (MB1_attach == 0) {
 80007f4:	4b21      	ldr	r3, [pc, #132]	@ (800087c <main+0x190>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d10f      	bne.n	800081c <main+0x130>
			if (HAL_GPIO_ReadPin(MB1_BITCH_GPIO_Port, MB1_BITCH_Pin) == 1)
 80007fc:	23a0      	movs	r3, #160	@ 0xa0
 80007fe:	05db      	lsls	r3, r3, #23
 8000800:	2108      	movs	r1, #8
 8000802:	0018      	movs	r0, r3
 8000804:	f002 fdc8 	bl	8003398 <HAL_GPIO_ReadPin>
 8000808:	0003      	movs	r3, r0
 800080a:	2b01      	cmp	r3, #1
 800080c:	d103      	bne.n	8000816 <main+0x12a>
			{
				adapter1_state = 0;}
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <main+0x194>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	e002      	b.n	800081c <main+0x130>
			else adapter1_state = 1;
 8000816:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <main+0x194>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]
		}

		if (MB2_attach == 0) {
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <main+0x198>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d196      	bne.n	8000752 <main+0x66>
			if (HAL_GPIO_ReadPin(MB2_BITCH_GPIO_Port, MB2_BITCH_Pin) == 1)
 8000824:	23a0      	movs	r3, #160	@ 0xa0
 8000826:	05db      	lsls	r3, r3, #23
 8000828:	2120      	movs	r1, #32
 800082a:	0018      	movs	r0, r3
 800082c:	f002 fdb4 	bl	8003398 <HAL_GPIO_ReadPin>
 8000830:	0003      	movs	r3, r0
 8000832:	2b01      	cmp	r3, #1
 8000834:	d103      	bne.n	800083e <main+0x152>
			{
				adapter2_state = 0;
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <main+0x19c>)
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
 800083c:	e789      	b.n	8000752 <main+0x66>
			}else adapter2_state = 1;
 800083e:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <main+0x19c>)
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
		UpdateLED(&led1);
 8000844:	e785      	b.n	8000752 <main+0x66>
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	200001a4 	.word	0x200001a4
 800084c:	200001f0 	.word	0x200001f0
 8000850:	2000023c 	.word	0x2000023c
 8000854:	20000004 	.word	0x20000004
 8000858:	2000001c 	.word	0x2000001c
 800085c:	20000000 	.word	0x20000000
 8000860:	50000800 	.word	0x50000800
 8000864:	20000001 	.word	0x20000001
 8000868:	200003be 	.word	0x200003be
 800086c:	200003c0 	.word	0x200003c0
 8000870:	200003bf 	.word	0x200003bf
 8000874:	200003c4 	.word	0x200003c4
 8000878:	20000034 	.word	0x20000034
 800087c:	2000006b 	.word	0x2000006b
 8000880:	200003b8 	.word	0x200003b8
 8000884:	2000006c 	.word	0x2000006c
 8000888:	200003b9 	.word	0x200003b9

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b093      	sub	sp, #76	@ 0x4c
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	2410      	movs	r4, #16
 8000894:	193b      	adds	r3, r7, r4
 8000896:	0018      	movs	r0, r3
 8000898:	2338      	movs	r3, #56	@ 0x38
 800089a:	001a      	movs	r2, r3
 800089c:	2100      	movs	r1, #0
 800089e:	f006 f865 	bl	800696c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a2:	003b      	movs	r3, r7
 80008a4:	0018      	movs	r0, r3
 80008a6:	2310      	movs	r3, #16
 80008a8:	001a      	movs	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f006 f85e 	bl	800696c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b0:	2380      	movs	r3, #128	@ 0x80
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	0018      	movs	r0, r3
 80008b6:	f004 fcf5 	bl	80052a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	2201      	movs	r2, #1
 80008be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	2280      	movs	r2, #128	@ 0x80
 80008c4:	0252      	lsls	r2, r2, #9
 80008c6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c8:	0021      	movs	r1, r4
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2202      	movs	r2, #2
 80008ce:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2203      	movs	r2, #3
 80008d4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2210      	movs	r2, #16
 80008e0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2280      	movs	r2, #128	@ 0x80
 80008e6:	0292      	lsls	r2, r2, #10
 80008e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	22c0      	movs	r2, #192	@ 0xc0
 80008ee:	04d2      	lsls	r2, r2, #19
 80008f0:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	0592      	lsls	r2, r2, #22
 80008f8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	0018      	movs	r0, r3
 80008fe:	f004 fd11 	bl	8005324 <HAL_RCC_OscConfig>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000906:	f001 fe67 	bl	80025d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090a:	003b      	movs	r3, r7
 800090c:	2207      	movs	r2, #7
 800090e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000910:	003b      	movs	r3, r7
 8000912:	2202      	movs	r2, #2
 8000914:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000916:	003b      	movs	r3, r7
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091c:	003b      	movs	r3, r7
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000922:	003b      	movs	r3, r7
 8000924:	2102      	movs	r1, #2
 8000926:	0018      	movs	r0, r3
 8000928:	f005 f816 	bl	8005958 <HAL_RCC_ClockConfig>
 800092c:	1e03      	subs	r3, r0, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000930:	f001 fe52 	bl	80025d8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000934:	f005 f99a 	bl	8005c6c <HAL_RCC_EnableCSS>
}
 8000938:	46c0      	nop			@ (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b013      	add	sp, #76	@ 0x4c
 800093e:	bd90      	pop	{r4, r7, pc}

08000940 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2102      	movs	r1, #2
 8000948:	2009      	movs	r0, #9
 800094a:	f002 f98d 	bl	8002c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800094e:	2009      	movs	r0, #9
 8000950:	f002 f99f 	bl	8002c92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2102      	movs	r1, #2
 8000958:	200a      	movs	r0, #10
 800095a:	f002 f985 	bl	8002c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800095e:	200a      	movs	r0, #10
 8000960:	f002 f997 	bl	8002c92 <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_UP_TRG_COM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 2, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2102      	movs	r1, #2
 8000968:	200d      	movs	r0, #13
 800096a:	f002 f97d 	bl	8002c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800096e:	200d      	movs	r0, #13
 8000970:	f002 f98f 	bl	8002c92 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2102      	movs	r1, #2
 8000978:	200f      	movs	r0, #15
 800097a:	f002 f975 	bl	8002c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800097e:	200f      	movs	r0, #15
 8000980:	f002 f987 	bl	8002c92 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2102      	movs	r1, #2
 8000988:	2010      	movs	r0, #16
 800098a:	f002 f96d 	bl	8002c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800098e:	2010      	movs	r0, #16
 8000990:	f002 f97f 	bl	8002c92 <HAL_NVIC_EnableIRQ>
  /* I2C2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_IRQn, 1, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2101      	movs	r1, #1
 8000998:	2018      	movs	r0, #24
 800099a:	f002 f965 	bl	8002c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_IRQn);
 800099e:	2018      	movs	r0, #24
 80009a0:	f002 f977 	bl	8002c92 <HAL_NVIC_EnableIRQ>
}
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a20 <MX_I2C2_Init+0x74>)
 80009b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a24 <MX_I2C2_Init+0x78>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10801031;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <MX_I2C2_Init+0x74>)
 80009b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a28 <MX_I2C2_Init+0x7c>)
 80009ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009bc:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <MX_I2C2_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c2:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <MX_I2C2_Init+0x74>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c8:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <MX_I2C2_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009ce:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <MX_I2C2_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <MX_I2C2_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_I2C2_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_I2C2_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_I2C2_Init+0x74>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f002 fd43 	bl	8003474 <HAL_I2C_Init>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009f2:	f001 fdf1 	bl	80025d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <MX_I2C2_Init+0x74>)
 80009f8:	2100      	movs	r1, #0
 80009fa:	0018      	movs	r0, r3
 80009fc:	f004 fbba 	bl	8005174 <HAL_I2CEx_ConfigAnalogFilter>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a04:	f001 fde8 	bl	80025d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a08:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <MX_I2C2_Init+0x74>)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f004 fbfd 	bl	800520c <HAL_I2CEx_ConfigDigitalFilter>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f001 fddf 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000098 	.word	0x20000098
 8000a24:	40005800 	.word	0x40005800
 8000a28:	10801031 	.word	0x10801031

08000a2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	2310      	movs	r3, #16
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	0018      	movs	r0, r3
 8000a38:	2310      	movs	r3, #16
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f005 ff95 	bl	800696c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	0018      	movs	r0, r3
 8000a46:	230c      	movs	r3, #12
 8000a48:	001a      	movs	r2, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	f005 ff8e 	bl	800696c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a50:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <MX_TIM1_Init+0xac>)
 8000a52:	4a22      	ldr	r2, [pc, #136]	@ (8000adc <MX_TIM1_Init+0xb0>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8000a56:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <MX_TIM1_Init+0xac>)
 8000a58:	4a21      	ldr	r2, [pc, #132]	@ (8000ae0 <MX_TIM1_Init+0xb4>)
 8000a5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <MX_TIM1_Init+0xac>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 124;
 8000a62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <MX_TIM1_Init+0xac>)
 8000a64:	227c      	movs	r2, #124	@ 0x7c
 8000a66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <MX_TIM1_Init+0xac>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_TIM1_Init+0xac>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a74:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_TIM1_Init+0xac>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_TIM1_Init+0xac>)
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f005 fae5 	bl	800604c <HAL_TIM_Base_Init>
 8000a82:	1e03      	subs	r3, r0, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000a86:	f001 fda7 	bl	80025d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2280      	movs	r2, #128	@ 0x80
 8000a90:	0152      	lsls	r2, r2, #5
 8000a92:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a94:	187a      	adds	r2, r7, r1
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <MX_TIM1_Init+0xac>)
 8000a98:	0011      	movs	r1, r2
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f005 fcc0 	bl	8006420 <HAL_TIM_ConfigClockSource>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000aa4:	f001 fd98 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aba:	1d3a      	adds	r2, r7, #4
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <MX_TIM1_Init+0xac>)
 8000abe:	0011      	movs	r1, r2
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f005 fecd 	bl	8006860 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac6:	1e03      	subs	r3, r0, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000aca:	f001 fd85 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b008      	add	sp, #32
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	200001a4 	.word	0x200001a4
 8000adc:	40012c00 	.word	0x40012c00
 8000ae0:	0000f9ff 	.word	0x0000f9ff

08000ae4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	2310      	movs	r3, #16
 8000aec:	18fb      	adds	r3, r7, r3
 8000aee:	0018      	movs	r0, r3
 8000af0:	2310      	movs	r3, #16
 8000af2:	001a      	movs	r2, r3
 8000af4:	2100      	movs	r1, #0
 8000af6:	f005 ff39 	bl	800696c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	0018      	movs	r0, r3
 8000afe:	230c      	movs	r3, #12
 8000b00:	001a      	movs	r2, r3
 8000b02:	2100      	movs	r1, #0
 8000b04:	f005 ff32 	bl	800696c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b08:	4b1f      	ldr	r3, [pc, #124]	@ (8000b88 <MX_TIM2_Init+0xa4>)
 8000b0a:	2280      	movs	r2, #128	@ 0x80
 8000b0c:	05d2      	lsls	r2, r2, #23
 8000b0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <MX_TIM2_Init+0xa4>)
 8000b12:	4a1e      	ldr	r2, [pc, #120]	@ (8000b8c <MX_TIM2_Init+0xa8>)
 8000b14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	@ (8000b88 <MX_TIM2_Init+0xa4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <MX_TIM2_Init+0xa4>)
 8000b1e:	22f4      	movs	r2, #244	@ 0xf4
 8000b20:	32ff      	adds	r2, #255	@ 0xff
 8000b22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b24:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <MX_TIM2_Init+0xa4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <MX_TIM2_Init+0xa4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <MX_TIM2_Init+0xa4>)
 8000b32:	0018      	movs	r0, r3
 8000b34:	f005 fa8a 	bl	800604c <HAL_TIM_Base_Init>
 8000b38:	1e03      	subs	r3, r0, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000b3c:	f001 fd4c 	bl	80025d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b40:	2110      	movs	r1, #16
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2280      	movs	r2, #128	@ 0x80
 8000b46:	0152      	lsls	r2, r2, #5
 8000b48:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4a:	187a      	adds	r2, r7, r1
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_TIM2_Init+0xa4>)
 8000b4e:	0011      	movs	r1, r2
 8000b50:	0018      	movs	r0, r3
 8000b52:	f005 fc65 	bl	8006420 <HAL_TIM_ConfigClockSource>
 8000b56:	1e03      	subs	r3, r0, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000b5a:	f001 fd3d 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6a:	1d3a      	adds	r2, r7, #4
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <MX_TIM2_Init+0xa4>)
 8000b6e:	0011      	movs	r1, r2
 8000b70:	0018      	movs	r0, r3
 8000b72:	f005 fe75 	bl	8006860 <HAL_TIMEx_MasterConfigSynchronization>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000b7a:	f001 fd2d 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b008      	add	sp, #32
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	200001f0 	.word	0x200001f0
 8000b8c:	0000f9ff 	.word	0x0000f9ff

08000b90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b96:	2310      	movs	r3, #16
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	f005 fee3 	bl	800696c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	0018      	movs	r0, r3
 8000baa:	230c      	movs	r3, #12
 8000bac:	001a      	movs	r2, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	f005 fedc 	bl	800696c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <MX_TIM3_Init+0xa0>)
 8000bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c34 <MX_TIM3_Init+0xa4>)
 8000bb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8000bba:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <MX_TIM3_Init+0xa0>)
 8000bbc:	4a1e      	ldr	r2, [pc, #120]	@ (8000c38 <MX_TIM3_Init+0xa8>)
 8000bbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <MX_TIM3_Init+0xa0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <MX_TIM3_Init+0xa0>)
 8000bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8000c3c <MX_TIM3_Init+0xac>)
 8000bca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bcc:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <MX_TIM3_Init+0xa0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <MX_TIM3_Init+0xa0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bd8:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <MX_TIM3_Init+0xa0>)
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f005 fa36 	bl	800604c <HAL_TIM_Base_Init>
 8000be0:	1e03      	subs	r3, r0, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000be4:	f001 fcf8 	bl	80025d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be8:	2110      	movs	r1, #16
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2280      	movs	r2, #128	@ 0x80
 8000bee:	0152      	lsls	r2, r2, #5
 8000bf0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bf2:	187a      	adds	r2, r7, r1
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_TIM3_Init+0xa0>)
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f005 fc11 	bl	8006420 <HAL_TIM_ConfigClockSource>
 8000bfe:	1e03      	subs	r3, r0, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000c02:	f001 fce9 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c12:	1d3a      	adds	r2, r7, #4
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_TIM3_Init+0xa0>)
 8000c16:	0011      	movs	r1, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f005 fe21 	bl	8006860 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000c22:	f001 fcd9 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b008      	add	sp, #32
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	2000023c 	.word	0x2000023c
 8000c34:	40000400 	.word	0x40000400
 8000c38:	0000f9ff 	.word	0x0000f9ff
 8000c3c:	000003e7 	.word	0x000003e7

08000c40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <MX_DMA_Init+0x28>)
 8000c48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c4a:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <MX_DMA_Init+0x28>)
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c52:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <MX_DMA_Init+0x28>)
 8000c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c56:	2201      	movs	r2, #1
 8000c58:	4013      	ands	r3, r2
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b002      	add	sp, #8
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	40021000 	.word	0x40021000

08000c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b08b      	sub	sp, #44	@ 0x2c
 8000c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	2414      	movs	r4, #20
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	0018      	movs	r0, r3
 8000c78:	2314      	movs	r3, #20
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	f005 fe75 	bl	800696c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	4b8b      	ldr	r3, [pc, #556]	@ (8000eb0 <MX_GPIO_Init+0x244>)
 8000c84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c86:	4b8a      	ldr	r3, [pc, #552]	@ (8000eb0 <MX_GPIO_Init+0x244>)
 8000c88:	2104      	movs	r1, #4
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c8e:	4b88      	ldr	r3, [pc, #544]	@ (8000eb0 <MX_GPIO_Init+0x244>)
 8000c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c92:	2204      	movs	r2, #4
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c9a:	4b85      	ldr	r3, [pc, #532]	@ (8000eb0 <MX_GPIO_Init+0x244>)
 8000c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c9e:	4b84      	ldr	r3, [pc, #528]	@ (8000eb0 <MX_GPIO_Init+0x244>)
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ca6:	4b82      	ldr	r3, [pc, #520]	@ (8000eb0 <MX_GPIO_Init+0x244>)
 8000ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000caa:	2220      	movs	r2, #32
 8000cac:	4013      	ands	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8000eb0 <MX_GPIO_Init+0x244>)
 8000cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cb6:	4b7e      	ldr	r3, [pc, #504]	@ (8000eb0 <MX_GPIO_Init+0x244>)
 8000cb8:	2101      	movs	r1, #1
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cbe:	4b7c      	ldr	r3, [pc, #496]	@ (8000eb0 <MX_GPIO_Init+0x244>)
 8000cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	4b79      	ldr	r3, [pc, #484]	@ (8000eb0 <MX_GPIO_Init+0x244>)
 8000ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cce:	4b78      	ldr	r3, [pc, #480]	@ (8000eb0 <MX_GPIO_Init+0x244>)
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cd6:	4b76      	ldr	r3, [pc, #472]	@ (8000eb0 <MX_GPIO_Init+0x244>)
 8000cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cda:	2202      	movs	r2, #2
 8000cdc:	4013      	ands	r3, r2
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce2:	4b73      	ldr	r3, [pc, #460]	@ (8000eb0 <MX_GPIO_Init+0x244>)
 8000ce4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ce6:	4b72      	ldr	r3, [pc, #456]	@ (8000eb0 <MX_GPIO_Init+0x244>)
 8000ce8:	2108      	movs	r1, #8
 8000cea:	430a      	orrs	r2, r1
 8000cec:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cee:	4b70      	ldr	r3, [pc, #448]	@ (8000eb0 <MX_GPIO_Init+0x244>)
 8000cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cf2:	2208      	movs	r2, #8
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FP_MB1_PWRLED_Pin|FP_MB2_PWRLED_Pin|CPU_PSON_Pin, GPIO_PIN_RESET);
 8000cfa:	496e      	ldr	r1, [pc, #440]	@ (8000eb4 <MX_GPIO_Init+0x248>)
 8000cfc:	4b6e      	ldr	r3, [pc, #440]	@ (8000eb8 <MX_GPIO_Init+0x24c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	0018      	movs	r0, r3
 8000d02:	f002 fb66 	bl	80033d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SGPIO_I2C2_RES_G_Pin|SGPIO_I2C2_RES_Pin|SGPIO_I2C1_RES_Pin, GPIO_PIN_SET);
 8000d06:	23c4      	movs	r3, #196	@ 0xc4
 8000d08:	01db      	lsls	r3, r3, #7
 8000d0a:	486b      	ldr	r0, [pc, #428]	@ (8000eb8 <MX_GPIO_Init+0x24c>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	0019      	movs	r1, r3
 8000d10:	f002 fb5f 	bl	80033d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB1_STATUS_LED_Pin|MB2_STATUS_LED_Pin, GPIO_PIN_SET);
 8000d14:	23a0      	movs	r3, #160	@ 0xa0
 8000d16:	05db      	lsls	r3, r3, #23
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2150      	movs	r1, #80	@ 0x50
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f002 fb58 	bl	80033d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SGPIO_I2C3_RES_Pin|SGPIO_I2C3RES_G_Pin, GPIO_PIN_SET);
 8000d22:	4b66      	ldr	r3, [pc, #408]	@ (8000ebc <MX_GPIO_Init+0x250>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	2106      	movs	r1, #6
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f002 fb52 	bl	80033d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SGPIO_I2C1_RES_G_Pin|TEMP_I2C2_RES_Pin|TEMP_I2C1_RES_Pin, GPIO_PIN_SET);
 8000d2e:	4b64      	ldr	r3, [pc, #400]	@ (8000ec0 <MX_GPIO_Init+0x254>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	2107      	movs	r1, #7
 8000d34:	0018      	movs	r0, r3
 8000d36:	f002 fb4c 	bl	80033d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FP_MB1_PWRLED_Pin SGPIO_I2C2_RES_G_Pin SGPIO_I2C2_RES_Pin FP_MB2_PWRLED_Pin
                           CPU_PSON_Pin SGPIO_I2C1_RES_Pin */
  GPIO_InitStruct.Pin = FP_MB1_PWRLED_Pin|SGPIO_I2C2_RES_G_Pin|SGPIO_I2C2_RES_Pin|FP_MB2_PWRLED_Pin
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	4a61      	ldr	r2, [pc, #388]	@ (8000ec4 <MX_GPIO_Init+0x258>)
 8000d3e:	601a      	str	r2, [r3, #0]
                          |CPU_PSON_Pin|SGPIO_I2C1_RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	193b      	adds	r3, r7, r4
 8000d42:	2201      	movs	r2, #1
 8000d44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	4a58      	ldr	r2, [pc, #352]	@ (8000eb8 <MX_GPIO_Init+0x24c>)
 8000d56:	0019      	movs	r1, r3
 8000d58:	0010      	movs	r0, r2
 8000d5a:	f002 f9b9 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_DRIVE4_ACTIVITY_Pin B_DRIVE4_ACTIVITY_Pin B_DRIVE3_ACTIVITY_Pin B_DRIVE2_ACTIVITY_Pin
                           MB1_PWR_SW_Pin C_DRIVE1_ACTIVITY_Pin C_DRIVE2_ACTIVITY_Pin E_DRIVE1_ACTIVITY_Pin */
  GPIO_InitStruct.Pin = D_DRIVE4_ACTIVITY_Pin|B_DRIVE4_ACTIVITY_Pin|B_DRIVE3_ACTIVITY_Pin|B_DRIVE2_ACTIVITY_Pin
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	4a59      	ldr	r2, [pc, #356]	@ (8000ec8 <MX_GPIO_Init+0x25c>)
 8000d62:	601a      	str	r2, [r3, #0]
                          |MB1_PWR_SW_Pin|C_DRIVE1_ACTIVITY_Pin|C_DRIVE2_ACTIVITY_Pin|E_DRIVE1_ACTIVITY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	2200      	movs	r2, #0
 8000d68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d70:	193b      	adds	r3, r7, r4
 8000d72:	4a51      	ldr	r2, [pc, #324]	@ (8000eb8 <MX_GPIO_Init+0x24c>)
 8000d74:	0019      	movs	r1, r3
 8000d76:	0010      	movs	r0, r2
 8000d78:	f002 f9aa 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB1_BITCH_Pin MB2_BITCH_Pin CPU_PWROK_Pin A_DRIVE4_ACTIVITY_Pin
                           B_DRIVE1_ACTIVITY_Pin D_DRIVE1_ACTIVITY_Pin D_DRIVE2_ACTIVITY_Pin D_DRIVE3_ACTIVITY_Pin */
  GPIO_InitStruct.Pin = MB1_BITCH_Pin|MB2_BITCH_Pin|CPU_PWROK_Pin|A_DRIVE4_ACTIVITY_Pin
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	4a53      	ldr	r2, [pc, #332]	@ (8000ecc <MX_GPIO_Init+0x260>)
 8000d80:	601a      	str	r2, [r3, #0]
                          |B_DRIVE1_ACTIVITY_Pin|D_DRIVE1_ACTIVITY_Pin|D_DRIVE2_ACTIVITY_Pin|D_DRIVE3_ACTIVITY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	2200      	movs	r2, #0
 8000d86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	193a      	adds	r2, r7, r4
 8000d90:	23a0      	movs	r3, #160	@ 0xa0
 8000d92:	05db      	lsls	r3, r3, #23
 8000d94:	0011      	movs	r1, r2
 8000d96:	0018      	movs	r0, r3
 8000d98:	f002 f99a 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB1_STATUS_LED_Pin MB2_STATUS_LED_Pin */
  GPIO_InitStruct.Pin = MB1_STATUS_LED_Pin|MB2_STATUS_LED_Pin;
 8000d9c:	193b      	adds	r3, r7, r4
 8000d9e:	2250      	movs	r2, #80	@ 0x50
 8000da0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	2201      	movs	r2, #1
 8000da6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	193b      	adds	r3, r7, r4
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	193a      	adds	r2, r7, r4
 8000db6:	23a0      	movs	r3, #160	@ 0xa0
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	0011      	movs	r1, r2
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f002 f987 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB1_ATTACH_Pin A_DRIVE1_ACTIVITY_Pin A_DRIVE2_ACTIVITY_Pin A_DRIVE3_ACTIVITY_Pin
                           F_DRIVE4_ACTIVITY_Pin F_DRIVE3_ACTIVITY_Pin F_DRIVE2_ACTIVITY_Pin F_DRIVE1_ACTIVITY_Pin
                           E_DRIVE4_ACTIVITY_Pin E_DRIVE3_ACTIVITY_Pin E_DRIVE2_ACTIVITY_Pin */
  GPIO_InitStruct.Pin = MB1_ATTACH_Pin|A_DRIVE1_ACTIVITY_Pin|A_DRIVE2_ACTIVITY_Pin|A_DRIVE3_ACTIVITY_Pin
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	4a42      	ldr	r2, [pc, #264]	@ (8000ed0 <MX_GPIO_Init+0x264>)
 8000dc6:	601a      	str	r2, [r3, #0]
                          |F_DRIVE4_ACTIVITY_Pin|F_DRIVE3_ACTIVITY_Pin|F_DRIVE2_ACTIVITY_Pin|F_DRIVE1_ACTIVITY_Pin
                          |E_DRIVE4_ACTIVITY_Pin|E_DRIVE3_ACTIVITY_Pin|E_DRIVE2_ACTIVITY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc8:	193b      	adds	r3, r7, r4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	4a39      	ldr	r2, [pc, #228]	@ (8000ebc <MX_GPIO_Init+0x250>)
 8000dd8:	0019      	movs	r1, r3
 8000dda:	0010      	movs	r0, r2
 8000ddc:	f002 f978 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SGPIO_I2C3_RES_Pin SGPIO_I2C3RES_G_Pin */
  GPIO_InitStruct.Pin = SGPIO_I2C3_RES_Pin|SGPIO_I2C3RES_G_Pin;
 8000de0:	193b      	adds	r3, r7, r4
 8000de2:	2206      	movs	r2, #6
 8000de4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	2201      	movs	r2, #1
 8000dea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	193b      	adds	r3, r7, r4
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	193b      	adds	r3, r7, r4
 8000dfa:	4a30      	ldr	r2, [pc, #192]	@ (8000ebc <MX_GPIO_Init+0x250>)
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	0010      	movs	r0, r2
 8000e00:	f002 f966 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_DRIVE3_ACTIVITY_Pin C_DRIVE4_ACTIVITY_Pin MB2_ATTACH_Pin MB2_PWR_SW_Pin */
  GPIO_InitStruct.Pin = C_DRIVE3_ACTIVITY_Pin|C_DRIVE4_ACTIVITY_Pin|MB2_ATTACH_Pin|MB2_PWR_SW_Pin;
 8000e04:	0021      	movs	r1, r4
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	22d8      	movs	r2, #216	@ 0xd8
 8000e0a:	0092      	lsls	r2, r2, #2
 8000e0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0e:	000c      	movs	r4, r1
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	2200      	movs	r2, #0
 8000e14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	4a28      	ldr	r2, [pc, #160]	@ (8000ec0 <MX_GPIO_Init+0x254>)
 8000e20:	0019      	movs	r1, r3
 8000e22:	0010      	movs	r0, r2
 8000e24:	f002 f954 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FP_MB1_PWR_SW_Pin */
  GPIO_InitStruct.Pin = FP_MB1_PWR_SW_Pin;
 8000e28:	193b      	adds	r3, r7, r4
 8000e2a:	2280      	movs	r2, #128	@ 0x80
 8000e2c:	0212      	lsls	r2, r2, #8
 8000e2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e30:	193b      	adds	r3, r7, r4
 8000e32:	2284      	movs	r2, #132	@ 0x84
 8000e34:	0392      	lsls	r2, r2, #14
 8000e36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FP_MB1_PWR_SW_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	193a      	adds	r2, r7, r4
 8000e40:	23a0      	movs	r3, #160	@ 0xa0
 8000e42:	05db      	lsls	r3, r3, #23
 8000e44:	0011      	movs	r1, r2
 8000e46:	0018      	movs	r0, r3
 8000e48:	f002 f942 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FP_MB2_PWR_SW_Pin */
  GPIO_InitStruct.Pin = FP_MB2_PWR_SW_Pin;
 8000e4c:	0021      	movs	r1, r4
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2280      	movs	r2, #128	@ 0x80
 8000e52:	0052      	lsls	r2, r2, #1
 8000e54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2284      	movs	r2, #132	@ 0x84
 8000e5a:	0392      	lsls	r2, r2, #14
 8000e5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2201      	movs	r2, #1
 8000e62:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FP_MB2_PWR_SW_GPIO_Port, &GPIO_InitStruct);
 8000e64:	000c      	movs	r4, r1
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	4a13      	ldr	r2, [pc, #76]	@ (8000eb8 <MX_GPIO_Init+0x24c>)
 8000e6a:	0019      	movs	r1, r3
 8000e6c:	0010      	movs	r0, r2
 8000e6e:	f002 f92f 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SGPIO_I2C1_RES_G_Pin TEMP_I2C2_RES_Pin TEMP_I2C1_RES_Pin */
  GPIO_InitStruct.Pin = SGPIO_I2C1_RES_G_Pin|TEMP_I2C2_RES_Pin|TEMP_I2C1_RES_Pin;
 8000e72:	0021      	movs	r1, r4
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2207      	movs	r2, #7
 8000e78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec0 <MX_GPIO_Init+0x254>)
 8000e90:	0019      	movs	r1, r3
 8000e92:	0010      	movs	r0, r2
 8000e94:	f002 f91c 	bl	80030d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	2007      	movs	r0, #7
 8000e9e:	f001 fee3 	bl	8002c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000ea2:	2007      	movs	r0, #7
 8000ea4:	f001 fef5 	bl	8002c92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea8:	46c0      	nop			@ (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b00b      	add	sp, #44	@ 0x2c
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	00000811 	.word	0x00000811
 8000eb8:	50000800 	.word	0x50000800
 8000ebc:	50000400 	.word	0x50000400
 8000ec0:	50000c00 	.word	0x50000c00
 8000ec4:	00006a11 	.word	0x00006a11
 8000ec8:	000084ee 	.word	0x000084ee
 8000ecc:	00001fa8 	.word	0x00001fa8
 8000ed0:	0000e3f9 	.word	0x0000e3f9

08000ed4 <Set_devslp>:

/* USER CODE BEGIN 4 */
void Set_devslp()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af02      	add	r7, sp, #8
	while (HAL_I2C_IsDeviceReady(&hi2c2, I2C_EXPAND_adr << 1, 3, 100) != HAL_OK);
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	4b51      	ldr	r3, [pc, #324]	@ (8001024 <Set_devslp+0x150>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	18db      	adds	r3, r3, r3
 8000ee2:	b299      	uxth	r1, r3
 8000ee4:	4850      	ldr	r0, [pc, #320]	@ (8001028 <Set_devslp+0x154>)
 8000ee6:	2364      	movs	r3, #100	@ 0x64
 8000ee8:	2203      	movs	r2, #3
 8000eea:	f002 fecf 	bl	8003c8c <HAL_I2C_IsDeviceReady>
 8000eee:	1e03      	subs	r3, r0, #0
 8000ef0:	d1f4      	bne.n	8000edc <Set_devslp+0x8>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 1); //DevSLP  0 канал (E/F)
 8000ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8001024 <Set_devslp+0x150>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	18db      	adds	r3, r3, r3
 8000ef8:	b299      	uxth	r1, r3
 8000efa:	4a4c      	ldr	r2, [pc, #304]	@ (800102c <Set_devslp+0x158>)
 8000efc:	484a      	ldr	r0, [pc, #296]	@ (8001028 <Set_devslp+0x154>)
 8000efe:	2301      	movs	r3, #1
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2301      	movs	r3, #1
 8000f04:	f002 fb5c 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000f08:	2005      	movs	r0, #5
 8000f0a:	f001 fddd 	bl	8002ac8 <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&hi2c2, Dev_SLP_adr << 1, 3, 100) != HAL_OK);
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	4b47      	ldr	r3, [pc, #284]	@ (8001030 <Set_devslp+0x15c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	18db      	adds	r3, r3, r3
 8000f16:	b299      	uxth	r1, r3
 8000f18:	4843      	ldr	r0, [pc, #268]	@ (8001028 <Set_devslp+0x154>)
 8000f1a:	2364      	movs	r3, #100	@ 0x64
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	f002 feb5 	bl	8003c8c <HAL_I2C_IsDeviceReady>
 8000f22:	1e03      	subs	r3, r0, #0
 8000f24:	d1f4      	bne.n	8000f10 <Set_devslp+0x3c>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), i2cbuff_IN, 3, 1); // init input
 8000f26:	4b42      	ldr	r3, [pc, #264]	@ (8001030 <Set_devslp+0x15c>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	18db      	adds	r3, r3, r3
 8000f2c:	b299      	uxth	r1, r3
 8000f2e:	4a41      	ldr	r2, [pc, #260]	@ (8001034 <Set_devslp+0x160>)
 8000f30:	483d      	ldr	r0, [pc, #244]	@ (8001028 <Set_devslp+0x154>)
 8000f32:	2301      	movs	r3, #1
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2303      	movs	r3, #3
 8000f38:	f002 fb42 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000f3c:	2005      	movs	r0, #5
 8000f3e:	f001 fdc3 	bl	8002ac8 <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&hi2c2, Dev_SLP_adr << 1, 3, 100) != HAL_OK);
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	4b3a      	ldr	r3, [pc, #232]	@ (8001030 <Set_devslp+0x15c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	18db      	adds	r3, r3, r3
 8000f4a:	b299      	uxth	r1, r3
 8000f4c:	4836      	ldr	r0, [pc, #216]	@ (8001028 <Set_devslp+0x154>)
 8000f4e:	2364      	movs	r3, #100	@ 0x64
 8000f50:	2203      	movs	r2, #3
 8000f52:	f002 fe9b 	bl	8003c8c <HAL_I2C_IsDeviceReady>
 8000f56:	1e03      	subs	r3, r0, #0
 8000f58:	d1f4      	bne.n	8000f44 <Set_devslp+0x70>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), Dev_SLP_ON, 3, 1); //write
 8000f5a:	4b35      	ldr	r3, [pc, #212]	@ (8001030 <Set_devslp+0x15c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	18db      	adds	r3, r3, r3
 8000f60:	b299      	uxth	r1, r3
 8000f62:	4a35      	ldr	r2, [pc, #212]	@ (8001038 <Set_devslp+0x164>)
 8000f64:	4830      	ldr	r0, [pc, #192]	@ (8001028 <Set_devslp+0x154>)
 8000f66:	2301      	movs	r3, #1
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	f002 fb28 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000f70:	2005      	movs	r0, #5
 8000f72:	f001 fda9 	bl	8002ac8 <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 1); //DevSLP  1 канал (C/D)
 8000f76:	4b2b      	ldr	r3, [pc, #172]	@ (8001024 <Set_devslp+0x150>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	18db      	adds	r3, r3, r3
 8000f7c:	b299      	uxth	r1, r3
 8000f7e:	4a2f      	ldr	r2, [pc, #188]	@ (800103c <Set_devslp+0x168>)
 8000f80:	4829      	ldr	r0, [pc, #164]	@ (8001028 <Set_devslp+0x154>)
 8000f82:	2301      	movs	r3, #1
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	f002 fb1a 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000f8c:	2005      	movs	r0, #5
 8000f8e:	f001 fd9b 	bl	8002ac8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), i2cbuff_IN, 3, 1);
 8000f92:	4b27      	ldr	r3, [pc, #156]	@ (8001030 <Set_devslp+0x15c>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	18db      	adds	r3, r3, r3
 8000f98:	b299      	uxth	r1, r3
 8000f9a:	4a26      	ldr	r2, [pc, #152]	@ (8001034 <Set_devslp+0x160>)
 8000f9c:	4822      	ldr	r0, [pc, #136]	@ (8001028 <Set_devslp+0x154>)
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	f002 fb0c 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000fa8:	2005      	movs	r0, #5
 8000faa:	f001 fd8d 	bl	8002ac8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), Dev_SLP_ON, 3, 1);
 8000fae:	4b20      	ldr	r3, [pc, #128]	@ (8001030 <Set_devslp+0x15c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	18db      	adds	r3, r3, r3
 8000fb4:	b299      	uxth	r1, r3
 8000fb6:	4a20      	ldr	r2, [pc, #128]	@ (8001038 <Set_devslp+0x164>)
 8000fb8:	481b      	ldr	r0, [pc, #108]	@ (8001028 <Set_devslp+0x154>)
 8000fba:	2301      	movs	r3, #1
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	f002 fafe 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000fc4:	2005      	movs	r0, #5
 8000fc6:	f001 fd7f 	bl	8002ac8 <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 1); //DevSLP  2 канал (A/B)
 8000fca:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <Set_devslp+0x150>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	18db      	adds	r3, r3, r3
 8000fd0:	b299      	uxth	r1, r3
 8000fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8001040 <Set_devslp+0x16c>)
 8000fd4:	4814      	ldr	r0, [pc, #80]	@ (8001028 <Set_devslp+0x154>)
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	f002 faf0 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000fe0:	2005      	movs	r0, #5
 8000fe2:	f001 fd71 	bl	8002ac8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), i2cbuff_IN, 3, 1);
 8000fe6:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <Set_devslp+0x15c>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	18db      	adds	r3, r3, r3
 8000fec:	b299      	uxth	r1, r3
 8000fee:	4a11      	ldr	r2, [pc, #68]	@ (8001034 <Set_devslp+0x160>)
 8000ff0:	480d      	ldr	r0, [pc, #52]	@ (8001028 <Set_devslp+0x154>)
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	f002 fae2 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000ffc:	2005      	movs	r0, #5
 8000ffe:	f001 fd63 	bl	8002ac8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (Dev_SLP_adr << 1), Dev_SLP_ON, 3, 1);
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <Set_devslp+0x15c>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	18db      	adds	r3, r3, r3
 8001008:	b299      	uxth	r1, r3
 800100a:	4a0b      	ldr	r2, [pc, #44]	@ (8001038 <Set_devslp+0x164>)
 800100c:	4806      	ldr	r0, [pc, #24]	@ (8001028 <Set_devslp+0x154>)
 800100e:	2301      	movs	r3, #1
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2303      	movs	r3, #3
 8001014:	f002 fad4 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001018:	2005      	movs	r0, #5
 800101a:	f001 fd55 	bl	8002ac8 <HAL_Delay>
}
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000059 	.word	0x20000059
 8001028:	20000098 	.word	0x20000098
 800102c:	20000040 	.word	0x20000040
 8001030:	20000058 	.word	0x20000058
 8001034:	2000003c 	.word	0x2000003c
 8001038:	2000005c 	.word	0x2000005c
 800103c:	20000044 	.word	0x20000044
 8001040:	20000048 	.word	0x20000048

08001044 <Initialize_Disks>:

void Initialize_Disks()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_DISKS; ++i) {
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	e01c      	b.n	800108a <Initialize_Disks+0x46>
		disks[i].isConnected = 0;
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <Initialize_Disks+0x58>)
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	0092      	lsls	r2, r2, #2
 8001056:	2100      	movs	r1, #0
 8001058:	54d1      	strb	r1, [r2, r3]
		disks[i].activity = 0;
 800105a:	4a10      	ldr	r2, [pc, #64]	@ (800109c <Initialize_Disks+0x58>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	18d3      	adds	r3, r2, r3
 8001062:	3301      	adds	r3, #1
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
		disks[i].error = 0;
 8001068:	4a0c      	ldr	r2, [pc, #48]	@ (800109c <Initialize_Disks+0x58>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	18d3      	adds	r3, r2, r3
 8001070:	3302      	adds	r3, #2
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
		disks[i].locate = 0;
 8001076:	4a09      	ldr	r2, [pc, #36]	@ (800109c <Initialize_Disks+0x58>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	18d3      	adds	r3, r2, r3
 800107e:	3303      	adds	r3, #3
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_DISKS; ++i) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b17      	cmp	r3, #23
 800108e:	dddf      	ble.n	8001050 <Initialize_Disks+0xc>
	}
}
 8001090:	46c0      	nop			@ (mov r8, r8)
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	b002      	add	sp, #8
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	20000298 	.word	0x20000298

080010a0 <ResetBus>:

	}
}

void ResetBus()
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	flag_update = 10;
 80010a4:	4b37      	ldr	r3, [pc, #220]	@ (8001184 <ResetBus+0xe4>)
 80010a6:	220a      	movs	r2, #10
 80010a8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TEMP_I2C1_RES_GPIO_Port, TEMP_I2C1_RES_Pin, RESET);
 80010aa:	4b37      	ldr	r3, [pc, #220]	@ (8001188 <ResetBus+0xe8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	2104      	movs	r1, #4
 80010b0:	0018      	movs	r0, r3
 80010b2:	f002 f98e 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_G_GPIO_Port, SGPIO_I2C1_RES_G_Pin, RESET);
 80010b6:	4b34      	ldr	r3, [pc, #208]	@ (8001188 <ResetBus+0xe8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	2101      	movs	r1, #1
 80010bc:	0018      	movs	r0, r3
 80010be:	f002 f988 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_GPIO_Port, SGPIO_I2C1_RES_Pin, RESET);
 80010c2:	2380      	movs	r3, #128	@ 0x80
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4831      	ldr	r0, [pc, #196]	@ (800118c <ResetBus+0xec>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	0019      	movs	r1, r3
 80010cc:	f002 f981 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3RES_G_GPIO_Port, SGPIO_I2C3RES_G_Pin, RESET);
 80010d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001190 <ResetBus+0xf0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	2104      	movs	r1, #4
 80010d6:	0018      	movs	r0, r3
 80010d8:	f002 f97b 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3_RES_GPIO_Port, SGPIO_I2C3_RES_Pin, RESET);
 80010dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <ResetBus+0xf0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	2102      	movs	r1, #2
 80010e2:	0018      	movs	r0, r3
 80010e4:	f002 f975 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_GPIO_Port, SGPIO_I2C2_RES_Pin, RESET);
 80010e8:	2380      	movs	r3, #128	@ 0x80
 80010ea:	01db      	lsls	r3, r3, #7
 80010ec:	4827      	ldr	r0, [pc, #156]	@ (800118c <ResetBus+0xec>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	0019      	movs	r1, r3
 80010f2:	f002 f96e 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_G_GPIO_Port, SGPIO_I2C2_RES_G_Pin, RESET);
 80010f6:	2380      	movs	r3, #128	@ 0x80
 80010f8:	019b      	lsls	r3, r3, #6
 80010fa:	4824      	ldr	r0, [pc, #144]	@ (800118c <ResetBus+0xec>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	0019      	movs	r1, r3
 8001100:	f002 f967 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_I2C2_RES_GPIO_Port, TEMP_I2C2_RES_Pin, RESET);
 8001104:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <ResetBus+0xe8>)
 8001106:	2200      	movs	r2, #0
 8001108:	2102      	movs	r1, #2
 800110a:	0018      	movs	r0, r3
 800110c:	f002 f961 	bl	80033d2 <HAL_GPIO_WritePin>

	flag_update = 11;
 8001110:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <ResetBus+0xe4>)
 8001112:	220b      	movs	r2, #11
 8001114:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TEMP_I2C1_RES_GPIO_Port, TEMP_I2C1_RES_Pin, SET);
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <ResetBus+0xe8>)
 8001118:	2201      	movs	r2, #1
 800111a:	2104      	movs	r1, #4
 800111c:	0018      	movs	r0, r3
 800111e:	f002 f958 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_G_GPIO_Port, SGPIO_I2C1_RES_G_Pin, SET);
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <ResetBus+0xe8>)
 8001124:	2201      	movs	r2, #1
 8001126:	2101      	movs	r1, #1
 8001128:	0018      	movs	r0, r3
 800112a:	f002 f952 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C1_RES_GPIO_Port, SGPIO_I2C1_RES_Pin, SET);
 800112e:	2380      	movs	r3, #128	@ 0x80
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4816      	ldr	r0, [pc, #88]	@ (800118c <ResetBus+0xec>)
 8001134:	2201      	movs	r2, #1
 8001136:	0019      	movs	r1, r3
 8001138:	f002 f94b 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3RES_G_GPIO_Port, SGPIO_I2C3RES_G_Pin, SET);
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <ResetBus+0xf0>)
 800113e:	2201      	movs	r2, #1
 8001140:	2104      	movs	r1, #4
 8001142:	0018      	movs	r0, r3
 8001144:	f002 f945 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C3_RES_GPIO_Port, SGPIO_I2C3_RES_Pin, SET);
 8001148:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <ResetBus+0xf0>)
 800114a:	2201      	movs	r2, #1
 800114c:	2102      	movs	r1, #2
 800114e:	0018      	movs	r0, r3
 8001150:	f002 f93f 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_GPIO_Port, SGPIO_I2C2_RES_Pin, SET);
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	01db      	lsls	r3, r3, #7
 8001158:	480c      	ldr	r0, [pc, #48]	@ (800118c <ResetBus+0xec>)
 800115a:	2201      	movs	r2, #1
 800115c:	0019      	movs	r1, r3
 800115e:	f002 f938 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SGPIO_I2C2_RES_G_GPIO_Port, SGPIO_I2C2_RES_G_Pin, SET);
 8001162:	2380      	movs	r3, #128	@ 0x80
 8001164:	019b      	lsls	r3, r3, #6
 8001166:	4809      	ldr	r0, [pc, #36]	@ (800118c <ResetBus+0xec>)
 8001168:	2201      	movs	r2, #1
 800116a:	0019      	movs	r1, r3
 800116c:	f002 f931 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_I2C2_RES_GPIO_Port, TEMP_I2C2_RES_Pin, SET);
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <ResetBus+0xe8>)
 8001172:	2201      	movs	r2, #1
 8001174:	2102      	movs	r1, #2
 8001176:	0018      	movs	r0, r3
 8001178:	f002 f92b 	bl	80033d2 <HAL_GPIO_WritePin>

}
 800117c:	46c0      	nop			@ (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	20000289 	.word	0x20000289
 8001188:	50000c00 	.word	0x50000c00
 800118c:	50000800 	.word	0x50000800
 8001190:	50000400 	.word	0x50000400

08001194 <Set_Led>:

void Set_Led()
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 800119a:	4b33      	ldr	r3, [pc, #204]	@ (8001268 <Set_Led+0xd4>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	18db      	adds	r3, r3, r3
 80011a0:	b299      	uxth	r1, r3
 80011a2:	4a32      	ldr	r2, [pc, #200]	@ (800126c <Set_Led+0xd8>)
 80011a4:	4832      	ldr	r0, [pc, #200]	@ (8001270 <Set_Led+0xdc>)
 80011a6:	230a      	movs	r3, #10
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	f002 fa08 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 80011b0:	4b30      	ldr	r3, [pc, #192]	@ (8001274 <Set_Led+0xe0>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	18db      	adds	r3, r3, r3
 80011b6:	b299      	uxth	r1, r3
 80011b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001278 <Set_Led+0xe4>)
 80011ba:	482d      	ldr	r0, [pc, #180]	@ (8001270 <Set_Led+0xdc>)
 80011bc:	230a      	movs	r3, #10
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2303      	movs	r3, #3
 80011c2:	f002 f9fd 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), channel_one, 3, 10);
 80011c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001274 <Set_Led+0xe0>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	18db      	adds	r3, r3, r3
 80011cc:	b299      	uxth	r1, r3
 80011ce:	4a2b      	ldr	r2, [pc, #172]	@ (800127c <Set_Led+0xe8>)
 80011d0:	4827      	ldr	r0, [pc, #156]	@ (8001270 <Set_Led+0xdc>)
 80011d2:	230a      	movs	r3, #10
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2303      	movs	r3, #3
 80011d8:	f002 f9f2 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 80011dc:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <Set_Led+0xd4>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	18db      	adds	r3, r3, r3
 80011e2:	b299      	uxth	r1, r3
 80011e4:	4a26      	ldr	r2, [pc, #152]	@ (8001280 <Set_Led+0xec>)
 80011e6:	4822      	ldr	r0, [pc, #136]	@ (8001270 <Set_Led+0xdc>)
 80011e8:	230a      	movs	r3, #10
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2301      	movs	r3, #1
 80011ee:	f002 f9e7 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 80011f2:	4b20      	ldr	r3, [pc, #128]	@ (8001274 <Set_Led+0xe0>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	18db      	adds	r3, r3, r3
 80011f8:	b299      	uxth	r1, r3
 80011fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001278 <Set_Led+0xe4>)
 80011fc:	481c      	ldr	r0, [pc, #112]	@ (8001270 <Set_Led+0xdc>)
 80011fe:	230a      	movs	r3, #10
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2303      	movs	r3, #3
 8001204:	f002 f9dc 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), channel_two, 3, 10);
 8001208:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <Set_Led+0xe0>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	18db      	adds	r3, r3, r3
 800120e:	b299      	uxth	r1, r3
 8001210:	4a1c      	ldr	r2, [pc, #112]	@ (8001284 <Set_Led+0xf0>)
 8001212:	4817      	ldr	r0, [pc, #92]	@ (8001270 <Set_Led+0xdc>)
 8001214:	230a      	movs	r3, #10
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2303      	movs	r3, #3
 800121a:	f002 f9d1 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 800121e:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <Set_Led+0xd4>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	18db      	adds	r3, r3, r3
 8001224:	b299      	uxth	r1, r3
 8001226:	4a18      	ldr	r2, [pc, #96]	@ (8001288 <Set_Led+0xf4>)
 8001228:	4811      	ldr	r0, [pc, #68]	@ (8001270 <Set_Led+0xdc>)
 800122a:	230a      	movs	r3, #10
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2301      	movs	r3, #1
 8001230:	f002 f9c6 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <Set_Led+0xe0>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	18db      	adds	r3, r3, r3
 800123a:	b299      	uxth	r1, r3
 800123c:	4a0e      	ldr	r2, [pc, #56]	@ (8001278 <Set_Led+0xe4>)
 800123e:	480c      	ldr	r0, [pc, #48]	@ (8001270 <Set_Led+0xdc>)
 8001240:	230a      	movs	r3, #10
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2303      	movs	r3, #3
 8001246:	f002 f9bb 	bl	80035c0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), channel_three, 3, 10);
 800124a:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <Set_Led+0xe0>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	18db      	adds	r3, r3, r3
 8001250:	b299      	uxth	r1, r3
 8001252:	4a0e      	ldr	r2, [pc, #56]	@ (800128c <Set_Led+0xf8>)
 8001254:	4806      	ldr	r0, [pc, #24]	@ (8001270 <Set_Led+0xdc>)
 8001256:	230a      	movs	r3, #10
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2303      	movs	r3, #3
 800125c:	f002 f9b0 	bl	80035c0 <HAL_I2C_Master_Transmit>
}
 8001260:	46c0      	nop			@ (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			@ (mov r8, r8)
 8001268:	20000059 	.word	0x20000059
 800126c:	20000040 	.word	0x20000040
 8001270:	20000098 	.word	0x20000098
 8001274:	20000057 	.word	0x20000057
 8001278:	20000038 	.word	0x20000038
 800127c:	20000060 	.word	0x20000060
 8001280:	20000044 	.word	0x20000044
 8001284:	20000064 	.word	0x20000064
 8001288:	20000048 	.word	0x20000048
 800128c:	20000068 	.word	0x20000068

08001290 <Set_Led_On>:

void Set_Led_On()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af02      	add	r7, sp, #8
	flag_update = 5;
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <Set_Led_On+0x5c>)
 8001298:	2205      	movs	r2, #5
 800129a:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_IsDeviceReady(&hi2c2, LED_adr << 1, 3, 100) == HAL_OK) {
 800129c:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <Set_Led_On+0x60>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	18db      	adds	r3, r3, r3
 80012a2:	b299      	uxth	r1, r3
 80012a4:	4813      	ldr	r0, [pc, #76]	@ (80012f4 <Set_Led_On+0x64>)
 80012a6:	2364      	movs	r3, #100	@ 0x64
 80012a8:	2203      	movs	r2, #3
 80012aa:	f002 fcef 	bl	8003c8c <HAL_I2C_IsDeviceReady>
 80012ae:	1e03      	subs	r3, r0, #0
 80012b0:	d10b      	bne.n	80012ca <Set_Led_On+0x3a>
		HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <Set_Led_On+0x60>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	18db      	adds	r3, r3, r3
 80012b8:	b299      	uxth	r1, r3
 80012ba:	4a0f      	ldr	r2, [pc, #60]	@ (80012f8 <Set_Led_On+0x68>)
 80012bc:	480d      	ldr	r0, [pc, #52]	@ (80012f4 <Set_Led_On+0x64>)
 80012be:	230a      	movs	r3, #10
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2303      	movs	r3, #3
 80012c4:	f002 f97c 	bl	80035c0 <HAL_I2C_Master_Transmit>
 80012c8:	e002      	b.n	80012d0 <Set_Led_On+0x40>
	} else {
		flag_update = 7;
 80012ca:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <Set_Led_On+0x5c>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	701a      	strb	r2, [r3, #0]
	}


	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), ledbufON, 3, 10);
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <Set_Led_On+0x60>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	18db      	adds	r3, r3, r3
 80012d6:	b299      	uxth	r1, r3
 80012d8:	4a08      	ldr	r2, [pc, #32]	@ (80012fc <Set_Led_On+0x6c>)
 80012da:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <Set_Led_On+0x64>)
 80012dc:	230a      	movs	r3, #10
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2303      	movs	r3, #3
 80012e2:	f002 f96d 	bl	80035c0 <HAL_I2C_Master_Transmit>
}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000289 	.word	0x20000289
 80012f0:	20000057 	.word	0x20000057
 80012f4:	20000098 	.word	0x20000098
 80012f8:	20000038 	.word	0x20000038
 80012fc:	20000050 	.word	0x20000050

08001300 <Set_Led_Off>:

void Set_Led_Off()
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), i2cbuff, 3, 10);
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <Set_Led_Off+0x38>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	18db      	adds	r3, r3, r3
 800130c:	b299      	uxth	r1, r3
 800130e:	4a0b      	ldr	r2, [pc, #44]	@ (800133c <Set_Led_Off+0x3c>)
 8001310:	480b      	ldr	r0, [pc, #44]	@ (8001340 <Set_Led_Off+0x40>)
 8001312:	230a      	movs	r3, #10
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2303      	movs	r3, #3
 8001318:	f002 f952 	bl	80035c0 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Transmit(&hi2c2, (LED_adr << 1), ledbufOFF, 3, 10);
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <Set_Led_Off+0x38>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	18db      	adds	r3, r3, r3
 8001322:	b299      	uxth	r1, r3
 8001324:	4a07      	ldr	r2, [pc, #28]	@ (8001344 <Set_Led_Off+0x44>)
 8001326:	4806      	ldr	r0, [pc, #24]	@ (8001340 <Set_Led_Off+0x40>)
 8001328:	230a      	movs	r3, #10
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2303      	movs	r3, #3
 800132e:	f002 f947 	bl	80035c0 <HAL_I2C_Master_Transmit>

}
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000057 	.word	0x20000057
 800133c:	20000038 	.word	0x20000038
 8001340:	20000098 	.word	0x20000098
 8001344:	20000054 	.word	0x20000054

08001348 <Led_Init>:
void Led_Init()
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 800134e:	4b37      	ldr	r3, [pc, #220]	@ (800142c <Led_Init+0xe4>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	18db      	adds	r3, r3, r3
 8001354:	b299      	uxth	r1, r3
 8001356:	4a36      	ldr	r2, [pc, #216]	@ (8001430 <Led_Init+0xe8>)
 8001358:	4836      	ldr	r0, [pc, #216]	@ (8001434 <Led_Init+0xec>)
 800135a:	230a      	movs	r3, #10
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2301      	movs	r3, #1
 8001360:	f002 f92e 	bl	80035c0 <HAL_I2C_Master_Transmit>
	Set_Led_On();
 8001364:	f7ff ff94 	bl	8001290 <Set_Led_On>
	HAL_Delay(400);
 8001368:	23c8      	movs	r3, #200	@ 0xc8
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	0018      	movs	r0, r3
 800136e:	f001 fbab 	bl	8002ac8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 8001372:	4b2e      	ldr	r3, [pc, #184]	@ (800142c <Led_Init+0xe4>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	18db      	adds	r3, r3, r3
 8001378:	b299      	uxth	r1, r3
 800137a:	4a2f      	ldr	r2, [pc, #188]	@ (8001438 <Led_Init+0xf0>)
 800137c:	482d      	ldr	r0, [pc, #180]	@ (8001434 <Led_Init+0xec>)
 800137e:	230a      	movs	r3, #10
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	f002 f91c 	bl	80035c0 <HAL_I2C_Master_Transmit>
	Set_Led_On();
 8001388:	f7ff ff82 	bl	8001290 <Set_Led_On>
	HAL_Delay(400);
 800138c:	23c8      	movs	r3, #200	@ 0xc8
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	0018      	movs	r0, r3
 8001392:	f001 fb99 	bl	8002ac8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 8001396:	4b25      	ldr	r3, [pc, #148]	@ (800142c <Led_Init+0xe4>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	18db      	adds	r3, r3, r3
 800139c:	b299      	uxth	r1, r3
 800139e:	4a27      	ldr	r2, [pc, #156]	@ (800143c <Led_Init+0xf4>)
 80013a0:	4824      	ldr	r0, [pc, #144]	@ (8001434 <Led_Init+0xec>)
 80013a2:	230a      	movs	r3, #10
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	f002 f90a 	bl	80035c0 <HAL_I2C_Master_Transmit>
	Set_Led_On();
 80013ac:	f7ff ff70 	bl	8001290 <Set_Led_On>
	HAL_Delay(400);
 80013b0:	23c8      	movs	r3, #200	@ 0xc8
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	0018      	movs	r0, r3
 80013b6:	f001 fb87 	bl	8002ac8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 80013ba:	4b1c      	ldr	r3, [pc, #112]	@ (800142c <Led_Init+0xe4>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	18db      	adds	r3, r3, r3
 80013c0:	b299      	uxth	r1, r3
 80013c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001430 <Led_Init+0xe8>)
 80013c4:	481b      	ldr	r0, [pc, #108]	@ (8001434 <Led_Init+0xec>)
 80013c6:	230a      	movs	r3, #10
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2301      	movs	r3, #1
 80013cc:	f002 f8f8 	bl	80035c0 <HAL_I2C_Master_Transmit>
	Set_Led_Off();
 80013d0:	f7ff ff96 	bl	8001300 <Set_Led_Off>
	HAL_Delay(400);
 80013d4:	23c8      	movs	r3, #200	@ 0xc8
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	0018      	movs	r0, r3
 80013da:	f001 fb75 	bl	8002ac8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 80013de:	4b13      	ldr	r3, [pc, #76]	@ (800142c <Led_Init+0xe4>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	18db      	adds	r3, r3, r3
 80013e4:	b299      	uxth	r1, r3
 80013e6:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <Led_Init+0xf0>)
 80013e8:	4812      	ldr	r0, [pc, #72]	@ (8001434 <Led_Init+0xec>)
 80013ea:	230a      	movs	r3, #10
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	f002 f8e6 	bl	80035c0 <HAL_I2C_Master_Transmit>
	Set_Led_Off();
 80013f4:	f7ff ff84 	bl	8001300 <Set_Led_Off>
	HAL_Delay(400);
 80013f8:	23c8      	movs	r3, #200	@ 0xc8
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	0018      	movs	r0, r3
 80013fe:	f001 fb63 	bl	8002ac8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 8001402:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <Led_Init+0xe4>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	18db      	adds	r3, r3, r3
 8001408:	b299      	uxth	r1, r3
 800140a:	4a0c      	ldr	r2, [pc, #48]	@ (800143c <Led_Init+0xf4>)
 800140c:	4809      	ldr	r0, [pc, #36]	@ (8001434 <Led_Init+0xec>)
 800140e:	230a      	movs	r3, #10
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2301      	movs	r3, #1
 8001414:	f002 f8d4 	bl	80035c0 <HAL_I2C_Master_Transmit>
	Set_Led_Off();
 8001418:	f7ff ff72 	bl	8001300 <Set_Led_Off>
	HAL_Delay(400);
 800141c:	23c8      	movs	r3, #200	@ 0xc8
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	0018      	movs	r0, r3
 8001422:	f001 fb51 	bl	8002ac8 <HAL_Delay>

}
 8001426:	46c0      	nop			@ (mov r8, r8)
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000059 	.word	0x20000059
 8001430:	20000040 	.word	0x20000040
 8001434:	20000098 	.word	0x20000098
 8001438:	20000044 	.word	0x20000044
 800143c:	20000048 	.word	0x20000048

08001440 <readTemperature>:

// Функция для чтения температуры с датчика (возвращает температуру в десятых долях градуса)
int8_t readTemperature(uint8_t address) {
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	0002      	movs	r2, r0
 8001448:	1dfb      	adds	r3, r7, #7
 800144a:	701a      	strb	r2, [r3, #0]
    uint8_t data[2];
    // Чтение двух байтов из регистра температуры
    i2c_read(address, TEMP_REGISTER, data, 2);
 800144c:	2408      	movs	r4, #8
 800144e:	193a      	adds	r2, r7, r4
 8001450:	1dfb      	adds	r3, r7, #7
 8001452:	7818      	ldrb	r0, [r3, #0]
 8001454:	2302      	movs	r3, #2
 8001456:	2100      	movs	r1, #0
 8001458:	f7fe fee0 	bl	800021c <i2c_read>

    // Объединение двух байтов в 16-битное значение
    int16_t tempData = (data[0] << 8) | data[1];
 800145c:	0022      	movs	r2, r4
 800145e:	18bb      	adds	r3, r7, r2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b219      	sxth	r1, r3
 8001466:	18bb      	adds	r3, r7, r2
 8001468:	785b      	ldrb	r3, [r3, #1]
 800146a:	b21a      	sxth	r2, r3
 800146c:	200c      	movs	r0, #12
 800146e:	183b      	adds	r3, r7, r0
 8001470:	430a      	orrs	r2, r1
 8001472:	801a      	strh	r2, [r3, #0]

    // �?звлечение знакового бита
    uint8_t isNegative = (tempData & 0x8000) != 0;
 8001474:	0001      	movs	r1, r0
 8001476:	187b      	adds	r3, r7, r1
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	0bdb      	lsrs	r3, r3, #15
 800147c:	b2da      	uxtb	r2, r3
 800147e:	240b      	movs	r4, #11
 8001480:	193b      	adds	r3, r7, r4
 8001482:	701a      	strb	r2, [r3, #0]

    // �?звлечение целой части температуры
    int8_t integerPart = (tempData >> 8) & 0x7F;
 8001484:	187b      	adds	r3, r7, r1
 8001486:	2200      	movs	r2, #0
 8001488:	5e9b      	ldrsh	r3, [r3, r2]
 800148a:	121b      	asrs	r3, r3, #8
 800148c:	b21b      	sxth	r3, r3
 800148e:	b25a      	sxtb	r2, r3
 8001490:	200f      	movs	r0, #15
 8001492:	183b      	adds	r3, r7, r0
 8001494:	217f      	movs	r1, #127	@ 0x7f
 8001496:	400a      	ands	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]

    // Учет отрицательной температуры
    if (isNegative) {
 800149a:	193b      	adds	r3, r7, r4
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <readTemperature+0x6e>
        integerPart = -integerPart;
 80014a2:	183b      	adds	r3, r7, r0
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	425b      	negs	r3, r3
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	183b      	adds	r3, r7, r0
 80014ac:	701a      	strb	r2, [r3, #0]
    }

    return integerPart;
 80014ae:	230f      	movs	r3, #15
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b25b      	sxtb	r3, r3
}
 80014b6:	0018      	movs	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b005      	add	sp, #20
 80014bc:	bd90      	pop	{r4, r7, pc}

080014be <getMaxTemperature>:
// Функция для получения максимальной температуры
int8_t getMaxTemperature() {
 80014be:	b590      	push	{r4, r7, lr}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
    int8_t temp1 = readTemperature(MAX7500_ADDR_1);
 80014c4:	1dfc      	adds	r4, r7, #7
 80014c6:	2094      	movs	r0, #148	@ 0x94
 80014c8:	f7ff ffba 	bl	8001440 <readTemperature>
 80014cc:	0003      	movs	r3, r0
 80014ce:	7023      	strb	r3, [r4, #0]
    int8_t temp2 = readTemperature(MAX7500_ADDR_2);
 80014d0:	1dbc      	adds	r4, r7, #6
 80014d2:	2092      	movs	r0, #146	@ 0x92
 80014d4:	f7ff ffb4 	bl	8001440 <readTemperature>
 80014d8:	0003      	movs	r3, r0
 80014da:	7023      	strb	r3, [r4, #0]

    return (temp1 > temp2) ? temp1 : temp2;
 80014dc:	1dbb      	adds	r3, r7, #6
 80014de:	1dfa      	adds	r2, r7, #7
 80014e0:	7810      	ldrb	r0, [r2, #0]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b259      	sxtb	r1, r3
 80014e6:	b242      	sxtb	r2, r0
 80014e8:	4291      	cmp	r1, r2
 80014ea:	da00      	bge.n	80014ee <getMaxTemperature+0x30>
 80014ec:	1c03      	adds	r3, r0, #0
 80014ee:	b25b      	sxtb	r3, r3
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b003      	add	sp, #12
 80014f6:	bd90      	pop	{r4, r7, pc}

080014f8 <Read_disks_connected>:


void Read_disks_connected()
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af02      	add	r7, sp, #8

	ResetBus();
 80014fe:	f7ff fdcf 	bl	80010a0 <ResetBus>
	HAL_Delay(10);
 8001502:	200a      	movs	r0, #10
 8001504:	f001 fae0 	bl	8002ac8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_0, 1, 10);
 8001508:	4bcf      	ldr	r3, [pc, #828]	@ (8001848 <Read_disks_connected+0x350>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	18db      	adds	r3, r3, r3
 800150e:	b299      	uxth	r1, r3
 8001510:	4ace      	ldr	r2, [pc, #824]	@ (800184c <Read_disks_connected+0x354>)
 8001512:	48cf      	ldr	r0, [pc, #828]	@ (8001850 <Read_disks_connected+0x358>)
 8001514:	230a      	movs	r3, #10
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2301      	movs	r3, #1
 800151a:	f002 f851 	bl	80035c0 <HAL_I2C_Master_Transmit>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 800151e:	4bcd      	ldr	r3, [pc, #820]	@ (8001854 <Read_disks_connected+0x35c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	001a      	movs	r2, r3
 8001524:	4bcc      	ldr	r3, [pc, #816]	@ (8001858 <Read_disks_connected+0x360>)
 8001526:	0019      	movs	r1, r3
 8001528:	2001      	movs	r0, #1
 800152a:	f000 f9a7 	bl	800187c <Read_Register>


	if (~Buf_PRSTN[0] & 0x02)		//PRSTN F1
 800152e:	4bca      	ldr	r3, [pc, #808]	@ (8001858 <Read_disks_connected+0x360>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	001a      	movs	r2, r3
 8001534:	2302      	movs	r3, #2
 8001536:	4013      	ands	r3, r2
 8001538:	d103      	bne.n	8001542 <Read_disks_connected+0x4a>
	{
		disks[0].isConnected = 1;
 800153a:	4bc8      	ldr	r3, [pc, #800]	@ (800185c <Read_disks_connected+0x364>)
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
 8001540:	e002      	b.n	8001548 <Read_disks_connected+0x50>
	} else {
		disks[0].isConnected = 0;
 8001542:	4bc6      	ldr	r3, [pc, #792]	@ (800185c <Read_disks_connected+0x364>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN F2
 8001548:	4bc3      	ldr	r3, [pc, #780]	@ (8001858 <Read_disks_connected+0x360>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	001a      	movs	r2, r3
 800154e:	2308      	movs	r3, #8
 8001550:	4013      	ands	r3, r2
 8001552:	d103      	bne.n	800155c <Read_disks_connected+0x64>
	{
		disks[1].isConnected = 1;
 8001554:	4bc1      	ldr	r3, [pc, #772]	@ (800185c <Read_disks_connected+0x364>)
 8001556:	2201      	movs	r2, #1
 8001558:	711a      	strb	r2, [r3, #4]
 800155a:	e002      	b.n	8001562 <Read_disks_connected+0x6a>
	} else {
		disks[1].isConnected = 0;
 800155c:	4bbf      	ldr	r3, [pc, #764]	@ (800185c <Read_disks_connected+0x364>)
 800155e:	2200      	movs	r2, #0
 8001560:	711a      	strb	r2, [r3, #4]
	}

	if (~Buf_PRSTN[0] & 0x20)		//PRSTN F3
 8001562:	4bbd      	ldr	r3, [pc, #756]	@ (8001858 <Read_disks_connected+0x360>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	001a      	movs	r2, r3
 8001568:	2320      	movs	r3, #32
 800156a:	4013      	ands	r3, r2
 800156c:	d103      	bne.n	8001576 <Read_disks_connected+0x7e>
	{
		disks[2].isConnected = 1;
 800156e:	4bbb      	ldr	r3, [pc, #748]	@ (800185c <Read_disks_connected+0x364>)
 8001570:	2201      	movs	r2, #1
 8001572:	721a      	strb	r2, [r3, #8]
 8001574:	e002      	b.n	800157c <Read_disks_connected+0x84>
	} else {
		disks[2].isConnected = 0;
 8001576:	4bb9      	ldr	r3, [pc, #740]	@ (800185c <Read_disks_connected+0x364>)
 8001578:	2200      	movs	r2, #0
 800157a:	721a      	strb	r2, [r3, #8]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN F4
 800157c:	4bb6      	ldr	r3, [pc, #728]	@ (8001858 <Read_disks_connected+0x360>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b25b      	sxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	db03      	blt.n	800158e <Read_disks_connected+0x96>
	{
		disks[3].isConnected = 1;
 8001586:	4bb5      	ldr	r3, [pc, #724]	@ (800185c <Read_disks_connected+0x364>)
 8001588:	2201      	movs	r2, #1
 800158a:	731a      	strb	r2, [r3, #12]
 800158c:	e002      	b.n	8001594 <Read_disks_connected+0x9c>
	} else {
		disks[3].isConnected = 0;
 800158e:	4bb3      	ldr	r3, [pc, #716]	@ (800185c <Read_disks_connected+0x364>)
 8001590:	2200      	movs	r2, #0
 8001592:	731a      	strb	r2, [r3, #12]
	}

	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 8001594:	4baf      	ldr	r3, [pc, #700]	@ (8001854 <Read_disks_connected+0x35c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	001a      	movs	r2, r3
 800159a:	4baf      	ldr	r3, [pc, #700]	@ (8001858 <Read_disks_connected+0x360>)
 800159c:	0019      	movs	r1, r3
 800159e:	2000      	movs	r0, #0
 80015a0:	f000 f96c 	bl	800187c <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN E1
 80015a4:	4bac      	ldr	r3, [pc, #688]	@ (8001858 <Read_disks_connected+0x360>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	001a      	movs	r2, r3
 80015aa:	2302      	movs	r3, #2
 80015ac:	4013      	ands	r3, r2
 80015ae:	d103      	bne.n	80015b8 <Read_disks_connected+0xc0>
	{
		disks[4].isConnected = 1;
 80015b0:	4baa      	ldr	r3, [pc, #680]	@ (800185c <Read_disks_connected+0x364>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	741a      	strb	r2, [r3, #16]
 80015b6:	e002      	b.n	80015be <Read_disks_connected+0xc6>
	} else {
		disks[4].isConnected = 0;
 80015b8:	4ba8      	ldr	r3, [pc, #672]	@ (800185c <Read_disks_connected+0x364>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	741a      	strb	r2, [r3, #16]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN E2
 80015be:	4ba6      	ldr	r3, [pc, #664]	@ (8001858 <Read_disks_connected+0x360>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	001a      	movs	r2, r3
 80015c4:	2308      	movs	r3, #8
 80015c6:	4013      	ands	r3, r2
 80015c8:	d103      	bne.n	80015d2 <Read_disks_connected+0xda>
	{
		disks[5].isConnected = 1;
 80015ca:	4ba4      	ldr	r3, [pc, #656]	@ (800185c <Read_disks_connected+0x364>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	751a      	strb	r2, [r3, #20]
 80015d0:	e002      	b.n	80015d8 <Read_disks_connected+0xe0>
	} else {
		disks[5].isConnected = 0;
 80015d2:	4ba2      	ldr	r3, [pc, #648]	@ (800185c <Read_disks_connected+0x364>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	751a      	strb	r2, [r3, #20]
	}

	if (~Buf_PRSTN[0] & 0x20)		//PRSTN E3
 80015d8:	4b9f      	ldr	r3, [pc, #636]	@ (8001858 <Read_disks_connected+0x360>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	001a      	movs	r2, r3
 80015de:	2320      	movs	r3, #32
 80015e0:	4013      	ands	r3, r2
 80015e2:	d103      	bne.n	80015ec <Read_disks_connected+0xf4>
	{
		disks[6].isConnected = 1;
 80015e4:	4b9d      	ldr	r3, [pc, #628]	@ (800185c <Read_disks_connected+0x364>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	761a      	strb	r2, [r3, #24]
 80015ea:	e002      	b.n	80015f2 <Read_disks_connected+0xfa>
	} else {
		disks[6].isConnected = 0;
 80015ec:	4b9b      	ldr	r3, [pc, #620]	@ (800185c <Read_disks_connected+0x364>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	761a      	strb	r2, [r3, #24]
	}

	if (~Buf_PRSTN[0] & 0x80)		//PRSTN E4
 80015f2:	4b99      	ldr	r3, [pc, #612]	@ (8001858 <Read_disks_connected+0x360>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db03      	blt.n	8001604 <Read_disks_connected+0x10c>

	{
		disks[7].isConnected = 1;
 80015fc:	4b97      	ldr	r3, [pc, #604]	@ (800185c <Read_disks_connected+0x364>)
 80015fe:	2201      	movs	r2, #1
 8001600:	771a      	strb	r2, [r3, #28]
 8001602:	e002      	b.n	800160a <Read_disks_connected+0x112>
	} else {
		disks[7].isConnected = 0;
 8001604:	4b95      	ldr	r3, [pc, #596]	@ (800185c <Read_disks_connected+0x364>)
 8001606:	2200      	movs	r2, #0
 8001608:	771a      	strb	r2, [r3, #28]
	}

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_1, 1, 10);
 800160a:	4b8f      	ldr	r3, [pc, #572]	@ (8001848 <Read_disks_connected+0x350>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	18db      	adds	r3, r3, r3
 8001610:	b299      	uxth	r1, r3
 8001612:	4a93      	ldr	r2, [pc, #588]	@ (8001860 <Read_disks_connected+0x368>)
 8001614:	488e      	ldr	r0, [pc, #568]	@ (8001850 <Read_disks_connected+0x358>)
 8001616:	230a      	movs	r3, #10
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2301      	movs	r3, #1
 800161c:	f001 ffd0 	bl	80035c0 <HAL_I2C_Master_Transmit>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 8001620:	4b8c      	ldr	r3, [pc, #560]	@ (8001854 <Read_disks_connected+0x35c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	001a      	movs	r2, r3
 8001626:	4b8c      	ldr	r3, [pc, #560]	@ (8001858 <Read_disks_connected+0x360>)
 8001628:	0019      	movs	r1, r3
 800162a:	2001      	movs	r0, #1
 800162c:	f000 f926 	bl	800187c <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN D1
 8001630:	4b89      	ldr	r3, [pc, #548]	@ (8001858 <Read_disks_connected+0x360>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	001a      	movs	r2, r3
 8001636:	2302      	movs	r3, #2
 8001638:	4013      	ands	r3, r2
 800163a:	d104      	bne.n	8001646 <Read_disks_connected+0x14e>
	{
		disks[8].isConnected = 1;
 800163c:	4b87      	ldr	r3, [pc, #540]	@ (800185c <Read_disks_connected+0x364>)
 800163e:	2220      	movs	r2, #32
 8001640:	2101      	movs	r1, #1
 8001642:	5499      	strb	r1, [r3, r2]
 8001644:	e003      	b.n	800164e <Read_disks_connected+0x156>
	} else {
		disks[8].isConnected = 0;
 8001646:	4b85      	ldr	r3, [pc, #532]	@ (800185c <Read_disks_connected+0x364>)
 8001648:	2220      	movs	r2, #32
 800164a:	2100      	movs	r1, #0
 800164c:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN D2
 800164e:	4b82      	ldr	r3, [pc, #520]	@ (8001858 <Read_disks_connected+0x360>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	001a      	movs	r2, r3
 8001654:	2308      	movs	r3, #8
 8001656:	4013      	ands	r3, r2
 8001658:	d104      	bne.n	8001664 <Read_disks_connected+0x16c>
	{
		disks[9].isConnected = 1;
 800165a:	4b80      	ldr	r3, [pc, #512]	@ (800185c <Read_disks_connected+0x364>)
 800165c:	2224      	movs	r2, #36	@ 0x24
 800165e:	2101      	movs	r1, #1
 8001660:	5499      	strb	r1, [r3, r2]
 8001662:	e003      	b.n	800166c <Read_disks_connected+0x174>
	} else {
		disks[9].isConnected = 0;
 8001664:	4b7d      	ldr	r3, [pc, #500]	@ (800185c <Read_disks_connected+0x364>)
 8001666:	2224      	movs	r2, #36	@ 0x24
 8001668:	2100      	movs	r1, #0
 800166a:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN D3
 800166c:	4b7a      	ldr	r3, [pc, #488]	@ (8001858 <Read_disks_connected+0x360>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	001a      	movs	r2, r3
 8001672:	2320      	movs	r3, #32
 8001674:	4013      	ands	r3, r2
 8001676:	d104      	bne.n	8001682 <Read_disks_connected+0x18a>
	{
		disks[10].isConnected = 1;
 8001678:	4b78      	ldr	r3, [pc, #480]	@ (800185c <Read_disks_connected+0x364>)
 800167a:	2228      	movs	r2, #40	@ 0x28
 800167c:	2101      	movs	r1, #1
 800167e:	5499      	strb	r1, [r3, r2]
 8001680:	e003      	b.n	800168a <Read_disks_connected+0x192>
	} else {
		disks[10].isConnected = 0;
 8001682:	4b76      	ldr	r3, [pc, #472]	@ (800185c <Read_disks_connected+0x364>)
 8001684:	2228      	movs	r2, #40	@ 0x28
 8001686:	2100      	movs	r1, #0
 8001688:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN D4
 800168a:	4b73      	ldr	r3, [pc, #460]	@ (8001858 <Read_disks_connected+0x360>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b25b      	sxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	db04      	blt.n	800169e <Read_disks_connected+0x1a6>
	{
		disks[11].isConnected = 1;
 8001694:	4b71      	ldr	r3, [pc, #452]	@ (800185c <Read_disks_connected+0x364>)
 8001696:	222c      	movs	r2, #44	@ 0x2c
 8001698:	2101      	movs	r1, #1
 800169a:	5499      	strb	r1, [r3, r2]
 800169c:	e003      	b.n	80016a6 <Read_disks_connected+0x1ae>
	} else {
		disks[11].isConnected = 0;
 800169e:	4b6f      	ldr	r3, [pc, #444]	@ (800185c <Read_disks_connected+0x364>)
 80016a0:	222c      	movs	r2, #44	@ 0x2c
 80016a2:	2100      	movs	r1, #0
 80016a4:	5499      	strb	r1, [r3, r2]
	}
	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 80016a6:	4b6b      	ldr	r3, [pc, #428]	@ (8001854 <Read_disks_connected+0x35c>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	001a      	movs	r2, r3
 80016ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001858 <Read_disks_connected+0x360>)
 80016ae:	0019      	movs	r1, r3
 80016b0:	2000      	movs	r0, #0
 80016b2:	f000 f8e3 	bl	800187c <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN C1
 80016b6:	4b68      	ldr	r3, [pc, #416]	@ (8001858 <Read_disks_connected+0x360>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	001a      	movs	r2, r3
 80016bc:	2302      	movs	r3, #2
 80016be:	4013      	ands	r3, r2
 80016c0:	d104      	bne.n	80016cc <Read_disks_connected+0x1d4>
	{
		disks[12].isConnected = 1;
 80016c2:	4b66      	ldr	r3, [pc, #408]	@ (800185c <Read_disks_connected+0x364>)
 80016c4:	2230      	movs	r2, #48	@ 0x30
 80016c6:	2101      	movs	r1, #1
 80016c8:	5499      	strb	r1, [r3, r2]
 80016ca:	e003      	b.n	80016d4 <Read_disks_connected+0x1dc>
	} else {
		disks[12].isConnected = 0;
 80016cc:	4b63      	ldr	r3, [pc, #396]	@ (800185c <Read_disks_connected+0x364>)
 80016ce:	2230      	movs	r2, #48	@ 0x30
 80016d0:	2100      	movs	r1, #0
 80016d2:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN C2
 80016d4:	4b60      	ldr	r3, [pc, #384]	@ (8001858 <Read_disks_connected+0x360>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	001a      	movs	r2, r3
 80016da:	2308      	movs	r3, #8
 80016dc:	4013      	ands	r3, r2
 80016de:	d104      	bne.n	80016ea <Read_disks_connected+0x1f2>
	{
		disks[13].isConnected = 1;
 80016e0:	4b5e      	ldr	r3, [pc, #376]	@ (800185c <Read_disks_connected+0x364>)
 80016e2:	2234      	movs	r2, #52	@ 0x34
 80016e4:	2101      	movs	r1, #1
 80016e6:	5499      	strb	r1, [r3, r2]
 80016e8:	e003      	b.n	80016f2 <Read_disks_connected+0x1fa>
	} else {
		disks[13].isConnected = 0;
 80016ea:	4b5c      	ldr	r3, [pc, #368]	@ (800185c <Read_disks_connected+0x364>)
 80016ec:	2234      	movs	r2, #52	@ 0x34
 80016ee:	2100      	movs	r1, #0
 80016f0:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN C3
 80016f2:	4b59      	ldr	r3, [pc, #356]	@ (8001858 <Read_disks_connected+0x360>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	001a      	movs	r2, r3
 80016f8:	2320      	movs	r3, #32
 80016fa:	4013      	ands	r3, r2
 80016fc:	d104      	bne.n	8001708 <Read_disks_connected+0x210>
	{
		disks[14].isConnected = 1;
 80016fe:	4b57      	ldr	r3, [pc, #348]	@ (800185c <Read_disks_connected+0x364>)
 8001700:	2238      	movs	r2, #56	@ 0x38
 8001702:	2101      	movs	r1, #1
 8001704:	5499      	strb	r1, [r3, r2]
 8001706:	e003      	b.n	8001710 <Read_disks_connected+0x218>
	} else {
		disks[14].isConnected = 0;
 8001708:	4b54      	ldr	r3, [pc, #336]	@ (800185c <Read_disks_connected+0x364>)
 800170a:	2238      	movs	r2, #56	@ 0x38
 800170c:	2100      	movs	r1, #0
 800170e:	5499      	strb	r1, [r3, r2]
	}

	if (~Buf_PRSTN[0] & 0x80)		//PRSTN C4
 8001710:	4b51      	ldr	r3, [pc, #324]	@ (8001858 <Read_disks_connected+0x360>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b25b      	sxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	db04      	blt.n	8001724 <Read_disks_connected+0x22c>
	{
		disks[15].isConnected = 1;
 800171a:	4b50      	ldr	r3, [pc, #320]	@ (800185c <Read_disks_connected+0x364>)
 800171c:	223c      	movs	r2, #60	@ 0x3c
 800171e:	2101      	movs	r1, #1
 8001720:	5499      	strb	r1, [r3, r2]
 8001722:	e003      	b.n	800172c <Read_disks_connected+0x234>
	} else {
		disks[15].isConnected = 0;
 8001724:	4b4d      	ldr	r3, [pc, #308]	@ (800185c <Read_disks_connected+0x364>)
 8001726:	223c      	movs	r2, #60	@ 0x3c
 8001728:	2100      	movs	r1, #0
 800172a:	5499      	strb	r1, [r3, r2]
	}

	HAL_I2C_Master_Transmit(&hi2c2, (I2C_EXPAND_adr << 1), I2CInit_2, 1, 10);
 800172c:	4b46      	ldr	r3, [pc, #280]	@ (8001848 <Read_disks_connected+0x350>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	18db      	adds	r3, r3, r3
 8001732:	b299      	uxth	r1, r3
 8001734:	4a4b      	ldr	r2, [pc, #300]	@ (8001864 <Read_disks_connected+0x36c>)
 8001736:	4846      	ldr	r0, [pc, #280]	@ (8001850 <Read_disks_connected+0x358>)
 8001738:	230a      	movs	r3, #10
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2301      	movs	r3, #1
 800173e:	f001 ff3f 	bl	80035c0 <HAL_I2C_Master_Transmit>
	Read_Register(0x01, Buf_PRSTN, Dev_SLP_adr);
 8001742:	4b44      	ldr	r3, [pc, #272]	@ (8001854 <Read_disks_connected+0x35c>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	001a      	movs	r2, r3
 8001748:	4b43      	ldr	r3, [pc, #268]	@ (8001858 <Read_disks_connected+0x360>)
 800174a:	0019      	movs	r1, r3
 800174c:	2001      	movs	r0, #1
 800174e:	f000 f895 	bl	800187c <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN B1
 8001752:	4b41      	ldr	r3, [pc, #260]	@ (8001858 <Read_disks_connected+0x360>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	001a      	movs	r2, r3
 8001758:	2302      	movs	r3, #2
 800175a:	4013      	ands	r3, r2
 800175c:	d104      	bne.n	8001768 <Read_disks_connected+0x270>
	{
		disks[16].isConnected = 1;
 800175e:	4b3f      	ldr	r3, [pc, #252]	@ (800185c <Read_disks_connected+0x364>)
 8001760:	2240      	movs	r2, #64	@ 0x40
 8001762:	2101      	movs	r1, #1
 8001764:	5499      	strb	r1, [r3, r2]
 8001766:	e003      	b.n	8001770 <Read_disks_connected+0x278>
	} else {
		disks[16].isConnected = 0;
 8001768:	4b3c      	ldr	r3, [pc, #240]	@ (800185c <Read_disks_connected+0x364>)
 800176a:	2240      	movs	r2, #64	@ 0x40
 800176c:	2100      	movs	r1, #0
 800176e:	5499      	strb	r1, [r3, r2]
	}

	if (~Buf_PRSTN[0] & 0x08)		//PRSTN B2
 8001770:	4b39      	ldr	r3, [pc, #228]	@ (8001858 <Read_disks_connected+0x360>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	001a      	movs	r2, r3
 8001776:	2308      	movs	r3, #8
 8001778:	4013      	ands	r3, r2
 800177a:	d104      	bne.n	8001786 <Read_disks_connected+0x28e>
	{
		disks[17].isConnected = 1;
 800177c:	4b37      	ldr	r3, [pc, #220]	@ (800185c <Read_disks_connected+0x364>)
 800177e:	2244      	movs	r2, #68	@ 0x44
 8001780:	2101      	movs	r1, #1
 8001782:	5499      	strb	r1, [r3, r2]
 8001784:	e003      	b.n	800178e <Read_disks_connected+0x296>
	} else {
		disks[17].isConnected = 0;
 8001786:	4b35      	ldr	r3, [pc, #212]	@ (800185c <Read_disks_connected+0x364>)
 8001788:	2244      	movs	r2, #68	@ 0x44
 800178a:	2100      	movs	r1, #0
 800178c:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN B3
 800178e:	4b32      	ldr	r3, [pc, #200]	@ (8001858 <Read_disks_connected+0x360>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	001a      	movs	r2, r3
 8001794:	2320      	movs	r3, #32
 8001796:	4013      	ands	r3, r2
 8001798:	d104      	bne.n	80017a4 <Read_disks_connected+0x2ac>
	{
		disks[18].isConnected = 1;
 800179a:	4b30      	ldr	r3, [pc, #192]	@ (800185c <Read_disks_connected+0x364>)
 800179c:	2248      	movs	r2, #72	@ 0x48
 800179e:	2101      	movs	r1, #1
 80017a0:	5499      	strb	r1, [r3, r2]
 80017a2:	e003      	b.n	80017ac <Read_disks_connected+0x2b4>
	} else {
		disks[18].isConnected = 0;
 80017a4:	4b2d      	ldr	r3, [pc, #180]	@ (800185c <Read_disks_connected+0x364>)
 80017a6:	2248      	movs	r2, #72	@ 0x48
 80017a8:	2100      	movs	r1, #0
 80017aa:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN B4
 80017ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001858 <Read_disks_connected+0x360>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	db04      	blt.n	80017c0 <Read_disks_connected+0x2c8>
	{
		disks[19].isConnected = 1;
 80017b6:	4b29      	ldr	r3, [pc, #164]	@ (800185c <Read_disks_connected+0x364>)
 80017b8:	224c      	movs	r2, #76	@ 0x4c
 80017ba:	2101      	movs	r1, #1
 80017bc:	5499      	strb	r1, [r3, r2]
 80017be:	e003      	b.n	80017c8 <Read_disks_connected+0x2d0>
	} else {
		disks[19].isConnected = 0;
 80017c0:	4b26      	ldr	r3, [pc, #152]	@ (800185c <Read_disks_connected+0x364>)
 80017c2:	224c      	movs	r2, #76	@ 0x4c
 80017c4:	2100      	movs	r1, #0
 80017c6:	5499      	strb	r1, [r3, r2]
	}
	Read_Register(0x00, Buf_PRSTN, Dev_SLP_adr);
 80017c8:	4b22      	ldr	r3, [pc, #136]	@ (8001854 <Read_disks_connected+0x35c>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	001a      	movs	r2, r3
 80017ce:	4b22      	ldr	r3, [pc, #136]	@ (8001858 <Read_disks_connected+0x360>)
 80017d0:	0019      	movs	r1, r3
 80017d2:	2000      	movs	r0, #0
 80017d4:	f000 f852 	bl	800187c <Read_Register>

	if (~Buf_PRSTN[0] & 0x02)		//PRSTN A1
 80017d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <Read_disks_connected+0x360>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	001a      	movs	r2, r3
 80017de:	2302      	movs	r3, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	d104      	bne.n	80017ee <Read_disks_connected+0x2f6>
	{
		disks[20].isConnected = 1;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <Read_disks_connected+0x364>)
 80017e6:	2250      	movs	r2, #80	@ 0x50
 80017e8:	2101      	movs	r1, #1
 80017ea:	5499      	strb	r1, [r3, r2]
 80017ec:	e003      	b.n	80017f6 <Read_disks_connected+0x2fe>
	} else {
		disks[20].isConnected = 0;
 80017ee:	4b1b      	ldr	r3, [pc, #108]	@ (800185c <Read_disks_connected+0x364>)
 80017f0:	2250      	movs	r2, #80	@ 0x50
 80017f2:	2100      	movs	r1, #0
 80017f4:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x08)		//PRSTN A2
 80017f6:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <Read_disks_connected+0x360>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	001a      	movs	r2, r3
 80017fc:	2308      	movs	r3, #8
 80017fe:	4013      	ands	r3, r2
 8001800:	d104      	bne.n	800180c <Read_disks_connected+0x314>
	{
		disks[21].isConnected = 1;
 8001802:	4b16      	ldr	r3, [pc, #88]	@ (800185c <Read_disks_connected+0x364>)
 8001804:	2254      	movs	r2, #84	@ 0x54
 8001806:	2101      	movs	r1, #1
 8001808:	5499      	strb	r1, [r3, r2]
 800180a:	e003      	b.n	8001814 <Read_disks_connected+0x31c>
	} else {
		disks[21].isConnected = 0;
 800180c:	4b13      	ldr	r3, [pc, #76]	@ (800185c <Read_disks_connected+0x364>)
 800180e:	2254      	movs	r2, #84	@ 0x54
 8001810:	2100      	movs	r1, #0
 8001812:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x20)		//PRSTN A3
 8001814:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <Read_disks_connected+0x360>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	001a      	movs	r2, r3
 800181a:	2320      	movs	r3, #32
 800181c:	4013      	ands	r3, r2
 800181e:	d104      	bne.n	800182a <Read_disks_connected+0x332>
	{
		disks[22].isConnected = 1;
 8001820:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <Read_disks_connected+0x364>)
 8001822:	2258      	movs	r2, #88	@ 0x58
 8001824:	2101      	movs	r1, #1
 8001826:	5499      	strb	r1, [r3, r2]
 8001828:	e003      	b.n	8001832 <Read_disks_connected+0x33a>
	} else {
		disks[22].isConnected = 0;
 800182a:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <Read_disks_connected+0x364>)
 800182c:	2258      	movs	r2, #88	@ 0x58
 800182e:	2100      	movs	r1, #0
 8001830:	5499      	strb	r1, [r3, r2]
	}
	if (~Buf_PRSTN[0] & 0x80)		//PRSTN A4
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <Read_disks_connected+0x360>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b25b      	sxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	db15      	blt.n	8001868 <Read_disks_connected+0x370>
	{
		disks[23].isConnected = 1;
 800183c:	4b07      	ldr	r3, [pc, #28]	@ (800185c <Read_disks_connected+0x364>)
 800183e:	225c      	movs	r2, #92	@ 0x5c
 8001840:	2101      	movs	r1, #1
 8001842:	5499      	strb	r1, [r3, r2]
	} else {
		disks[23].isConnected = 0;
	}
}
 8001844:	e014      	b.n	8001870 <Read_disks_connected+0x378>
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	20000059 	.word	0x20000059
 800184c:	20000040 	.word	0x20000040
 8001850:	20000098 	.word	0x20000098
 8001854:	20000058 	.word	0x20000058
 8001858:	20000294 	.word	0x20000294
 800185c:	20000298 	.word	0x20000298
 8001860:	20000044 	.word	0x20000044
 8001864:	20000048 	.word	0x20000048
		disks[23].isConnected = 0;
 8001868:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <Read_disks_connected+0x380>)
 800186a:	225c      	movs	r2, #92	@ 0x5c
 800186c:	2100      	movs	r1, #0
 800186e:	5499      	strb	r1, [r3, r2]
}
 8001870:	46c0      	nop			@ (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	46c0      	nop			@ (mov r8, r8)
 8001878:	20000298 	.word	0x20000298

0800187c <Read_Register>:

void Read_Register(uint8_t register_pointer, uint8_t* receive_buffer, uint16_t adr_rep)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af02      	add	r7, sp, #8
 8001882:	6039      	str	r1, [r7, #0]
 8001884:	0011      	movs	r1, r2
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	1c02      	adds	r2, r0, #0
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	1c0a      	adds	r2, r1, #0
 8001890:	801a      	strh	r2, [r3, #0]
	//set pointer to register

	HAL_I2C_Master_Transmit(&hi2c2, (adr_rep << 1), &register_pointer, 1, 10);
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	18db      	adds	r3, r3, r3
 8001898:	b299      	uxth	r1, r3
 800189a:	1dfa      	adds	r2, r7, #7
 800189c:	480a      	ldr	r0, [pc, #40]	@ (80018c8 <Read_Register+0x4c>)
 800189e:	230a      	movs	r3, #10
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2301      	movs	r3, #1
 80018a4:	f001 fe8c 	bl	80035c0 <HAL_I2C_Master_Transmit>
	//receive data to receive_buffer
	HAL_I2C_Master_Receive(&hi2c2, (adr_rep << 1), receive_buffer, 1, 10);
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	18db      	adds	r3, r3, r3
 80018ae:	b299      	uxth	r1, r3
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	4805      	ldr	r0, [pc, #20]	@ (80018c8 <Read_Register+0x4c>)
 80018b4:	230a      	movs	r3, #10
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2301      	movs	r3, #1
 80018ba:	f001 ffab 	bl	8003814 <HAL_I2C_Master_Receive>

}
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b002      	add	sp, #8
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	20000098 	.word	0x20000098

080018cc <UpdateLEDStates>:

void UpdateLEDStates()
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
	static uint8_t blinkState = 0; // Состояние мигания (0 или 1)
	blinkState = !blinkState;     // �?нвертируем состояние каждые 125 мс (4 Гц)
 80018d2:	4b9c      	ldr	r3, [pc, #624]	@ (8001b44 <UpdateLEDStates+0x278>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	425a      	negs	r2, r3
 80018d8:	4153      	adcs	r3, r2
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	001a      	movs	r2, r3
 80018de:	4b99      	ldr	r3, [pc, #612]	@ (8001b44 <UpdateLEDStates+0x278>)
 80018e0:	701a      	strb	r2, [r3, #0]

	// Очищаем буферы каналов


	// Обновляем состояние светодиодов для каждого диска
	for (int i = 0; i < MAX_DISKS; ++i) {
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e224      	b.n	8001d32 <UpdateLEDStates+0x466>
		if (disks[i].isConnected) {
 80018e8:	4b97      	ldr	r3, [pc, #604]	@ (8001b48 <UpdateLEDStates+0x27c>)
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	0092      	lsls	r2, r2, #2
 80018ee:	5cd3      	ldrb	r3, [r2, r3]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d100      	bne.n	80018f6 <UpdateLEDStates+0x2a>
 80018f4:	e21a      	b.n	8001d2c <UpdateLEDStates+0x460>
			// Определяем, какой канал использовать
			uint8_t *channel;
			uint8_t greenBit;
			uint8_t redBit;

			if (i < 8) {
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b07      	cmp	r3, #7
 80018fa:	dc4e      	bgt.n	800199a <UpdateLEDStates+0xce>
				channel = channel_one;
 80018fc:	4b93      	ldr	r3, [pc, #588]	@ (8001b4c <UpdateLEDStates+0x280>)
 80018fe:	60bb      	str	r3, [r7, #8]
				if (i < 4) {
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b03      	cmp	r3, #3
 8001904:	dc24      	bgt.n	8001950 <UpdateLEDStates+0x84>
					// Диски 0-3: первый байт
					greenBit = (i == 0) ? 6 : (i == 1) ? 4 : (i == 2) ? 2 : 1;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00b      	beq.n	8001924 <UpdateLEDStates+0x58>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d006      	beq.n	8001920 <UpdateLEDStates+0x54>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d101      	bne.n	800191c <UpdateLEDStates+0x50>
 8001918:	2302      	movs	r3, #2
 800191a:	e004      	b.n	8001926 <UpdateLEDStates+0x5a>
 800191c:	2301      	movs	r3, #1
 800191e:	e002      	b.n	8001926 <UpdateLEDStates+0x5a>
 8001920:	2304      	movs	r3, #4
 8001922:	e000      	b.n	8001926 <UpdateLEDStates+0x5a>
 8001924:	2306      	movs	r3, #6
 8001926:	1dfa      	adds	r2, r7, #7
 8001928:	7013      	strb	r3, [r2, #0]
					redBit = (i == 0) ? 7 : (i == 1) ? 5 : (i == 2) ? 3 : 0;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00b      	beq.n	8001948 <UpdateLEDStates+0x7c>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d006      	beq.n	8001944 <UpdateLEDStates+0x78>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d101      	bne.n	8001940 <UpdateLEDStates+0x74>
 800193c:	2303      	movs	r3, #3
 800193e:	e004      	b.n	800194a <UpdateLEDStates+0x7e>
 8001940:	2300      	movs	r3, #0
 8001942:	e002      	b.n	800194a <UpdateLEDStates+0x7e>
 8001944:	2305      	movs	r3, #5
 8001946:	e000      	b.n	800194a <UpdateLEDStates+0x7e>
 8001948:	2307      	movs	r3, #7
 800194a:	1dba      	adds	r2, r7, #6
 800194c:	7013      	strb	r3, [r2, #0]
 800194e:	e0c4      	b.n	8001ada <UpdateLEDStates+0x20e>
				} else {
					// Диски 4-7: второй байт
					greenBit = (i == 4) ? 7 : (i == 5) ? 4 : (i == 6) ? 3 : 1;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b04      	cmp	r3, #4
 8001954:	d00b      	beq.n	800196e <UpdateLEDStates+0xa2>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b05      	cmp	r3, #5
 800195a:	d006      	beq.n	800196a <UpdateLEDStates+0x9e>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b06      	cmp	r3, #6
 8001960:	d101      	bne.n	8001966 <UpdateLEDStates+0x9a>
 8001962:	2303      	movs	r3, #3
 8001964:	e004      	b.n	8001970 <UpdateLEDStates+0xa4>
 8001966:	2301      	movs	r3, #1
 8001968:	e002      	b.n	8001970 <UpdateLEDStates+0xa4>
 800196a:	2304      	movs	r3, #4
 800196c:	e000      	b.n	8001970 <UpdateLEDStates+0xa4>
 800196e:	2307      	movs	r3, #7
 8001970:	1dfa      	adds	r2, r7, #7
 8001972:	7013      	strb	r3, [r2, #0]
					redBit = (i == 4) ? 6 : (i == 5) ? 5 : (i == 6) ? 2 : 0;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b04      	cmp	r3, #4
 8001978:	d00b      	beq.n	8001992 <UpdateLEDStates+0xc6>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2b05      	cmp	r3, #5
 800197e:	d006      	beq.n	800198e <UpdateLEDStates+0xc2>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b06      	cmp	r3, #6
 8001984:	d101      	bne.n	800198a <UpdateLEDStates+0xbe>
 8001986:	2302      	movs	r3, #2
 8001988:	e004      	b.n	8001994 <UpdateLEDStates+0xc8>
 800198a:	2300      	movs	r3, #0
 800198c:	e002      	b.n	8001994 <UpdateLEDStates+0xc8>
 800198e:	2305      	movs	r3, #5
 8001990:	e000      	b.n	8001994 <UpdateLEDStates+0xc8>
 8001992:	2306      	movs	r3, #6
 8001994:	1dba      	adds	r2, r7, #6
 8001996:	7013      	strb	r3, [r2, #0]
 8001998:	e09f      	b.n	8001ada <UpdateLEDStates+0x20e>
				}
			} else if (i < 16) {
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2b0f      	cmp	r3, #15
 800199e:	dc4e      	bgt.n	8001a3e <UpdateLEDStates+0x172>
				channel = channel_two;
 80019a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001b50 <UpdateLEDStates+0x284>)
 80019a2:	60bb      	str	r3, [r7, #8]
				if (i < 12) {
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b0b      	cmp	r3, #11
 80019a8:	dc24      	bgt.n	80019f4 <UpdateLEDStates+0x128>
					// Диски 8-11: первый байт
					greenBit = (i == 8) ? 6 : (i == 9) ? 5 : (i == 10) ? 2 : 1;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d00b      	beq.n	80019c8 <UpdateLEDStates+0xfc>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b09      	cmp	r3, #9
 80019b4:	d006      	beq.n	80019c4 <UpdateLEDStates+0xf8>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b0a      	cmp	r3, #10
 80019ba:	d101      	bne.n	80019c0 <UpdateLEDStates+0xf4>
 80019bc:	2302      	movs	r3, #2
 80019be:	e004      	b.n	80019ca <UpdateLEDStates+0xfe>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e002      	b.n	80019ca <UpdateLEDStates+0xfe>
 80019c4:	2305      	movs	r3, #5
 80019c6:	e000      	b.n	80019ca <UpdateLEDStates+0xfe>
 80019c8:	2306      	movs	r3, #6
 80019ca:	1dfa      	adds	r2, r7, #7
 80019cc:	7013      	strb	r3, [r2, #0]
					redBit = (i == 8) ? 7 : (i == 9) ? 4 : (i == 10) ? 3 : 0;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d00b      	beq.n	80019ec <UpdateLEDStates+0x120>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b09      	cmp	r3, #9
 80019d8:	d006      	beq.n	80019e8 <UpdateLEDStates+0x11c>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2b0a      	cmp	r3, #10
 80019de:	d101      	bne.n	80019e4 <UpdateLEDStates+0x118>
 80019e0:	2303      	movs	r3, #3
 80019e2:	e004      	b.n	80019ee <UpdateLEDStates+0x122>
 80019e4:	2300      	movs	r3, #0
 80019e6:	e002      	b.n	80019ee <UpdateLEDStates+0x122>
 80019e8:	2304      	movs	r3, #4
 80019ea:	e000      	b.n	80019ee <UpdateLEDStates+0x122>
 80019ec:	2307      	movs	r3, #7
 80019ee:	1dba      	adds	r2, r7, #6
 80019f0:	7013      	strb	r3, [r2, #0]
 80019f2:	e072      	b.n	8001ada <UpdateLEDStates+0x20e>
				} else {
					// Диски 12-15: второй байт
					greenBit = (i == 12) ? 6 : (i == 13) ? 4 : (i == 14) ? 2 : 1;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d00b      	beq.n	8001a12 <UpdateLEDStates+0x146>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2b0d      	cmp	r3, #13
 80019fe:	d006      	beq.n	8001a0e <UpdateLEDStates+0x142>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b0e      	cmp	r3, #14
 8001a04:	d101      	bne.n	8001a0a <UpdateLEDStates+0x13e>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e004      	b.n	8001a14 <UpdateLEDStates+0x148>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e002      	b.n	8001a14 <UpdateLEDStates+0x148>
 8001a0e:	2304      	movs	r3, #4
 8001a10:	e000      	b.n	8001a14 <UpdateLEDStates+0x148>
 8001a12:	2306      	movs	r3, #6
 8001a14:	1dfa      	adds	r2, r7, #7
 8001a16:	7013      	strb	r3, [r2, #0]
					redBit = (i == 12) ? 7 : (i == 13) ? 5 : (i == 14) ? 3 : 0;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b0c      	cmp	r3, #12
 8001a1c:	d00b      	beq.n	8001a36 <UpdateLEDStates+0x16a>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b0d      	cmp	r3, #13
 8001a22:	d006      	beq.n	8001a32 <UpdateLEDStates+0x166>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b0e      	cmp	r3, #14
 8001a28:	d101      	bne.n	8001a2e <UpdateLEDStates+0x162>
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e004      	b.n	8001a38 <UpdateLEDStates+0x16c>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e002      	b.n	8001a38 <UpdateLEDStates+0x16c>
 8001a32:	2305      	movs	r3, #5
 8001a34:	e000      	b.n	8001a38 <UpdateLEDStates+0x16c>
 8001a36:	2307      	movs	r3, #7
 8001a38:	1dba      	adds	r2, r7, #6
 8001a3a:	7013      	strb	r3, [r2, #0]
 8001a3c:	e04d      	b.n	8001ada <UpdateLEDStates+0x20e>
				}
			} else {
				channel = channel_three;
 8001a3e:	4b45      	ldr	r3, [pc, #276]	@ (8001b54 <UpdateLEDStates+0x288>)
 8001a40:	60bb      	str	r3, [r7, #8]
				if (i < 20) {
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2b13      	cmp	r3, #19
 8001a46:	dc24      	bgt.n	8001a92 <UpdateLEDStates+0x1c6>
					// Диски 16-19: первый байт
					greenBit = (i == 16) ? 7 : (i == 17) ? 5 : (i == 18) ? 3 : 1;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	d00b      	beq.n	8001a66 <UpdateLEDStates+0x19a>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b11      	cmp	r3, #17
 8001a52:	d006      	beq.n	8001a62 <UpdateLEDStates+0x196>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b12      	cmp	r3, #18
 8001a58:	d101      	bne.n	8001a5e <UpdateLEDStates+0x192>
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e004      	b.n	8001a68 <UpdateLEDStates+0x19c>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e002      	b.n	8001a68 <UpdateLEDStates+0x19c>
 8001a62:	2305      	movs	r3, #5
 8001a64:	e000      	b.n	8001a68 <UpdateLEDStates+0x19c>
 8001a66:	2307      	movs	r3, #7
 8001a68:	1dfa      	adds	r2, r7, #7
 8001a6a:	7013      	strb	r3, [r2, #0]
					redBit = (i == 16) ? 6 : (i == 17) ? 4 : (i == 18) ? 2 : 0;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b10      	cmp	r3, #16
 8001a70:	d00b      	beq.n	8001a8a <UpdateLEDStates+0x1be>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2b11      	cmp	r3, #17
 8001a76:	d006      	beq.n	8001a86 <UpdateLEDStates+0x1ba>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d101      	bne.n	8001a82 <UpdateLEDStates+0x1b6>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e004      	b.n	8001a8c <UpdateLEDStates+0x1c0>
 8001a82:	2300      	movs	r3, #0
 8001a84:	e002      	b.n	8001a8c <UpdateLEDStates+0x1c0>
 8001a86:	2304      	movs	r3, #4
 8001a88:	e000      	b.n	8001a8c <UpdateLEDStates+0x1c0>
 8001a8a:	2306      	movs	r3, #6
 8001a8c:	1dba      	adds	r2, r7, #6
 8001a8e:	7013      	strb	r3, [r2, #0]
 8001a90:	e023      	b.n	8001ada <UpdateLEDStates+0x20e>
				} else {
					// Диски 20-23: второй байт
					greenBit = (i == 20) ? 6 : (i == 21) ? 4 : (i == 22) ? 2 : 1;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2b14      	cmp	r3, #20
 8001a96:	d00b      	beq.n	8001ab0 <UpdateLEDStates+0x1e4>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b15      	cmp	r3, #21
 8001a9c:	d006      	beq.n	8001aac <UpdateLEDStates+0x1e0>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b16      	cmp	r3, #22
 8001aa2:	d101      	bne.n	8001aa8 <UpdateLEDStates+0x1dc>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e004      	b.n	8001ab2 <UpdateLEDStates+0x1e6>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e002      	b.n	8001ab2 <UpdateLEDStates+0x1e6>
 8001aac:	2304      	movs	r3, #4
 8001aae:	e000      	b.n	8001ab2 <UpdateLEDStates+0x1e6>
 8001ab0:	2306      	movs	r3, #6
 8001ab2:	1dfa      	adds	r2, r7, #7
 8001ab4:	7013      	strb	r3, [r2, #0]
					redBit = (i == 20) ? 7 : (i == 21) ? 5 : (i == 22) ? 3 : 0;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2b14      	cmp	r3, #20
 8001aba:	d00b      	beq.n	8001ad4 <UpdateLEDStates+0x208>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b15      	cmp	r3, #21
 8001ac0:	d006      	beq.n	8001ad0 <UpdateLEDStates+0x204>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b16      	cmp	r3, #22
 8001ac6:	d101      	bne.n	8001acc <UpdateLEDStates+0x200>
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e004      	b.n	8001ad6 <UpdateLEDStates+0x20a>
 8001acc:	2300      	movs	r3, #0
 8001ace:	e002      	b.n	8001ad6 <UpdateLEDStates+0x20a>
 8001ad0:	2305      	movs	r3, #5
 8001ad2:	e000      	b.n	8001ad6 <UpdateLEDStates+0x20a>
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	1dba      	adds	r2, r7, #6
 8001ad8:	7013      	strb	r3, [r2, #0]
				}
			}
			uint8_t byteIndex = (i < 4 || (i >= 8 && i < 12) || (i >= 16 && i < 20)) ? 2 : 1;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	dd0b      	ble.n	8001af8 <UpdateLEDStates+0x22c>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b07      	cmp	r3, #7
 8001ae4:	dd02      	ble.n	8001aec <UpdateLEDStates+0x220>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2b0b      	cmp	r3, #11
 8001aea:	dd05      	ble.n	8001af8 <UpdateLEDStates+0x22c>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b0f      	cmp	r3, #15
 8001af0:	dd04      	ble.n	8001afc <UpdateLEDStates+0x230>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b13      	cmp	r3, #19
 8001af6:	dc01      	bgt.n	8001afc <UpdateLEDStates+0x230>
 8001af8:	2202      	movs	r2, #2
 8001afa:	e000      	b.n	8001afe <UpdateLEDStates+0x232>
 8001afc:	2201      	movs	r2, #1
 8001afe:	1d7b      	adds	r3, r7, #5
 8001b00:	701a      	strb	r2, [r3, #0]
			// Управление светодиодами
			if (disks[i].error) {
 8001b02:	4a11      	ldr	r2, [pc, #68]	@ (8001b48 <UpdateLEDStates+0x27c>)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	18d3      	adds	r3, r2, r3
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d022      	beq.n	8001b58 <UpdateLEDStates+0x28c>
				// Ошибка: красный светодиод горит постоянно
				channel[byteIndex] &= ~(1 << (redBit % 8)); // Включаем красный светодиод
 8001b12:	1d7b      	adds	r3, r7, #5
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	18d3      	adds	r3, r2, r3
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b25b      	sxtb	r3, r3
 8001b1e:	1dba      	adds	r2, r7, #6
 8001b20:	7812      	ldrb	r2, [r2, #0]
 8001b22:	2107      	movs	r1, #7
 8001b24:	400a      	ands	r2, r1
 8001b26:	2101      	movs	r1, #1
 8001b28:	4091      	lsls	r1, r2
 8001b2a:	000a      	movs	r2, r1
 8001b2c:	b252      	sxtb	r2, r2
 8001b2e:	43d2      	mvns	r2, r2
 8001b30:	b252      	sxtb	r2, r2
 8001b32:	4013      	ands	r3, r2
 8001b34:	b259      	sxtb	r1, r3
 8001b36:	1d7b      	adds	r3, r7, #5
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	18d3      	adds	r3, r2, r3
 8001b3e:	b2ca      	uxtb	r2, r1
 8001b40:	701a      	strb	r2, [r3, #0]
 8001b42:	e0f3      	b.n	8001d2c <UpdateLEDStates+0x460>
 8001b44:	200003c8 	.word	0x200003c8
 8001b48:	20000298 	.word	0x20000298
 8001b4c:	20000060 	.word	0x20000060
 8001b50:	20000064 	.word	0x20000064
 8001b54:	20000068 	.word	0x20000068
			} else if (disks[i].locate) {
 8001b58:	4a7b      	ldr	r2, [pc, #492]	@ (8001d48 <UpdateLEDStates+0x47c>)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	18d3      	adds	r3, r2, r3
 8001b60:	3303      	adds	r3, #3
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d061      	beq.n	8001c2c <UpdateLEDStates+0x360>
				// Локация: зеленый и красный светодиоды мигают
				if (blinkState) {
 8001b68:	4b78      	ldr	r3, [pc, #480]	@ (8001d4c <UpdateLEDStates+0x480>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d030      	beq.n	8001bd2 <UpdateLEDStates+0x306>
					channel[byteIndex] &= ~(1 << (greenBit % 8)); // Включаем зеленый светодиод
 8001b70:	1d7b      	adds	r3, r7, #5
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	18d3      	adds	r3, r2, r3
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	b25b      	sxtb	r3, r3
 8001b7c:	1dfa      	adds	r2, r7, #7
 8001b7e:	7812      	ldrb	r2, [r2, #0]
 8001b80:	2107      	movs	r1, #7
 8001b82:	400a      	ands	r2, r1
 8001b84:	2101      	movs	r1, #1
 8001b86:	4091      	lsls	r1, r2
 8001b88:	000a      	movs	r2, r1
 8001b8a:	b252      	sxtb	r2, r2
 8001b8c:	43d2      	mvns	r2, r2
 8001b8e:	b252      	sxtb	r2, r2
 8001b90:	4013      	ands	r3, r2
 8001b92:	b259      	sxtb	r1, r3
 8001b94:	1d7b      	adds	r3, r7, #5
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	18d3      	adds	r3, r2, r3
 8001b9c:	b2ca      	uxtb	r2, r1
 8001b9e:	701a      	strb	r2, [r3, #0]
					channel[byteIndex] &= ~(1 << (redBit % 8)); // Включаем красный светодиод
 8001ba0:	1d7b      	adds	r3, r7, #5
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	18d3      	adds	r3, r2, r3
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b25b      	sxtb	r3, r3
 8001bac:	1dba      	adds	r2, r7, #6
 8001bae:	7812      	ldrb	r2, [r2, #0]
 8001bb0:	2107      	movs	r1, #7
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	4091      	lsls	r1, r2
 8001bb8:	000a      	movs	r2, r1
 8001bba:	b252      	sxtb	r2, r2
 8001bbc:	43d2      	mvns	r2, r2
 8001bbe:	b252      	sxtb	r2, r2
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	b259      	sxtb	r1, r3
 8001bc4:	1d7b      	adds	r3, r7, #5
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	18d3      	adds	r3, r2, r3
 8001bcc:	b2ca      	uxtb	r2, r1
 8001bce:	701a      	strb	r2, [r3, #0]
 8001bd0:	e0ac      	b.n	8001d2c <UpdateLEDStates+0x460>
				} else {
					channel[byteIndex] |= (1 << (greenBit % 8));  // Выключаем зеленый светодиод
 8001bd2:	1d7b      	adds	r3, r7, #5
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	18d3      	adds	r3, r2, r3
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	b25a      	sxtb	r2, r3
 8001bde:	1dfb      	adds	r3, r7, #7
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2107      	movs	r1, #7
 8001be4:	400b      	ands	r3, r1
 8001be6:	2101      	movs	r1, #1
 8001be8:	4099      	lsls	r1, r3
 8001bea:	000b      	movs	r3, r1
 8001bec:	b25b      	sxtb	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b259      	sxtb	r1, r3
 8001bf2:	1d7b      	adds	r3, r7, #5
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	18d3      	adds	r3, r2, r3
 8001bfa:	b2ca      	uxtb	r2, r1
 8001bfc:	701a      	strb	r2, [r3, #0]
					channel[byteIndex] |= (1 << (redBit % 8));  // Выключаем красный светодиод
 8001bfe:	1d7b      	adds	r3, r7, #5
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	18d3      	adds	r3, r2, r3
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b25a      	sxtb	r2, r3
 8001c0a:	1dbb      	adds	r3, r7, #6
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2107      	movs	r1, #7
 8001c10:	400b      	ands	r3, r1
 8001c12:	2101      	movs	r1, #1
 8001c14:	4099      	lsls	r1, r3
 8001c16:	000b      	movs	r3, r1
 8001c18:	b25b      	sxtb	r3, r3
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b259      	sxtb	r1, r3
 8001c1e:	1d7b      	adds	r3, r7, #5
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	18d3      	adds	r3, r2, r3
 8001c26:	b2ca      	uxtb	r2, r1
 8001c28:	701a      	strb	r2, [r3, #0]
 8001c2a:	e07f      	b.n	8001d2c <UpdateLEDStates+0x460>
				}
			} else if (disks[i].activity) {
 8001c2c:	4a46      	ldr	r2, [pc, #280]	@ (8001d48 <UpdateLEDStates+0x47c>)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	18d3      	adds	r3, r2, r3
 8001c34:	3301      	adds	r3, #1
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d033      	beq.n	8001ca4 <UpdateLEDStates+0x3d8>
				// Активность: зеленый светодиод мигает
				if (blinkState) {
 8001c3c:	4b43      	ldr	r3, [pc, #268]	@ (8001d4c <UpdateLEDStates+0x480>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d018      	beq.n	8001c76 <UpdateLEDStates+0x3aa>
					channel[byteIndex] &= ~(1 << (greenBit % 8)); // Включаем зеленый светодиод
 8001c44:	1d7b      	adds	r3, r7, #5
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	18d3      	adds	r3, r2, r3
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	1dfa      	adds	r2, r7, #7
 8001c52:	7812      	ldrb	r2, [r2, #0]
 8001c54:	2107      	movs	r1, #7
 8001c56:	400a      	ands	r2, r1
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4091      	lsls	r1, r2
 8001c5c:	000a      	movs	r2, r1
 8001c5e:	b252      	sxtb	r2, r2
 8001c60:	43d2      	mvns	r2, r2
 8001c62:	b252      	sxtb	r2, r2
 8001c64:	4013      	ands	r3, r2
 8001c66:	b259      	sxtb	r1, r3
 8001c68:	1d7b      	adds	r3, r7, #5
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	18d3      	adds	r3, r2, r3
 8001c70:	b2ca      	uxtb	r2, r1
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	e05a      	b.n	8001d2c <UpdateLEDStates+0x460>
				} else {
					channel[byteIndex] |= (1 << (greenBit % 8));  // Выключаем зеленый светодиод
 8001c76:	1d7b      	adds	r3, r7, #5
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	18d3      	adds	r3, r2, r3
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b25a      	sxtb	r2, r3
 8001c82:	1dfb      	adds	r3, r7, #7
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2107      	movs	r1, #7
 8001c88:	400b      	ands	r3, r1
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	4099      	lsls	r1, r3
 8001c8e:	000b      	movs	r3, r1
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	4313      	orrs	r3, r2
 8001c94:	b259      	sxtb	r1, r3
 8001c96:	1d7b      	adds	r3, r7, #5
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	18d3      	adds	r3, r2, r3
 8001c9e:	b2ca      	uxtb	r2, r1
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	e043      	b.n	8001d2c <UpdateLEDStates+0x460>
				}
			} else if (disks[i].error == 0 && disks[i].locate == 0 && disks[i].activity == 0)
 8001ca4:	4a28      	ldr	r2, [pc, #160]	@ (8001d48 <UpdateLEDStates+0x47c>)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	18d3      	adds	r3, r2, r3
 8001cac:	3302      	adds	r3, #2
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d13b      	bne.n	8001d2c <UpdateLEDStates+0x460>
 8001cb4:	4a24      	ldr	r2, [pc, #144]	@ (8001d48 <UpdateLEDStates+0x47c>)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	18d3      	adds	r3, r2, r3
 8001cbc:	3303      	adds	r3, #3
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d133      	bne.n	8001d2c <UpdateLEDStates+0x460>
 8001cc4:	4a20      	ldr	r2, [pc, #128]	@ (8001d48 <UpdateLEDStates+0x47c>)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	18d3      	adds	r3, r2, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d12b      	bne.n	8001d2c <UpdateLEDStates+0x460>
			{
				channel[byteIndex] |= (1 << (greenBit % 8));  // Выключаем зеленый светодиод
 8001cd4:	1d7b      	adds	r3, r7, #5
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	18d3      	adds	r3, r2, r3
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b25a      	sxtb	r2, r3
 8001ce0:	1dfb      	adds	r3, r7, #7
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2107      	movs	r1, #7
 8001ce6:	400b      	ands	r3, r1
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4099      	lsls	r1, r3
 8001cec:	000b      	movs	r3, r1
 8001cee:	b25b      	sxtb	r3, r3
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	b259      	sxtb	r1, r3
 8001cf4:	1d7b      	adds	r3, r7, #5
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	18d3      	adds	r3, r2, r3
 8001cfc:	b2ca      	uxtb	r2, r1
 8001cfe:	701a      	strb	r2, [r3, #0]
				channel[byteIndex] |= (1 << (redBit % 8));  // Выключаем красный светодиод
 8001d00:	1d7b      	adds	r3, r7, #5
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	18d3      	adds	r3, r2, r3
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	b25a      	sxtb	r2, r3
 8001d0c:	1dbb      	adds	r3, r7, #6
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2107      	movs	r1, #7
 8001d12:	400b      	ands	r3, r1
 8001d14:	2101      	movs	r1, #1
 8001d16:	4099      	lsls	r1, r3
 8001d18:	000b      	movs	r3, r1
 8001d1a:	b25b      	sxtb	r3, r3
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	b259      	sxtb	r1, r3
 8001d20:	1d7b      	adds	r3, r7, #5
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	18d3      	adds	r3, r2, r3
 8001d28:	b2ca      	uxtb	r2, r1
 8001d2a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_DISKS; ++i) {
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b17      	cmp	r3, #23
 8001d36:	dc00      	bgt.n	8001d3a <UpdateLEDStates+0x46e>
 8001d38:	e5d6      	b.n	80018e8 <UpdateLEDStates+0x1c>
			}
		}
	}

	// Обновляем светодиоды на расширителе
	Set_Led();
 8001d3a:	f7ff fa2b 	bl	8001194 <Set_Led>
}
 8001d3e:	46c0      	nop			@ (mov r8, r8)
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b004      	add	sp, #16
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	20000298 	.word	0x20000298
 8001d4c:	200003c8 	.word	0x200003c8

08001d50 <InitializeDiskPins>:

void InitializeDiskPins()

{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
	// Диск 0
	diskPins[0].activPort = F_DRIVE1_ACTIVITY_GPIO_Port;
 8001d54:	4b5c      	ldr	r3, [pc, #368]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001d56:	4a5d      	ldr	r2, [pc, #372]	@ (8001ecc <InitializeDiskPins+0x17c>)
 8001d58:	601a      	str	r2, [r3, #0]
	diskPins[0].activPin = F_DRIVE1_ACTIVITY_Pin;
 8001d5a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001d5c:	2240      	movs	r2, #64	@ 0x40
 8001d5e:	809a      	strh	r2, [r3, #4]
	// Диск 1
	diskPins[1].activPort = F_DRIVE2_ACTIVITY_GPIO_Port;
 8001d60:	4b59      	ldr	r3, [pc, #356]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001d62:	4a5a      	ldr	r2, [pc, #360]	@ (8001ecc <InitializeDiskPins+0x17c>)
 8001d64:	609a      	str	r2, [r3, #8]
	diskPins[1].activPin = F_DRIVE2_ACTIVITY_Pin;
 8001d66:	4b58      	ldr	r3, [pc, #352]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001d68:	2220      	movs	r2, #32
 8001d6a:	819a      	strh	r2, [r3, #12]
	// Диск 2
	diskPins[2].activPort = F_DRIVE3_ACTIVITY_GPIO_Port;
 8001d6c:	4b56      	ldr	r3, [pc, #344]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001d6e:	4a57      	ldr	r2, [pc, #348]	@ (8001ecc <InitializeDiskPins+0x17c>)
 8001d70:	611a      	str	r2, [r3, #16]
	diskPins[2].activPin = F_DRIVE3_ACTIVITY_Pin;
 8001d72:	4b55      	ldr	r3, [pc, #340]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001d74:	2210      	movs	r2, #16
 8001d76:	829a      	strh	r2, [r3, #20]
	// �? так далее для остальных дисков...
	diskPins[3].activPort = F_DRIVE4_ACTIVITY_GPIO_Port;
 8001d78:	4b53      	ldr	r3, [pc, #332]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001d7a:	4a54      	ldr	r2, [pc, #336]	@ (8001ecc <InitializeDiskPins+0x17c>)
 8001d7c:	619a      	str	r2, [r3, #24]
	diskPins[3].activPin = F_DRIVE4_ACTIVITY_Pin;
 8001d7e:	4b52      	ldr	r3, [pc, #328]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001d80:	2208      	movs	r2, #8
 8001d82:	839a      	strh	r2, [r3, #28]
	diskPins[4].activPort = E_DRIVE1_ACTIVITY_GPIO_Port;
 8001d84:	4b50      	ldr	r3, [pc, #320]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001d86:	4a52      	ldr	r2, [pc, #328]	@ (8001ed0 <InitializeDiskPins+0x180>)
 8001d88:	621a      	str	r2, [r3, #32]
	diskPins[4].activPin = E_DRIVE1_ACTIVITY_Pin;
 8001d8a:	4b4f      	ldr	r3, [pc, #316]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001d8c:	2280      	movs	r2, #128	@ 0x80
 8001d8e:	00d2      	lsls	r2, r2, #3
 8001d90:	849a      	strh	r2, [r3, #36]	@ 0x24
	diskPins[5].activPort = E_DRIVE2_ACTIVITY_GPIO_Port;
 8001d92:	4b4d      	ldr	r3, [pc, #308]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001d94:	4a4d      	ldr	r2, [pc, #308]	@ (8001ecc <InitializeDiskPins+0x17c>)
 8001d96:	629a      	str	r2, [r3, #40]	@ 0x28
	diskPins[5].activPin = E_DRIVE2_ACTIVITY_Pin;
 8001d98:	4b4b      	ldr	r3, [pc, #300]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001d9a:	2280      	movs	r2, #128	@ 0x80
 8001d9c:	0092      	lsls	r2, r2, #2
 8001d9e:	859a      	strh	r2, [r3, #44]	@ 0x2c
	diskPins[6].activPort = E_DRIVE3_ACTIVITY_GPIO_Port;
 8001da0:	4b49      	ldr	r3, [pc, #292]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001da2:	4a4a      	ldr	r2, [pc, #296]	@ (8001ecc <InitializeDiskPins+0x17c>)
 8001da4:	631a      	str	r2, [r3, #48]	@ 0x30
	diskPins[6].activPin = E_DRIVE3_ACTIVITY_Pin;
 8001da6:	4b48      	ldr	r3, [pc, #288]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001da8:	2280      	movs	r2, #128	@ 0x80
 8001daa:	0052      	lsls	r2, r2, #1
 8001dac:	869a      	strh	r2, [r3, #52]	@ 0x34
	diskPins[7].activPort = E_DRIVE4_ACTIVITY_GPIO_Port;
 8001dae:	4b46      	ldr	r3, [pc, #280]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001db0:	4a46      	ldr	r2, [pc, #280]	@ (8001ecc <InitializeDiskPins+0x17c>)
 8001db2:	639a      	str	r2, [r3, #56]	@ 0x38
	diskPins[7].activPin = E_DRIVE4_ACTIVITY_Pin;
 8001db4:	4b44      	ldr	r3, [pc, #272]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001db6:	2280      	movs	r2, #128	@ 0x80
 8001db8:	879a      	strh	r2, [r3, #60]	@ 0x3c
	diskPins[8].activPort = D_DRIVE1_ACTIVITY_GPIO_Port;
 8001dba:	4b43      	ldr	r3, [pc, #268]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001dbc:	22a0      	movs	r2, #160	@ 0xa0
 8001dbe:	05d2      	lsls	r2, r2, #23
 8001dc0:	641a      	str	r2, [r3, #64]	@ 0x40
	diskPins[8].activPin = D_DRIVE1_ACTIVITY_Pin;
 8001dc2:	4b41      	ldr	r3, [pc, #260]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001dc4:	2244      	movs	r2, #68	@ 0x44
 8001dc6:	2180      	movs	r1, #128	@ 0x80
 8001dc8:	00c9      	lsls	r1, r1, #3
 8001dca:	5299      	strh	r1, [r3, r2]
	diskPins[9].activPort = D_DRIVE2_ACTIVITY_GPIO_Port;
 8001dcc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001dce:	22a0      	movs	r2, #160	@ 0xa0
 8001dd0:	05d2      	lsls	r2, r2, #23
 8001dd2:	649a      	str	r2, [r3, #72]	@ 0x48
	diskPins[9].activPin = D_DRIVE2_ACTIVITY_Pin;
 8001dd4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001dd6:	224c      	movs	r2, #76	@ 0x4c
 8001dd8:	2180      	movs	r1, #128	@ 0x80
 8001dda:	0109      	lsls	r1, r1, #4
 8001ddc:	5299      	strh	r1, [r3, r2]
	diskPins[10].activPort = D_DRIVE3_ACTIVITY_GPIO_Port;
 8001dde:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001de0:	22a0      	movs	r2, #160	@ 0xa0
 8001de2:	05d2      	lsls	r2, r2, #23
 8001de4:	651a      	str	r2, [r3, #80]	@ 0x50
	diskPins[10].activPin = D_DRIVE3_ACTIVITY_Pin;
 8001de6:	4b38      	ldr	r3, [pc, #224]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001de8:	2254      	movs	r2, #84	@ 0x54
 8001dea:	2180      	movs	r1, #128	@ 0x80
 8001dec:	0149      	lsls	r1, r1, #5
 8001dee:	5299      	strh	r1, [r3, r2]
	diskPins[11].activPort = D_DRIVE4_ACTIVITY_GPIO_Port;
 8001df0:	4b35      	ldr	r3, [pc, #212]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001df2:	4a37      	ldr	r2, [pc, #220]	@ (8001ed0 <InitializeDiskPins+0x180>)
 8001df4:	659a      	str	r2, [r3, #88]	@ 0x58
	diskPins[11].activPin = D_DRIVE4_ACTIVITY_Pin;
 8001df6:	4b34      	ldr	r3, [pc, #208]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001df8:	225c      	movs	r2, #92	@ 0x5c
 8001dfa:	4936      	ldr	r1, [pc, #216]	@ (8001ed4 <InitializeDiskPins+0x184>)
 8001dfc:	5299      	strh	r1, [r3, r2]
	diskPins[12].activPort = C_DRIVE1_ACTIVITY_GPIO_Port;
 8001dfe:	4b32      	ldr	r3, [pc, #200]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e00:	4a33      	ldr	r2, [pc, #204]	@ (8001ed0 <InitializeDiskPins+0x180>)
 8001e02:	661a      	str	r2, [r3, #96]	@ 0x60
	diskPins[12].activPin = C_DRIVE1_ACTIVITY_Pin;
 8001e04:	4b30      	ldr	r3, [pc, #192]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e06:	2264      	movs	r2, #100	@ 0x64
 8001e08:	2140      	movs	r1, #64	@ 0x40
 8001e0a:	5299      	strh	r1, [r3, r2]
	diskPins[13].activPort = C_DRIVE2_ACTIVITY_GPIO_Port;
 8001e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e0e:	4a30      	ldr	r2, [pc, #192]	@ (8001ed0 <InitializeDiskPins+0x180>)
 8001e10:	669a      	str	r2, [r3, #104]	@ 0x68
	diskPins[13].activPin = C_DRIVE2_ACTIVITY_Pin;
 8001e12:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e14:	226c      	movs	r2, #108	@ 0x6c
 8001e16:	2180      	movs	r1, #128	@ 0x80
 8001e18:	5299      	strh	r1, [r3, r2]
	diskPins[14].activPort = C_DRIVE3_ACTIVITY_GPIO_Port;
 8001e1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001ed8 <InitializeDiskPins+0x188>)
 8001e1e:	671a      	str	r2, [r3, #112]	@ 0x70
	diskPins[14].activPin = C_DRIVE3_ACTIVITY_Pin;
 8001e20:	4b29      	ldr	r3, [pc, #164]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e22:	2274      	movs	r2, #116	@ 0x74
 8001e24:	2180      	movs	r1, #128	@ 0x80
 8001e26:	0049      	lsls	r1, r1, #1
 8001e28:	5299      	strh	r1, [r3, r2]
	diskPins[15].activPort = C_DRIVE4_ACTIVITY_GPIO_Port;
 8001e2a:	4b27      	ldr	r3, [pc, #156]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ed8 <InitializeDiskPins+0x188>)
 8001e2e:	679a      	str	r2, [r3, #120]	@ 0x78
	diskPins[15].activPin = C_DRIVE4_ACTIVITY_Pin;
 8001e30:	4b25      	ldr	r3, [pc, #148]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e32:	227c      	movs	r2, #124	@ 0x7c
 8001e34:	2180      	movs	r1, #128	@ 0x80
 8001e36:	0089      	lsls	r1, r1, #2
 8001e38:	5299      	strh	r1, [r3, r2]
	diskPins[16].activPort = B_DRIVE1_ACTIVITY_GPIO_Port;
 8001e3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e3c:	2180      	movs	r1, #128	@ 0x80
 8001e3e:	22a0      	movs	r2, #160	@ 0xa0
 8001e40:	05d2      	lsls	r2, r2, #23
 8001e42:	505a      	str	r2, [r3, r1]
	diskPins[16].activPin = B_DRIVE1_ACTIVITY_Pin;
 8001e44:	4b20      	ldr	r3, [pc, #128]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e46:	2284      	movs	r2, #132	@ 0x84
 8001e48:	2180      	movs	r1, #128	@ 0x80
 8001e4a:	0089      	lsls	r1, r1, #2
 8001e4c:	5299      	strh	r1, [r3, r2]
	diskPins[17].activPort = B_DRIVE2_ACTIVITY_GPIO_Port;
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e50:	2288      	movs	r2, #136	@ 0x88
 8001e52:	491f      	ldr	r1, [pc, #124]	@ (8001ed0 <InitializeDiskPins+0x180>)
 8001e54:	5099      	str	r1, [r3, r2]
	diskPins[17].activPin = B_DRIVE2_ACTIVITY_Pin;
 8001e56:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e58:	228c      	movs	r2, #140	@ 0x8c
 8001e5a:	2108      	movs	r1, #8
 8001e5c:	5299      	strh	r1, [r3, r2]
	diskPins[18].activPort = B_DRIVE3_ACTIVITY_GPIO_Port;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e60:	2290      	movs	r2, #144	@ 0x90
 8001e62:	491b      	ldr	r1, [pc, #108]	@ (8001ed0 <InitializeDiskPins+0x180>)
 8001e64:	5099      	str	r1, [r3, r2]
	diskPins[18].activPin = B_DRIVE3_ACTIVITY_Pin;
 8001e66:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e68:	2294      	movs	r2, #148	@ 0x94
 8001e6a:	2104      	movs	r1, #4
 8001e6c:	5299      	strh	r1, [r3, r2]
	diskPins[19].activPort = B_DRIVE4_ACTIVITY_GPIO_Port;
 8001e6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e70:	2298      	movs	r2, #152	@ 0x98
 8001e72:	4917      	ldr	r1, [pc, #92]	@ (8001ed0 <InitializeDiskPins+0x180>)
 8001e74:	5099      	str	r1, [r3, r2]
	diskPins[19].activPin = B_DRIVE4_ACTIVITY_Pin;
 8001e76:	4b14      	ldr	r3, [pc, #80]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e78:	229c      	movs	r2, #156	@ 0x9c
 8001e7a:	2102      	movs	r1, #2
 8001e7c:	5299      	strh	r1, [r3, r2]
	diskPins[20].activPort = A_DRIVE1_ACTIVITY_GPIO_Port;
 8001e7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e80:	22a0      	movs	r2, #160	@ 0xa0
 8001e82:	4912      	ldr	r1, [pc, #72]	@ (8001ecc <InitializeDiskPins+0x17c>)
 8001e84:	5099      	str	r1, [r3, r2]
	diskPins[20].activPin = A_DRIVE1_ACTIVITY_Pin;
 8001e86:	4b10      	ldr	r3, [pc, #64]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e88:	22a4      	movs	r2, #164	@ 0xa4
 8001e8a:	2180      	movs	r1, #128	@ 0x80
 8001e8c:	0189      	lsls	r1, r1, #6
 8001e8e:	5299      	strh	r1, [r3, r2]
	diskPins[21].activPort = A_DRIVE2_ACTIVITY_GPIO_Port;
 8001e90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e92:	22a8      	movs	r2, #168	@ 0xa8
 8001e94:	490d      	ldr	r1, [pc, #52]	@ (8001ecc <InitializeDiskPins+0x17c>)
 8001e96:	5099      	str	r1, [r3, r2]
	diskPins[21].activPin = A_DRIVE2_ACTIVITY_Pin;
 8001e98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001e9a:	22ac      	movs	r2, #172	@ 0xac
 8001e9c:	2180      	movs	r1, #128	@ 0x80
 8001e9e:	01c9      	lsls	r1, r1, #7
 8001ea0:	5299      	strh	r1, [r3, r2]
	diskPins[22].activPort = A_DRIVE3_ACTIVITY_GPIO_Port;
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001ea4:	22b0      	movs	r2, #176	@ 0xb0
 8001ea6:	4909      	ldr	r1, [pc, #36]	@ (8001ecc <InitializeDiskPins+0x17c>)
 8001ea8:	5099      	str	r1, [r3, r2]
	diskPins[22].activPin = A_DRIVE3_ACTIVITY_Pin;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001eac:	22b4      	movs	r2, #180	@ 0xb4
 8001eae:	4909      	ldr	r1, [pc, #36]	@ (8001ed4 <InitializeDiskPins+0x184>)
 8001eb0:	5299      	strh	r1, [r3, r2]
	diskPins[23].activPort = A_DRIVE3_ACTIVITY_GPIO_Port;
 8001eb2:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001eb4:	22b8      	movs	r2, #184	@ 0xb8
 8001eb6:	4905      	ldr	r1, [pc, #20]	@ (8001ecc <InitializeDiskPins+0x17c>)
 8001eb8:	5099      	str	r1, [r3, r2]
	diskPins[23].activPin = A_DRIVE3_ACTIVITY_Pin;
 8001eba:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <InitializeDiskPins+0x178>)
 8001ebc:	22bc      	movs	r2, #188	@ 0xbc
 8001ebe:	4905      	ldr	r1, [pc, #20]	@ (8001ed4 <InitializeDiskPins+0x184>)
 8001ec0:	5299      	strh	r1, [r3, r2]

}
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	200002f8 	.word	0x200002f8
 8001ecc:	50000400 	.word	0x50000400
 8001ed0:	50000800 	.word	0x50000800
 8001ed4:	ffff8000 	.word	0xffff8000
 8001ed8:	50000c00 	.word	0x50000c00

08001edc <PowerOnAdapter>:



void PowerOnAdapter(uint8_t adapter_number)
{
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	1dfb      	adds	r3, r7, #7
 8001ee6:	701a      	strb	r2, [r3, #0]
	uint8_t i2c_buffer[1]; // Буфер для передачи данных по I2C

	if (adapter_number == 1 && adapter1_state != 1) {
 8001ee8:	1dfb      	adds	r3, r7, #7
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d000      	beq.n	8001ef2 <PowerOnAdapter+0x16>
 8001ef0:	e083      	b.n	8001ffa <PowerOnAdapter+0x11e>
 8001ef2:	4b7b      	ldr	r3, [pc, #492]	@ (80020e0 <PowerOnAdapter+0x204>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d100      	bne.n	8001efc <PowerOnAdapter+0x20>
 8001efa:	e07e      	b.n	8001ffa <PowerOnAdapter+0x11e>
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 8001efc:	4b79      	ldr	r3, [pc, #484]	@ (80020e4 <PowerOnAdapter+0x208>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	2110      	movs	r1, #16
 8001f02:	0018      	movs	r0, r3
 8001f04:	f001 fa65 	bl	80033d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MB1_STATUS_LED_GPIO_Port, MB1_STATUS_LED_Pin, SET);
 8001f08:	23a0      	movs	r3, #160	@ 0xa0
 8001f0a:	05db      	lsls	r3, r3, #23
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2110      	movs	r1, #16
 8001f10:	0018      	movs	r0, r3
 8001f12:	f001 fa5e 	bl	80033d2 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001f16:	2064      	movs	r0, #100	@ 0x64
 8001f18:	f000 fdd6 	bl	8002ac8 <HAL_Delay>
		ResetBus();
 8001f1c:	f7ff f8c0 	bl	80010a0 <ResetBus>
		if(BP_ON == 0) Led_Init();
 8001f20:	4b71      	ldr	r3, [pc, #452]	@ (80020e8 <PowerOnAdapter+0x20c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <PowerOnAdapter+0x50>
 8001f28:	f7ff fa0e 	bl	8001348 <Led_Init>
		HAL_Delay(300);
 8001f2c:	2396      	movs	r3, #150	@ 0x96
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	0018      	movs	r0, r3
 8001f32:	f000 fdc9 	bl	8002ac8 <HAL_Delay>
		// Подготовка команды для передачи по I2C
		i2c_buffer[0] = PWR_ON; // �?спользуем значение из enum
 8001f36:	230c      	movs	r3, #12
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 8001f3e:	23fa      	movs	r3, #250	@ 0xfa
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	0018      	movs	r0, r3
 8001f44:	f000 fdc0 	bl	8002ac8 <HAL_Delay>
		while (HAL_I2C_IsDeviceReady(&hi2c2, (I2C_adapter_adr << 1), 10, HAL_MAX_DELAY) != HAL_OK)
 8001f48:	46c0      	nop			@ (mov r8, r8)
 8001f4a:	4b68      	ldr	r3, [pc, #416]	@ (80020ec <PowerOnAdapter+0x210>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	18db      	adds	r3, r3, r3
 8001f50:	b299      	uxth	r1, r3
 8001f52:	2301      	movs	r3, #1
 8001f54:	425b      	negs	r3, r3
 8001f56:	4866      	ldr	r0, [pc, #408]	@ (80020f0 <PowerOnAdapter+0x214>)
 8001f58:	220a      	movs	r2, #10
 8001f5a:	f001 fe97 	bl	8003c8c <HAL_I2C_IsDeviceReady>
 8001f5e:	1e03      	subs	r3, r0, #0
 8001f60:	d1f3      	bne.n	8001f4a <PowerOnAdapter+0x6e>
			{
			}
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_2, 1, HAL_MAX_DELAY);
 8001f62:	4b62      	ldr	r3, [pc, #392]	@ (80020ec <PowerOnAdapter+0x210>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	18db      	adds	r3, r3, r3
 8001f68:	b299      	uxth	r1, r3
 8001f6a:	4a62      	ldr	r2, [pc, #392]	@ (80020f4 <PowerOnAdapter+0x218>)
 8001f6c:	4860      	ldr	r0, [pc, #384]	@ (80020f0 <PowerOnAdapter+0x214>)
 8001f6e:	2301      	movs	r3, #1
 8001f70:	425b      	negs	r3, r3
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2301      	movs	r3, #1
 8001f76:	f001 fb23 	bl	80035c0 <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 8001f7a:	2032      	movs	r0, #50	@ 0x32
 8001f7c:	f000 fda4 	bl	8002ac8 <HAL_Delay>
		while (HAL_I2C_IsDeviceReady(&hi2c2, (0x25 << 1), 10, HAL_MAX_DELAY) != HAL_OK)
 8001f80:	46c0      	nop			@ (mov r8, r8)
 8001f82:	2301      	movs	r3, #1
 8001f84:	425b      	negs	r3, r3
 8001f86:	485a      	ldr	r0, [pc, #360]	@ (80020f0 <PowerOnAdapter+0x214>)
 8001f88:	220a      	movs	r2, #10
 8001f8a:	214a      	movs	r1, #74	@ 0x4a
 8001f8c:	f001 fe7e 	bl	8003c8c <HAL_I2C_IsDeviceReady>
 8001f90:	1e03      	subs	r3, r0, #0
 8001f92:	d1f6      	bne.n	8001f82 <PowerOnAdapter+0xa6>
			{
			}
		HAL_I2C_Master_Transmit(&hi2c2, (0x25 << 1), i2c_buffer, 1, HAL_MAX_DELAY); // Передаём буфер
 8001f94:	230c      	movs	r3, #12
 8001f96:	18fa      	adds	r2, r7, r3
 8001f98:	4855      	ldr	r0, [pc, #340]	@ (80020f0 <PowerOnAdapter+0x214>)
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	425b      	negs	r3, r3
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	214a      	movs	r1, #74	@ 0x4a
 8001fa4:	f001 fb0c 	bl	80035c0 <HAL_I2C_Master_Transmit>
		Set_devslp();
 8001fa8:	f7fe ff94 	bl	8000ed4 <Set_devslp>
		HAL_TIM_Base_Start_IT(&htim2);
 8001fac:	4b52      	ldr	r3, [pc, #328]	@ (80020f8 <PowerOnAdapter+0x21c>)
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f004 f8a4 	bl	80060fc <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001fb4:	4b51      	ldr	r3, [pc, #324]	@ (80020fc <PowerOnAdapter+0x220>)
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f004 f8a0 	bl	80060fc <HAL_TIM_Base_Start_IT>
		Counter_sgpio_timeout = 0;
 8001fbc:	4b50      	ldr	r3, [pc, #320]	@ (8002100 <PowerOnAdapter+0x224>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
		StartBlinking(&led1, 2, 10000); // Мигание 2 Гц, 10 сек
 8001fc2:	4a50      	ldr	r2, [pc, #320]	@ (8002104 <PowerOnAdapter+0x228>)
 8001fc4:	4b50      	ldr	r3, [pc, #320]	@ (8002108 <PowerOnAdapter+0x22c>)
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7fe fa21 	bl	8000410 <StartBlinking>

		while (adapter1_state != 1 ){
 8001fce:	e00f      	b.n	8001ff0 <PowerOnAdapter+0x114>
			if(HAL_GPIO_ReadPin(MB1_BITCH_GPIO_Port, MB1_BITCH_Pin)!= 1){ adapter1_state = 1;
 8001fd0:	23a0      	movs	r3, #160	@ 0xa0
 8001fd2:	05db      	lsls	r3, r3, #23
 8001fd4:	2108      	movs	r1, #8
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f001 f9de 	bl	8003398 <HAL_GPIO_ReadPin>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d003      	beq.n	8001fea <PowerOnAdapter+0x10e>
 8001fe2:	4b3f      	ldr	r3, [pc, #252]	@ (80020e0 <PowerOnAdapter+0x204>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	e002      	b.n	8001ff0 <PowerOnAdapter+0x114>
			}else adapter1_state = 0;
 8001fea:	4b3d      	ldr	r3, [pc, #244]	@ (80020e0 <PowerOnAdapter+0x204>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
		while (adapter1_state != 1 ){
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80020e0 <PowerOnAdapter+0x204>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d1eb      	bne.n	8001fd0 <PowerOnAdapter+0xf4>
	if (adapter_number == 1 && adapter1_state != 1) {
 8001ff8:	e06b      	b.n	80020d2 <PowerOnAdapter+0x1f6>

		}
	} else if (adapter_number == 2 && adapter2_state != 1 ) {
 8001ffa:	1dfb      	adds	r3, r7, #7
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d167      	bne.n	80020d2 <PowerOnAdapter+0x1f6>
 8002002:	4b42      	ldr	r3, [pc, #264]	@ (800210c <PowerOnAdapter+0x230>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d063      	beq.n	80020d2 <PowerOnAdapter+0x1f6>
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 800200a:	4b36      	ldr	r3, [pc, #216]	@ (80020e4 <PowerOnAdapter+0x208>)
 800200c:	2201      	movs	r2, #1
 800200e:	2110      	movs	r1, #16
 8002010:	0018      	movs	r0, r3
 8002012:	f001 f9de 	bl	80033d2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(MB2_STATUS_LED_GPIO_Port, MB2_STATUS_LED_Pin, SET);
 8002016:	23a0      	movs	r3, #160	@ 0xa0
 8002018:	05db      	lsls	r3, r3, #23
 800201a:	2201      	movs	r2, #1
 800201c:	2140      	movs	r1, #64	@ 0x40
 800201e:	0018      	movs	r0, r3
 8002020:	f001 f9d7 	bl	80033d2 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8002024:	2064      	movs	r0, #100	@ 0x64
 8002026:	f000 fd4f 	bl	8002ac8 <HAL_Delay>
		ResetBus();
 800202a:	f7ff f839 	bl	80010a0 <ResetBus>
		if(BP_ON == 0) Led_Init();
 800202e:	4b2e      	ldr	r3, [pc, #184]	@ (80020e8 <PowerOnAdapter+0x20c>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <PowerOnAdapter+0x15e>
 8002036:	f7ff f987 	bl	8001348 <Led_Init>
		HAL_Delay(300);
 800203a:	2396      	movs	r3, #150	@ 0x96
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	0018      	movs	r0, r3
 8002040:	f000 fd42 	bl	8002ac8 <HAL_Delay>
		// Подготовка команды для передачи по I2C
		i2c_buffer[0] = PWR_ON; // �?спользуем значение из enum
 8002044:	240c      	movs	r4, #12
 8002046:	193b      	adds	r3, r7, r4
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 800204c:	2032      	movs	r0, #50	@ 0x32
 800204e:	f000 fd3b 	bl	8002ac8 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_3, 1, HAL_MAX_DELAY);
 8002052:	4b26      	ldr	r3, [pc, #152]	@ (80020ec <PowerOnAdapter+0x210>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	18db      	adds	r3, r3, r3
 8002058:	b299      	uxth	r1, r3
 800205a:	4a2d      	ldr	r2, [pc, #180]	@ (8002110 <PowerOnAdapter+0x234>)
 800205c:	4824      	ldr	r0, [pc, #144]	@ (80020f0 <PowerOnAdapter+0x214>)
 800205e:	2301      	movs	r3, #1
 8002060:	425b      	negs	r3, r3
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	2301      	movs	r3, #1
 8002066:	f001 faab 	bl	80035c0 <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 800206a:	2032      	movs	r0, #50	@ 0x32
 800206c:	f000 fd2c 	bl	8002ac8 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (0x25 << 1), i2c_buffer, 1, HAL_MAX_DELAY); // Передаём буфер
 8002070:	193a      	adds	r2, r7, r4
 8002072:	481f      	ldr	r0, [pc, #124]	@ (80020f0 <PowerOnAdapter+0x214>)
 8002074:	2301      	movs	r3, #1
 8002076:	425b      	negs	r3, r3
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2301      	movs	r3, #1
 800207c:	214a      	movs	r1, #74	@ 0x4a
 800207e:	f001 fa9f 	bl	80035c0 <HAL_I2C_Master_Transmit>
		Set_devslp();
 8002082:	f7fe ff27 	bl	8000ed4 <Set_devslp>
		HAL_TIM_Base_Start_IT(&htim2);
 8002086:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <PowerOnAdapter+0x21c>)
 8002088:	0018      	movs	r0, r3
 800208a:	f004 f837 	bl	80060fc <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 800208e:	4b1b      	ldr	r3, [pc, #108]	@ (80020fc <PowerOnAdapter+0x220>)
 8002090:	0018      	movs	r0, r3
 8002092:	f004 f833 	bl	80060fc <HAL_TIM_Base_Start_IT>
		Counter_sgpio_timeout = 0;
 8002096:	4b1a      	ldr	r3, [pc, #104]	@ (8002100 <PowerOnAdapter+0x224>)
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
		StartBlinking(&led2, 2, 10000); // Мигание 2 Гц, 10 сек
 800209c:	4a19      	ldr	r2, [pc, #100]	@ (8002104 <PowerOnAdapter+0x228>)
 800209e:	4b1d      	ldr	r3, [pc, #116]	@ (8002114 <PowerOnAdapter+0x238>)
 80020a0:	2102      	movs	r1, #2
 80020a2:	0018      	movs	r0, r3
 80020a4:	f7fe f9b4 	bl	8000410 <StartBlinking>

		while (adapter2_state != 1  ){
 80020a8:	e00f      	b.n	80020ca <PowerOnAdapter+0x1ee>

			if(HAL_GPIO_ReadPin(MB2_BITCH_GPIO_Port, MB2_BITCH_Pin)!= 1) {
 80020aa:	23a0      	movs	r3, #160	@ 0xa0
 80020ac:	05db      	lsls	r3, r3, #23
 80020ae:	2120      	movs	r1, #32
 80020b0:	0018      	movs	r0, r3
 80020b2:	f001 f971 	bl	8003398 <HAL_GPIO_ReadPin>
 80020b6:	0003      	movs	r3, r0
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d003      	beq.n	80020c4 <PowerOnAdapter+0x1e8>
				adapter2_state = 1;
 80020bc:	4b13      	ldr	r3, [pc, #76]	@ (800210c <PowerOnAdapter+0x230>)
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	e002      	b.n	80020ca <PowerOnAdapter+0x1ee>
			} else adapter2_state = 0;
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <PowerOnAdapter+0x230>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
		while (adapter2_state != 1  ){
 80020ca:	4b10      	ldr	r3, [pc, #64]	@ (800210c <PowerOnAdapter+0x230>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d1eb      	bne.n	80020aa <PowerOnAdapter+0x1ce>

		}

	}
	UpdateCPU_PSON(); // Обновляем состояние CPU_PSON
 80020d2:	f000 f8ad 	bl	8002230 <UpdateCPU_PSON>
}
 80020d6:	46c0      	nop			@ (mov r8, r8)
 80020d8:	46bd      	mov	sp, r7
 80020da:	b005      	add	sp, #20
 80020dc:	bd90      	pop	{r4, r7, pc}
 80020de:	46c0      	nop			@ (mov r8, r8)
 80020e0:	200003b8 	.word	0x200003b8
 80020e4:	50000800 	.word	0x50000800
 80020e8:	200003ba 	.word	0x200003ba
 80020ec:	2000005a 	.word	0x2000005a
 80020f0:	20000098 	.word	0x20000098
 80020f4:	20000048 	.word	0x20000048
 80020f8:	200001f0 	.word	0x200001f0
 80020fc:	2000023c 	.word	0x2000023c
 8002100:	200003bc 	.word	0x200003bc
 8002104:	00002710 	.word	0x00002710
 8002108:	20000004 	.word	0x20000004
 800210c:	200003b9 	.word	0x200003b9
 8002110:	2000004c 	.word	0x2000004c
 8002114:	2000001c 	.word	0x2000001c

08002118 <PowerOffAdapter>:

void PowerOffAdapter(uint8_t adapter_number)
{
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b087      	sub	sp, #28
 800211c:	af02      	add	r7, sp, #8
 800211e:	0002      	movs	r2, r0
 8002120:	1dfb      	adds	r3, r7, #7
 8002122:	701a      	strb	r2, [r3, #0]
	uint8_t i2c_buffer[1]; // Буфер для передачи данных по I2C

	if (adapter_number == 1 && adapter1_state == 1) {
 8002124:	1dfb      	adds	r3, r7, #7
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d135      	bne.n	8002198 <PowerOffAdapter+0x80>
 800212c:	4b3a      	ldr	r3, [pc, #232]	@ (8002218 <PowerOffAdapter+0x100>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d131      	bne.n	8002198 <PowerOffAdapter+0x80>
		// Подготовка команды для передачи по I2C
		i2c_buffer[0] = PWR_OFF; // �?спользуем значение из enum
 8002134:	240c      	movs	r4, #12
 8002136:	193b      	adds	r3, r7, r4
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_2, 1, HAL_MAX_DELAY);
 800213c:	4b37      	ldr	r3, [pc, #220]	@ (800221c <PowerOffAdapter+0x104>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	18db      	adds	r3, r3, r3
 8002142:	b299      	uxth	r1, r3
 8002144:	4a36      	ldr	r2, [pc, #216]	@ (8002220 <PowerOffAdapter+0x108>)
 8002146:	4837      	ldr	r0, [pc, #220]	@ (8002224 <PowerOffAdapter+0x10c>)
 8002148:	2301      	movs	r3, #1
 800214a:	425b      	negs	r3, r3
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2301      	movs	r3, #1
 8002150:	f001 fa36 	bl	80035c0 <HAL_I2C_Master_Transmit>
		HAL_Delay(100);
 8002154:	2064      	movs	r0, #100	@ 0x64
 8002156:	f000 fcb7 	bl	8002ac8 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (0x25 << 1), i2c_buffer, 1, HAL_MAX_DELAY); // Передаём буфер
 800215a:	193a      	adds	r2, r7, r4
 800215c:	4831      	ldr	r0, [pc, #196]	@ (8002224 <PowerOffAdapter+0x10c>)
 800215e:	2301      	movs	r3, #1
 8002160:	425b      	negs	r3, r3
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2301      	movs	r3, #1
 8002166:	214a      	movs	r1, #74	@ 0x4a
 8002168:	f001 fa2a 	bl	80035c0 <HAL_I2C_Master_Transmit>
		while (adapter1_state != 0){
 800216c:	e00f      	b.n	800218e <PowerOffAdapter+0x76>
			if(HAL_GPIO_ReadPin(MB1_BITCH_GPIO_Port, MB1_BITCH_Pin)!= 1) {
 800216e:	23a0      	movs	r3, #160	@ 0xa0
 8002170:	05db      	lsls	r3, r3, #23
 8002172:	2108      	movs	r1, #8
 8002174:	0018      	movs	r0, r3
 8002176:	f001 f90f 	bl	8003398 <HAL_GPIO_ReadPin>
 800217a:	0003      	movs	r3, r0
 800217c:	2b01      	cmp	r3, #1
 800217e:	d003      	beq.n	8002188 <PowerOffAdapter+0x70>
				adapter1_state = 1;
 8002180:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <PowerOffAdapter+0x100>)
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	e002      	b.n	800218e <PowerOffAdapter+0x76>
			} else adapter1_state = 0;
 8002188:	4b23      	ldr	r3, [pc, #140]	@ (8002218 <PowerOffAdapter+0x100>)
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
		while (adapter1_state != 0){
 800218e:	4b22      	ldr	r3, [pc, #136]	@ (8002218 <PowerOffAdapter+0x100>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1eb      	bne.n	800216e <PowerOffAdapter+0x56>
	if (adapter_number == 1 && adapter1_state == 1) {
 8002196:	e038      	b.n	800220a <PowerOffAdapter+0xf2>
		}


	} else if (adapter_number == 2 && adapter2_state == 1) {
 8002198:	1dfb      	adds	r3, r7, #7
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d134      	bne.n	800220a <PowerOffAdapter+0xf2>
 80021a0:	4b21      	ldr	r3, [pc, #132]	@ (8002228 <PowerOffAdapter+0x110>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d130      	bne.n	800220a <PowerOffAdapter+0xf2>
		// Подготовка команды для передачи по I2C
		i2c_buffer[0] = PWR_OFF; // �?спользуем значение из enum
 80021a8:	240c      	movs	r4, #12
 80021aa:	193b      	adds	r3, r7, r4
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_3, 1, HAL_MAX_DELAY);
 80021b0:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <PowerOffAdapter+0x104>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	18db      	adds	r3, r3, r3
 80021b6:	b299      	uxth	r1, r3
 80021b8:	4a1c      	ldr	r2, [pc, #112]	@ (800222c <PowerOffAdapter+0x114>)
 80021ba:	481a      	ldr	r0, [pc, #104]	@ (8002224 <PowerOffAdapter+0x10c>)
 80021bc:	2301      	movs	r3, #1
 80021be:	425b      	negs	r3, r3
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	2301      	movs	r3, #1
 80021c4:	f001 f9fc 	bl	80035c0 <HAL_I2C_Master_Transmit>
		HAL_Delay(100);
 80021c8:	2064      	movs	r0, #100	@ 0x64
 80021ca:	f000 fc7d 	bl	8002ac8 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c2, (0x25 << 1), i2c_buffer, 1, HAL_MAX_DELAY); // Передаём буфер
 80021ce:	193a      	adds	r2, r7, r4
 80021d0:	4814      	ldr	r0, [pc, #80]	@ (8002224 <PowerOffAdapter+0x10c>)
 80021d2:	2301      	movs	r3, #1
 80021d4:	425b      	negs	r3, r3
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	2301      	movs	r3, #1
 80021da:	214a      	movs	r1, #74	@ 0x4a
 80021dc:	f001 f9f0 	bl	80035c0 <HAL_I2C_Master_Transmit>
		while (adapter2_state != 0){
 80021e0:	e00f      	b.n	8002202 <PowerOffAdapter+0xea>
			if(HAL_GPIO_ReadPin(MB2_BITCH_GPIO_Port, MB2_BITCH_Pin)!= 1) {
 80021e2:	23a0      	movs	r3, #160	@ 0xa0
 80021e4:	05db      	lsls	r3, r3, #23
 80021e6:	2120      	movs	r1, #32
 80021e8:	0018      	movs	r0, r3
 80021ea:	f001 f8d5 	bl	8003398 <HAL_GPIO_ReadPin>
 80021ee:	0003      	movs	r3, r0
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d003      	beq.n	80021fc <PowerOffAdapter+0xe4>
				adapter2_state = 1;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <PowerOffAdapter+0x110>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
 80021fa:	e002      	b.n	8002202 <PowerOffAdapter+0xea>
			} else adapter2_state = 0;
 80021fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <PowerOffAdapter+0x110>)
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]
		while (adapter2_state != 0){
 8002202:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <PowerOffAdapter+0x110>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1eb      	bne.n	80021e2 <PowerOffAdapter+0xca>
		}

	}
	UpdateCPU_PSON(); // Обновляем состояние CPU_PSON
 800220a:	f000 f811 	bl	8002230 <UpdateCPU_PSON>
}
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	b005      	add	sp, #20
 8002214:	bd90      	pop	{r4, r7, pc}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	200003b8 	.word	0x200003b8
 800221c:	2000005a 	.word	0x2000005a
 8002220:	20000048 	.word	0x20000048
 8002224:	20000098 	.word	0x20000098
 8002228:	200003b9 	.word	0x200003b9
 800222c:	2000004c 	.word	0x2000004c

08002230 <UpdateCPU_PSON>:

void UpdateCPU_PSON()
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	if (adapter1_state == 1 || adapter2_state == 1) {
 8002234:	4b0f      	ldr	r3, [pc, #60]	@ (8002274 <UpdateCPU_PSON+0x44>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d003      	beq.n	8002244 <UpdateCPU_PSON+0x14>
 800223c:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <UpdateCPU_PSON+0x48>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d109      	bne.n	8002258 <UpdateCPU_PSON+0x28>
		// Если хотя бы один адаптер включен, выставляем CPU_PSON в 1
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, SET);
 8002244:	4b0d      	ldr	r3, [pc, #52]	@ (800227c <UpdateCPU_PSON+0x4c>)
 8002246:	2201      	movs	r2, #1
 8002248:	2110      	movs	r1, #16
 800224a:	0018      	movs	r0, r3
 800224c:	f001 f8c1 	bl	80033d2 <HAL_GPIO_WritePin>
		BP_ON = 1;
 8002250:	4b0b      	ldr	r3, [pc, #44]	@ (8002280 <UpdateCPU_PSON+0x50>)
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	e009      	b.n	800226c <UpdateCPU_PSON+0x3c>
	} else {
		// Если оба адаптера выключены, выставляем CPU_PSON в 0
		HAL_GPIO_WritePin(CPU_PSON_GPIO_Port, CPU_PSON_Pin, RESET);
 8002258:	4b08      	ldr	r3, [pc, #32]	@ (800227c <UpdateCPU_PSON+0x4c>)
 800225a:	2200      	movs	r2, #0
 800225c:	2110      	movs	r1, #16
 800225e:	0018      	movs	r0, r3
 8002260:	f001 f8b7 	bl	80033d2 <HAL_GPIO_WritePin>
		BP_ON = 0;
 8002264:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <UpdateCPU_PSON+0x50>)
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
	}
}
 800226a:	46c0      	nop			@ (mov r8, r8)
 800226c:	46c0      	nop			@ (mov r8, r8)
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	46c0      	nop			@ (mov r8, r8)
 8002274:	200003b8 	.word	0x200003b8
 8002278:	200003b9 	.word	0x200003b9
 800227c:	50000800 	.word	0x50000800
 8002280:	200003ba 	.word	0x200003ba

08002284 <HardResetAdapter>:


void HardResetAdapter(uint8_t adapter_number)
{
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b087      	sub	sp, #28
 8002288:	af02      	add	r7, sp, #8
 800228a:	0002      	movs	r2, r0
 800228c:	1dfb      	adds	r3, r7, #7
 800228e:	701a      	strb	r2, [r3, #0]
	uint8_t i2c_buffer[1]; // Буфер для передачи данных по I2C

	if (adapter_number == 1 && adapter1_state == 1) {
 8002290:	1dfb      	adds	r3, r7, #7
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d136      	bne.n	8002306 <HardResetAdapter+0x82>
 8002298:	4b3a      	ldr	r3, [pc, #232]	@ (8002384 <HardResetAdapter+0x100>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d132      	bne.n	8002306 <HardResetAdapter+0x82>
		// Подготовка команды для передачи по I2C
		i2c_buffer[0] = HARD_RESET; // �?спользуем значение из enum
 80022a0:	240c      	movs	r4, #12
 80022a2:	193b      	adds	r3, r7, r4
 80022a4:	2203      	movs	r2, #3
 80022a6:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_2, 1, HAL_MAX_DELAY);
 80022a8:	4b37      	ldr	r3, [pc, #220]	@ (8002388 <HardResetAdapter+0x104>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	18db      	adds	r3, r3, r3
 80022ae:	b299      	uxth	r1, r3
 80022b0:	4a36      	ldr	r2, [pc, #216]	@ (800238c <HardResetAdapter+0x108>)
 80022b2:	4837      	ldr	r0, [pc, #220]	@ (8002390 <HardResetAdapter+0x10c>)
 80022b4:	2301      	movs	r3, #1
 80022b6:	425b      	negs	r3, r3
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2301      	movs	r3, #1
 80022bc:	f001 f980 	bl	80035c0 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&hi2c2, (0x25 << 1), i2c_buffer, 1, HAL_MAX_DELAY); // Передаём буфер
 80022c0:	193a      	adds	r2, r7, r4
 80022c2:	4833      	ldr	r0, [pc, #204]	@ (8002390 <HardResetAdapter+0x10c>)
 80022c4:	2301      	movs	r3, #1
 80022c6:	425b      	negs	r3, r3
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	2301      	movs	r3, #1
 80022cc:	214a      	movs	r1, #74	@ 0x4a
 80022ce:	f001 f977 	bl	80035c0 <HAL_I2C_Master_Transmit>
		HAL_Delay(6000);
 80022d2:	4b30      	ldr	r3, [pc, #192]	@ (8002394 <HardResetAdapter+0x110>)
 80022d4:	0018      	movs	r0, r3
 80022d6:	f000 fbf7 	bl	8002ac8 <HAL_Delay>

		while (adapter1_state != 0){
 80022da:	e00f      	b.n	80022fc <HardResetAdapter+0x78>
			if(HAL_GPIO_ReadPin(MB1_BITCH_GPIO_Port, MB1_BITCH_Pin)!= 1) {
 80022dc:	23a0      	movs	r3, #160	@ 0xa0
 80022de:	05db      	lsls	r3, r3, #23
 80022e0:	2108      	movs	r1, #8
 80022e2:	0018      	movs	r0, r3
 80022e4:	f001 f858 	bl	8003398 <HAL_GPIO_ReadPin>
 80022e8:	0003      	movs	r3, r0
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d003      	beq.n	80022f6 <HardResetAdapter+0x72>
				adapter1_state = 1;
 80022ee:	4b25      	ldr	r3, [pc, #148]	@ (8002384 <HardResetAdapter+0x100>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
 80022f4:	e002      	b.n	80022fc <HardResetAdapter+0x78>
			} else adapter1_state = 0;
 80022f6:	4b23      	ldr	r3, [pc, #140]	@ (8002384 <HardResetAdapter+0x100>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
		while (adapter1_state != 0){
 80022fc:	4b21      	ldr	r3, [pc, #132]	@ (8002384 <HardResetAdapter+0x100>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1eb      	bne.n	80022dc <HardResetAdapter+0x58>
	if (adapter_number == 1 && adapter1_state == 1) {
 8002304:	e03a      	b.n	800237c <HardResetAdapter+0xf8>
		}


	} else if (adapter_number == 2 && adapter2_state == 1) {
 8002306:	1dfb      	adds	r3, r7, #7
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d136      	bne.n	800237c <HardResetAdapter+0xf8>
 800230e:	4b22      	ldr	r3, [pc, #136]	@ (8002398 <HardResetAdapter+0x114>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d132      	bne.n	800237c <HardResetAdapter+0xf8>
		// Подготовка команды для передачи по I2C
		i2c_buffer[0] = HARD_RESET; // �?спользуем значение из enum
 8002316:	240c      	movs	r4, #12
 8002318:	193b      	adds	r3, r7, r4
 800231a:	2203      	movs	r2, #3
 800231c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_3, 1, HAL_MAX_DELAY);
 800231e:	4b1a      	ldr	r3, [pc, #104]	@ (8002388 <HardResetAdapter+0x104>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	18db      	adds	r3, r3, r3
 8002324:	b299      	uxth	r1, r3
 8002326:	4a1d      	ldr	r2, [pc, #116]	@ (800239c <HardResetAdapter+0x118>)
 8002328:	4819      	ldr	r0, [pc, #100]	@ (8002390 <HardResetAdapter+0x10c>)
 800232a:	2301      	movs	r3, #1
 800232c:	425b      	negs	r3, r3
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2301      	movs	r3, #1
 8002332:	f001 f945 	bl	80035c0 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(&hi2c2, (0x25 << 1), i2c_buffer, 1, HAL_MAX_DELAY); // Передаём буфер
 8002336:	193a      	adds	r2, r7, r4
 8002338:	4815      	ldr	r0, [pc, #84]	@ (8002390 <HardResetAdapter+0x10c>)
 800233a:	2301      	movs	r3, #1
 800233c:	425b      	negs	r3, r3
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2301      	movs	r3, #1
 8002342:	214a      	movs	r1, #74	@ 0x4a
 8002344:	f001 f93c 	bl	80035c0 <HAL_I2C_Master_Transmit>
		HAL_Delay(6000);
 8002348:	4b12      	ldr	r3, [pc, #72]	@ (8002394 <HardResetAdapter+0x110>)
 800234a:	0018      	movs	r0, r3
 800234c:	f000 fbbc 	bl	8002ac8 <HAL_Delay>

		while (adapter2_state != 0){
 8002350:	e00f      	b.n	8002372 <HardResetAdapter+0xee>
			if(HAL_GPIO_ReadPin(MB2_BITCH_GPIO_Port, MB2_BITCH_Pin)!= 1) {
 8002352:	23a0      	movs	r3, #160	@ 0xa0
 8002354:	05db      	lsls	r3, r3, #23
 8002356:	2120      	movs	r1, #32
 8002358:	0018      	movs	r0, r3
 800235a:	f001 f81d 	bl	8003398 <HAL_GPIO_ReadPin>
 800235e:	0003      	movs	r3, r0
 8002360:	2b01      	cmp	r3, #1
 8002362:	d003      	beq.n	800236c <HardResetAdapter+0xe8>
				adapter2_state = 1;
 8002364:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <HardResetAdapter+0x114>)
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	e002      	b.n	8002372 <HardResetAdapter+0xee>
			} else adapter2_state = 0;
 800236c:	4b0a      	ldr	r3, [pc, #40]	@ (8002398 <HardResetAdapter+0x114>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
		while (adapter2_state != 0){
 8002372:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <HardResetAdapter+0x114>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1eb      	bne.n	8002352 <HardResetAdapter+0xce>
		}

	}

}
 800237a:	e7ff      	b.n	800237c <HardResetAdapter+0xf8>
 800237c:	46c0      	nop			@ (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b005      	add	sp, #20
 8002382:	bd90      	pop	{r4, r7, pc}
 8002384:	200003b8 	.word	0x200003b8
 8002388:	2000005a 	.word	0x2000005a
 800238c:	20000048 	.word	0x20000048
 8002390:	20000098 	.word	0x20000098
 8002394:	00001770 	.word	0x00001770
 8002398:	200003b9 	.word	0x200003b9
 800239c:	2000004c 	.word	0x2000004c

080023a0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) // 8 раз в секунду
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a29      	ldr	r2, [pc, #164]	@ (8002454 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d114      	bne.n	80023dc <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		UpdateLEDStates();
 80023b2:	f7ff fa8b 	bl	80018cc <UpdateLEDStates>
		MB1_attach = HAL_GPIO_ReadPin(MB1_ATTACH_GPIO_Port, MB1_ATTACH_Pin);
 80023b6:	4b28      	ldr	r3, [pc, #160]	@ (8002458 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	0018      	movs	r0, r3
 80023bc:	f000 ffec 	bl	8003398 <HAL_GPIO_ReadPin>
 80023c0:	0003      	movs	r3, r0
 80023c2:	001a      	movs	r2, r3
 80023c4:	4b25      	ldr	r3, [pc, #148]	@ (800245c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80023c6:	701a      	strb	r2, [r3, #0]
		MB2_attach = HAL_GPIO_ReadPin(MB2_ATTACH_GPIO_Port, MB2_ATTACH_Pin);
 80023c8:	4b25      	ldr	r3, [pc, #148]	@ (8002460 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80023ca:	2120      	movs	r1, #32
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 ffe3 	bl	8003398 <HAL_GPIO_ReadPin>
 80023d2:	0003      	movs	r3, r0
 80023d4:	001a      	movs	r2, r3
 80023d6:	4b23      	ldr	r3, [pc, #140]	@ (8002464 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80023d8:	701a      	strb	r2, [r3, #0]


					}
				}
			}
}
 80023da:	e036      	b.n	800244a <HAL_TIM_PeriodElapsedCallback+0xaa>
		if (htim->Instance == TIM2) // 4 раза в секунду
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2380      	movs	r3, #128	@ 0x80
 80023e2:	05db      	lsls	r3, r3, #23
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d10a      	bne.n	80023fe <HAL_TIM_PeriodElapsedCallback+0x5e>
			Read_Disk_Status(0x24, disk_status, 6);
 80023e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002468 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80023ea:	2206      	movs	r2, #6
 80023ec:	0019      	movs	r1, r3
 80023ee:	2024      	movs	r0, #36	@ 0x24
 80023f0:	f7fe f8de 	bl	80005b0 <Read_Disk_Status>
			Decode_Disk_Status(disk_status);
 80023f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002468 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80023f6:	0018      	movs	r0, r3
 80023f8:	f7fe f90c 	bl	8000614 <Decode_Disk_Status>
}
 80023fc:	e025      	b.n	800244a <HAL_TIM_PeriodElapsedCallback+0xaa>
			if (htim->Instance == TIM3) // 1 раз в секунду
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1a      	ldr	r2, [pc, #104]	@ (800246c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d120      	bne.n	800244a <HAL_TIM_PeriodElapsedCallback+0xaa>
				TransmitTemperature();
 8002408:	f000 f83c 	bl	8002484 <TransmitTemperature>
				Read_disks_connected();
 800240c:	f7ff f874 	bl	80014f8 <Read_disks_connected>
				if(sgpio_started == 0 && (adapter1_state == 1 || adapter2_state == 1))
 8002410:	4b17      	ldr	r3, [pc, #92]	@ (8002470 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d118      	bne.n	800244a <HAL_TIM_PeriodElapsedCallback+0xaa>
 8002418:	4b16      	ldr	r3, [pc, #88]	@ (8002474 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d003      	beq.n	8002428 <HAL_TIM_PeriodElapsedCallback+0x88>
 8002420:	4b15      	ldr	r3, [pc, #84]	@ (8002478 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d110      	bne.n	800244a <HAL_TIM_PeriodElapsedCallback+0xaa>
					++Counter_sgpio_timeout;
 8002428:	4b14      	ldr	r3, [pc, #80]	@ (800247c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	b2da      	uxtb	r2, r3
 8002430:	4b12      	ldr	r3, [pc, #72]	@ (800247c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002432:	701a      	strb	r2, [r3, #0]
					if (Counter_sgpio_timeout > 250 && sgpio_started == 0)
 8002434:	4b11      	ldr	r3, [pc, #68]	@ (800247c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2bfa      	cmp	r3, #250	@ 0xfa
 800243a:	d906      	bls.n	800244a <HAL_TIM_PeriodElapsedCallback+0xaa>
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <HAL_TIM_PeriodElapsedCallback+0xaa>
						sgpio_timeout = 1;
 8002444:	4b0e      	ldr	r3, [pc, #56]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	b002      	add	sp, #8
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			@ (mov r8, r8)
 8002454:	40012c00 	.word	0x40012c00
 8002458:	50000400 	.word	0x50000400
 800245c:	2000006b 	.word	0x2000006b
 8002460:	50000c00 	.word	0x50000c00
 8002464:	2000006c 	.word	0x2000006c
 8002468:	2000028c 	.word	0x2000028c
 800246c:	40000400 	.word	0x40000400
 8002470:	200003bb 	.word	0x200003bb
 8002474:	200003b8 	.word	0x200003b8
 8002478:	200003b9 	.word	0x200003b9
 800247c:	200003bc 	.word	0x200003bc
 8002480:	200003bd 	.word	0x200003bd

08002484 <TransmitTemperature>:

void TransmitTemperature() {
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af02      	add	r7, sp, #8

    // Получаем максимальную температуру


    // Преобразуем int8_t в uint8_t для передачи
    uint8_t data = (uint8_t)temperature;
 800248a:	4b2f      	ldr	r3, [pc, #188]	@ (8002548 <TransmitTemperature+0xc4>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b25b      	sxtb	r3, r3
 8002490:	b2da      	uxtb	r2, r3
 8002492:	1dfb      	adds	r3, r7, #7
 8002494:	701a      	strb	r2, [r3, #0]

    if (MB1_attach == 0 && adapter1_state == 1) {
 8002496:	4b2d      	ldr	r3, [pc, #180]	@ (800254c <TransmitTemperature+0xc8>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d125      	bne.n	80024ea <TransmitTemperature+0x66>
 800249e:	4b2c      	ldr	r3, [pc, #176]	@ (8002550 <TransmitTemperature+0xcc>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d121      	bne.n	80024ea <TransmitTemperature+0x66>
    	 HAL_GPIO_WritePin(MB1_STATUS_LED_GPIO_Port, MB1_STATUS_LED_Pin, RESET);
 80024a6:	23a0      	movs	r3, #160	@ 0xa0
 80024a8:	05db      	lsls	r3, r3, #23
 80024aa:	2200      	movs	r2, #0
 80024ac:	2110      	movs	r1, #16
 80024ae:	0018      	movs	r0, r3
 80024b0:	f000 ff8f 	bl	80033d2 <HAL_GPIO_WritePin>
    	 HAL_Delay(50);
 80024b4:	2032      	movs	r0, #50	@ 0x32
 80024b6:	f000 fb07 	bl	8002ac8 <HAL_Delay>
        // Выбираем канал 2 мультиплексора
        HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_2, 1, HAL_MAX_DELAY);
 80024ba:	4b26      	ldr	r3, [pc, #152]	@ (8002554 <TransmitTemperature+0xd0>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	18db      	adds	r3, r3, r3
 80024c0:	b299      	uxth	r1, r3
 80024c2:	4a25      	ldr	r2, [pc, #148]	@ (8002558 <TransmitTemperature+0xd4>)
 80024c4:	4825      	ldr	r0, [pc, #148]	@ (800255c <TransmitTemperature+0xd8>)
 80024c6:	2301      	movs	r3, #1
 80024c8:	425b      	negs	r3, r3
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2301      	movs	r3, #1
 80024ce:	f001 f877 	bl	80035c0 <HAL_I2C_Master_Transmit>
        HAL_Delay(50);
 80024d2:	2032      	movs	r0, #50	@ 0x32
 80024d4:	f000 faf8 	bl	8002ac8 <HAL_Delay>

        // Передаем данные (1 байт)
        HAL_I2C_Master_Transmit(&hi2c2, (0x25 << 1), &data, 1, HAL_MAX_DELAY);
 80024d8:	1dfa      	adds	r2, r7, #7
 80024da:	4820      	ldr	r0, [pc, #128]	@ (800255c <TransmitTemperature+0xd8>)
 80024dc:	2301      	movs	r3, #1
 80024de:	425b      	negs	r3, r3
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2301      	movs	r3, #1
 80024e4:	214a      	movs	r1, #74	@ 0x4a
 80024e6:	f001 f86b 	bl	80035c0 <HAL_I2C_Master_Transmit>
    }

    if (MB2_attach == 0 && adapter2_state == 1) {
 80024ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002560 <TransmitTemperature+0xdc>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d125      	bne.n	800253e <TransmitTemperature+0xba>
 80024f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002564 <TransmitTemperature+0xe0>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d121      	bne.n	800253e <TransmitTemperature+0xba>
    	HAL_GPIO_WritePin(MB2_STATUS_LED_GPIO_Port, MB2_STATUS_LED_Pin, RESET);
 80024fa:	23a0      	movs	r3, #160	@ 0xa0
 80024fc:	05db      	lsls	r3, r3, #23
 80024fe:	2200      	movs	r2, #0
 8002500:	2140      	movs	r1, #64	@ 0x40
 8002502:	0018      	movs	r0, r3
 8002504:	f000 ff65 	bl	80033d2 <HAL_GPIO_WritePin>
    	HAL_Delay(50);
 8002508:	2032      	movs	r0, #50	@ 0x32
 800250a:	f000 fadd 	bl	8002ac8 <HAL_Delay>
        // Выбираем канал 3 мультиплексора
        HAL_I2C_Master_Transmit(&hi2c2, (I2C_adapter_adr << 1), I2CInit_3, 1, HAL_MAX_DELAY);
 800250e:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <TransmitTemperature+0xd0>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	18db      	adds	r3, r3, r3
 8002514:	b299      	uxth	r1, r3
 8002516:	4a14      	ldr	r2, [pc, #80]	@ (8002568 <TransmitTemperature+0xe4>)
 8002518:	4810      	ldr	r0, [pc, #64]	@ (800255c <TransmitTemperature+0xd8>)
 800251a:	2301      	movs	r3, #1
 800251c:	425b      	negs	r3, r3
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2301      	movs	r3, #1
 8002522:	f001 f84d 	bl	80035c0 <HAL_I2C_Master_Transmit>
        HAL_Delay(50);
 8002526:	2032      	movs	r0, #50	@ 0x32
 8002528:	f000 face 	bl	8002ac8 <HAL_Delay>

        // Передаем данные (1 байт)
        HAL_I2C_Master_Transmit(&hi2c2, (0x25 << 1), &data, 1, HAL_MAX_DELAY);
 800252c:	1dfa      	adds	r2, r7, #7
 800252e:	480b      	ldr	r0, [pc, #44]	@ (800255c <TransmitTemperature+0xd8>)
 8002530:	2301      	movs	r3, #1
 8002532:	425b      	negs	r3, r3
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2301      	movs	r3, #1
 8002538:	214a      	movs	r1, #74	@ 0x4a
 800253a:	f001 f841 	bl	80035c0 <HAL_I2C_Master_Transmit>
    }

}
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	b002      	add	sp, #8
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	20000034 	.word	0x20000034
 800254c:	2000006b 	.word	0x2000006b
 8002550:	200003b8 	.word	0x200003b8
 8002554:	2000005a 	.word	0x2000005a
 8002558:	20000048 	.word	0x20000048
 800255c:	20000098 	.word	0x20000098
 8002560:	2000006c 	.word	0x2000006c
 8002564:	200003b9 	.word	0x200003b9
 8002568:	2000004c 	.word	0x2000004c

0800256c <HAL_GPIO_EXTI_Falling_Callback>:
}



void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	0002      	movs	r2, r0
 8002574:	1dbb      	adds	r3, r7, #6
 8002576:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim3);
 8002578:	4b12      	ldr	r3, [pc, #72]	@ (80025c4 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 800257a:	0018      	movs	r0, r3
 800257c:	f003 fe1a 	bl	80061b4 <HAL_TIM_Base_Stop_IT>
	if (GPIO_Pin == FP_MB1_PWR_SW_Pin) {
 8002580:	1dbb      	adds	r3, r7, #6
 8002582:	881a      	ldrh	r2, [r3, #0]
 8002584:	2380      	movs	r3, #128	@ 0x80
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	429a      	cmp	r2, r3
 800258a:	d108      	bne.n	800259e <HAL_GPIO_EXTI_Falling_Callback+0x32>
		button1_pressed = 1;
 800258c:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
		button1_press_time = HAL_GetTick();
 8002592:	f000 fa8f 	bl	8002ab4 <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	4b0c      	ldr	r3, [pc, #48]	@ (80025cc <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 800259a:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == FP_MB2_PWR_SW_Pin) {
		button2_pressed = 1;
		button2_press_time = HAL_GetTick();
	}

}
 800259c:	e00d      	b.n	80025ba <HAL_GPIO_EXTI_Falling_Callback+0x4e>
	} else if (GPIO_Pin == FP_MB2_PWR_SW_Pin) {
 800259e:	1dbb      	adds	r3, r7, #6
 80025a0:	881a      	ldrh	r2, [r3, #0]
 80025a2:	2380      	movs	r3, #128	@ 0x80
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d107      	bne.n	80025ba <HAL_GPIO_EXTI_Falling_Callback+0x4e>
		button2_pressed = 1;
 80025aa:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	701a      	strb	r2, [r3, #0]
		button2_press_time = HAL_GetTick();
 80025b0:	f000 fa80 	bl	8002ab4 <HAL_GetTick>
 80025b4:	0002      	movs	r2, r0
 80025b6:	4b07      	ldr	r3, [pc, #28]	@ (80025d4 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
}
 80025ba:	46c0      	nop			@ (mov r8, r8)
 80025bc:	46bd      	mov	sp, r7
 80025be:	b002      	add	sp, #8
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	2000023c 	.word	0x2000023c
 80025c8:	200003be 	.word	0x200003be
 80025cc:	200003c0 	.word	0x200003c0
 80025d0:	200003bf 	.word	0x200003bf
 80025d4:	200003c4 	.word	0x200003c4

080025d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025dc:	b672      	cpsid	i
}
 80025de:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	flag_error = 1;
 80025e0:	4b02      	ldr	r3, [pc, #8]	@ (80025ec <Error_Handler+0x14>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
	while (1)
 80025e6:	46c0      	nop			@ (mov r8, r8)
 80025e8:	e7fd      	b.n	80025e6 <Error_Handler+0xe>
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	20000288 	.word	0x20000288

080025f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f6:	4b13      	ldr	r3, [pc, #76]	@ (8002644 <HAL_MspInit+0x54>)
 80025f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025fa:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <HAL_MspInit+0x54>)
 80025fc:	2101      	movs	r1, #1
 80025fe:	430a      	orrs	r2, r1
 8002600:	641a      	str	r2, [r3, #64]	@ 0x40
 8002602:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <HAL_MspInit+0x54>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	2201      	movs	r2, #1
 8002608:	4013      	ands	r3, r2
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800260e:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <HAL_MspInit+0x54>)
 8002610:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002612:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <HAL_MspInit+0x54>)
 8002614:	2180      	movs	r1, #128	@ 0x80
 8002616:	0549      	lsls	r1, r1, #21
 8002618:	430a      	orrs	r2, r1
 800261a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800261c:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <HAL_MspInit+0x54>)
 800261e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002620:	2380      	movs	r3, #128	@ 0x80
 8002622:	055b      	lsls	r3, r3, #21
 8002624:	4013      	ands	r3, r2
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2101      	movs	r1, #1
 800262e:	2004      	movs	r0, #4
 8002630:	f000 fb1a 	bl	8002c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002634:	2004      	movs	r0, #4
 8002636:	f000 fb2c 	bl	8002c92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263a:	46c0      	nop			@ (mov r8, r8)
 800263c:	46bd      	mov	sp, r7
 800263e:	b002      	add	sp, #8
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	40021000 	.word	0x40021000

08002648 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b08b      	sub	sp, #44	@ 0x2c
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	2414      	movs	r4, #20
 8002652:	193b      	adds	r3, r7, r4
 8002654:	0018      	movs	r0, r3
 8002656:	2314      	movs	r3, #20
 8002658:	001a      	movs	r2, r3
 800265a:	2100      	movs	r1, #0
 800265c:	f004 f986 	bl	800696c <memset>
  if(hi2c->Instance==I2C2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a45      	ldr	r2, [pc, #276]	@ (800277c <HAL_I2C_MspInit+0x134>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d000      	beq.n	800266c <HAL_I2C_MspInit+0x24>
 800266a:	e082      	b.n	8002772 <HAL_I2C_MspInit+0x12a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266c:	4b44      	ldr	r3, [pc, #272]	@ (8002780 <HAL_I2C_MspInit+0x138>)
 800266e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002670:	4b43      	ldr	r3, [pc, #268]	@ (8002780 <HAL_I2C_MspInit+0x138>)
 8002672:	2102      	movs	r1, #2
 8002674:	430a      	orrs	r2, r1
 8002676:	635a      	str	r2, [r3, #52]	@ 0x34
 8002678:	4b41      	ldr	r3, [pc, #260]	@ (8002780 <HAL_I2C_MspInit+0x138>)
 800267a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800267c:	2202      	movs	r2, #2
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = TEMP_I2C1_SCL_Pin|TEMP_I2C1_SDA_Pin;
 8002684:	193b      	adds	r3, r7, r4
 8002686:	22c0      	movs	r2, #192	@ 0xc0
 8002688:	0112      	lsls	r2, r2, #4
 800268a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800268c:	0021      	movs	r1, r4
 800268e:	187b      	adds	r3, r7, r1
 8002690:	2212      	movs	r2, #18
 8002692:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	187b      	adds	r3, r7, r1
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	187b      	adds	r3, r7, r1
 800269c:	2200      	movs	r2, #0
 800269e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	2206      	movs	r2, #6
 80026a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a6:	187b      	adds	r3, r7, r1
 80026a8:	4a36      	ldr	r2, [pc, #216]	@ (8002784 <HAL_I2C_MspInit+0x13c>)
 80026aa:	0019      	movs	r1, r3
 80026ac:	0010      	movs	r0, r2
 80026ae:	f000 fd0f 	bl	80030d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026b2:	4b33      	ldr	r3, [pc, #204]	@ (8002780 <HAL_I2C_MspInit+0x138>)
 80026b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026b6:	4b32      	ldr	r3, [pc, #200]	@ (8002780 <HAL_I2C_MspInit+0x138>)
 80026b8:	2180      	movs	r1, #128	@ 0x80
 80026ba:	03c9      	lsls	r1, r1, #15
 80026bc:	430a      	orrs	r2, r1
 80026be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002780 <HAL_I2C_MspInit+0x138>)
 80026c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026c4:	2380      	movs	r3, #128	@ 0x80
 80026c6:	03db      	lsls	r3, r3, #15
 80026c8:	4013      	ands	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel1;
 80026ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002788 <HAL_I2C_MspInit+0x140>)
 80026d0:	4a2e      	ldr	r2, [pc, #184]	@ (800278c <HAL_I2C_MspInit+0x144>)
 80026d2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 80026d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002788 <HAL_I2C_MspInit+0x140>)
 80026d6:	220c      	movs	r2, #12
 80026d8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026da:	4b2b      	ldr	r3, [pc, #172]	@ (8002788 <HAL_I2C_MspInit+0x140>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026e0:	4b29      	ldr	r3, [pc, #164]	@ (8002788 <HAL_I2C_MspInit+0x140>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026e6:	4b28      	ldr	r3, [pc, #160]	@ (8002788 <HAL_I2C_MspInit+0x140>)
 80026e8:	2280      	movs	r2, #128	@ 0x80
 80026ea:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ec:	4b26      	ldr	r3, [pc, #152]	@ (8002788 <HAL_I2C_MspInit+0x140>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026f2:	4b25      	ldr	r3, [pc, #148]	@ (8002788 <HAL_I2C_MspInit+0x140>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80026f8:	4b23      	ldr	r3, [pc, #140]	@ (8002788 <HAL_I2C_MspInit+0x140>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026fe:	4b22      	ldr	r3, [pc, #136]	@ (8002788 <HAL_I2C_MspInit+0x140>)
 8002700:	2200      	movs	r2, #0
 8002702:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002704:	4b20      	ldr	r3, [pc, #128]	@ (8002788 <HAL_I2C_MspInit+0x140>)
 8002706:	0018      	movs	r0, r3
 8002708:	f000 fae0 	bl	8002ccc <HAL_DMA_Init>
 800270c:	1e03      	subs	r3, r0, #0
 800270e:	d001      	beq.n	8002714 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002710:	f7ff ff62 	bl	80025d8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a1c      	ldr	r2, [pc, #112]	@ (8002788 <HAL_I2C_MspInit+0x140>)
 8002718:	63da      	str	r2, [r3, #60]	@ 0x3c
 800271a:	4b1b      	ldr	r3, [pc, #108]	@ (8002788 <HAL_I2C_MspInit+0x140>)
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel2;
 8002720:	4b1b      	ldr	r3, [pc, #108]	@ (8002790 <HAL_I2C_MspInit+0x148>)
 8002722:	4a1c      	ldr	r2, [pc, #112]	@ (8002794 <HAL_I2C_MspInit+0x14c>)
 8002724:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8002726:	4b1a      	ldr	r3, [pc, #104]	@ (8002790 <HAL_I2C_MspInit+0x148>)
 8002728:	220d      	movs	r2, #13
 800272a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800272c:	4b18      	ldr	r3, [pc, #96]	@ (8002790 <HAL_I2C_MspInit+0x148>)
 800272e:	2210      	movs	r2, #16
 8002730:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002732:	4b17      	ldr	r3, [pc, #92]	@ (8002790 <HAL_I2C_MspInit+0x148>)
 8002734:	2200      	movs	r2, #0
 8002736:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002738:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <HAL_I2C_MspInit+0x148>)
 800273a:	2280      	movs	r2, #128	@ 0x80
 800273c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800273e:	4b14      	ldr	r3, [pc, #80]	@ (8002790 <HAL_I2C_MspInit+0x148>)
 8002740:	2200      	movs	r2, #0
 8002742:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002744:	4b12      	ldr	r3, [pc, #72]	@ (8002790 <HAL_I2C_MspInit+0x148>)
 8002746:	2200      	movs	r2, #0
 8002748:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800274a:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <HAL_I2C_MspInit+0x148>)
 800274c:	2200      	movs	r2, #0
 800274e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002750:	4b0f      	ldr	r3, [pc, #60]	@ (8002790 <HAL_I2C_MspInit+0x148>)
 8002752:	2200      	movs	r2, #0
 8002754:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002756:	4b0e      	ldr	r3, [pc, #56]	@ (8002790 <HAL_I2C_MspInit+0x148>)
 8002758:	0018      	movs	r0, r3
 800275a:	f000 fab7 	bl	8002ccc <HAL_DMA_Init>
 800275e:	1e03      	subs	r3, r0, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_MspInit+0x11e>
    {
      Error_Handler();
 8002762:	f7ff ff39 	bl	80025d8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a09      	ldr	r2, [pc, #36]	@ (8002790 <HAL_I2C_MspInit+0x148>)
 800276a:	639a      	str	r2, [r3, #56]	@ 0x38
 800276c:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <HAL_I2C_MspInit+0x148>)
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	b00b      	add	sp, #44	@ 0x2c
 8002778:	bd90      	pop	{r4, r7, pc}
 800277a:	46c0      	nop			@ (mov r8, r8)
 800277c:	40005800 	.word	0x40005800
 8002780:	40021000 	.word	0x40021000
 8002784:	50000400 	.word	0x50000400
 8002788:	200000ec 	.word	0x200000ec
 800278c:	40020008 	.word	0x40020008
 8002790:	20000148 	.word	0x20000148
 8002794:	4002001c 	.word	0x4002001c

08002798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b093      	sub	sp, #76	@ 0x4c
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027a0:	2414      	movs	r4, #20
 80027a2:	193b      	adds	r3, r7, r4
 80027a4:	0018      	movs	r0, r3
 80027a6:	2334      	movs	r3, #52	@ 0x34
 80027a8:	001a      	movs	r2, r3
 80027aa:	2100      	movs	r1, #0
 80027ac:	f004 f8de 	bl	800696c <memset>
  if(htim_base->Instance==TIM1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a24      	ldr	r2, [pc, #144]	@ (8002848 <HAL_TIM_Base_MspInit+0xb0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d11d      	bne.n	80027f6 <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80027ba:	193b      	adds	r3, r7, r4
 80027bc:	2280      	movs	r2, #128	@ 0x80
 80027be:	0392      	lsls	r2, r2, #14
 80027c0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80027c2:	193b      	adds	r3, r7, r4
 80027c4:	2200      	movs	r2, #0
 80027c6:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027c8:	193b      	adds	r3, r7, r4
 80027ca:	0018      	movs	r0, r3
 80027cc:	f003 fa86 	bl	8005cdc <HAL_RCCEx_PeriphCLKConfig>
 80027d0:	1e03      	subs	r3, r0, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80027d4:	f7ff ff00 	bl	80025d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027d8:	4b1c      	ldr	r3, [pc, #112]	@ (800284c <HAL_TIM_Base_MspInit+0xb4>)
 80027da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027dc:	4b1b      	ldr	r3, [pc, #108]	@ (800284c <HAL_TIM_Base_MspInit+0xb4>)
 80027de:	2180      	movs	r1, #128	@ 0x80
 80027e0:	0109      	lsls	r1, r1, #4
 80027e2:	430a      	orrs	r2, r1
 80027e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80027e6:	4b19      	ldr	r3, [pc, #100]	@ (800284c <HAL_TIM_Base_MspInit+0xb4>)
 80027e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027ea:	2380      	movs	r3, #128	@ 0x80
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	4013      	ands	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027f4:	e023      	b.n	800283e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	2380      	movs	r3, #128	@ 0x80
 80027fc:	05db      	lsls	r3, r3, #23
 80027fe:	429a      	cmp	r2, r3
 8002800:	d10c      	bne.n	800281c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002802:	4b12      	ldr	r3, [pc, #72]	@ (800284c <HAL_TIM_Base_MspInit+0xb4>)
 8002804:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002806:	4b11      	ldr	r3, [pc, #68]	@ (800284c <HAL_TIM_Base_MspInit+0xb4>)
 8002808:	2101      	movs	r1, #1
 800280a:	430a      	orrs	r2, r1
 800280c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800280e:	4b0f      	ldr	r3, [pc, #60]	@ (800284c <HAL_TIM_Base_MspInit+0xb4>)
 8002810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002812:	2201      	movs	r2, #1
 8002814:	4013      	ands	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
}
 800281a:	e010      	b.n	800283e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0b      	ldr	r2, [pc, #44]	@ (8002850 <HAL_TIM_Base_MspInit+0xb8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d10b      	bne.n	800283e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002826:	4b09      	ldr	r3, [pc, #36]	@ (800284c <HAL_TIM_Base_MspInit+0xb4>)
 8002828:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800282a:	4b08      	ldr	r3, [pc, #32]	@ (800284c <HAL_TIM_Base_MspInit+0xb4>)
 800282c:	2102      	movs	r1, #2
 800282e:	430a      	orrs	r2, r1
 8002830:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002832:	4b06      	ldr	r3, [pc, #24]	@ (800284c <HAL_TIM_Base_MspInit+0xb4>)
 8002834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002836:	2202      	movs	r2, #2
 8002838:	4013      	ands	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
}
 800283e:	46c0      	nop			@ (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	b013      	add	sp, #76	@ 0x4c
 8002844:	bd90      	pop	{r4, r7, pc}
 8002846:	46c0      	nop			@ (mov r8, r8)
 8002848:	40012c00 	.word	0x40012c00
 800284c:	40021000 	.word	0x40021000
 8002850:	40000400 	.word	0x40000400

08002854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002858:	f003 fa16 	bl	8005c88 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800285c:	46c0      	nop			@ (mov r8, r8)
 800285e:	e7fd      	b.n	800285c <NMI_Handler+0x8>

08002860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002864:	46c0      	nop			@ (mov r8, r8)
 8002866:	e7fd      	b.n	8002864 <HardFault_Handler+0x4>

08002868 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800286c:	46c0      	nop			@ (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002880:	f000 f906 	bl	8002a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002884:	46c0      	nop			@ (mov r8, r8)
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FP_MB2_PWR_SW_Pin);
 8002898:	2380      	movs	r3, #128	@ 0x80
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	0018      	movs	r0, r3
 800289e:	f000 fdb5 	bl	800340c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FP_MB1_PWR_SW_Pin);
 80028a2:	2380      	movs	r3, #128	@ 0x80
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	0018      	movs	r0, r3
 80028a8:	f000 fdb0 	bl	800340c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80028ac:	46c0      	nop			@ (mov r8, r8)
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80028b8:	4b03      	ldr	r3, [pc, #12]	@ (80028c8 <DMA1_Channel1_IRQHandler+0x14>)
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 fafa 	bl	8002eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028c0:	46c0      	nop			@ (mov r8, r8)
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	46c0      	nop			@ (mov r8, r8)
 80028c8:	200000ec 	.word	0x200000ec

080028cc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80028d0:	4b03      	ldr	r3, [pc, #12]	@ (80028e0 <DMA1_Channel2_3_IRQHandler+0x14>)
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 faee 	bl	8002eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80028d8:	46c0      	nop			@ (mov r8, r8)
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	20000148 	.word	0x20000148

080028e4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028e8:	4b03      	ldr	r3, [pc, #12]	@ (80028f8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80028ea:	0018      	movs	r0, r3
 80028ec:	f003 fc90 	bl	8006210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80028f0:	46c0      	nop			@ (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			@ (mov r8, r8)
 80028f8:	200001a4 	.word	0x200001a4

080028fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002900:	4b03      	ldr	r3, [pc, #12]	@ (8002910 <TIM2_IRQHandler+0x14>)
 8002902:	0018      	movs	r0, r3
 8002904:	f003 fc84 	bl	8006210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002908:	46c0      	nop			@ (mov r8, r8)
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			@ (mov r8, r8)
 8002910:	200001f0 	.word	0x200001f0

08002914 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002918:	4b03      	ldr	r3, [pc, #12]	@ (8002928 <TIM3_IRQHandler+0x14>)
 800291a:	0018      	movs	r0, r3
 800291c:	f003 fc78 	bl	8006210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002920:	46c0      	nop			@ (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			@ (mov r8, r8)
 8002928:	2000023c 	.word	0x2000023c

0800292c <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002930:	4b09      	ldr	r3, [pc, #36]	@ (8002958 <I2C2_IRQHandler+0x2c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	23e0      	movs	r3, #224	@ 0xe0
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4013      	ands	r3, r2
 800293c:	d004      	beq.n	8002948 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 800293e:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <I2C2_IRQHandler+0x2c>)
 8002940:	0018      	movs	r0, r3
 8002942:	f001 fab9 	bl	8003eb8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8002946:	e003      	b.n	8002950 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8002948:	4b03      	ldr	r3, [pc, #12]	@ (8002958 <I2C2_IRQHandler+0x2c>)
 800294a:	0018      	movs	r0, r3
 800294c:	f001 fa9a 	bl	8003e84 <HAL_I2C_EV_IRQHandler>
}
 8002950:	46c0      	nop			@ (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	20000098 	.word	0x20000098

0800295c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002960:	46c0      	nop			@ (mov r8, r8)
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002968:	480d      	ldr	r0, [pc, #52]	@ (80029a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800296a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800296c:	f7ff fff6 	bl	800295c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002970:	480c      	ldr	r0, [pc, #48]	@ (80029a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002972:	490d      	ldr	r1, [pc, #52]	@ (80029a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002974:	4a0d      	ldr	r2, [pc, #52]	@ (80029ac <LoopForever+0xe>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002978:	e002      	b.n	8002980 <LoopCopyDataInit>

0800297a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800297c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297e:	3304      	adds	r3, #4

08002980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002984:	d3f9      	bcc.n	800297a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002986:	4a0a      	ldr	r2, [pc, #40]	@ (80029b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002988:	4c0a      	ldr	r4, [pc, #40]	@ (80029b4 <LoopForever+0x16>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800298c:	e001      	b.n	8002992 <LoopFillZerobss>

0800298e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002990:	3204      	adds	r2, #4

08002992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002994:	d3fb      	bcc.n	800298e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002996:	f003 fff1 	bl	800697c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800299a:	f7fd fea7 	bl	80006ec <main>

0800299e <LoopForever>:

LoopForever:
  b LoopForever
 800299e:	e7fe      	b.n	800299e <LoopForever>
  ldr   r0, =_estack
 80029a0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80029a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80029ac:	08006a24 	.word	0x08006a24
  ldr r2, =_sbss
 80029b0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80029b4:	200003d0 	.word	0x200003d0

080029b8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029b8:	e7fe      	b.n	80029b8 <ADC1_COMP_IRQHandler>
	...

080029bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029c2:	1dfb      	adds	r3, r7, #7
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029c8:	4b0b      	ldr	r3, [pc, #44]	@ (80029f8 <HAL_Init+0x3c>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4b0a      	ldr	r3, [pc, #40]	@ (80029f8 <HAL_Init+0x3c>)
 80029ce:	2180      	movs	r1, #128	@ 0x80
 80029d0:	0049      	lsls	r1, r1, #1
 80029d2:	430a      	orrs	r2, r1
 80029d4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029d6:	2001      	movs	r0, #1
 80029d8:	f000 f810 	bl	80029fc <HAL_InitTick>
 80029dc:	1e03      	subs	r3, r0, #0
 80029de:	d003      	beq.n	80029e8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80029e0:	1dfb      	adds	r3, r7, #7
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	e001      	b.n	80029ec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80029e8:	f7ff fe02 	bl	80025f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029ec:	1dfb      	adds	r3, r7, #7
 80029ee:	781b      	ldrb	r3, [r3, #0]
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40022000 	.word	0x40022000

080029fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a04:	230f      	movs	r3, #15
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <HAL_InitTick+0x88>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d02b      	beq.n	8002a6c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002a14:	4b1c      	ldr	r3, [pc, #112]	@ (8002a88 <HAL_InitTick+0x8c>)
 8002a16:	681c      	ldr	r4, [r3, #0]
 8002a18:	4b1a      	ldr	r3, [pc, #104]	@ (8002a84 <HAL_InitTick+0x88>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	23fa      	movs	r3, #250	@ 0xfa
 8002a20:	0098      	lsls	r0, r3, #2
 8002a22:	f7fd fb6f 	bl	8000104 <__udivsi3>
 8002a26:	0003      	movs	r3, r0
 8002a28:	0019      	movs	r1, r3
 8002a2a:	0020      	movs	r0, r4
 8002a2c:	f7fd fb6a 	bl	8000104 <__udivsi3>
 8002a30:	0003      	movs	r3, r0
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 f93d 	bl	8002cb2 <HAL_SYSTICK_Config>
 8002a38:	1e03      	subs	r3, r0, #0
 8002a3a:	d112      	bne.n	8002a62 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d80a      	bhi.n	8002a58 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	2301      	movs	r3, #1
 8002a46:	425b      	negs	r3, r3
 8002a48:	2200      	movs	r2, #0
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 f90c 	bl	8002c68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a50:	4b0e      	ldr	r3, [pc, #56]	@ (8002a8c <HAL_InitTick+0x90>)
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e00d      	b.n	8002a74 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002a58:	230f      	movs	r3, #15
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	e008      	b.n	8002a74 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a62:	230f      	movs	r3, #15
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	e003      	b.n	8002a74 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a6c:	230f      	movs	r3, #15
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002a74:	230f      	movs	r3, #15
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	781b      	ldrb	r3, [r3, #0]
}
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b005      	add	sp, #20
 8002a80:	bd90      	pop	{r4, r7, pc}
 8002a82:	46c0      	nop			@ (mov r8, r8)
 8002a84:	20000078 	.word	0x20000078
 8002a88:	20000070 	.word	0x20000070
 8002a8c:	20000074 	.word	0x20000074

08002a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_IncTick+0x1c>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	001a      	movs	r2, r3
 8002a9a:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <HAL_IncTick+0x20>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	18d2      	adds	r2, r2, r3
 8002aa0:	4b03      	ldr	r3, [pc, #12]	@ (8002ab0 <HAL_IncTick+0x20>)
 8002aa2:	601a      	str	r2, [r3, #0]
}
 8002aa4:	46c0      	nop			@ (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	20000078 	.word	0x20000078
 8002ab0:	200003cc 	.word	0x200003cc

08002ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab8:	4b02      	ldr	r3, [pc, #8]	@ (8002ac4 <HAL_GetTick+0x10>)
 8002aba:	681b      	ldr	r3, [r3, #0]
}
 8002abc:	0018      	movs	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	46c0      	nop			@ (mov r8, r8)
 8002ac4:	200003cc 	.word	0x200003cc

08002ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ad0:	f7ff fff0 	bl	8002ab4 <HAL_GetTick>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	d005      	beq.n	8002aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b0c <HAL_Delay+0x44>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	001a      	movs	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	189b      	adds	r3, r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aee:	46c0      	nop			@ (mov r8, r8)
 8002af0:	f7ff ffe0 	bl	8002ab4 <HAL_GetTick>
 8002af4:	0002      	movs	r2, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d8f7      	bhi.n	8002af0 <HAL_Delay+0x28>
  {
  }
}
 8002b00:	46c0      	nop			@ (mov r8, r8)
 8002b02:	46c0      	nop			@ (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b004      	add	sp, #16
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	46c0      	nop			@ (mov r8, r8)
 8002b0c:	20000078 	.word	0x20000078

08002b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	0002      	movs	r2, r0
 8002b18:	1dfb      	adds	r3, r7, #7
 8002b1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b1c:	1dfb      	adds	r3, r7, #7
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b22:	d809      	bhi.n	8002b38 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b24:	1dfb      	adds	r3, r7, #7
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	001a      	movs	r2, r3
 8002b2a:	231f      	movs	r3, #31
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	4b04      	ldr	r3, [pc, #16]	@ (8002b40 <__NVIC_EnableIRQ+0x30>)
 8002b30:	2101      	movs	r1, #1
 8002b32:	4091      	lsls	r1, r2
 8002b34:	000a      	movs	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002b38:	46c0      	nop			@ (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b002      	add	sp, #8
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	e000e100 	.word	0xe000e100

08002b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b44:	b590      	push	{r4, r7, lr}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	1dfb      	adds	r3, r7, #7
 8002b50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b52:	1dfb      	adds	r3, r7, #7
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b58:	d828      	bhi.n	8002bac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002c18 <__NVIC_SetPriority+0xd4>)
 8002b5c:	1dfb      	adds	r3, r7, #7
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b25b      	sxtb	r3, r3
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	33c0      	adds	r3, #192	@ 0xc0
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	589b      	ldr	r3, [r3, r2]
 8002b6a:	1dfa      	adds	r2, r7, #7
 8002b6c:	7812      	ldrb	r2, [r2, #0]
 8002b6e:	0011      	movs	r1, r2
 8002b70:	2203      	movs	r2, #3
 8002b72:	400a      	ands	r2, r1
 8002b74:	00d2      	lsls	r2, r2, #3
 8002b76:	21ff      	movs	r1, #255	@ 0xff
 8002b78:	4091      	lsls	r1, r2
 8002b7a:	000a      	movs	r2, r1
 8002b7c:	43d2      	mvns	r2, r2
 8002b7e:	401a      	ands	r2, r3
 8002b80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	019b      	lsls	r3, r3, #6
 8002b86:	22ff      	movs	r2, #255	@ 0xff
 8002b88:	401a      	ands	r2, r3
 8002b8a:	1dfb      	adds	r3, r7, #7
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	0018      	movs	r0, r3
 8002b90:	2303      	movs	r3, #3
 8002b92:	4003      	ands	r3, r0
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b98:	481f      	ldr	r0, [pc, #124]	@ (8002c18 <__NVIC_SetPriority+0xd4>)
 8002b9a:	1dfb      	adds	r3, r7, #7
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	b25b      	sxtb	r3, r3
 8002ba0:	089b      	lsrs	r3, r3, #2
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	33c0      	adds	r3, #192	@ 0xc0
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002baa:	e031      	b.n	8002c10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bac:	4a1b      	ldr	r2, [pc, #108]	@ (8002c1c <__NVIC_SetPriority+0xd8>)
 8002bae:	1dfb      	adds	r3, r7, #7
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	230f      	movs	r3, #15
 8002bb6:	400b      	ands	r3, r1
 8002bb8:	3b08      	subs	r3, #8
 8002bba:	089b      	lsrs	r3, r3, #2
 8002bbc:	3306      	adds	r3, #6
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	18d3      	adds	r3, r2, r3
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	1dfa      	adds	r2, r7, #7
 8002bc8:	7812      	ldrb	r2, [r2, #0]
 8002bca:	0011      	movs	r1, r2
 8002bcc:	2203      	movs	r2, #3
 8002bce:	400a      	ands	r2, r1
 8002bd0:	00d2      	lsls	r2, r2, #3
 8002bd2:	21ff      	movs	r1, #255	@ 0xff
 8002bd4:	4091      	lsls	r1, r2
 8002bd6:	000a      	movs	r2, r1
 8002bd8:	43d2      	mvns	r2, r2
 8002bda:	401a      	ands	r2, r3
 8002bdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	019b      	lsls	r3, r3, #6
 8002be2:	22ff      	movs	r2, #255	@ 0xff
 8002be4:	401a      	ands	r2, r3
 8002be6:	1dfb      	adds	r3, r7, #7
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	0018      	movs	r0, r3
 8002bec:	2303      	movs	r3, #3
 8002bee:	4003      	ands	r3, r0
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bf4:	4809      	ldr	r0, [pc, #36]	@ (8002c1c <__NVIC_SetPriority+0xd8>)
 8002bf6:	1dfb      	adds	r3, r7, #7
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	001c      	movs	r4, r3
 8002bfc:	230f      	movs	r3, #15
 8002bfe:	4023      	ands	r3, r4
 8002c00:	3b08      	subs	r3, #8
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	430a      	orrs	r2, r1
 8002c06:	3306      	adds	r3, #6
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	18c3      	adds	r3, r0, r3
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	601a      	str	r2, [r3, #0]
}
 8002c10:	46c0      	nop			@ (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b003      	add	sp, #12
 8002c16:	bd90      	pop	{r4, r7, pc}
 8002c18:	e000e100 	.word	0xe000e100
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	1e5a      	subs	r2, r3, #1
 8002c2c:	2380      	movs	r3, #128	@ 0x80
 8002c2e:	045b      	lsls	r3, r3, #17
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d301      	bcc.n	8002c38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c34:	2301      	movs	r3, #1
 8002c36:	e010      	b.n	8002c5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c38:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <SysTick_Config+0x44>)
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	3a01      	subs	r2, #1
 8002c3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c40:	2301      	movs	r3, #1
 8002c42:	425b      	negs	r3, r3
 8002c44:	2103      	movs	r1, #3
 8002c46:	0018      	movs	r0, r3
 8002c48:	f7ff ff7c 	bl	8002b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c4c:	4b05      	ldr	r3, [pc, #20]	@ (8002c64 <SysTick_Config+0x44>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c52:	4b04      	ldr	r3, [pc, #16]	@ (8002c64 <SysTick_Config+0x44>)
 8002c54:	2207      	movs	r2, #7
 8002c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b002      	add	sp, #8
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	e000e010 	.word	0xe000e010

08002c68 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	210f      	movs	r1, #15
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	1c02      	adds	r2, r0, #0
 8002c78:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	187b      	adds	r3, r7, r1
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	b25b      	sxtb	r3, r3
 8002c82:	0011      	movs	r1, r2
 8002c84:	0018      	movs	r0, r3
 8002c86:	f7ff ff5d 	bl	8002b44 <__NVIC_SetPriority>
}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b004      	add	sp, #16
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	0002      	movs	r2, r0
 8002c9a:	1dfb      	adds	r3, r7, #7
 8002c9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c9e:	1dfb      	adds	r3, r7, #7
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	b25b      	sxtb	r3, r3
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f7ff ff33 	bl	8002b10 <__NVIC_EnableIRQ>
}
 8002caa:	46c0      	nop			@ (mov r8, r8)
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b002      	add	sp, #8
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7ff ffaf 	bl	8002c20 <SysTick_Config>
 8002cc2:	0003      	movs	r3, r0
}
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b002      	add	sp, #8
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e077      	b.n	8002dce <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a3d      	ldr	r2, [pc, #244]	@ (8002dd8 <HAL_DMA_Init+0x10c>)
 8002ce4:	4694      	mov	ip, r2
 8002ce6:	4463      	add	r3, ip
 8002ce8:	2114      	movs	r1, #20
 8002cea:	0018      	movs	r0, r3
 8002cec:	f7fd fa0a 	bl	8000104 <__udivsi3>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	009a      	lsls	r2, r3, #2
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2225      	movs	r2, #37	@ 0x25
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4934      	ldr	r1, [pc, #208]	@ (8002ddc <HAL_DMA_Init+0x110>)
 8002d0c:	400a      	ands	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6819      	ldr	r1, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 f971 	bl	8003030 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	2380      	movs	r3, #128	@ 0x80
 8002d54:	01db      	lsls	r3, r3, #7
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d102      	bne.n	8002d60 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d68:	213f      	movs	r1, #63	@ 0x3f
 8002d6a:	400a      	ands	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d76:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d011      	beq.n	8002da4 <HAL_DMA_Init+0xd8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d80d      	bhi.n	8002da4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f000 f97c 	bl	8003088 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	e008      	b.n	8002db6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2225      	movs	r2, #37	@ 0x25
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2224      	movs	r2, #36	@ 0x24
 8002dc8:	2100      	movs	r1, #0
 8002dca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	0018      	movs	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b002      	add	sp, #8
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	46c0      	nop			@ (mov r8, r8)
 8002dd8:	bffdfff8 	.word	0xbffdfff8
 8002ddc:	ffff800f 	.word	0xffff800f

08002de0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de8:	210f      	movs	r1, #15
 8002dea:	187b      	adds	r3, r7, r1
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2225      	movs	r2, #37	@ 0x25
 8002df4:	5c9b      	ldrb	r3, [r3, r2]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d006      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2204      	movs	r2, #4
 8002e00:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002e02:	187b      	adds	r3, r7, r1
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	e049      	b.n	8002e9e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	210e      	movs	r1, #14
 8002e16:	438a      	bics	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	438a      	bics	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e34:	491d      	ldr	r1, [pc, #116]	@ (8002eac <HAL_DMA_Abort_IT+0xcc>)
 8002e36:	400a      	ands	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb0 <HAL_DMA_Abort_IT+0xd0>)
 8002e3c:	6859      	ldr	r1, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	221c      	movs	r2, #28
 8002e44:	4013      	ands	r3, r2
 8002e46:	2201      	movs	r2, #1
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	4b19      	ldr	r3, [pc, #100]	@ (8002eb0 <HAL_DMA_Abort_IT+0xd0>)
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002e58:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00c      	beq.n	8002e7c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e6c:	490f      	ldr	r1, [pc, #60]	@ (8002eac <HAL_DMA_Abort_IT+0xcc>)
 8002e6e:	400a      	ands	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002e7a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2225      	movs	r2, #37	@ 0x25
 8002e80:	2101      	movs	r1, #1
 8002e82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2224      	movs	r2, #36	@ 0x24
 8002e88:	2100      	movs	r1, #0
 8002e8a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d004      	beq.n	8002e9e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	0010      	movs	r0, r2
 8002e9c:	4798      	blx	r3
    }
  }
  return status;
 8002e9e:	230f      	movs	r3, #15
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	781b      	ldrb	r3, [r3, #0]
}
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b004      	add	sp, #16
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	fffffeff 	.word	0xfffffeff
 8002eb0:	40020000 	.word	0x40020000

08002eb4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002ebc:	4b55      	ldr	r3, [pc, #340]	@ (8003014 <HAL_DMA_IRQHandler+0x160>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	221c      	movs	r2, #28
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	409a      	lsls	r2, r3
 8002ed6:	0013      	movs	r3, r2
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4013      	ands	r3, r2
 8002edc:	d027      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x7a>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d023      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2220      	movs	r2, #32
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d107      	bne.n	8002f02 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2104      	movs	r1, #4
 8002efe:	438a      	bics	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002f02:	4b44      	ldr	r3, [pc, #272]	@ (8003014 <HAL_DMA_IRQHandler+0x160>)
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	221c      	movs	r2, #28
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2204      	movs	r2, #4
 8002f10:	409a      	lsls	r2, r3
 8002f12:	4b40      	ldr	r3, [pc, #256]	@ (8003014 <HAL_DMA_IRQHandler+0x160>)
 8002f14:	430a      	orrs	r2, r1
 8002f16:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d100      	bne.n	8002f22 <HAL_DMA_IRQHandler+0x6e>
 8002f20:	e073      	b.n	800300a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	0010      	movs	r0, r2
 8002f2a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002f2c:	e06d      	b.n	800300a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	221c      	movs	r2, #28
 8002f34:	4013      	ands	r3, r2
 8002f36:	2202      	movs	r2, #2
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	0013      	movs	r3, r2
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d02e      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0xec>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2202      	movs	r2, #2
 8002f46:	4013      	ands	r3, r2
 8002f48:	d02a      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2220      	movs	r2, #32
 8002f52:	4013      	ands	r3, r2
 8002f54:	d10b      	bne.n	8002f6e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	210a      	movs	r1, #10
 8002f62:	438a      	bics	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2225      	movs	r2, #37	@ 0x25
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002f6e:	4b29      	ldr	r3, [pc, #164]	@ (8003014 <HAL_DMA_IRQHandler+0x160>)
 8002f70:	6859      	ldr	r1, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	221c      	movs	r2, #28
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	409a      	lsls	r2, r3
 8002f7e:	4b25      	ldr	r3, [pc, #148]	@ (8003014 <HAL_DMA_IRQHandler+0x160>)
 8002f80:	430a      	orrs	r2, r1
 8002f82:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2224      	movs	r2, #36	@ 0x24
 8002f88:	2100      	movs	r1, #0
 8002f8a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d03a      	beq.n	800300a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	0010      	movs	r0, r2
 8002f9c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002f9e:	e034      	b.n	800300a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa4:	221c      	movs	r2, #28
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2208      	movs	r2, #8
 8002faa:	409a      	lsls	r2, r3
 8002fac:	0013      	movs	r3, r2
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d02b      	beq.n	800300c <HAL_DMA_IRQHandler+0x158>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2208      	movs	r2, #8
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d027      	beq.n	800300c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	210e      	movs	r1, #14
 8002fc8:	438a      	bics	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002fcc:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <HAL_DMA_IRQHandler+0x160>)
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd4:	221c      	movs	r2, #28
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2201      	movs	r2, #1
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8003014 <HAL_DMA_IRQHandler+0x160>)
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2225      	movs	r2, #37	@ 0x25
 8002fec:	2101      	movs	r1, #1
 8002fee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2224      	movs	r2, #36	@ 0x24
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	0010      	movs	r0, r2
 8003008:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	46c0      	nop			@ (mov r8, r8)
}
 800300e:	46bd      	mov	sp, r7
 8003010:	b004      	add	sp, #16
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40020000 	.word	0x40020000

08003018 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2225      	movs	r2, #37	@ 0x25
 8003024:	5c9b      	ldrb	r3, [r3, r2]
 8003026:	b2db      	uxtb	r3, r3
}
 8003028:	0018      	movs	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	b002      	add	sp, #8
 800302e:	bd80      	pop	{r7, pc}

08003030 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	089b      	lsrs	r3, r3, #2
 800303e:	4a10      	ldr	r2, [pc, #64]	@ (8003080 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003040:	4694      	mov	ip, r2
 8003042:	4463      	add	r3, ip
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	001a      	movs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	001a      	movs	r2, r3
 8003052:	23ff      	movs	r3, #255	@ 0xff
 8003054:	4013      	ands	r3, r2
 8003056:	3b08      	subs	r3, #8
 8003058:	2114      	movs	r1, #20
 800305a:	0018      	movs	r0, r3
 800305c:	f7fd f852 	bl	8000104 <__udivsi3>
 8003060:	0003      	movs	r3, r0
 8003062:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a07      	ldr	r2, [pc, #28]	@ (8003084 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003068:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	221f      	movs	r2, #31
 800306e:	4013      	ands	r3, r2
 8003070:	2201      	movs	r2, #1
 8003072:	409a      	lsls	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003078:	46c0      	nop			@ (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	b004      	add	sp, #16
 800307e:	bd80      	pop	{r7, pc}
 8003080:	10008200 	.word	0x10008200
 8003084:	40020880 	.word	0x40020880

08003088 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	223f      	movs	r2, #63	@ 0x3f
 8003096:	4013      	ands	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4a0a      	ldr	r2, [pc, #40]	@ (80030c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800309e:	4694      	mov	ip, r2
 80030a0:	4463      	add	r3, ip
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	001a      	movs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a07      	ldr	r2, [pc, #28]	@ (80030cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80030ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	2203      	movs	r2, #3
 80030b6:	4013      	ands	r3, r2
 80030b8:	2201      	movs	r2, #1
 80030ba:	409a      	lsls	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80030c0:	46c0      	nop			@ (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b004      	add	sp, #16
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	1000823f 	.word	0x1000823f
 80030cc:	40020940 	.word	0x40020940

080030d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030de:	e147      	b.n	8003370 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4091      	lsls	r1, r2
 80030ea:	000a      	movs	r2, r1
 80030ec:	4013      	ands	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d100      	bne.n	80030f8 <HAL_GPIO_Init+0x28>
 80030f6:	e138      	b.n	800336a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2203      	movs	r2, #3
 80030fe:	4013      	ands	r3, r2
 8003100:	2b01      	cmp	r3, #1
 8003102:	d005      	beq.n	8003110 <HAL_GPIO_Init+0x40>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2203      	movs	r2, #3
 800310a:	4013      	ands	r3, r2
 800310c:	2b02      	cmp	r3, #2
 800310e:	d130      	bne.n	8003172 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	2203      	movs	r2, #3
 800311c:	409a      	lsls	r2, r3
 800311e:	0013      	movs	r3, r2
 8003120:	43da      	mvns	r2, r3
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	409a      	lsls	r2, r3
 8003132:	0013      	movs	r3, r2
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003146:	2201      	movs	r2, #1
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	409a      	lsls	r2, r3
 800314c:	0013      	movs	r3, r2
 800314e:	43da      	mvns	r2, r3
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	091b      	lsrs	r3, r3, #4
 800315c:	2201      	movs	r2, #1
 800315e:	401a      	ands	r2, r3
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	409a      	lsls	r2, r3
 8003164:	0013      	movs	r3, r2
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2203      	movs	r2, #3
 8003178:	4013      	ands	r3, r2
 800317a:	2b03      	cmp	r3, #3
 800317c:	d017      	beq.n	80031ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	2203      	movs	r2, #3
 800318a:	409a      	lsls	r2, r3
 800318c:	0013      	movs	r3, r2
 800318e:	43da      	mvns	r2, r3
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	409a      	lsls	r2, r3
 80031a0:	0013      	movs	r3, r2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2203      	movs	r2, #3
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d123      	bne.n	8003202 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	08da      	lsrs	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3208      	adds	r2, #8
 80031c2:	0092      	lsls	r2, r2, #2
 80031c4:	58d3      	ldr	r3, [r2, r3]
 80031c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2207      	movs	r2, #7
 80031cc:	4013      	ands	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	220f      	movs	r2, #15
 80031d2:	409a      	lsls	r2, r3
 80031d4:	0013      	movs	r3, r2
 80031d6:	43da      	mvns	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2107      	movs	r1, #7
 80031e6:	400b      	ands	r3, r1
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	409a      	lsls	r2, r3
 80031ec:	0013      	movs	r3, r2
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	08da      	lsrs	r2, r3, #3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3208      	adds	r2, #8
 80031fc:	0092      	lsls	r2, r2, #2
 80031fe:	6939      	ldr	r1, [r7, #16]
 8003200:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2203      	movs	r2, #3
 800320e:	409a      	lsls	r2, r3
 8003210:	0013      	movs	r3, r2
 8003212:	43da      	mvns	r2, r3
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4013      	ands	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2203      	movs	r2, #3
 8003220:	401a      	ands	r2, r3
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	409a      	lsls	r2, r3
 8003228:	0013      	movs	r3, r2
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	23c0      	movs	r3, #192	@ 0xc0
 800323c:	029b      	lsls	r3, r3, #10
 800323e:	4013      	ands	r3, r2
 8003240:	d100      	bne.n	8003244 <HAL_GPIO_Init+0x174>
 8003242:	e092      	b.n	800336a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003244:	4a50      	ldr	r2, [pc, #320]	@ (8003388 <HAL_GPIO_Init+0x2b8>)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	3318      	adds	r3, #24
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	589b      	ldr	r3, [r3, r2]
 8003250:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2203      	movs	r2, #3
 8003256:	4013      	ands	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	220f      	movs	r2, #15
 800325c:	409a      	lsls	r2, r3
 800325e:	0013      	movs	r3, r2
 8003260:	43da      	mvns	r2, r3
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4013      	ands	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	23a0      	movs	r3, #160	@ 0xa0
 800326c:	05db      	lsls	r3, r3, #23
 800326e:	429a      	cmp	r2, r3
 8003270:	d013      	beq.n	800329a <HAL_GPIO_Init+0x1ca>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a45      	ldr	r2, [pc, #276]	@ (800338c <HAL_GPIO_Init+0x2bc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00d      	beq.n	8003296 <HAL_GPIO_Init+0x1c6>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a44      	ldr	r2, [pc, #272]	@ (8003390 <HAL_GPIO_Init+0x2c0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d007      	beq.n	8003292 <HAL_GPIO_Init+0x1c2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a43      	ldr	r2, [pc, #268]	@ (8003394 <HAL_GPIO_Init+0x2c4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d101      	bne.n	800328e <HAL_GPIO_Init+0x1be>
 800328a:	2303      	movs	r3, #3
 800328c:	e006      	b.n	800329c <HAL_GPIO_Init+0x1cc>
 800328e:	2305      	movs	r3, #5
 8003290:	e004      	b.n	800329c <HAL_GPIO_Init+0x1cc>
 8003292:	2302      	movs	r3, #2
 8003294:	e002      	b.n	800329c <HAL_GPIO_Init+0x1cc>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <HAL_GPIO_Init+0x1cc>
 800329a:	2300      	movs	r3, #0
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	2103      	movs	r1, #3
 80032a0:	400a      	ands	r2, r1
 80032a2:	00d2      	lsls	r2, r2, #3
 80032a4:	4093      	lsls	r3, r2
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80032ac:	4936      	ldr	r1, [pc, #216]	@ (8003388 <HAL_GPIO_Init+0x2b8>)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	3318      	adds	r3, #24
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032ba:	4b33      	ldr	r3, [pc, #204]	@ (8003388 <HAL_GPIO_Init+0x2b8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	43da      	mvns	r2, r3
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	2380      	movs	r3, #128	@ 0x80
 80032d0:	035b      	lsls	r3, r3, #13
 80032d2:	4013      	ands	r3, r2
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032de:	4b2a      	ldr	r3, [pc, #168]	@ (8003388 <HAL_GPIO_Init+0x2b8>)
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80032e4:	4b28      	ldr	r3, [pc, #160]	@ (8003388 <HAL_GPIO_Init+0x2b8>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	43da      	mvns	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	2380      	movs	r3, #128	@ 0x80
 80032fa:	039b      	lsls	r3, r3, #14
 80032fc:	4013      	ands	r3, r2
 80032fe:	d003      	beq.n	8003308 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003308:	4b1f      	ldr	r3, [pc, #124]	@ (8003388 <HAL_GPIO_Init+0x2b8>)
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800330e:	4a1e      	ldr	r2, [pc, #120]	@ (8003388 <HAL_GPIO_Init+0x2b8>)
 8003310:	2384      	movs	r3, #132	@ 0x84
 8003312:	58d3      	ldr	r3, [r2, r3]
 8003314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	43da      	mvns	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4013      	ands	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	2380      	movs	r3, #128	@ 0x80
 8003326:	029b      	lsls	r3, r3, #10
 8003328:	4013      	ands	r3, r2
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003334:	4914      	ldr	r1, [pc, #80]	@ (8003388 <HAL_GPIO_Init+0x2b8>)
 8003336:	2284      	movs	r2, #132	@ 0x84
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800333c:	4a12      	ldr	r2, [pc, #72]	@ (8003388 <HAL_GPIO_Init+0x2b8>)
 800333e:	2380      	movs	r3, #128	@ 0x80
 8003340:	58d3      	ldr	r3, [r2, r3]
 8003342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	43da      	mvns	r2, r3
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4013      	ands	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	2380      	movs	r3, #128	@ 0x80
 8003354:	025b      	lsls	r3, r3, #9
 8003356:	4013      	ands	r3, r2
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003362:	4909      	ldr	r1, [pc, #36]	@ (8003388 <HAL_GPIO_Init+0x2b8>)
 8003364:	2280      	movs	r2, #128	@ 0x80
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	3301      	adds	r3, #1
 800336e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	40da      	lsrs	r2, r3
 8003378:	1e13      	subs	r3, r2, #0
 800337a:	d000      	beq.n	800337e <HAL_GPIO_Init+0x2ae>
 800337c:	e6b0      	b.n	80030e0 <HAL_GPIO_Init+0x10>
  }
}
 800337e:	46c0      	nop			@ (mov r8, r8)
 8003380:	46c0      	nop			@ (mov r8, r8)
 8003382:	46bd      	mov	sp, r7
 8003384:	b006      	add	sp, #24
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021800 	.word	0x40021800
 800338c:	50000400 	.word	0x50000400
 8003390:	50000800 	.word	0x50000800
 8003394:	50000c00 	.word	0x50000c00

08003398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	000a      	movs	r2, r1
 80033a2:	1cbb      	adds	r3, r7, #2
 80033a4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	1cba      	adds	r2, r7, #2
 80033ac:	8812      	ldrh	r2, [r2, #0]
 80033ae:	4013      	ands	r3, r2
 80033b0:	d004      	beq.n	80033bc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80033b2:	230f      	movs	r3, #15
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	2201      	movs	r2, #1
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	e003      	b.n	80033c4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033bc:	230f      	movs	r3, #15
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80033c4:	230f      	movs	r3, #15
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	781b      	ldrb	r3, [r3, #0]
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b004      	add	sp, #16
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	0008      	movs	r0, r1
 80033dc:	0011      	movs	r1, r2
 80033de:	1cbb      	adds	r3, r7, #2
 80033e0:	1c02      	adds	r2, r0, #0
 80033e2:	801a      	strh	r2, [r3, #0]
 80033e4:	1c7b      	adds	r3, r7, #1
 80033e6:	1c0a      	adds	r2, r1, #0
 80033e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033ea:	1c7b      	adds	r3, r7, #1
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033f2:	1cbb      	adds	r3, r7, #2
 80033f4:	881a      	ldrh	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033fa:	e003      	b.n	8003404 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033fc:	1cbb      	adds	r3, r7, #2
 80033fe:	881a      	ldrh	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003404:	46c0      	nop			@ (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	b002      	add	sp, #8
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	0002      	movs	r2, r0
 8003414:	1dbb      	adds	r3, r7, #6
 8003416:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003418:	4b10      	ldr	r3, [pc, #64]	@ (800345c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	1dba      	adds	r2, r7, #6
 800341e:	8812      	ldrh	r2, [r2, #0]
 8003420:	4013      	ands	r3, r2
 8003422:	d008      	beq.n	8003436 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003424:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003426:	1dba      	adds	r2, r7, #6
 8003428:	8812      	ldrh	r2, [r2, #0]
 800342a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800342c:	1dbb      	adds	r3, r7, #6
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	0018      	movs	r0, r3
 8003432:	f000 f815 	bl	8003460 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003436:	4b09      	ldr	r3, [pc, #36]	@ (800345c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	1dba      	adds	r2, r7, #6
 800343c:	8812      	ldrh	r2, [r2, #0]
 800343e:	4013      	ands	r3, r2
 8003440:	d008      	beq.n	8003454 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003442:	4b06      	ldr	r3, [pc, #24]	@ (800345c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003444:	1dba      	adds	r2, r7, #6
 8003446:	8812      	ldrh	r2, [r2, #0]
 8003448:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800344a:	1dbb      	adds	r3, r7, #6
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	0018      	movs	r0, r3
 8003450:	f7ff f88c 	bl	800256c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003454:	46c0      	nop			@ (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b002      	add	sp, #8
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40021800 	.word	0x40021800

08003460 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	0002      	movs	r2, r0
 8003468:	1dbb      	adds	r3, r7, #6
 800346a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800346c:	46c0      	nop			@ (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b002      	add	sp, #8
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e08f      	b.n	80035a6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2241      	movs	r2, #65	@ 0x41
 800348a:	5c9b      	ldrb	r3, [r3, r2]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d107      	bne.n	80034a2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2240      	movs	r2, #64	@ 0x40
 8003496:	2100      	movs	r1, #0
 8003498:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	0018      	movs	r0, r3
 800349e:	f7ff f8d3 	bl	8002648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2241      	movs	r2, #65	@ 0x41
 80034a6:	2124      	movs	r1, #36	@ 0x24
 80034a8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2101      	movs	r1, #1
 80034b6:	438a      	bics	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	493b      	ldr	r1, [pc, #236]	@ (80035b0 <HAL_I2C_Init+0x13c>)
 80034c4:	400a      	ands	r2, r1
 80034c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4938      	ldr	r1, [pc, #224]	@ (80035b4 <HAL_I2C_Init+0x140>)
 80034d4:	400a      	ands	r2, r1
 80034d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d108      	bne.n	80034f2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2180      	movs	r1, #128	@ 0x80
 80034ea:	0209      	lsls	r1, r1, #8
 80034ec:	430a      	orrs	r2, r1
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	e007      	b.n	8003502 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2184      	movs	r1, #132	@ 0x84
 80034fc:	0209      	lsls	r1, r1, #8
 80034fe:	430a      	orrs	r2, r1
 8003500:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d109      	bne.n	800351e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2180      	movs	r1, #128	@ 0x80
 8003516:	0109      	lsls	r1, r1, #4
 8003518:	430a      	orrs	r2, r1
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	e007      	b.n	800352e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4923      	ldr	r1, [pc, #140]	@ (80035b8 <HAL_I2C_Init+0x144>)
 800352a:	400a      	ands	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4920      	ldr	r1, [pc, #128]	@ (80035bc <HAL_I2C_Init+0x148>)
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	491a      	ldr	r1, [pc, #104]	@ (80035b4 <HAL_I2C_Init+0x140>)
 800354a:	400a      	ands	r2, r1
 800354c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	431a      	orrs	r2, r3
 8003558:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69d9      	ldr	r1, [r3, #28]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1a      	ldr	r2, [r3, #32]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2101      	movs	r1, #1
 8003584:	430a      	orrs	r2, r1
 8003586:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2241      	movs	r2, #65	@ 0x41
 8003592:	2120      	movs	r1, #32
 8003594:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2242      	movs	r2, #66	@ 0x42
 80035a0:	2100      	movs	r1, #0
 80035a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	0018      	movs	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b002      	add	sp, #8
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	f0ffffff 	.word	0xf0ffffff
 80035b4:	ffff7fff 	.word	0xffff7fff
 80035b8:	fffff7ff 	.word	0xfffff7ff
 80035bc:	02008000 	.word	0x02008000

080035c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b089      	sub	sp, #36	@ 0x24
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	0008      	movs	r0, r1
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	0019      	movs	r1, r3
 80035ce:	230a      	movs	r3, #10
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	1c02      	adds	r2, r0, #0
 80035d4:	801a      	strh	r2, [r3, #0]
 80035d6:	2308      	movs	r3, #8
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	1c0a      	adds	r2, r1, #0
 80035dc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2241      	movs	r2, #65	@ 0x41
 80035e2:	5c9b      	ldrb	r3, [r3, r2]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d000      	beq.n	80035ec <HAL_I2C_Master_Transmit+0x2c>
 80035ea:	e10a      	b.n	8003802 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2240      	movs	r2, #64	@ 0x40
 80035f0:	5c9b      	ldrb	r3, [r3, r2]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_I2C_Master_Transmit+0x3a>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e104      	b.n	8003804 <HAL_I2C_Master_Transmit+0x244>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2240      	movs	r2, #64	@ 0x40
 80035fe:	2101      	movs	r1, #1
 8003600:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003602:	f7ff fa57 	bl	8002ab4 <HAL_GetTick>
 8003606:	0003      	movs	r3, r0
 8003608:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800360a:	2380      	movs	r3, #128	@ 0x80
 800360c:	0219      	lsls	r1, r3, #8
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2319      	movs	r3, #25
 8003616:	2201      	movs	r2, #1
 8003618:	f001 fa96 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 800361c:	1e03      	subs	r3, r0, #0
 800361e:	d001      	beq.n	8003624 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0ef      	b.n	8003804 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2241      	movs	r2, #65	@ 0x41
 8003628:	2121      	movs	r1, #33	@ 0x21
 800362a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2242      	movs	r2, #66	@ 0x42
 8003630:	2110      	movs	r1, #16
 8003632:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2208      	movs	r2, #8
 8003644:	18ba      	adds	r2, r7, r2
 8003646:	8812      	ldrh	r2, [r2, #0]
 8003648:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	2bff      	cmp	r3, #255	@ 0xff
 8003658:	d906      	bls.n	8003668 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	22ff      	movs	r2, #255	@ 0xff
 800365e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003660:	2380      	movs	r3, #128	@ 0x80
 8003662:	045b      	lsls	r3, r3, #17
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	e007      	b.n	8003678 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003672:	2380      	movs	r3, #128	@ 0x80
 8003674:	049b      	lsls	r3, r3, #18
 8003676:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367c:	2b00      	cmp	r3, #0
 800367e:	d027      	beq.n	80036d0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	781a      	ldrb	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	3301      	adds	r3, #1
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	697c      	ldr	r4, [r7, #20]
 80036bc:	230a      	movs	r3, #10
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	8819      	ldrh	r1, [r3, #0]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	4b51      	ldr	r3, [pc, #324]	@ (800380c <HAL_I2C_Master_Transmit+0x24c>)
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	0023      	movs	r3, r4
 80036ca:	f001 fcb5 	bl	8005038 <I2C_TransferConfig>
 80036ce:	e06f      	b.n	80037b0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	697c      	ldr	r4, [r7, #20]
 80036d8:	230a      	movs	r3, #10
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	8819      	ldrh	r1, [r3, #0]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	4b4a      	ldr	r3, [pc, #296]	@ (800380c <HAL_I2C_Master_Transmit+0x24c>)
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	0023      	movs	r3, r4
 80036e6:	f001 fca7 	bl	8005038 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80036ea:	e061      	b.n	80037b0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	0018      	movs	r0, r3
 80036f4:	f001 fa80 	bl	8004bf8 <I2C_WaitOnTXISFlagUntilTimeout>
 80036f8:	1e03      	subs	r3, r0, #0
 80036fa:	d001      	beq.n	8003700 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e081      	b.n	8003804 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003704:	781a      	ldrb	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d03a      	beq.n	80037b0 <HAL_I2C_Master_Transmit+0x1f0>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d136      	bne.n	80037b0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003742:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	0013      	movs	r3, r2
 800374c:	2200      	movs	r2, #0
 800374e:	2180      	movs	r1, #128	@ 0x80
 8003750:	f001 f9fa 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8003754:	1e03      	subs	r3, r0, #0
 8003756:	d001      	beq.n	800375c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e053      	b.n	8003804 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	2bff      	cmp	r3, #255	@ 0xff
 8003764:	d911      	bls.n	800378a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	22ff      	movs	r2, #255	@ 0xff
 800376a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003770:	b2da      	uxtb	r2, r3
 8003772:	2380      	movs	r3, #128	@ 0x80
 8003774:	045c      	lsls	r4, r3, #17
 8003776:	230a      	movs	r3, #10
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	8819      	ldrh	r1, [r3, #0]
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	2300      	movs	r3, #0
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	0023      	movs	r3, r4
 8003784:	f001 fc58 	bl	8005038 <I2C_TransferConfig>
 8003788:	e012      	b.n	80037b0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003798:	b2da      	uxtb	r2, r3
 800379a:	2380      	movs	r3, #128	@ 0x80
 800379c:	049c      	lsls	r4, r3, #18
 800379e:	230a      	movs	r3, #10
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	8819      	ldrh	r1, [r3, #0]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	2300      	movs	r3, #0
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	0023      	movs	r3, r4
 80037ac:	f001 fc44 	bl	8005038 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d198      	bne.n	80036ec <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	0018      	movs	r0, r3
 80037c2:	f001 fa5f 	bl	8004c84 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037c6:	1e03      	subs	r3, r0, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e01a      	b.n	8003804 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2220      	movs	r2, #32
 80037d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	490b      	ldr	r1, [pc, #44]	@ (8003810 <HAL_I2C_Master_Transmit+0x250>)
 80037e2:	400a      	ands	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2241      	movs	r2, #65	@ 0x41
 80037ea:	2120      	movs	r1, #32
 80037ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2242      	movs	r2, #66	@ 0x42
 80037f2:	2100      	movs	r1, #0
 80037f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2240      	movs	r2, #64	@ 0x40
 80037fa:	2100      	movs	r1, #0
 80037fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	e000      	b.n	8003804 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003802:	2302      	movs	r3, #2
  }
}
 8003804:	0018      	movs	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	b007      	add	sp, #28
 800380a:	bd90      	pop	{r4, r7, pc}
 800380c:	80002000 	.word	0x80002000
 8003810:	fe00e800 	.word	0xfe00e800

08003814 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b089      	sub	sp, #36	@ 0x24
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	0008      	movs	r0, r1
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	0019      	movs	r1, r3
 8003822:	230a      	movs	r3, #10
 8003824:	18fb      	adds	r3, r7, r3
 8003826:	1c02      	adds	r2, r0, #0
 8003828:	801a      	strh	r2, [r3, #0]
 800382a:	2308      	movs	r3, #8
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	1c0a      	adds	r2, r1, #0
 8003830:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2241      	movs	r2, #65	@ 0x41
 8003836:	5c9b      	ldrb	r3, [r3, r2]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b20      	cmp	r3, #32
 800383c:	d000      	beq.n	8003840 <HAL_I2C_Master_Receive+0x2c>
 800383e:	e0e8      	b.n	8003a12 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2240      	movs	r2, #64	@ 0x40
 8003844:	5c9b      	ldrb	r3, [r3, r2]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_I2C_Master_Receive+0x3a>
 800384a:	2302      	movs	r3, #2
 800384c:	e0e2      	b.n	8003a14 <HAL_I2C_Master_Receive+0x200>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2240      	movs	r2, #64	@ 0x40
 8003852:	2101      	movs	r1, #1
 8003854:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003856:	f7ff f92d 	bl	8002ab4 <HAL_GetTick>
 800385a:	0003      	movs	r3, r0
 800385c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800385e:	2380      	movs	r3, #128	@ 0x80
 8003860:	0219      	lsls	r1, r3, #8
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	2319      	movs	r3, #25
 800386a:	2201      	movs	r2, #1
 800386c:	f001 f96c 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8003870:	1e03      	subs	r3, r0, #0
 8003872:	d001      	beq.n	8003878 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0cd      	b.n	8003a14 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2241      	movs	r2, #65	@ 0x41
 800387c:	2122      	movs	r1, #34	@ 0x22
 800387e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2242      	movs	r2, #66	@ 0x42
 8003884:	2110      	movs	r1, #16
 8003886:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2208      	movs	r2, #8
 8003898:	18ba      	adds	r2, r7, r2
 800389a:	8812      	ldrh	r2, [r2, #0]
 800389c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2bff      	cmp	r3, #255	@ 0xff
 80038ac:	d911      	bls.n	80038d2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	22ff      	movs	r2, #255	@ 0xff
 80038b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	2380      	movs	r3, #128	@ 0x80
 80038bc:	045c      	lsls	r4, r3, #17
 80038be:	230a      	movs	r3, #10
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	8819      	ldrh	r1, [r3, #0]
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	4b55      	ldr	r3, [pc, #340]	@ (8003a1c <HAL_I2C_Master_Receive+0x208>)
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	0023      	movs	r3, r4
 80038cc:	f001 fbb4 	bl	8005038 <I2C_TransferConfig>
 80038d0:	e076      	b.n	80039c0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	2380      	movs	r3, #128	@ 0x80
 80038e4:	049c      	lsls	r4, r3, #18
 80038e6:	230a      	movs	r3, #10
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	8819      	ldrh	r1, [r3, #0]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	4b4b      	ldr	r3, [pc, #300]	@ (8003a1c <HAL_I2C_Master_Receive+0x208>)
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	0023      	movs	r3, r4
 80038f4:	f001 fba0 	bl	8005038 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80038f8:	e062      	b.n	80039c0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	0018      	movs	r0, r3
 8003902:	f001 fa03 	bl	8004d0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003906:	1e03      	subs	r3, r0, #0
 8003908:	d001      	beq.n	800390e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e082      	b.n	8003a14 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d03a      	beq.n	80039c0 <HAL_I2C_Master_Receive+0x1ac>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394e:	2b00      	cmp	r3, #0
 8003950:	d136      	bne.n	80039c0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	0013      	movs	r3, r2
 800395c:	2200      	movs	r2, #0
 800395e:	2180      	movs	r1, #128	@ 0x80
 8003960:	f001 f8f2 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8003964:	1e03      	subs	r3, r0, #0
 8003966:	d001      	beq.n	800396c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e053      	b.n	8003a14 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	2bff      	cmp	r3, #255	@ 0xff
 8003974:	d911      	bls.n	800399a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	22ff      	movs	r2, #255	@ 0xff
 800397a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003980:	b2da      	uxtb	r2, r3
 8003982:	2380      	movs	r3, #128	@ 0x80
 8003984:	045c      	lsls	r4, r3, #17
 8003986:	230a      	movs	r3, #10
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	8819      	ldrh	r1, [r3, #0]
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	2300      	movs	r3, #0
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	0023      	movs	r3, r4
 8003994:	f001 fb50 	bl	8005038 <I2C_TransferConfig>
 8003998:	e012      	b.n	80039c0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	2380      	movs	r3, #128	@ 0x80
 80039ac:	049c      	lsls	r4, r3, #18
 80039ae:	230a      	movs	r3, #10
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	8819      	ldrh	r1, [r3, #0]
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	2300      	movs	r3, #0
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	0023      	movs	r3, r4
 80039bc:	f001 fb3c 	bl	8005038 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d197      	bne.n	80038fa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f001 f957 	bl	8004c84 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039d6:	1e03      	subs	r3, r0, #0
 80039d8:	d001      	beq.n	80039de <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e01a      	b.n	8003a14 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2220      	movs	r2, #32
 80039e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	490b      	ldr	r1, [pc, #44]	@ (8003a20 <HAL_I2C_Master_Receive+0x20c>)
 80039f2:	400a      	ands	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2241      	movs	r2, #65	@ 0x41
 80039fa:	2120      	movs	r1, #32
 80039fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2242      	movs	r2, #66	@ 0x42
 8003a02:	2100      	movs	r1, #0
 8003a04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2240      	movs	r2, #64	@ 0x40
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e000      	b.n	8003a14 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
  }
}
 8003a14:	0018      	movs	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b007      	add	sp, #28
 8003a1a:	bd90      	pop	{r4, r7, pc}
 8003a1c:	80002400 	.word	0x80002400
 8003a20:	fe00e800 	.word	0xfe00e800

08003a24 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a24:	b590      	push	{r4, r7, lr}
 8003a26:	b089      	sub	sp, #36	@ 0x24
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	000c      	movs	r4, r1
 8003a2e:	0010      	movs	r0, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	230a      	movs	r3, #10
 8003a34:	18fb      	adds	r3, r7, r3
 8003a36:	1c22      	adds	r2, r4, #0
 8003a38:	801a      	strh	r2, [r3, #0]
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	1c02      	adds	r2, r0, #0
 8003a40:	801a      	strh	r2, [r3, #0]
 8003a42:	1dbb      	adds	r3, r7, #6
 8003a44:	1c0a      	adds	r2, r1, #0
 8003a46:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2241      	movs	r2, #65	@ 0x41
 8003a4c:	5c9b      	ldrb	r3, [r3, r2]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d000      	beq.n	8003a56 <HAL_I2C_Mem_Read+0x32>
 8003a54:	e110      	b.n	8003c78 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <HAL_I2C_Mem_Read+0x42>
 8003a5c:	232c      	movs	r3, #44	@ 0x2c
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d105      	bne.n	8003a72 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2280      	movs	r2, #128	@ 0x80
 8003a6a:	0092      	lsls	r2, r2, #2
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e103      	b.n	8003c7a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2240      	movs	r2, #64	@ 0x40
 8003a76:	5c9b      	ldrb	r3, [r3, r2]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_I2C_Mem_Read+0x5c>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e0fc      	b.n	8003c7a <HAL_I2C_Mem_Read+0x256>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2240      	movs	r2, #64	@ 0x40
 8003a84:	2101      	movs	r1, #1
 8003a86:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a88:	f7ff f814 	bl	8002ab4 <HAL_GetTick>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a90:	2380      	movs	r3, #128	@ 0x80
 8003a92:	0219      	lsls	r1, r3, #8
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	2319      	movs	r3, #25
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f001 f853 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8003aa2:	1e03      	subs	r3, r0, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0e7      	b.n	8003c7a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2241      	movs	r2, #65	@ 0x41
 8003aae:	2122      	movs	r1, #34	@ 0x22
 8003ab0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2242      	movs	r2, #66	@ 0x42
 8003ab6:	2140      	movs	r1, #64	@ 0x40
 8003ab8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ac4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	222c      	movs	r2, #44	@ 0x2c
 8003aca:	18ba      	adds	r2, r7, r2
 8003acc:	8812      	ldrh	r2, [r2, #0]
 8003ace:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ad6:	1dbb      	adds	r3, r7, #6
 8003ad8:	881c      	ldrh	r4, [r3, #0]
 8003ada:	2308      	movs	r3, #8
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	881a      	ldrh	r2, [r3, #0]
 8003ae0:	230a      	movs	r3, #10
 8003ae2:	18fb      	adds	r3, r7, r3
 8003ae4:	8819      	ldrh	r1, [r3, #0]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	9301      	str	r3, [sp, #4]
 8003aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	0023      	movs	r3, r4
 8003af2:	f000 fb73 	bl	80041dc <I2C_RequestMemoryRead>
 8003af6:	1e03      	subs	r3, r0, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2240      	movs	r2, #64	@ 0x40
 8003afe:	2100      	movs	r1, #0
 8003b00:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e0b9      	b.n	8003c7a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2bff      	cmp	r3, #255	@ 0xff
 8003b0e:	d911      	bls.n	8003b34 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	22ff      	movs	r2, #255	@ 0xff
 8003b14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	2380      	movs	r3, #128	@ 0x80
 8003b1e:	045c      	lsls	r4, r3, #17
 8003b20:	230a      	movs	r3, #10
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	8819      	ldrh	r1, [r3, #0]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	4b56      	ldr	r3, [pc, #344]	@ (8003c84 <HAL_I2C_Mem_Read+0x260>)
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	0023      	movs	r3, r4
 8003b2e:	f001 fa83 	bl	8005038 <I2C_TransferConfig>
 8003b32:	e012      	b.n	8003b5a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	2380      	movs	r3, #128	@ 0x80
 8003b46:	049c      	lsls	r4, r3, #18
 8003b48:	230a      	movs	r3, #10
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	8819      	ldrh	r1, [r3, #0]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	4b4c      	ldr	r3, [pc, #304]	@ (8003c84 <HAL_I2C_Mem_Read+0x260>)
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	0023      	movs	r3, r4
 8003b56:	f001 fa6f 	bl	8005038 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	0013      	movs	r3, r2
 8003b64:	2200      	movs	r2, #0
 8003b66:	2104      	movs	r1, #4
 8003b68:	f000 ffee 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8003b6c:	1e03      	subs	r3, r0, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e082      	b.n	8003c7a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d03a      	beq.n	8003c26 <HAL_I2C_Mem_Read+0x202>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d136      	bne.n	8003c26 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	0013      	movs	r3, r2
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2180      	movs	r1, #128	@ 0x80
 8003bc6:	f000 ffbf 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8003bca:	1e03      	subs	r3, r0, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e053      	b.n	8003c7a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2bff      	cmp	r3, #255	@ 0xff
 8003bda:	d911      	bls.n	8003c00 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	22ff      	movs	r2, #255	@ 0xff
 8003be0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	2380      	movs	r3, #128	@ 0x80
 8003bea:	045c      	lsls	r4, r3, #17
 8003bec:	230a      	movs	r3, #10
 8003bee:	18fb      	adds	r3, r7, r3
 8003bf0:	8819      	ldrh	r1, [r3, #0]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	0023      	movs	r3, r4
 8003bfa:	f001 fa1d 	bl	8005038 <I2C_TransferConfig>
 8003bfe:	e012      	b.n	8003c26 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	2380      	movs	r3, #128	@ 0x80
 8003c12:	049c      	lsls	r4, r3, #18
 8003c14:	230a      	movs	r3, #10
 8003c16:	18fb      	adds	r3, r7, r3
 8003c18:	8819      	ldrh	r1, [r3, #0]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	0023      	movs	r3, r4
 8003c22:	f001 fa09 	bl	8005038 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d194      	bne.n	8003b5a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	0018      	movs	r0, r3
 8003c38:	f001 f824 	bl	8004c84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c3c:	1e03      	subs	r3, r0, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e01a      	b.n	8003c7a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	490c      	ldr	r1, [pc, #48]	@ (8003c88 <HAL_I2C_Mem_Read+0x264>)
 8003c58:	400a      	ands	r2, r1
 8003c5a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2241      	movs	r2, #65	@ 0x41
 8003c60:	2120      	movs	r1, #32
 8003c62:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2242      	movs	r2, #66	@ 0x42
 8003c68:	2100      	movs	r1, #0
 8003c6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2240      	movs	r2, #64	@ 0x40
 8003c70:	2100      	movs	r1, #0
 8003c72:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e000      	b.n	8003c7a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003c78:	2302      	movs	r3, #2
  }
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b007      	add	sp, #28
 8003c80:	bd90      	pop	{r4, r7, pc}
 8003c82:	46c0      	nop			@ (mov r8, r8)
 8003c84:	80002400 	.word	0x80002400
 8003c88:	fe00e800 	.word	0xfe00e800

08003c8c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	@ 0x28
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	230a      	movs	r3, #10
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	1c0a      	adds	r2, r1, #0
 8003c9e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2241      	movs	r2, #65	@ 0x41
 8003ca8:	5c9b      	ldrb	r3, [r3, r2]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d000      	beq.n	8003cb2 <HAL_I2C_IsDeviceReady+0x26>
 8003cb0:	e0df      	b.n	8003e72 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699a      	ldr	r2, [r3, #24]
 8003cb8:	2380      	movs	r3, #128	@ 0x80
 8003cba:	021b      	lsls	r3, r3, #8
 8003cbc:	401a      	ands	r2, r3
 8003cbe:	2380      	movs	r3, #128	@ 0x80
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d101      	bne.n	8003cca <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e0d4      	b.n	8003e74 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2240      	movs	r2, #64	@ 0x40
 8003cce:	5c9b      	ldrb	r3, [r3, r2]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_I2C_IsDeviceReady+0x4c>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e0cd      	b.n	8003e74 <HAL_I2C_IsDeviceReady+0x1e8>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2240      	movs	r2, #64	@ 0x40
 8003cdc:	2101      	movs	r1, #1
 8003cde:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2241      	movs	r2, #65	@ 0x41
 8003ce4:	2124      	movs	r1, #36	@ 0x24
 8003ce6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d107      	bne.n	8003d06 <HAL_I2C_IsDeviceReady+0x7a>
 8003cf6:	230a      	movs	r3, #10
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	059b      	lsls	r3, r3, #22
 8003cfe:	0d9b      	lsrs	r3, r3, #22
 8003d00:	4a5e      	ldr	r2, [pc, #376]	@ (8003e7c <HAL_I2C_IsDeviceReady+0x1f0>)
 8003d02:	431a      	orrs	r2, r3
 8003d04:	e006      	b.n	8003d14 <HAL_I2C_IsDeviceReady+0x88>
 8003d06:	230a      	movs	r3, #10
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	059b      	lsls	r3, r3, #22
 8003d0e:	0d9b      	lsrs	r3, r3, #22
 8003d10:	4a5b      	ldr	r2, [pc, #364]	@ (8003e80 <HAL_I2C_IsDeviceReady+0x1f4>)
 8003d12:	431a      	orrs	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003d1a:	f7fe fecb 	bl	8002ab4 <HAL_GetTick>
 8003d1e:	0003      	movs	r3, r0
 8003d20:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	3b20      	subs	r3, #32
 8003d2e:	425a      	negs	r2, r3
 8003d30:	4153      	adcs	r3, r2
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	231f      	movs	r3, #31
 8003d36:	18fb      	adds	r3, r7, r3
 8003d38:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	2210      	movs	r2, #16
 8003d42:	4013      	ands	r3, r2
 8003d44:	3b10      	subs	r3, #16
 8003d46:	425a      	negs	r2, r3
 8003d48:	4153      	adcs	r3, r2
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	231e      	movs	r3, #30
 8003d4e:	18fb      	adds	r3, r7, r3
 8003d50:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003d52:	e035      	b.n	8003dc0 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	3301      	adds	r3, #1
 8003d58:	d01a      	beq.n	8003d90 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d5a:	f7fe feab 	bl	8002ab4 <HAL_GetTick>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d302      	bcc.n	8003d70 <HAL_I2C_IsDeviceReady+0xe4>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10f      	bne.n	8003d90 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2241      	movs	r2, #65	@ 0x41
 8003d74:	2120      	movs	r1, #32
 8003d76:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2240      	movs	r2, #64	@ 0x40
 8003d88:	2100      	movs	r1, #0
 8003d8a:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e071      	b.n	8003e74 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2220      	movs	r2, #32
 8003d98:	4013      	ands	r3, r2
 8003d9a:	3b20      	subs	r3, #32
 8003d9c:	425a      	negs	r2, r3
 8003d9e:	4153      	adcs	r3, r2
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	231f      	movs	r3, #31
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	2210      	movs	r2, #16
 8003db0:	4013      	ands	r3, r2
 8003db2:	3b10      	subs	r3, #16
 8003db4:	425a      	negs	r2, r3
 8003db6:	4153      	adcs	r3, r2
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	231e      	movs	r3, #30
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003dc0:	231f      	movs	r3, #31
 8003dc2:	18fb      	adds	r3, r7, r3
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d104      	bne.n	8003dd4 <HAL_I2C_IsDeviceReady+0x148>
 8003dca:	231e      	movs	r3, #30
 8003dcc:	18fb      	adds	r3, r7, r3
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0bf      	beq.n	8003d54 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2210      	movs	r2, #16
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b10      	cmp	r3, #16
 8003de0:	d01a      	beq.n	8003e18 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	0013      	movs	r3, r2
 8003dec:	2200      	movs	r2, #0
 8003dee:	2120      	movs	r1, #32
 8003df0:	f000 feaa 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8003df4:	1e03      	subs	r3, r0, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e03b      	b.n	8003e74 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2220      	movs	r2, #32
 8003e02:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2241      	movs	r2, #65	@ 0x41
 8003e08:	2120      	movs	r1, #32
 8003e0a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2240      	movs	r2, #64	@ 0x40
 8003e10:	2100      	movs	r1, #0
 8003e12:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e02d      	b.n	8003e74 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	0013      	movs	r3, r2
 8003e22:	2200      	movs	r2, #0
 8003e24:	2120      	movs	r1, #32
 8003e26:	f000 fe8f 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8003e2a:	1e03      	subs	r3, r0, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e020      	b.n	8003e74 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2210      	movs	r2, #16
 8003e38:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	3301      	adds	r3, #1
 8003e46:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d900      	bls.n	8003e52 <HAL_I2C_IsDeviceReady+0x1c6>
 8003e50:	e74d      	b.n	8003cee <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2241      	movs	r2, #65	@ 0x41
 8003e56:	2120      	movs	r1, #32
 8003e58:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5e:	2220      	movs	r2, #32
 8003e60:	431a      	orrs	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2240      	movs	r2, #64	@ 0x40
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8003e72:	2302      	movs	r3, #2
  }
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b008      	add	sp, #32
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	02002000 	.word	0x02002000
 8003e80:	02002800 	.word	0x02002800

08003e84 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	68f9      	ldr	r1, [r7, #12]
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	4798      	blx	r3
  }
}
 8003eb0:	46c0      	nop			@ (mov r8, r8)
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b004      	add	sp, #16
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	2380      	movs	r3, #128	@ 0x80
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d00e      	beq.n	8003ef8 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	2280      	movs	r2, #128	@ 0x80
 8003ede:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2280      	movs	r2, #128	@ 0x80
 8003ef4:	0052      	lsls	r2, r2, #1
 8003ef6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	2380      	movs	r3, #128	@ 0x80
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4013      	ands	r3, r2
 8003f00:	d00e      	beq.n	8003f20 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2280      	movs	r2, #128	@ 0x80
 8003f06:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003f08:	d00a      	beq.n	8003f20 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0e:	2208      	movs	r2, #8
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2280      	movs	r2, #128	@ 0x80
 8003f1c:	00d2      	lsls	r2, r2, #3
 8003f1e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	2380      	movs	r3, #128	@ 0x80
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4013      	ands	r3, r2
 8003f28:	d00e      	beq.n	8003f48 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2280      	movs	r2, #128	@ 0x80
 8003f2e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003f30:	d00a      	beq.n	8003f48 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f36:	2202      	movs	r2, #2
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2280      	movs	r2, #128	@ 0x80
 8003f44:	0092      	lsls	r2, r2, #2
 8003f46:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	220b      	movs	r2, #11
 8003f52:	4013      	ands	r3, r2
 8003f54:	d005      	beq.n	8003f62 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	0011      	movs	r1, r2
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f000 fc87 	bl	8004870 <I2C_ITError>
  }
}
 8003f62:	46c0      	nop			@ (mov r8, r8)
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b006      	add	sp, #24
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f72:	46c0      	nop			@ (mov r8, r8)
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b002      	add	sp, #8
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f82:	46c0      	nop			@ (mov r8, r8)
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b002      	add	sp, #8
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	0008      	movs	r0, r1
 8003f94:	0011      	movs	r1, r2
 8003f96:	1cfb      	adds	r3, r7, #3
 8003f98:	1c02      	adds	r2, r0, #0
 8003f9a:	701a      	strb	r2, [r3, #0]
 8003f9c:	003b      	movs	r3, r7
 8003f9e:	1c0a      	adds	r2, r1, #0
 8003fa0:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b002      	add	sp, #8
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	b002      	add	sp, #8
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b002      	add	sp, #8
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003fd2:	46c0      	nop			@ (mov r8, r8)
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	b002      	add	sp, #8
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2240      	movs	r2, #64	@ 0x40
 8003ff6:	5c9b      	ldrb	r3, [r3, r2]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <I2C_Slave_ISR_IT+0x24>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e0e7      	b.n	80041d0 <I2C_Slave_ISR_IT+0x1f4>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2240      	movs	r2, #64	@ 0x40
 8004004:	2101      	movs	r1, #1
 8004006:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	2220      	movs	r2, #32
 800400c:	4013      	ands	r3, r2
 800400e:	d00a      	beq.n	8004026 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004016:	d006      	beq.n	8004026 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	0011      	movs	r1, r2
 800401e:	0018      	movs	r0, r3
 8004020:	f000 fa46 	bl	80044b0 <I2C_ITSlaveCplt>
 8004024:	e0cf      	b.n	80041c6 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2210      	movs	r2, #16
 800402a:	4013      	ands	r3, r2
 800402c:	d052      	beq.n	80040d4 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2210      	movs	r2, #16
 8004032:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004034:	d04e      	beq.n	80040d4 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d12d      	bne.n	800409c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2241      	movs	r2, #65	@ 0x41
 8004044:	5c9b      	ldrb	r3, [r3, r2]
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b28      	cmp	r3, #40	@ 0x28
 800404a:	d10b      	bne.n	8004064 <I2C_Slave_ISR_IT+0x88>
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	2380      	movs	r3, #128	@ 0x80
 8004050:	049b      	lsls	r3, r3, #18
 8004052:	429a      	cmp	r2, r3
 8004054:	d106      	bne.n	8004064 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	0011      	movs	r1, r2
 800405c:	0018      	movs	r0, r3
 800405e:	f000 fbaf 	bl	80047c0 <I2C_ITListenCplt>
 8004062:	e036      	b.n	80040d2 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2241      	movs	r2, #65	@ 0x41
 8004068:	5c9b      	ldrb	r3, [r3, r2]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b29      	cmp	r3, #41	@ 0x29
 800406e:	d110      	bne.n	8004092 <I2C_Slave_ISR_IT+0xb6>
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	4a59      	ldr	r2, [pc, #356]	@ (80041d8 <I2C_Slave_ISR_IT+0x1fc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00c      	beq.n	8004092 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2210      	movs	r2, #16
 800407e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	0018      	movs	r0, r3
 8004084:	f000 fd1f 	bl	8004ac6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	0018      	movs	r0, r3
 800408c:	f000 f9ac 	bl	80043e8 <I2C_ITSlaveSeqCplt>
 8004090:	e01f      	b.n	80040d2 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2210      	movs	r2, #16
 8004098:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800409a:	e091      	b.n	80041c0 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2210      	movs	r2, #16
 80040a2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a8:	2204      	movs	r2, #4
 80040aa:	431a      	orrs	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d005      	beq.n	80040c2 <I2C_Slave_ISR_IT+0xe6>
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	2380      	movs	r3, #128	@ 0x80
 80040ba:	045b      	lsls	r3, r3, #17
 80040bc:	429a      	cmp	r2, r3
 80040be:	d000      	beq.n	80040c2 <I2C_Slave_ISR_IT+0xe6>
 80040c0:	e07e      	b.n	80041c0 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	0011      	movs	r1, r2
 80040ca:	0018      	movs	r0, r3
 80040cc:	f000 fbd0 	bl	8004870 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80040d0:	e076      	b.n	80041c0 <I2C_Slave_ISR_IT+0x1e4>
 80040d2:	e075      	b.n	80041c0 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2204      	movs	r2, #4
 80040d8:	4013      	ands	r3, r2
 80040da:	d02f      	beq.n	800413c <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2204      	movs	r2, #4
 80040e0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80040e2:	d02b      	beq.n	800413c <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d018      	beq.n	8004120 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d14c      	bne.n	80041c4 <I2C_Slave_ISR_IT+0x1e8>
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	4a2a      	ldr	r2, [pc, #168]	@ (80041d8 <I2C_Slave_ISR_IT+0x1fc>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d048      	beq.n	80041c4 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	0018      	movs	r0, r3
 8004136:	f000 f957 	bl	80043e8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800413a:	e043      	b.n	80041c4 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	2208      	movs	r2, #8
 8004140:	4013      	ands	r3, r2
 8004142:	d00a      	beq.n	800415a <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2208      	movs	r2, #8
 8004148:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800414a:	d006      	beq.n	800415a <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	0011      	movs	r1, r2
 8004152:	0018      	movs	r0, r3
 8004154:	f000 f8a4 	bl	80042a0 <I2C_ITAddrCplt>
 8004158:	e035      	b.n	80041c6 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2202      	movs	r2, #2
 800415e:	4013      	ands	r3, r2
 8004160:	d031      	beq.n	80041c6 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2202      	movs	r2, #2
 8004166:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004168:	d02d      	beq.n	80041c6 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d018      	beq.n	80041a6 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	781a      	ldrb	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80041a4:	e00f      	b.n	80041c6 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	2380      	movs	r3, #128	@ 0x80
 80041aa:	045b      	lsls	r3, r3, #17
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d002      	beq.n	80041b6 <I2C_Slave_ISR_IT+0x1da>
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d107      	bne.n	80041c6 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	0018      	movs	r0, r3
 80041ba:	f000 f915 	bl	80043e8 <I2C_ITSlaveSeqCplt>
 80041be:	e002      	b.n	80041c6 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 80041c0:	46c0      	nop			@ (mov r8, r8)
 80041c2:	e000      	b.n	80041c6 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 80041c4:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2240      	movs	r2, #64	@ 0x40
 80041ca:	2100      	movs	r1, #0
 80041cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	0018      	movs	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	b006      	add	sp, #24
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	ffff0000 	.word	0xffff0000

080041dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80041dc:	b5b0      	push	{r4, r5, r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	000c      	movs	r4, r1
 80041e6:	0010      	movs	r0, r2
 80041e8:	0019      	movs	r1, r3
 80041ea:	250a      	movs	r5, #10
 80041ec:	197b      	adds	r3, r7, r5
 80041ee:	1c22      	adds	r2, r4, #0
 80041f0:	801a      	strh	r2, [r3, #0]
 80041f2:	2308      	movs	r3, #8
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	1c02      	adds	r2, r0, #0
 80041f8:	801a      	strh	r2, [r3, #0]
 80041fa:	1dbb      	adds	r3, r7, #6
 80041fc:	1c0a      	adds	r2, r1, #0
 80041fe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004200:	1dbb      	adds	r3, r7, #6
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	b2da      	uxtb	r2, r3
 8004206:	197b      	adds	r3, r7, r5
 8004208:	8819      	ldrh	r1, [r3, #0]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	4b23      	ldr	r3, [pc, #140]	@ (800429c <I2C_RequestMemoryRead+0xc0>)
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	2300      	movs	r3, #0
 8004212:	f000 ff11 	bl	8005038 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004218:	6a39      	ldr	r1, [r7, #32]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	0018      	movs	r0, r3
 800421e:	f000 fceb 	bl	8004bf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004222:	1e03      	subs	r3, r0, #0
 8004224:	d001      	beq.n	800422a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e033      	b.n	8004292 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800422a:	1dbb      	adds	r3, r7, #6
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d107      	bne.n	8004242 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004232:	2308      	movs	r3, #8
 8004234:	18fb      	adds	r3, r7, r3
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b2da      	uxtb	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004240:	e019      	b.n	8004276 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004242:	2308      	movs	r3, #8
 8004244:	18fb      	adds	r3, r7, r3
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	0a1b      	lsrs	r3, r3, #8
 800424a:	b29b      	uxth	r3, r3
 800424c:	b2da      	uxtb	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004256:	6a39      	ldr	r1, [r7, #32]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	0018      	movs	r0, r3
 800425c:	f000 fccc 	bl	8004bf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004260:	1e03      	subs	r3, r0, #0
 8004262:	d001      	beq.n	8004268 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e014      	b.n	8004292 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004268:	2308      	movs	r3, #8
 800426a:	18fb      	adds	r3, r7, r3
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	b2da      	uxtb	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004276:	6a3a      	ldr	r2, [r7, #32]
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	0013      	movs	r3, r2
 8004280:	2200      	movs	r2, #0
 8004282:	2140      	movs	r1, #64	@ 0x40
 8004284:	f000 fc60 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8004288:	1e03      	subs	r3, r0, #0
 800428a:	d001      	beq.n	8004290 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	0018      	movs	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	b004      	add	sp, #16
 8004298:	bdb0      	pop	{r4, r5, r7, pc}
 800429a:	46c0      	nop			@ (mov r8, r8)
 800429c:	80002000 	.word	0x80002000

080042a0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80042a0:	b5b0      	push	{r4, r5, r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2241      	movs	r2, #65	@ 0x41
 80042ae:	5c9b      	ldrb	r3, [r3, r2]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	001a      	movs	r2, r3
 80042b4:	2328      	movs	r3, #40	@ 0x28
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b28      	cmp	r3, #40	@ 0x28
 80042ba:	d000      	beq.n	80042be <I2C_ITAddrCplt+0x1e>
 80042bc:	e088      	b.n	80043d0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	250f      	movs	r5, #15
 80042ca:	197b      	adds	r3, r7, r5
 80042cc:	2101      	movs	r1, #1
 80042ce:	400a      	ands	r2, r1
 80042d0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	0c1b      	lsrs	r3, r3, #16
 80042da:	b29a      	uxth	r2, r3
 80042dc:	200c      	movs	r0, #12
 80042de:	183b      	adds	r3, r7, r0
 80042e0:	21fe      	movs	r1, #254	@ 0xfe
 80042e2:	400a      	ands	r2, r1
 80042e4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	240a      	movs	r4, #10
 80042f0:	193b      	adds	r3, r7, r4
 80042f2:	0592      	lsls	r2, r2, #22
 80042f4:	0d92      	lsrs	r2, r2, #22
 80042f6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	b29a      	uxth	r2, r3
 8004300:	2308      	movs	r3, #8
 8004302:	18fb      	adds	r3, r7, r3
 8004304:	21fe      	movs	r1, #254	@ 0xfe
 8004306:	400a      	ands	r2, r1
 8004308:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d148      	bne.n	80043a4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004312:	0021      	movs	r1, r4
 8004314:	187b      	adds	r3, r7, r1
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	09db      	lsrs	r3, r3, #7
 800431a:	b29a      	uxth	r2, r3
 800431c:	183b      	adds	r3, r7, r0
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	4053      	eors	r3, r2
 8004322:	b29b      	uxth	r3, r3
 8004324:	001a      	movs	r2, r3
 8004326:	2306      	movs	r3, #6
 8004328:	4013      	ands	r3, r2
 800432a:	d120      	bne.n	800436e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800432c:	183b      	adds	r3, r7, r0
 800432e:	187a      	adds	r2, r7, r1
 8004330:	8812      	ldrh	r2, [r2, #0]
 8004332:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004342:	2b02      	cmp	r3, #2
 8004344:	d14c      	bne.n	80043e0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2208      	movs	r2, #8
 8004352:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2240      	movs	r2, #64	@ 0x40
 8004358:	2100      	movs	r1, #0
 800435a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800435c:	183b      	adds	r3, r7, r0
 800435e:	881a      	ldrh	r2, [r3, #0]
 8004360:	197b      	adds	r3, r7, r5
 8004362:	7819      	ldrb	r1, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	0018      	movs	r0, r3
 8004368:	f7ff fe0f 	bl	8003f8a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800436c:	e038      	b.n	80043e0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800436e:	240c      	movs	r4, #12
 8004370:	193b      	adds	r3, r7, r4
 8004372:	2208      	movs	r2, #8
 8004374:	18ba      	adds	r2, r7, r2
 8004376:	8812      	ldrh	r2, [r2, #0]
 8004378:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800437a:	2380      	movs	r3, #128	@ 0x80
 800437c:	021a      	lsls	r2, r3, #8
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	0011      	movs	r1, r2
 8004382:	0018      	movs	r0, r3
 8004384:	f000 fe92 	bl	80050ac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2240      	movs	r2, #64	@ 0x40
 800438c:	2100      	movs	r1, #0
 800438e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004390:	193b      	adds	r3, r7, r4
 8004392:	881a      	ldrh	r2, [r3, #0]
 8004394:	230f      	movs	r3, #15
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	7819      	ldrb	r1, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	0018      	movs	r0, r3
 800439e:	f7ff fdf4 	bl	8003f8a <HAL_I2C_AddrCallback>
}
 80043a2:	e01d      	b.n	80043e0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80043a4:	2380      	movs	r3, #128	@ 0x80
 80043a6:	021a      	lsls	r2, r3, #8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	0011      	movs	r1, r2
 80043ac:	0018      	movs	r0, r3
 80043ae:	f000 fe7d 	bl	80050ac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2240      	movs	r2, #64	@ 0x40
 80043b6:	2100      	movs	r1, #0
 80043b8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043ba:	230c      	movs	r3, #12
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	881a      	ldrh	r2, [r3, #0]
 80043c0:	230f      	movs	r3, #15
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	7819      	ldrb	r1, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	0018      	movs	r0, r3
 80043ca:	f7ff fdde 	bl	8003f8a <HAL_I2C_AddrCallback>
}
 80043ce:	e007      	b.n	80043e0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2208      	movs	r2, #8
 80043d6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2240      	movs	r2, #64	@ 0x40
 80043dc:	2100      	movs	r1, #0
 80043de:	5499      	strb	r1, [r3, r2]
}
 80043e0:	46c0      	nop			@ (mov r8, r8)
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b004      	add	sp, #16
 80043e6:	bdb0      	pop	{r4, r5, r7, pc}

080043e8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2242      	movs	r2, #66	@ 0x42
 80043fc:	2100      	movs	r1, #0
 80043fe:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	2380      	movs	r3, #128	@ 0x80
 8004404:	01db      	lsls	r3, r3, #7
 8004406:	4013      	ands	r3, r2
 8004408:	d008      	beq.n	800441c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4924      	ldr	r1, [pc, #144]	@ (80044a8 <I2C_ITSlaveSeqCplt+0xc0>)
 8004416:	400a      	ands	r2, r1
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	e00c      	b.n	8004436 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	2380      	movs	r3, #128	@ 0x80
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	4013      	ands	r3, r2
 8004424:	d007      	beq.n	8004436 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	491e      	ldr	r1, [pc, #120]	@ (80044ac <I2C_ITSlaveSeqCplt+0xc4>)
 8004432:	400a      	ands	r2, r1
 8004434:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2241      	movs	r2, #65	@ 0x41
 800443a:	5c9b      	ldrb	r3, [r3, r2]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b29      	cmp	r3, #41	@ 0x29
 8004440:	d114      	bne.n	800446c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2241      	movs	r2, #65	@ 0x41
 8004446:	2128      	movs	r1, #40	@ 0x28
 8004448:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2221      	movs	r2, #33	@ 0x21
 800444e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2101      	movs	r1, #1
 8004454:	0018      	movs	r0, r3
 8004456:	f000 fe29 	bl	80050ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2240      	movs	r2, #64	@ 0x40
 800445e:	2100      	movs	r1, #0
 8004460:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	0018      	movs	r0, r3
 8004466:	f7ff fd80 	bl	8003f6a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800446a:	e019      	b.n	80044a0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2241      	movs	r2, #65	@ 0x41
 8004470:	5c9b      	ldrb	r3, [r3, r2]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b2a      	cmp	r3, #42	@ 0x2a
 8004476:	d113      	bne.n	80044a0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2241      	movs	r2, #65	@ 0x41
 800447c:	2128      	movs	r1, #40	@ 0x28
 800447e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2222      	movs	r2, #34	@ 0x22
 8004484:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2102      	movs	r1, #2
 800448a:	0018      	movs	r0, r3
 800448c:	f000 fe0e 	bl	80050ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2240      	movs	r2, #64	@ 0x40
 8004494:	2100      	movs	r1, #0
 8004496:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	0018      	movs	r0, r3
 800449c:	f7ff fd6d 	bl	8003f7a <HAL_I2C_SlaveRxCpltCallback>
}
 80044a0:	46c0      	nop			@ (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b004      	add	sp, #16
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	ffffbfff 	.word	0xffffbfff
 80044ac:	ffff7fff 	.word	0xffff7fff

080044b0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80044cc:	200b      	movs	r0, #11
 80044ce:	183b      	adds	r3, r7, r0
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	2141      	movs	r1, #65	@ 0x41
 80044d4:	5c52      	ldrb	r2, [r2, r1]
 80044d6:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2220      	movs	r2, #32
 80044de:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044e0:	183b      	adds	r3, r7, r0
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b21      	cmp	r3, #33	@ 0x21
 80044e6:	d003      	beq.n	80044f0 <I2C_ITSlaveCplt+0x40>
 80044e8:	183b      	adds	r3, r7, r0
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b29      	cmp	r3, #41	@ 0x29
 80044ee:	d109      	bne.n	8004504 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80044f0:	4aac      	ldr	r2, [pc, #688]	@ (80047a4 <I2C_ITSlaveCplt+0x2f4>)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	0011      	movs	r1, r2
 80044f6:	0018      	movs	r0, r3
 80044f8:	f000 fdd8 	bl	80050ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2221      	movs	r2, #33	@ 0x21
 8004500:	631a      	str	r2, [r3, #48]	@ 0x30
 8004502:	e020      	b.n	8004546 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004504:	220b      	movs	r2, #11
 8004506:	18bb      	adds	r3, r7, r2
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b22      	cmp	r3, #34	@ 0x22
 800450c:	d003      	beq.n	8004516 <I2C_ITSlaveCplt+0x66>
 800450e:	18bb      	adds	r3, r7, r2
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b2a      	cmp	r3, #42	@ 0x2a
 8004514:	d109      	bne.n	800452a <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004516:	4aa4      	ldr	r2, [pc, #656]	@ (80047a8 <I2C_ITSlaveCplt+0x2f8>)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	0011      	movs	r1, r2
 800451c:	0018      	movs	r0, r3
 800451e:	f000 fdc5 	bl	80050ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2222      	movs	r2, #34	@ 0x22
 8004526:	631a      	str	r2, [r3, #48]	@ 0x30
 8004528:	e00d      	b.n	8004546 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800452a:	230b      	movs	r3, #11
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b28      	cmp	r3, #40	@ 0x28
 8004532:	d108      	bne.n	8004546 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004534:	4a9d      	ldr	r2, [pc, #628]	@ (80047ac <I2C_ITSlaveCplt+0x2fc>)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	0011      	movs	r1, r2
 800453a:	0018      	movs	r0, r3
 800453c:	f000 fdb6 	bl	80050ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2180      	movs	r1, #128	@ 0x80
 8004552:	0209      	lsls	r1, r1, #8
 8004554:	430a      	orrs	r2, r1
 8004556:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4993      	ldr	r1, [pc, #588]	@ (80047b0 <I2C_ITSlaveCplt+0x300>)
 8004564:	400a      	ands	r2, r1
 8004566:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	0018      	movs	r0, r3
 800456c:	f000 faab 	bl	8004ac6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	2380      	movs	r3, #128	@ 0x80
 8004574:	01db      	lsls	r3, r3, #7
 8004576:	4013      	ands	r3, r2
 8004578:	d013      	beq.n	80045a2 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	498b      	ldr	r1, [pc, #556]	@ (80047b4 <I2C_ITSlaveCplt+0x304>)
 8004586:	400a      	ands	r2, r1
 8004588:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458e:	2b00      	cmp	r3, #0
 8004590:	d01f      	beq.n	80045d2 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	b29a      	uxth	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045a0:	e017      	b.n	80045d2 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	2380      	movs	r3, #128	@ 0x80
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	4013      	ands	r3, r2
 80045aa:	d012      	beq.n	80045d2 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4980      	ldr	r1, [pc, #512]	@ (80047b8 <I2C_ITSlaveCplt+0x308>)
 80045b8:	400a      	ands	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d006      	beq.n	80045d2 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2204      	movs	r2, #4
 80045d6:	4013      	ands	r3, r2
 80045d8:	d020      	beq.n	800461c <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2204      	movs	r2, #4
 80045de:	4393      	bics	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00c      	beq.n	800461c <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462a:	2204      	movs	r2, #4
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2210      	movs	r2, #16
 8004636:	4013      	ands	r3, r2
 8004638:	d04f      	beq.n	80046da <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2210      	movs	r2, #16
 800463e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004640:	d04b      	beq.n	80046da <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d12d      	bne.n	80046a8 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2241      	movs	r2, #65	@ 0x41
 8004650:	5c9b      	ldrb	r3, [r3, r2]
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b28      	cmp	r3, #40	@ 0x28
 8004656:	d10b      	bne.n	8004670 <I2C_ITSlaveCplt+0x1c0>
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	2380      	movs	r3, #128	@ 0x80
 800465c:	049b      	lsls	r3, r3, #18
 800465e:	429a      	cmp	r2, r3
 8004660:	d106      	bne.n	8004670 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	0011      	movs	r1, r2
 8004668:	0018      	movs	r0, r3
 800466a:	f000 f8a9 	bl	80047c0 <I2C_ITListenCplt>
 800466e:	e034      	b.n	80046da <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2241      	movs	r2, #65	@ 0x41
 8004674:	5c9b      	ldrb	r3, [r3, r2]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b29      	cmp	r3, #41	@ 0x29
 800467a:	d110      	bne.n	800469e <I2C_ITSlaveCplt+0x1ee>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4a4f      	ldr	r2, [pc, #316]	@ (80047bc <I2C_ITSlaveCplt+0x30c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00c      	beq.n	800469e <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2210      	movs	r2, #16
 800468a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	0018      	movs	r0, r3
 8004690:	f000 fa19 	bl	8004ac6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	0018      	movs	r0, r3
 8004698:	f7ff fea6 	bl	80043e8 <I2C_ITSlaveSeqCplt>
 800469c:	e01d      	b.n	80046da <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2210      	movs	r2, #16
 80046a4:	61da      	str	r2, [r3, #28]
 80046a6:	e018      	b.n	80046da <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2210      	movs	r2, #16
 80046ae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b4:	2204      	movs	r2, #4
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d004      	beq.n	80046cc <I2C_ITSlaveCplt+0x21c>
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	2380      	movs	r3, #128	@ 0x80
 80046c6:	045b      	lsls	r3, r3, #17
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d106      	bne.n	80046da <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	0011      	movs	r1, r2
 80046d4:	0018      	movs	r0, r3
 80046d6:	f000 f8cb 	bl	8004870 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2242      	movs	r2, #66	@ 0x42
 80046de:	2100      	movs	r1, #0
 80046e0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d013      	beq.n	8004718 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	0011      	movs	r1, r2
 80046f8:	0018      	movs	r0, r3
 80046fa:	f000 f8b9 	bl	8004870 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2241      	movs	r2, #65	@ 0x41
 8004702:	5c9b      	ldrb	r3, [r3, r2]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b28      	cmp	r3, #40	@ 0x28
 8004708:	d147      	bne.n	800479a <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	0011      	movs	r1, r2
 8004710:	0018      	movs	r0, r3
 8004712:	f000 f855 	bl	80047c0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004716:	e040      	b.n	800479a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471c:	4a27      	ldr	r2, [pc, #156]	@ (80047bc <I2C_ITSlaveCplt+0x30c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d016      	beq.n	8004750 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	0018      	movs	r0, r3
 8004726:	f7ff fe5f 	bl	80043e8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a23      	ldr	r2, [pc, #140]	@ (80047bc <I2C_ITSlaveCplt+0x30c>)
 800472e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2241      	movs	r2, #65	@ 0x41
 8004734:	2120      	movs	r1, #32
 8004736:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2240      	movs	r2, #64	@ 0x40
 8004742:	2100      	movs	r1, #0
 8004744:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	0018      	movs	r0, r3
 800474a:	f7ff fc2e 	bl	8003faa <HAL_I2C_ListenCpltCallback>
}
 800474e:	e024      	b.n	800479a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2241      	movs	r2, #65	@ 0x41
 8004754:	5c9b      	ldrb	r3, [r3, r2]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b22      	cmp	r3, #34	@ 0x22
 800475a:	d10f      	bne.n	800477c <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2241      	movs	r2, #65	@ 0x41
 8004760:	2120      	movs	r1, #32
 8004762:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2240      	movs	r2, #64	@ 0x40
 800476e:	2100      	movs	r1, #0
 8004770:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	0018      	movs	r0, r3
 8004776:	f7ff fc00 	bl	8003f7a <HAL_I2C_SlaveRxCpltCallback>
}
 800477a:	e00e      	b.n	800479a <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2241      	movs	r2, #65	@ 0x41
 8004780:	2120      	movs	r1, #32
 8004782:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2240      	movs	r2, #64	@ 0x40
 800478e:	2100      	movs	r1, #0
 8004790:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0018      	movs	r0, r3
 8004796:	f7ff fbe8 	bl	8003f6a <HAL_I2C_SlaveTxCpltCallback>
}
 800479a:	46c0      	nop			@ (mov r8, r8)
 800479c:	46bd      	mov	sp, r7
 800479e:	b006      	add	sp, #24
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	46c0      	nop			@ (mov r8, r8)
 80047a4:	00008001 	.word	0x00008001
 80047a8:	00008002 	.word	0x00008002
 80047ac:	00008003 	.word	0x00008003
 80047b0:	fe00e800 	.word	0xfe00e800
 80047b4:	ffffbfff 	.word	0xffffbfff
 80047b8:	ffff7fff 	.word	0xffff7fff
 80047bc:	ffff0000 	.word	0xffff0000

080047c0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a26      	ldr	r2, [pc, #152]	@ (8004868 <I2C_ITListenCplt+0xa8>)
 80047ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2241      	movs	r2, #65	@ 0x41
 80047da:	2120      	movs	r1, #32
 80047dc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2242      	movs	r2, #66	@ 0x42
 80047e2:	2100      	movs	r1, #0
 80047e4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2204      	movs	r2, #4
 80047f0:	4013      	ands	r3, r2
 80047f2:	d022      	beq.n	800483a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004810:	2b00      	cmp	r3, #0
 8004812:	d012      	beq.n	800483a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004832:	2204      	movs	r2, #4
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800483a:	4a0c      	ldr	r2, [pc, #48]	@ (800486c <I2C_ITListenCplt+0xac>)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	0011      	movs	r1, r2
 8004840:	0018      	movs	r0, r3
 8004842:	f000 fc33 	bl	80050ac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2210      	movs	r2, #16
 800484c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2240      	movs	r2, #64	@ 0x40
 8004852:	2100      	movs	r1, #0
 8004854:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	0018      	movs	r0, r3
 800485a:	f7ff fba6 	bl	8003faa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	46bd      	mov	sp, r7
 8004862:	b002      	add	sp, #8
 8004864:	bd80      	pop	{r7, pc}
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	ffff0000 	.word	0xffff0000
 800486c:	00008003 	.word	0x00008003

08004870 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800487a:	200f      	movs	r0, #15
 800487c:	183b      	adds	r3, r7, r0
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	2141      	movs	r1, #65	@ 0x41
 8004882:	5c52      	ldrb	r2, [r2, r1]
 8004884:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2242      	movs	r2, #66	@ 0x42
 800488a:	2100      	movs	r1, #0
 800488c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a72      	ldr	r2, [pc, #456]	@ (8004a5c <I2C_ITError+0x1ec>)
 8004892:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80048a6:	183b      	adds	r3, r7, r0
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b28      	cmp	r3, #40	@ 0x28
 80048ac:	d007      	beq.n	80048be <I2C_ITError+0x4e>
 80048ae:	183b      	adds	r3, r7, r0
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b29      	cmp	r3, #41	@ 0x29
 80048b4:	d003      	beq.n	80048be <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80048b6:	183b      	adds	r3, r7, r0
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80048bc:	d10c      	bne.n	80048d8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2103      	movs	r1, #3
 80048c2:	0018      	movs	r0, r3
 80048c4:	f000 fbf2 	bl	80050ac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2241      	movs	r2, #65	@ 0x41
 80048cc:	2128      	movs	r1, #40	@ 0x28
 80048ce:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a63      	ldr	r2, [pc, #396]	@ (8004a60 <I2C_ITError+0x1f0>)
 80048d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80048d6:	e032      	b.n	800493e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048d8:	4a62      	ldr	r2, [pc, #392]	@ (8004a64 <I2C_ITError+0x1f4>)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	0011      	movs	r1, r2
 80048de:	0018      	movs	r0, r3
 80048e0:	f000 fbe4 	bl	80050ac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	0018      	movs	r0, r3
 80048e8:	f000 f8ed 	bl	8004ac6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2241      	movs	r2, #65	@ 0x41
 80048f0:	5c9b      	ldrb	r3, [r3, r2]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b60      	cmp	r3, #96	@ 0x60
 80048f6:	d01f      	beq.n	8004938 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2241      	movs	r2, #65	@ 0x41
 80048fc:	2120      	movs	r1, #32
 80048fe:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2220      	movs	r2, #32
 8004908:	4013      	ands	r3, r2
 800490a:	2b20      	cmp	r3, #32
 800490c:	d114      	bne.n	8004938 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	2210      	movs	r2, #16
 8004916:	4013      	ands	r3, r2
 8004918:	2b10      	cmp	r3, #16
 800491a:	d109      	bne.n	8004930 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2210      	movs	r2, #16
 8004922:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004928:	2204      	movs	r2, #4
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2220      	movs	r2, #32
 8004936:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004942:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004948:	2b00      	cmp	r3, #0
 800494a:	d03b      	beq.n	80049c4 <I2C_ITError+0x154>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b11      	cmp	r3, #17
 8004950:	d002      	beq.n	8004958 <I2C_ITError+0xe8>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b21      	cmp	r3, #33	@ 0x21
 8004956:	d135      	bne.n	80049c4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	2380      	movs	r3, #128	@ 0x80
 8004960:	01db      	lsls	r3, r3, #7
 8004962:	401a      	ands	r2, r3
 8004964:	2380      	movs	r3, #128	@ 0x80
 8004966:	01db      	lsls	r3, r3, #7
 8004968:	429a      	cmp	r2, r3
 800496a:	d107      	bne.n	800497c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	493c      	ldr	r1, [pc, #240]	@ (8004a68 <I2C_ITError+0x1f8>)
 8004978:	400a      	ands	r2, r1
 800497a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004980:	0018      	movs	r0, r3
 8004982:	f7fe fb49 	bl	8003018 <HAL_DMA_GetState>
 8004986:	0003      	movs	r3, r0
 8004988:	2b01      	cmp	r3, #1
 800498a:	d016      	beq.n	80049ba <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004990:	4a36      	ldr	r2, [pc, #216]	@ (8004a6c <I2C_ITError+0x1fc>)
 8004992:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2240      	movs	r2, #64	@ 0x40
 8004998:	2100      	movs	r1, #0
 800499a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7fe fa1d 	bl	8002de0 <HAL_DMA_Abort_IT>
 80049a6:	1e03      	subs	r3, r0, #0
 80049a8:	d051      	beq.n	8004a4e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b4:	0018      	movs	r0, r3
 80049b6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049b8:	e049      	b.n	8004a4e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	0018      	movs	r0, r3
 80049be:	f000 f859 	bl	8004a74 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049c2:	e044      	b.n	8004a4e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d03b      	beq.n	8004a44 <I2C_ITError+0x1d4>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b12      	cmp	r3, #18
 80049d0:	d002      	beq.n	80049d8 <I2C_ITError+0x168>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b22      	cmp	r3, #34	@ 0x22
 80049d6:	d135      	bne.n	8004a44 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	2380      	movs	r3, #128	@ 0x80
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	401a      	ands	r2, r3
 80049e4:	2380      	movs	r3, #128	@ 0x80
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d107      	bne.n	80049fc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	491e      	ldr	r1, [pc, #120]	@ (8004a70 <I2C_ITError+0x200>)
 80049f8:	400a      	ands	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a00:	0018      	movs	r0, r3
 8004a02:	f7fe fb09 	bl	8003018 <HAL_DMA_GetState>
 8004a06:	0003      	movs	r3, r0
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d016      	beq.n	8004a3a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a10:	4a16      	ldr	r2, [pc, #88]	@ (8004a6c <I2C_ITError+0x1fc>)
 8004a12:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2240      	movs	r2, #64	@ 0x40
 8004a18:	2100      	movs	r1, #0
 8004a1a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a20:	0018      	movs	r0, r3
 8004a22:	f7fe f9dd 	bl	8002de0 <HAL_DMA_Abort_IT>
 8004a26:	1e03      	subs	r3, r0, #0
 8004a28:	d013      	beq.n	8004a52 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a34:	0018      	movs	r0, r3
 8004a36:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a38:	e00b      	b.n	8004a52 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f000 f819 	bl	8004a74 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a42:	e006      	b.n	8004a52 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	0018      	movs	r0, r3
 8004a48:	f000 f814 	bl	8004a74 <I2C_TreatErrorCallback>
  }
}
 8004a4c:	e002      	b.n	8004a54 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a4e:	46c0      	nop			@ (mov r8, r8)
 8004a50:	e000      	b.n	8004a54 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a52:	46c0      	nop			@ (mov r8, r8)
}
 8004a54:	46c0      	nop			@ (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b004      	add	sp, #16
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	ffff0000 	.word	0xffff0000
 8004a60:	08003fdd 	.word	0x08003fdd
 8004a64:	00008003 	.word	0x00008003
 8004a68:	ffffbfff 	.word	0xffffbfff
 8004a6c:	08004b0b 	.word	0x08004b0b
 8004a70:	ffff7fff 	.word	0xffff7fff

08004a74 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2241      	movs	r2, #65	@ 0x41
 8004a80:	5c9b      	ldrb	r3, [r3, r2]
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b60      	cmp	r3, #96	@ 0x60
 8004a86:	d10f      	bne.n	8004aa8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2241      	movs	r2, #65	@ 0x41
 8004a8c:	2120      	movs	r1, #32
 8004a8e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2240      	movs	r2, #64	@ 0x40
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f7ff fa92 	bl	8003fca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004aa6:	e00a      	b.n	8004abe <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2240      	movs	r2, #64	@ 0x40
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f7ff fa7e 	bl	8003fba <HAL_I2C_ErrorCallback>
}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	b002      	add	sp, #8
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b082      	sub	sp, #8
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d103      	bne.n	8004ae4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	2201      	movs	r2, #1
 8004aec:	4013      	ands	r3, r2
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d007      	beq.n	8004b02 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699a      	ldr	r2, [r3, #24]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2101      	movs	r1, #1
 8004afe:	430a      	orrs	r2, r1
 8004b00:	619a      	str	r2, [r3, #24]
  }
}
 8004b02:	46c0      	nop			@ (mov r8, r8)
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b002      	add	sp, #8
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b084      	sub	sp, #16
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b24:	2200      	movs	r2, #0
 8004b26:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b34:	2200      	movs	r2, #0
 8004b36:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f7ff ff9a 	bl	8004a74 <I2C_TreatErrorCallback>
}
 8004b40:	46c0      	nop			@ (mov r8, r8)
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b004      	add	sp, #16
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	1dfb      	adds	r3, r7, #7
 8004b56:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b58:	e03a      	b.n	8004bd0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	6839      	ldr	r1, [r7, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	0018      	movs	r0, r3
 8004b62:	f000 f971 	bl	8004e48 <I2C_IsErrorOccurred>
 8004b66:	1e03      	subs	r3, r0, #0
 8004b68:	d001      	beq.n	8004b6e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e040      	b.n	8004bf0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	3301      	adds	r3, #1
 8004b72:	d02d      	beq.n	8004bd0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b74:	f7fd ff9e 	bl	8002ab4 <HAL_GetTick>
 8004b78:	0002      	movs	r2, r0
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d302      	bcc.n	8004b8a <I2C_WaitOnFlagUntilTimeout+0x42>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d122      	bne.n	8004bd0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	4013      	ands	r3, r2
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	425a      	negs	r2, r3
 8004b9a:	4153      	adcs	r3, r2
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	001a      	movs	r2, r3
 8004ba0:	1dfb      	adds	r3, r7, #7
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d113      	bne.n	8004bd0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bac:	2220      	movs	r2, #32
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2241      	movs	r2, #65	@ 0x41
 8004bb8:	2120      	movs	r1, #32
 8004bba:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2242      	movs	r2, #66	@ 0x42
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2240      	movs	r2, #64	@ 0x40
 8004bc8:	2100      	movs	r1, #0
 8004bca:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e00f      	b.n	8004bf0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	425a      	negs	r2, r3
 8004be0:	4153      	adcs	r3, r2
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	001a      	movs	r2, r3
 8004be6:	1dfb      	adds	r3, r7, #7
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d0b5      	beq.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b004      	add	sp, #16
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c04:	e032      	b.n	8004c6c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f000 f91b 	bl	8004e48 <I2C_IsErrorOccurred>
 8004c12:	1e03      	subs	r3, r0, #0
 8004c14:	d001      	beq.n	8004c1a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e030      	b.n	8004c7c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	d025      	beq.n	8004c6c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c20:	f7fd ff48 	bl	8002ab4 <HAL_GetTick>
 8004c24:	0002      	movs	r2, r0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d302      	bcc.n	8004c36 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d11a      	bne.n	8004c6c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	4013      	ands	r3, r2
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d013      	beq.n	8004c6c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c48:	2220      	movs	r2, #32
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2241      	movs	r2, #65	@ 0x41
 8004c54:	2120      	movs	r1, #32
 8004c56:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2242      	movs	r2, #66	@ 0x42
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2240      	movs	r2, #64	@ 0x40
 8004c64:	2100      	movs	r1, #0
 8004c66:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e007      	b.n	8004c7c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2202      	movs	r2, #2
 8004c74:	4013      	ands	r3, r2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d1c5      	bne.n	8004c06 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b004      	add	sp, #16
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c90:	e02f      	b.n	8004cf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f000 f8d5 	bl	8004e48 <I2C_IsErrorOccurred>
 8004c9e:	1e03      	subs	r3, r0, #0
 8004ca0:	d001      	beq.n	8004ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e02d      	b.n	8004d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca6:	f7fd ff05 	bl	8002ab4 <HAL_GetTick>
 8004caa:	0002      	movs	r2, r0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d302      	bcc.n	8004cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d11a      	bne.n	8004cf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d013      	beq.n	8004cf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cce:	2220      	movs	r2, #32
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2241      	movs	r2, #65	@ 0x41
 8004cda:	2120      	movs	r1, #32
 8004cdc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2242      	movs	r2, #66	@ 0x42
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2240      	movs	r2, #64	@ 0x40
 8004cea:	2100      	movs	r1, #0
 8004cec:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e007      	b.n	8004d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d1c8      	bne.n	8004c92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b004      	add	sp, #16
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d18:	2317      	movs	r3, #23
 8004d1a:	18fb      	adds	r3, r7, r3
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004d20:	e07b      	b.n	8004e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f000 f88d 	bl	8004e48 <I2C_IsErrorOccurred>
 8004d2e:	1e03      	subs	r3, r0, #0
 8004d30:	d003      	beq.n	8004d3a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004d32:	2317      	movs	r3, #23
 8004d34:	18fb      	adds	r3, r7, r3
 8004d36:	2201      	movs	r2, #1
 8004d38:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	2220      	movs	r2, #32
 8004d42:	4013      	ands	r3, r2
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d140      	bne.n	8004dca <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004d48:	2117      	movs	r1, #23
 8004d4a:	187b      	adds	r3, r7, r1
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d13b      	bne.n	8004dca <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	2204      	movs	r2, #4
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d106      	bne.n	8004d6e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004d68:	187b      	adds	r3, r7, r1
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	2210      	movs	r2, #16
 8004d76:	4013      	ands	r3, r2
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d123      	bne.n	8004dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2210      	movs	r2, #16
 8004d82:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2204      	movs	r2, #4
 8004d88:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4929      	ldr	r1, [pc, #164]	@ (8004e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004d9e:	400a      	ands	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2241      	movs	r2, #65	@ 0x41
 8004da6:	2120      	movs	r1, #32
 8004da8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2242      	movs	r2, #66	@ 0x42
 8004dae:	2100      	movs	r1, #0
 8004db0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2240      	movs	r2, #64	@ 0x40
 8004db6:	2100      	movs	r1, #0
 8004db8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004dba:	2317      	movs	r3, #23
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e002      	b.n	8004dca <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004dca:	f7fd fe73 	bl	8002ab4 <HAL_GetTick>
 8004dce:	0002      	movs	r2, r0
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d302      	bcc.n	8004de0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d11c      	bne.n	8004e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004de0:	2017      	movs	r0, #23
 8004de2:	183b      	adds	r3, r7, r0
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d117      	bne.n	8004e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	2204      	movs	r2, #4
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d010      	beq.n	8004e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2241      	movs	r2, #65	@ 0x41
 8004e08:	2120      	movs	r1, #32
 8004e0a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2240      	movs	r2, #64	@ 0x40
 8004e10:	2100      	movs	r1, #0
 8004e12:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004e14:	183b      	adds	r3, r7, r0
 8004e16:	2201      	movs	r2, #1
 8004e18:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	2204      	movs	r2, #4
 8004e22:	4013      	ands	r3, r2
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d005      	beq.n	8004e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004e28:	2317      	movs	r3, #23
 8004e2a:	18fb      	adds	r3, r7, r3
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d100      	bne.n	8004e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004e32:	e776      	b.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004e34:	2317      	movs	r3, #23
 8004e36:	18fb      	adds	r3, r7, r3
 8004e38:	781b      	ldrb	r3, [r3, #0]
}
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b006      	add	sp, #24
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	46c0      	nop			@ (mov r8, r8)
 8004e44:	fe00e800 	.word	0xfe00e800

08004e48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08a      	sub	sp, #40	@ 0x28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e54:	2327      	movs	r3, #39	@ 0x27
 8004e56:	18fb      	adds	r3, r7, r3
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	2210      	movs	r2, #16
 8004e70:	4013      	ands	r3, r2
 8004e72:	d100      	bne.n	8004e76 <I2C_IsErrorOccurred+0x2e>
 8004e74:	e079      	b.n	8004f6a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2210      	movs	r2, #16
 8004e7c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e7e:	e057      	b.n	8004f30 <I2C_IsErrorOccurred+0xe8>
 8004e80:	2227      	movs	r2, #39	@ 0x27
 8004e82:	18bb      	adds	r3, r7, r2
 8004e84:	18ba      	adds	r2, r7, r2
 8004e86:	7812      	ldrb	r2, [r2, #0]
 8004e88:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	d04f      	beq.n	8004f30 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e90:	f7fd fe10 	bl	8002ab4 <HAL_GetTick>
 8004e94:	0002      	movs	r2, r0
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d302      	bcc.n	8004ea6 <I2C_IsErrorOccurred+0x5e>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d144      	bne.n	8004f30 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	2380      	movs	r3, #128	@ 0x80
 8004eae:	01db      	lsls	r3, r3, #7
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004eb4:	2013      	movs	r0, #19
 8004eb6:	183b      	adds	r3, r7, r0
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	2142      	movs	r1, #66	@ 0x42
 8004ebc:	5c52      	ldrb	r2, [r2, r1]
 8004ebe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	2380      	movs	r3, #128	@ 0x80
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	401a      	ands	r2, r3
 8004ecc:	2380      	movs	r3, #128	@ 0x80
 8004ece:	021b      	lsls	r3, r3, #8
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d126      	bne.n	8004f22 <I2C_IsErrorOccurred+0xda>
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	2380      	movs	r3, #128	@ 0x80
 8004ed8:	01db      	lsls	r3, r3, #7
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d021      	beq.n	8004f22 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004ede:	183b      	adds	r3, r7, r0
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d01d      	beq.n	8004f22 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2180      	movs	r1, #128	@ 0x80
 8004ef2:	01c9      	lsls	r1, r1, #7
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ef8:	f7fd fddc 	bl	8002ab4 <HAL_GetTick>
 8004efc:	0003      	movs	r3, r0
 8004efe:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f00:	e00f      	b.n	8004f22 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f02:	f7fd fdd7 	bl	8002ab4 <HAL_GetTick>
 8004f06:	0002      	movs	r2, r0
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b19      	cmp	r3, #25
 8004f0e:	d908      	bls.n	8004f22 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	2220      	movs	r2, #32
 8004f14:	4313      	orrs	r3, r2
 8004f16:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004f18:	2327      	movs	r3, #39	@ 0x27
 8004f1a:	18fb      	adds	r3, r7, r3
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	701a      	strb	r2, [r3, #0]

              break;
 8004f20:	e006      	b.n	8004f30 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d1e8      	bne.n	8004f02 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2220      	movs	r2, #32
 8004f38:	4013      	ands	r3, r2
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d004      	beq.n	8004f48 <I2C_IsErrorOccurred+0x100>
 8004f3e:	2327      	movs	r3, #39	@ 0x27
 8004f40:	18fb      	adds	r3, r7, r3
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d09b      	beq.n	8004e80 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f48:	2327      	movs	r3, #39	@ 0x27
 8004f4a:	18fb      	adds	r3, r7, r3
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d103      	bne.n	8004f5a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2220      	movs	r2, #32
 8004f58:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	2204      	movs	r2, #4
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f62:	2327      	movs	r3, #39	@ 0x27
 8004f64:	18fb      	adds	r3, r7, r3
 8004f66:	2201      	movs	r2, #1
 8004f68:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	2380      	movs	r3, #128	@ 0x80
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	4013      	ands	r3, r2
 8004f7a:	d00c      	beq.n	8004f96 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	4313      	orrs	r3, r2
 8004f82:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2280      	movs	r2, #128	@ 0x80
 8004f8a:	0052      	lsls	r2, r2, #1
 8004f8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f8e:	2327      	movs	r3, #39	@ 0x27
 8004f90:	18fb      	adds	r3, r7, r3
 8004f92:	2201      	movs	r2, #1
 8004f94:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	2380      	movs	r3, #128	@ 0x80
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	d00c      	beq.n	8004fba <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	2208      	movs	r2, #8
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2280      	movs	r2, #128	@ 0x80
 8004fae:	00d2      	lsls	r2, r2, #3
 8004fb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fb2:	2327      	movs	r3, #39	@ 0x27
 8004fb4:	18fb      	adds	r3, r7, r3
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	2380      	movs	r3, #128	@ 0x80
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d00c      	beq.n	8004fde <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2280      	movs	r2, #128	@ 0x80
 8004fd2:	0092      	lsls	r2, r2, #2
 8004fd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fd6:	2327      	movs	r3, #39	@ 0x27
 8004fd8:	18fb      	adds	r3, r7, r3
 8004fda:	2201      	movs	r2, #1
 8004fdc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004fde:	2327      	movs	r3, #39	@ 0x27
 8004fe0:	18fb      	adds	r3, r7, r3
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01d      	beq.n	8005024 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	0018      	movs	r0, r3
 8004fec:	f7ff fd6b 	bl	8004ac6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	490e      	ldr	r1, [pc, #56]	@ (8005034 <I2C_IsErrorOccurred+0x1ec>)
 8004ffc:	400a      	ands	r2, r1
 8004ffe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	431a      	orrs	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2241      	movs	r2, #65	@ 0x41
 8005010:	2120      	movs	r1, #32
 8005012:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2242      	movs	r2, #66	@ 0x42
 8005018:	2100      	movs	r1, #0
 800501a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2240      	movs	r2, #64	@ 0x40
 8005020:	2100      	movs	r1, #0
 8005022:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005024:	2327      	movs	r3, #39	@ 0x27
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	781b      	ldrb	r3, [r3, #0]
}
 800502a:	0018      	movs	r0, r3
 800502c:	46bd      	mov	sp, r7
 800502e:	b00a      	add	sp, #40	@ 0x28
 8005030:	bd80      	pop	{r7, pc}
 8005032:	46c0      	nop			@ (mov r8, r8)
 8005034:	fe00e800 	.word	0xfe00e800

08005038 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005038:	b590      	push	{r4, r7, lr}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	0008      	movs	r0, r1
 8005042:	0011      	movs	r1, r2
 8005044:	607b      	str	r3, [r7, #4]
 8005046:	240a      	movs	r4, #10
 8005048:	193b      	adds	r3, r7, r4
 800504a:	1c02      	adds	r2, r0, #0
 800504c:	801a      	strh	r2, [r3, #0]
 800504e:	2009      	movs	r0, #9
 8005050:	183b      	adds	r3, r7, r0
 8005052:	1c0a      	adds	r2, r1, #0
 8005054:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005056:	193b      	adds	r3, r7, r4
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	059b      	lsls	r3, r3, #22
 800505c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800505e:	183b      	adds	r3, r7, r0
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	0419      	lsls	r1, r3, #16
 8005064:	23ff      	movs	r3, #255	@ 0xff
 8005066:	041b      	lsls	r3, r3, #16
 8005068:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800506a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005072:	4313      	orrs	r3, r2
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	085b      	lsrs	r3, r3, #1
 8005078:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005082:	0d51      	lsrs	r1, r2, #21
 8005084:	2280      	movs	r2, #128	@ 0x80
 8005086:	00d2      	lsls	r2, r2, #3
 8005088:	400a      	ands	r2, r1
 800508a:	4907      	ldr	r1, [pc, #28]	@ (80050a8 <I2C_TransferConfig+0x70>)
 800508c:	430a      	orrs	r2, r1
 800508e:	43d2      	mvns	r2, r2
 8005090:	401a      	ands	r2, r3
 8005092:	0011      	movs	r1, r2
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	430a      	orrs	r2, r1
 800509c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800509e:	46c0      	nop			@ (mov r8, r8)
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b007      	add	sp, #28
 80050a4:	bd90      	pop	{r4, r7, pc}
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	03ff63ff 	.word	0x03ff63ff

080050ac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	000a      	movs	r2, r1
 80050b6:	1cbb      	adds	r3, r7, #2
 80050b8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80050be:	1cbb      	adds	r3, r7, #2
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	2201      	movs	r2, #1
 80050c4:	4013      	ands	r3, r2
 80050c6:	d010      	beq.n	80050ea <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2242      	movs	r2, #66	@ 0x42
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2241      	movs	r2, #65	@ 0x41
 80050d4:	5c9b      	ldrb	r3, [r3, r2]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	001a      	movs	r2, r3
 80050da:	2328      	movs	r3, #40	@ 0x28
 80050dc:	4013      	ands	r3, r2
 80050de:	2b28      	cmp	r3, #40	@ 0x28
 80050e0:	d003      	beq.n	80050ea <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	22b0      	movs	r2, #176	@ 0xb0
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80050ea:	1cbb      	adds	r3, r7, #2
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	2202      	movs	r2, #2
 80050f0:	4013      	ands	r3, r2
 80050f2:	d010      	beq.n	8005116 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2244      	movs	r2, #68	@ 0x44
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2241      	movs	r2, #65	@ 0x41
 8005100:	5c9b      	ldrb	r3, [r3, r2]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	001a      	movs	r2, r3
 8005106:	2328      	movs	r3, #40	@ 0x28
 8005108:	4013      	ands	r3, r2
 800510a:	2b28      	cmp	r3, #40	@ 0x28
 800510c:	d003      	beq.n	8005116 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	22b0      	movs	r2, #176	@ 0xb0
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005116:	1cbb      	adds	r3, r7, #2
 8005118:	2200      	movs	r2, #0
 800511a:	5e9b      	ldrsh	r3, [r3, r2]
 800511c:	2b00      	cmp	r3, #0
 800511e:	da03      	bge.n	8005128 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	22b8      	movs	r2, #184	@ 0xb8
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005128:	1cbb      	adds	r3, r7, #2
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	2b10      	cmp	r3, #16
 800512e:	d103      	bne.n	8005138 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2290      	movs	r2, #144	@ 0x90
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005138:	1cbb      	adds	r3, r7, #2
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	2b20      	cmp	r3, #32
 800513e:	d103      	bne.n	8005148 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005148:	1cbb      	adds	r3, r7, #2
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	2b40      	cmp	r3, #64	@ 0x40
 800514e:	d103      	bne.n	8005158 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2240      	movs	r2, #64	@ 0x40
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	43d9      	mvns	r1, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	400a      	ands	r2, r1
 8005168:	601a      	str	r2, [r3, #0]
}
 800516a:	46c0      	nop			@ (mov r8, r8)
 800516c:	46bd      	mov	sp, r7
 800516e:	b004      	add	sp, #16
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2241      	movs	r2, #65	@ 0x41
 8005182:	5c9b      	ldrb	r3, [r3, r2]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b20      	cmp	r3, #32
 8005188:	d138      	bne.n	80051fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2240      	movs	r2, #64	@ 0x40
 800518e:	5c9b      	ldrb	r3, [r3, r2]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005194:	2302      	movs	r3, #2
 8005196:	e032      	b.n	80051fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2240      	movs	r2, #64	@ 0x40
 800519c:	2101      	movs	r1, #1
 800519e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2241      	movs	r2, #65	@ 0x41
 80051a4:	2124      	movs	r1, #36	@ 0x24
 80051a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2101      	movs	r1, #1
 80051b4:	438a      	bics	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4911      	ldr	r1, [pc, #68]	@ (8005208 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80051c4:	400a      	ands	r2, r1
 80051c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6819      	ldr	r1, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2101      	movs	r1, #1
 80051e4:	430a      	orrs	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2241      	movs	r2, #65	@ 0x41
 80051ec:	2120      	movs	r1, #32
 80051ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2240      	movs	r2, #64	@ 0x40
 80051f4:	2100      	movs	r1, #0
 80051f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	e000      	b.n	80051fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051fc:	2302      	movs	r3, #2
  }
}
 80051fe:	0018      	movs	r0, r3
 8005200:	46bd      	mov	sp, r7
 8005202:	b002      	add	sp, #8
 8005204:	bd80      	pop	{r7, pc}
 8005206:	46c0      	nop			@ (mov r8, r8)
 8005208:	ffffefff 	.word	0xffffefff

0800520c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2241      	movs	r2, #65	@ 0x41
 800521a:	5c9b      	ldrb	r3, [r3, r2]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b20      	cmp	r3, #32
 8005220:	d139      	bne.n	8005296 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2240      	movs	r2, #64	@ 0x40
 8005226:	5c9b      	ldrb	r3, [r3, r2]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800522c:	2302      	movs	r3, #2
 800522e:	e033      	b.n	8005298 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2240      	movs	r2, #64	@ 0x40
 8005234:	2101      	movs	r1, #1
 8005236:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2241      	movs	r2, #65	@ 0x41
 800523c:	2124      	movs	r1, #36	@ 0x24
 800523e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2101      	movs	r1, #1
 800524c:	438a      	bics	r2, r1
 800524e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4a11      	ldr	r2, [pc, #68]	@ (80052a0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800525c:	4013      	ands	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2101      	movs	r1, #1
 800527e:	430a      	orrs	r2, r1
 8005280:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2241      	movs	r2, #65	@ 0x41
 8005286:	2120      	movs	r1, #32
 8005288:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2240      	movs	r2, #64	@ 0x40
 800528e:	2100      	movs	r1, #0
 8005290:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	e000      	b.n	8005298 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005296:	2302      	movs	r3, #2
  }
}
 8005298:	0018      	movs	r0, r3
 800529a:	46bd      	mov	sp, r7
 800529c:	b004      	add	sp, #16
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	fffff0ff 	.word	0xfffff0ff

080052a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80052ac:	4b19      	ldr	r3, [pc, #100]	@ (8005314 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a19      	ldr	r2, [pc, #100]	@ (8005318 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	0019      	movs	r1, r3
 80052b6:	4b17      	ldr	r3, [pc, #92]	@ (8005314 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	2380      	movs	r3, #128	@ 0x80
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d11f      	bne.n	8005308 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80052c8:	4b14      	ldr	r3, [pc, #80]	@ (800531c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	0013      	movs	r3, r2
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	189b      	adds	r3, r3, r2
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	4912      	ldr	r1, [pc, #72]	@ (8005320 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80052d6:	0018      	movs	r0, r3
 80052d8:	f7fa ff14 	bl	8000104 <__udivsi3>
 80052dc:	0003      	movs	r3, r0
 80052de:	3301      	adds	r3, #1
 80052e0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052e2:	e008      	b.n	80052f6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e001      	b.n	80052f6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e009      	b.n	800530a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052f6:	4b07      	ldr	r3, [pc, #28]	@ (8005314 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80052f8:	695a      	ldr	r2, [r3, #20]
 80052fa:	2380      	movs	r3, #128	@ 0x80
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	401a      	ands	r2, r3
 8005300:	2380      	movs	r3, #128	@ 0x80
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	429a      	cmp	r2, r3
 8005306:	d0ed      	beq.n	80052e4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	0018      	movs	r0, r3
 800530c:	46bd      	mov	sp, r7
 800530e:	b004      	add	sp, #16
 8005310:	bd80      	pop	{r7, pc}
 8005312:	46c0      	nop			@ (mov r8, r8)
 8005314:	40007000 	.word	0x40007000
 8005318:	fffff9ff 	.word	0xfffff9ff
 800531c:	20000070 	.word	0x20000070
 8005320:	000f4240 	.word	0x000f4240

08005324 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e2fe      	b.n	8005934 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2201      	movs	r2, #1
 800533c:	4013      	ands	r3, r2
 800533e:	d100      	bne.n	8005342 <HAL_RCC_OscConfig+0x1e>
 8005340:	e07c      	b.n	800543c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005342:	4bc3      	ldr	r3, [pc, #780]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2238      	movs	r2, #56	@ 0x38
 8005348:	4013      	ands	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800534c:	4bc0      	ldr	r3, [pc, #768]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	2203      	movs	r2, #3
 8005352:	4013      	ands	r3, r2
 8005354:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b10      	cmp	r3, #16
 800535a:	d102      	bne.n	8005362 <HAL_RCC_OscConfig+0x3e>
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2b03      	cmp	r3, #3
 8005360:	d002      	beq.n	8005368 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b08      	cmp	r3, #8
 8005366:	d10b      	bne.n	8005380 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005368:	4bb9      	ldr	r3, [pc, #740]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	2380      	movs	r3, #128	@ 0x80
 800536e:	029b      	lsls	r3, r3, #10
 8005370:	4013      	ands	r3, r2
 8005372:	d062      	beq.n	800543a <HAL_RCC_OscConfig+0x116>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d15e      	bne.n	800543a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e2d9      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	2380      	movs	r3, #128	@ 0x80
 8005386:	025b      	lsls	r3, r3, #9
 8005388:	429a      	cmp	r2, r3
 800538a:	d107      	bne.n	800539c <HAL_RCC_OscConfig+0x78>
 800538c:	4bb0      	ldr	r3, [pc, #704]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4baf      	ldr	r3, [pc, #700]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 8005392:	2180      	movs	r1, #128	@ 0x80
 8005394:	0249      	lsls	r1, r1, #9
 8005396:	430a      	orrs	r2, r1
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	e020      	b.n	80053de <HAL_RCC_OscConfig+0xba>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	23a0      	movs	r3, #160	@ 0xa0
 80053a2:	02db      	lsls	r3, r3, #11
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d10e      	bne.n	80053c6 <HAL_RCC_OscConfig+0xa2>
 80053a8:	4ba9      	ldr	r3, [pc, #676]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	4ba8      	ldr	r3, [pc, #672]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80053ae:	2180      	movs	r1, #128	@ 0x80
 80053b0:	02c9      	lsls	r1, r1, #11
 80053b2:	430a      	orrs	r2, r1
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	4ba6      	ldr	r3, [pc, #664]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4ba5      	ldr	r3, [pc, #660]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80053bc:	2180      	movs	r1, #128	@ 0x80
 80053be:	0249      	lsls	r1, r1, #9
 80053c0:	430a      	orrs	r2, r1
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e00b      	b.n	80053de <HAL_RCC_OscConfig+0xba>
 80053c6:	4ba2      	ldr	r3, [pc, #648]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4ba1      	ldr	r3, [pc, #644]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80053cc:	49a1      	ldr	r1, [pc, #644]	@ (8005654 <HAL_RCC_OscConfig+0x330>)
 80053ce:	400a      	ands	r2, r1
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	4b9f      	ldr	r3, [pc, #636]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4b9e      	ldr	r3, [pc, #632]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80053d8:	499f      	ldr	r1, [pc, #636]	@ (8005658 <HAL_RCC_OscConfig+0x334>)
 80053da:	400a      	ands	r2, r1
 80053dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d014      	beq.n	8005410 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e6:	f7fd fb65 	bl	8002ab4 <HAL_GetTick>
 80053ea:	0003      	movs	r3, r0
 80053ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053f0:	f7fd fb60 	bl	8002ab4 <HAL_GetTick>
 80053f4:	0002      	movs	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b64      	cmp	r3, #100	@ 0x64
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e298      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005402:	4b93      	ldr	r3, [pc, #588]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	2380      	movs	r3, #128	@ 0x80
 8005408:	029b      	lsls	r3, r3, #10
 800540a:	4013      	ands	r3, r2
 800540c:	d0f0      	beq.n	80053f0 <HAL_RCC_OscConfig+0xcc>
 800540e:	e015      	b.n	800543c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005410:	f7fd fb50 	bl	8002ab4 <HAL_GetTick>
 8005414:	0003      	movs	r3, r0
 8005416:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005418:	e008      	b.n	800542c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800541a:	f7fd fb4b 	bl	8002ab4 <HAL_GetTick>
 800541e:	0002      	movs	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b64      	cmp	r3, #100	@ 0x64
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e283      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800542c:	4b88      	ldr	r3, [pc, #544]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	2380      	movs	r3, #128	@ 0x80
 8005432:	029b      	lsls	r3, r3, #10
 8005434:	4013      	ands	r3, r2
 8005436:	d1f0      	bne.n	800541a <HAL_RCC_OscConfig+0xf6>
 8005438:	e000      	b.n	800543c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800543a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2202      	movs	r2, #2
 8005442:	4013      	ands	r3, r2
 8005444:	d100      	bne.n	8005448 <HAL_RCC_OscConfig+0x124>
 8005446:	e099      	b.n	800557c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005448:	4b81      	ldr	r3, [pc, #516]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	2238      	movs	r2, #56	@ 0x38
 800544e:	4013      	ands	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005452:	4b7f      	ldr	r3, [pc, #508]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	2203      	movs	r2, #3
 8005458:	4013      	ands	r3, r2
 800545a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b10      	cmp	r3, #16
 8005460:	d102      	bne.n	8005468 <HAL_RCC_OscConfig+0x144>
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d002      	beq.n	800546e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d135      	bne.n	80054da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800546e:	4b78      	ldr	r3, [pc, #480]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	2380      	movs	r3, #128	@ 0x80
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	4013      	ands	r3, r2
 8005478:	d005      	beq.n	8005486 <HAL_RCC_OscConfig+0x162>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e256      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005486:	4b72      	ldr	r3, [pc, #456]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	4a74      	ldr	r2, [pc, #464]	@ (800565c <HAL_RCC_OscConfig+0x338>)
 800548c:	4013      	ands	r3, r2
 800548e:	0019      	movs	r1, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	021a      	lsls	r2, r3, #8
 8005496:	4b6e      	ldr	r3, [pc, #440]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 8005498:	430a      	orrs	r2, r1
 800549a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d112      	bne.n	80054c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80054a2:	4b6b      	ldr	r3, [pc, #428]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a6e      	ldr	r2, [pc, #440]	@ (8005660 <HAL_RCC_OscConfig+0x33c>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	0019      	movs	r1, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	4b67      	ldr	r3, [pc, #412]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80054b2:	430a      	orrs	r2, r1
 80054b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80054b6:	4b66      	ldr	r3, [pc, #408]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	0adb      	lsrs	r3, r3, #11
 80054bc:	2207      	movs	r2, #7
 80054be:	4013      	ands	r3, r2
 80054c0:	4a68      	ldr	r2, [pc, #416]	@ (8005664 <HAL_RCC_OscConfig+0x340>)
 80054c2:	40da      	lsrs	r2, r3
 80054c4:	4b68      	ldr	r3, [pc, #416]	@ (8005668 <HAL_RCC_OscConfig+0x344>)
 80054c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054c8:	4b68      	ldr	r3, [pc, #416]	@ (800566c <HAL_RCC_OscConfig+0x348>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	0018      	movs	r0, r3
 80054ce:	f7fd fa95 	bl	80029fc <HAL_InitTick>
 80054d2:	1e03      	subs	r3, r0, #0
 80054d4:	d051      	beq.n	800557a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e22c      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d030      	beq.n	8005544 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80054e2:	4b5b      	ldr	r3, [pc, #364]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a5e      	ldr	r2, [pc, #376]	@ (8005660 <HAL_RCC_OscConfig+0x33c>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	0019      	movs	r1, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	4b57      	ldr	r3, [pc, #348]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80054f2:	430a      	orrs	r2, r1
 80054f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80054f6:	4b56      	ldr	r3, [pc, #344]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b55      	ldr	r3, [pc, #340]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80054fc:	2180      	movs	r1, #128	@ 0x80
 80054fe:	0049      	lsls	r1, r1, #1
 8005500:	430a      	orrs	r2, r1
 8005502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005504:	f7fd fad6 	bl	8002ab4 <HAL_GetTick>
 8005508:	0003      	movs	r3, r0
 800550a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800550c:	e008      	b.n	8005520 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800550e:	f7fd fad1 	bl	8002ab4 <HAL_GetTick>
 8005512:	0002      	movs	r2, r0
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e209      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005520:	4b4b      	ldr	r3, [pc, #300]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	2380      	movs	r3, #128	@ 0x80
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	4013      	ands	r3, r2
 800552a:	d0f0      	beq.n	800550e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552c:	4b48      	ldr	r3, [pc, #288]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a4a      	ldr	r2, [pc, #296]	@ (800565c <HAL_RCC_OscConfig+0x338>)
 8005532:	4013      	ands	r3, r2
 8005534:	0019      	movs	r1, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	021a      	lsls	r2, r3, #8
 800553c:	4b44      	ldr	r3, [pc, #272]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
 8005542:	e01b      	b.n	800557c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005544:	4b42      	ldr	r3, [pc, #264]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	4b41      	ldr	r3, [pc, #260]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 800554a:	4949      	ldr	r1, [pc, #292]	@ (8005670 <HAL_RCC_OscConfig+0x34c>)
 800554c:	400a      	ands	r2, r1
 800554e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005550:	f7fd fab0 	bl	8002ab4 <HAL_GetTick>
 8005554:	0003      	movs	r3, r0
 8005556:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800555a:	f7fd faab 	bl	8002ab4 <HAL_GetTick>
 800555e:	0002      	movs	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e1e3      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800556c:	4b38      	ldr	r3, [pc, #224]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	2380      	movs	r3, #128	@ 0x80
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	4013      	ands	r3, r2
 8005576:	d1f0      	bne.n	800555a <HAL_RCC_OscConfig+0x236>
 8005578:	e000      	b.n	800557c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800557a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2208      	movs	r2, #8
 8005582:	4013      	ands	r3, r2
 8005584:	d047      	beq.n	8005616 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005586:	4b32      	ldr	r3, [pc, #200]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2238      	movs	r2, #56	@ 0x38
 800558c:	4013      	ands	r3, r2
 800558e:	2b18      	cmp	r3, #24
 8005590:	d10a      	bne.n	80055a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005592:	4b2f      	ldr	r3, [pc, #188]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 8005594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005596:	2202      	movs	r2, #2
 8005598:	4013      	ands	r3, r2
 800559a:	d03c      	beq.n	8005616 <HAL_RCC_OscConfig+0x2f2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d138      	bne.n	8005616 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e1c5      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d019      	beq.n	80055e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80055b0:	4b27      	ldr	r3, [pc, #156]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80055b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80055b4:	4b26      	ldr	r3, [pc, #152]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80055b6:	2101      	movs	r1, #1
 80055b8:	430a      	orrs	r2, r1
 80055ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055bc:	f7fd fa7a 	bl	8002ab4 <HAL_GetTick>
 80055c0:	0003      	movs	r3, r0
 80055c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055c4:	e008      	b.n	80055d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c6:	f7fd fa75 	bl	8002ab4 <HAL_GetTick>
 80055ca:	0002      	movs	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e1ad      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80055da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055dc:	2202      	movs	r2, #2
 80055de:	4013      	ands	r3, r2
 80055e0:	d0f1      	beq.n	80055c6 <HAL_RCC_OscConfig+0x2a2>
 80055e2:	e018      	b.n	8005616 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80055e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80055e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80055e8:	4b19      	ldr	r3, [pc, #100]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 80055ea:	2101      	movs	r1, #1
 80055ec:	438a      	bics	r2, r1
 80055ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f0:	f7fd fa60 	bl	8002ab4 <HAL_GetTick>
 80055f4:	0003      	movs	r3, r0
 80055f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055fa:	f7fd fa5b 	bl	8002ab4 <HAL_GetTick>
 80055fe:	0002      	movs	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e193      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800560c:	4b10      	ldr	r3, [pc, #64]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 800560e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005610:	2202      	movs	r2, #2
 8005612:	4013      	ands	r3, r2
 8005614:	d1f1      	bne.n	80055fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2204      	movs	r2, #4
 800561c:	4013      	ands	r3, r2
 800561e:	d100      	bne.n	8005622 <HAL_RCC_OscConfig+0x2fe>
 8005620:	e0c6      	b.n	80057b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005622:	231f      	movs	r3, #31
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	2200      	movs	r2, #0
 8005628:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800562a:	4b09      	ldr	r3, [pc, #36]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	2238      	movs	r2, #56	@ 0x38
 8005630:	4013      	ands	r3, r2
 8005632:	2b20      	cmp	r3, #32
 8005634:	d11e      	bne.n	8005674 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005636:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <HAL_RCC_OscConfig+0x32c>)
 8005638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800563a:	2202      	movs	r2, #2
 800563c:	4013      	ands	r3, r2
 800563e:	d100      	bne.n	8005642 <HAL_RCC_OscConfig+0x31e>
 8005640:	e0b6      	b.n	80057b0 <HAL_RCC_OscConfig+0x48c>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d000      	beq.n	800564c <HAL_RCC_OscConfig+0x328>
 800564a:	e0b1      	b.n	80057b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e171      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
 8005650:	40021000 	.word	0x40021000
 8005654:	fffeffff 	.word	0xfffeffff
 8005658:	fffbffff 	.word	0xfffbffff
 800565c:	ffff80ff 	.word	0xffff80ff
 8005660:	ffffc7ff 	.word	0xffffc7ff
 8005664:	00f42400 	.word	0x00f42400
 8005668:	20000070 	.word	0x20000070
 800566c:	20000074 	.word	0x20000074
 8005670:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005674:	4bb1      	ldr	r3, [pc, #708]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 8005676:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005678:	2380      	movs	r3, #128	@ 0x80
 800567a:	055b      	lsls	r3, r3, #21
 800567c:	4013      	ands	r3, r2
 800567e:	d101      	bne.n	8005684 <HAL_RCC_OscConfig+0x360>
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <HAL_RCC_OscConfig+0x362>
 8005684:	2300      	movs	r3, #0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d011      	beq.n	80056ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800568a:	4bac      	ldr	r3, [pc, #688]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 800568c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800568e:	4bab      	ldr	r3, [pc, #684]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 8005690:	2180      	movs	r1, #128	@ 0x80
 8005692:	0549      	lsls	r1, r1, #21
 8005694:	430a      	orrs	r2, r1
 8005696:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005698:	4ba8      	ldr	r3, [pc, #672]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 800569a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800569c:	2380      	movs	r3, #128	@ 0x80
 800569e:	055b      	lsls	r3, r3, #21
 80056a0:	4013      	ands	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80056a6:	231f      	movs	r3, #31
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	2201      	movs	r2, #1
 80056ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056ae:	4ba4      	ldr	r3, [pc, #656]	@ (8005940 <HAL_RCC_OscConfig+0x61c>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	2380      	movs	r3, #128	@ 0x80
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	4013      	ands	r3, r2
 80056b8:	d11a      	bne.n	80056f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056ba:	4ba1      	ldr	r3, [pc, #644]	@ (8005940 <HAL_RCC_OscConfig+0x61c>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4ba0      	ldr	r3, [pc, #640]	@ (8005940 <HAL_RCC_OscConfig+0x61c>)
 80056c0:	2180      	movs	r1, #128	@ 0x80
 80056c2:	0049      	lsls	r1, r1, #1
 80056c4:	430a      	orrs	r2, r1
 80056c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80056c8:	f7fd f9f4 	bl	8002ab4 <HAL_GetTick>
 80056cc:	0003      	movs	r3, r0
 80056ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d2:	f7fd f9ef 	bl	8002ab4 <HAL_GetTick>
 80056d6:	0002      	movs	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e127      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056e4:	4b96      	ldr	r3, [pc, #600]	@ (8005940 <HAL_RCC_OscConfig+0x61c>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	2380      	movs	r3, #128	@ 0x80
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	4013      	ands	r3, r2
 80056ee:	d0f0      	beq.n	80056d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d106      	bne.n	8005706 <HAL_RCC_OscConfig+0x3e2>
 80056f8:	4b90      	ldr	r3, [pc, #576]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 80056fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80056fc:	4b8f      	ldr	r3, [pc, #572]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 80056fe:	2101      	movs	r1, #1
 8005700:	430a      	orrs	r2, r1
 8005702:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005704:	e01c      	b.n	8005740 <HAL_RCC_OscConfig+0x41c>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2b05      	cmp	r3, #5
 800570c:	d10c      	bne.n	8005728 <HAL_RCC_OscConfig+0x404>
 800570e:	4b8b      	ldr	r3, [pc, #556]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 8005710:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005712:	4b8a      	ldr	r3, [pc, #552]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 8005714:	2104      	movs	r1, #4
 8005716:	430a      	orrs	r2, r1
 8005718:	65da      	str	r2, [r3, #92]	@ 0x5c
 800571a:	4b88      	ldr	r3, [pc, #544]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 800571c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800571e:	4b87      	ldr	r3, [pc, #540]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 8005720:	2101      	movs	r1, #1
 8005722:	430a      	orrs	r2, r1
 8005724:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005726:	e00b      	b.n	8005740 <HAL_RCC_OscConfig+0x41c>
 8005728:	4b84      	ldr	r3, [pc, #528]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 800572a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800572c:	4b83      	ldr	r3, [pc, #524]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 800572e:	2101      	movs	r1, #1
 8005730:	438a      	bics	r2, r1
 8005732:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005734:	4b81      	ldr	r3, [pc, #516]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 8005736:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005738:	4b80      	ldr	r3, [pc, #512]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 800573a:	2104      	movs	r1, #4
 800573c:	438a      	bics	r2, r1
 800573e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d014      	beq.n	8005772 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005748:	f7fd f9b4 	bl	8002ab4 <HAL_GetTick>
 800574c:	0003      	movs	r3, r0
 800574e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005750:	e009      	b.n	8005766 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005752:	f7fd f9af 	bl	8002ab4 <HAL_GetTick>
 8005756:	0002      	movs	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	4a79      	ldr	r2, [pc, #484]	@ (8005944 <HAL_RCC_OscConfig+0x620>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e0e6      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005766:	4b75      	ldr	r3, [pc, #468]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 8005768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800576a:	2202      	movs	r2, #2
 800576c:	4013      	ands	r3, r2
 800576e:	d0f0      	beq.n	8005752 <HAL_RCC_OscConfig+0x42e>
 8005770:	e013      	b.n	800579a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005772:	f7fd f99f 	bl	8002ab4 <HAL_GetTick>
 8005776:	0003      	movs	r3, r0
 8005778:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800577a:	e009      	b.n	8005790 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800577c:	f7fd f99a 	bl	8002ab4 <HAL_GetTick>
 8005780:	0002      	movs	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	4a6f      	ldr	r2, [pc, #444]	@ (8005944 <HAL_RCC_OscConfig+0x620>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e0d1      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005790:	4b6a      	ldr	r3, [pc, #424]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 8005792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005794:	2202      	movs	r2, #2
 8005796:	4013      	ands	r3, r2
 8005798:	d1f0      	bne.n	800577c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800579a:	231f      	movs	r3, #31
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d105      	bne.n	80057b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80057a4:	4b65      	ldr	r3, [pc, #404]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 80057a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057a8:	4b64      	ldr	r3, [pc, #400]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 80057aa:	4967      	ldr	r1, [pc, #412]	@ (8005948 <HAL_RCC_OscConfig+0x624>)
 80057ac:	400a      	ands	r2, r1
 80057ae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d100      	bne.n	80057ba <HAL_RCC_OscConfig+0x496>
 80057b8:	e0bb      	b.n	8005932 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057ba:	4b60      	ldr	r3, [pc, #384]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	2238      	movs	r2, #56	@ 0x38
 80057c0:	4013      	ands	r3, r2
 80057c2:	2b10      	cmp	r3, #16
 80057c4:	d100      	bne.n	80057c8 <HAL_RCC_OscConfig+0x4a4>
 80057c6:	e07b      	b.n	80058c0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d156      	bne.n	800587e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d0:	4b5a      	ldr	r3, [pc, #360]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	4b59      	ldr	r3, [pc, #356]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 80057d6:	495d      	ldr	r1, [pc, #372]	@ (800594c <HAL_RCC_OscConfig+0x628>)
 80057d8:	400a      	ands	r2, r1
 80057da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057dc:	f7fd f96a 	bl	8002ab4 <HAL_GetTick>
 80057e0:	0003      	movs	r3, r0
 80057e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e6:	f7fd f965 	bl	8002ab4 <HAL_GetTick>
 80057ea:	0002      	movs	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e09d      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057f8:	4b50      	ldr	r3, [pc, #320]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	2380      	movs	r3, #128	@ 0x80
 80057fe:	049b      	lsls	r3, r3, #18
 8005800:	4013      	ands	r3, r2
 8005802:	d1f0      	bne.n	80057e6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005804:	4b4d      	ldr	r3, [pc, #308]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	4a51      	ldr	r2, [pc, #324]	@ (8005950 <HAL_RCC_OscConfig+0x62c>)
 800580a:	4013      	ands	r3, r2
 800580c:	0019      	movs	r1, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1a      	ldr	r2, [r3, #32]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005816:	431a      	orrs	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	021b      	lsls	r3, r3, #8
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005830:	431a      	orrs	r2, r3
 8005832:	4b42      	ldr	r3, [pc, #264]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 8005834:	430a      	orrs	r2, r1
 8005836:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005838:	4b40      	ldr	r3, [pc, #256]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	4b3f      	ldr	r3, [pc, #252]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 800583e:	2180      	movs	r1, #128	@ 0x80
 8005840:	0449      	lsls	r1, r1, #17
 8005842:	430a      	orrs	r2, r1
 8005844:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005846:	4b3d      	ldr	r3, [pc, #244]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	4b3c      	ldr	r3, [pc, #240]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 800584c:	2180      	movs	r1, #128	@ 0x80
 800584e:	0549      	lsls	r1, r1, #21
 8005850:	430a      	orrs	r2, r1
 8005852:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005854:	f7fd f92e 	bl	8002ab4 <HAL_GetTick>
 8005858:	0003      	movs	r3, r0
 800585a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800585e:	f7fd f929 	bl	8002ab4 <HAL_GetTick>
 8005862:	0002      	movs	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e061      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005870:	4b32      	ldr	r3, [pc, #200]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	2380      	movs	r3, #128	@ 0x80
 8005876:	049b      	lsls	r3, r3, #18
 8005878:	4013      	ands	r3, r2
 800587a:	d0f0      	beq.n	800585e <HAL_RCC_OscConfig+0x53a>
 800587c:	e059      	b.n	8005932 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800587e:	4b2f      	ldr	r3, [pc, #188]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b2e      	ldr	r3, [pc, #184]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 8005884:	4931      	ldr	r1, [pc, #196]	@ (800594c <HAL_RCC_OscConfig+0x628>)
 8005886:	400a      	ands	r2, r1
 8005888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588a:	f7fd f913 	bl	8002ab4 <HAL_GetTick>
 800588e:	0003      	movs	r3, r0
 8005890:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005894:	f7fd f90e 	bl	8002ab4 <HAL_GetTick>
 8005898:	0002      	movs	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e046      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058a6:	4b25      	ldr	r3, [pc, #148]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	2380      	movs	r3, #128	@ 0x80
 80058ac:	049b      	lsls	r3, r3, #18
 80058ae:	4013      	ands	r3, r2
 80058b0:	d1f0      	bne.n	8005894 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80058b2:	4b22      	ldr	r3, [pc, #136]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	4b21      	ldr	r3, [pc, #132]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 80058b8:	4926      	ldr	r1, [pc, #152]	@ (8005954 <HAL_RCC_OscConfig+0x630>)
 80058ba:	400a      	ands	r2, r1
 80058bc:	60da      	str	r2, [r3, #12]
 80058be:	e038      	b.n	8005932 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d101      	bne.n	80058cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e033      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80058cc:	4b1b      	ldr	r3, [pc, #108]	@ (800593c <HAL_RCC_OscConfig+0x618>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2203      	movs	r2, #3
 80058d6:	401a      	ands	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d126      	bne.n	800592e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2270      	movs	r2, #112	@ 0x70
 80058e4:	401a      	ands	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d11f      	bne.n	800592e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	23fe      	movs	r3, #254	@ 0xfe
 80058f2:	01db      	lsls	r3, r3, #7
 80058f4:	401a      	ands	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058fa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d116      	bne.n	800592e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	23f8      	movs	r3, #248	@ 0xf8
 8005904:	039b      	lsls	r3, r3, #14
 8005906:	401a      	ands	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800590c:	429a      	cmp	r2, r3
 800590e:	d10e      	bne.n	800592e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	23e0      	movs	r3, #224	@ 0xe0
 8005914:	051b      	lsls	r3, r3, #20
 8005916:	401a      	ands	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800591c:	429a      	cmp	r2, r3
 800591e:	d106      	bne.n	800592e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	0f5b      	lsrs	r3, r3, #29
 8005924:	075a      	lsls	r2, r3, #29
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800592a:	429a      	cmp	r2, r3
 800592c:	d001      	beq.n	8005932 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	0018      	movs	r0, r3
 8005936:	46bd      	mov	sp, r7
 8005938:	b008      	add	sp, #32
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40021000 	.word	0x40021000
 8005940:	40007000 	.word	0x40007000
 8005944:	00001388 	.word	0x00001388
 8005948:	efffffff 	.word	0xefffffff
 800594c:	feffffff 	.word	0xfeffffff
 8005950:	11c1808c 	.word	0x11c1808c
 8005954:	eefefffc 	.word	0xeefefffc

08005958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e0e9      	b.n	8005b40 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800596c:	4b76      	ldr	r3, [pc, #472]	@ (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2207      	movs	r2, #7
 8005972:	4013      	ands	r3, r2
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d91e      	bls.n	80059b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800597a:	4b73      	ldr	r3, [pc, #460]	@ (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2207      	movs	r2, #7
 8005980:	4393      	bics	r3, r2
 8005982:	0019      	movs	r1, r3
 8005984:	4b70      	ldr	r3, [pc, #448]	@ (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800598c:	f7fd f892 	bl	8002ab4 <HAL_GetTick>
 8005990:	0003      	movs	r3, r0
 8005992:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005994:	e009      	b.n	80059aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005996:	f7fd f88d 	bl	8002ab4 <HAL_GetTick>
 800599a:	0002      	movs	r2, r0
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	4a6a      	ldr	r2, [pc, #424]	@ (8005b4c <HAL_RCC_ClockConfig+0x1f4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e0ca      	b.n	8005b40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80059aa:	4b67      	ldr	r3, [pc, #412]	@ (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2207      	movs	r2, #7
 80059b0:	4013      	ands	r3, r2
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d1ee      	bne.n	8005996 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2202      	movs	r2, #2
 80059be:	4013      	ands	r3, r2
 80059c0:	d015      	beq.n	80059ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2204      	movs	r2, #4
 80059c8:	4013      	ands	r3, r2
 80059ca:	d006      	beq.n	80059da <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80059cc:	4b60      	ldr	r3, [pc, #384]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f8>)
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	4b5f      	ldr	r3, [pc, #380]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f8>)
 80059d2:	21e0      	movs	r1, #224	@ 0xe0
 80059d4:	01c9      	lsls	r1, r1, #7
 80059d6:	430a      	orrs	r2, r1
 80059d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059da:	4b5d      	ldr	r3, [pc, #372]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f8>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	4a5d      	ldr	r2, [pc, #372]	@ (8005b54 <HAL_RCC_ClockConfig+0x1fc>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	0019      	movs	r1, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	4b59      	ldr	r3, [pc, #356]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f8>)
 80059ea:	430a      	orrs	r2, r1
 80059ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2201      	movs	r2, #1
 80059f4:	4013      	ands	r3, r2
 80059f6:	d057      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d107      	bne.n	8005a10 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a00:	4b53      	ldr	r3, [pc, #332]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f8>)
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	2380      	movs	r3, #128	@ 0x80
 8005a06:	029b      	lsls	r3, r3, #10
 8005a08:	4013      	ands	r3, r2
 8005a0a:	d12b      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e097      	b.n	8005b40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d107      	bne.n	8005a28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a18:	4b4d      	ldr	r3, [pc, #308]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f8>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	2380      	movs	r3, #128	@ 0x80
 8005a1e:	049b      	lsls	r3, r3, #18
 8005a20:	4013      	ands	r3, r2
 8005a22:	d11f      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e08b      	b.n	8005b40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d107      	bne.n	8005a40 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a30:	4b47      	ldr	r3, [pc, #284]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f8>)
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	2380      	movs	r3, #128	@ 0x80
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	4013      	ands	r3, r2
 8005a3a:	d113      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e07f      	b.n	8005b40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d106      	bne.n	8005a56 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a48:	4b41      	ldr	r3, [pc, #260]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f8>)
 8005a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	4013      	ands	r3, r2
 8005a50:	d108      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e074      	b.n	8005b40 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a56:	4b3e      	ldr	r3, [pc, #248]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f8>)
 8005a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	d101      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e06d      	b.n	8005b40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a64:	4b3a      	ldr	r3, [pc, #232]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f8>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	2207      	movs	r2, #7
 8005a6a:	4393      	bics	r3, r2
 8005a6c:	0019      	movs	r1, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	4b37      	ldr	r3, [pc, #220]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f8>)
 8005a74:	430a      	orrs	r2, r1
 8005a76:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a78:	f7fd f81c 	bl	8002ab4 <HAL_GetTick>
 8005a7c:	0003      	movs	r3, r0
 8005a7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a80:	e009      	b.n	8005a96 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a82:	f7fd f817 	bl	8002ab4 <HAL_GetTick>
 8005a86:	0002      	movs	r2, r0
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	4a2f      	ldr	r2, [pc, #188]	@ (8005b4c <HAL_RCC_ClockConfig+0x1f4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e054      	b.n	8005b40 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a96:	4b2e      	ldr	r3, [pc, #184]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f8>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	2238      	movs	r2, #56	@ 0x38
 8005a9c:	401a      	ands	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d1ec      	bne.n	8005a82 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005aa8:	4b27      	ldr	r3, [pc, #156]	@ (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2207      	movs	r2, #7
 8005aae:	4013      	ands	r3, r2
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d21e      	bcs.n	8005af4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ab6:	4b24      	ldr	r3, [pc, #144]	@ (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2207      	movs	r2, #7
 8005abc:	4393      	bics	r3, r2
 8005abe:	0019      	movs	r1, r3
 8005ac0:	4b21      	ldr	r3, [pc, #132]	@ (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ac8:	f7fc fff4 	bl	8002ab4 <HAL_GetTick>
 8005acc:	0003      	movs	r3, r0
 8005ace:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ad0:	e009      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ad2:	f7fc ffef 	bl	8002ab4 <HAL_GetTick>
 8005ad6:	0002      	movs	r2, r0
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	4a1b      	ldr	r2, [pc, #108]	@ (8005b4c <HAL_RCC_ClockConfig+0x1f4>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e02c      	b.n	8005b40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ae6:	4b18      	ldr	r3, [pc, #96]	@ (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2207      	movs	r2, #7
 8005aec:	4013      	ands	r3, r2
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d1ee      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2204      	movs	r2, #4
 8005afa:	4013      	ands	r3, r2
 8005afc:	d009      	beq.n	8005b12 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005afe:	4b14      	ldr	r3, [pc, #80]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f8>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	4a15      	ldr	r2, [pc, #84]	@ (8005b58 <HAL_RCC_ClockConfig+0x200>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	0019      	movs	r1, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	4b10      	ldr	r3, [pc, #64]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f8>)
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005b12:	f000 f829 	bl	8005b68 <HAL_RCC_GetSysClockFreq>
 8005b16:	0001      	movs	r1, r0
 8005b18:	4b0d      	ldr	r3, [pc, #52]	@ (8005b50 <HAL_RCC_ClockConfig+0x1f8>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	0a1b      	lsrs	r3, r3, #8
 8005b1e:	220f      	movs	r2, #15
 8005b20:	401a      	ands	r2, r3
 8005b22:	4b0e      	ldr	r3, [pc, #56]	@ (8005b5c <HAL_RCC_ClockConfig+0x204>)
 8005b24:	0092      	lsls	r2, r2, #2
 8005b26:	58d3      	ldr	r3, [r2, r3]
 8005b28:	221f      	movs	r2, #31
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	000a      	movs	r2, r1
 8005b2e:	40da      	lsrs	r2, r3
 8005b30:	4b0b      	ldr	r3, [pc, #44]	@ (8005b60 <HAL_RCC_ClockConfig+0x208>)
 8005b32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b34:	4b0b      	ldr	r3, [pc, #44]	@ (8005b64 <HAL_RCC_ClockConfig+0x20c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f7fc ff5f 	bl	80029fc <HAL_InitTick>
 8005b3e:	0003      	movs	r3, r0
}
 8005b40:	0018      	movs	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	b004      	add	sp, #16
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	40022000 	.word	0x40022000
 8005b4c:	00001388 	.word	0x00001388
 8005b50:	40021000 	.word	0x40021000
 8005b54:	fffff0ff 	.word	0xfffff0ff
 8005b58:	ffff8fff 	.word	0xffff8fff
 8005b5c:	080069dc 	.word	0x080069dc
 8005b60:	20000070 	.word	0x20000070
 8005b64:	20000074 	.word	0x20000074

08005b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b6e:	4b3c      	ldr	r3, [pc, #240]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	2238      	movs	r2, #56	@ 0x38
 8005b74:	4013      	ands	r3, r2
 8005b76:	d10f      	bne.n	8005b98 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005b78:	4b39      	ldr	r3, [pc, #228]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	0adb      	lsrs	r3, r3, #11
 8005b7e:	2207      	movs	r2, #7
 8005b80:	4013      	ands	r3, r2
 8005b82:	2201      	movs	r2, #1
 8005b84:	409a      	lsls	r2, r3
 8005b86:	0013      	movs	r3, r2
 8005b88:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005b8a:	6839      	ldr	r1, [r7, #0]
 8005b8c:	4835      	ldr	r0, [pc, #212]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b8e:	f7fa fab9 	bl	8000104 <__udivsi3>
 8005b92:	0003      	movs	r3, r0
 8005b94:	613b      	str	r3, [r7, #16]
 8005b96:	e05d      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b98:	4b31      	ldr	r3, [pc, #196]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	2238      	movs	r2, #56	@ 0x38
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d102      	bne.n	8005baa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ba4:	4b30      	ldr	r3, [pc, #192]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x100>)
 8005ba6:	613b      	str	r3, [r7, #16]
 8005ba8:	e054      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005baa:	4b2d      	ldr	r3, [pc, #180]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	2238      	movs	r2, #56	@ 0x38
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b10      	cmp	r3, #16
 8005bb4:	d138      	bne.n	8005c28 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	2203      	movs	r2, #3
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bc0:	4b27      	ldr	r3, [pc, #156]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	091b      	lsrs	r3, r3, #4
 8005bc6:	2207      	movs	r2, #7
 8005bc8:	4013      	ands	r3, r2
 8005bca:	3301      	adds	r3, #1
 8005bcc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d10d      	bne.n	8005bf0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	4824      	ldr	r0, [pc, #144]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x100>)
 8005bd8:	f7fa fa94 	bl	8000104 <__udivsi3>
 8005bdc:	0003      	movs	r3, r0
 8005bde:	0019      	movs	r1, r3
 8005be0:	4b1f      	ldr	r3, [pc, #124]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	0a1b      	lsrs	r3, r3, #8
 8005be6:	227f      	movs	r2, #127	@ 0x7f
 8005be8:	4013      	ands	r3, r2
 8005bea:	434b      	muls	r3, r1
 8005bec:	617b      	str	r3, [r7, #20]
        break;
 8005bee:	e00d      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	481c      	ldr	r0, [pc, #112]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005bf4:	f7fa fa86 	bl	8000104 <__udivsi3>
 8005bf8:	0003      	movs	r3, r0
 8005bfa:	0019      	movs	r1, r3
 8005bfc:	4b18      	ldr	r3, [pc, #96]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	0a1b      	lsrs	r3, r3, #8
 8005c02:	227f      	movs	r2, #127	@ 0x7f
 8005c04:	4013      	ands	r3, r2
 8005c06:	434b      	muls	r3, r1
 8005c08:	617b      	str	r3, [r7, #20]
        break;
 8005c0a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005c0c:	4b14      	ldr	r3, [pc, #80]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	0f5b      	lsrs	r3, r3, #29
 8005c12:	2207      	movs	r2, #7
 8005c14:	4013      	ands	r3, r2
 8005c16:	3301      	adds	r3, #1
 8005c18:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	6978      	ldr	r0, [r7, #20]
 8005c1e:	f7fa fa71 	bl	8000104 <__udivsi3>
 8005c22:	0003      	movs	r3, r0
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	e015      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005c28:	4b0d      	ldr	r3, [pc, #52]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	2238      	movs	r2, #56	@ 0x38
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	d103      	bne.n	8005c3c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005c34:	2380      	movs	r3, #128	@ 0x80
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	e00b      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005c3c:	4b08      	ldr	r3, [pc, #32]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	2238      	movs	r2, #56	@ 0x38
 8005c42:	4013      	ands	r3, r2
 8005c44:	2b18      	cmp	r3, #24
 8005c46:	d103      	bne.n	8005c50 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005c48:	23fa      	movs	r3, #250	@ 0xfa
 8005c4a:	01db      	lsls	r3, r3, #7
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	e001      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c54:	693b      	ldr	r3, [r7, #16]
}
 8005c56:	0018      	movs	r0, r3
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	b006      	add	sp, #24
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	46c0      	nop			@ (mov r8, r8)
 8005c60:	40021000 	.word	0x40021000
 8005c64:	00f42400 	.word	0x00f42400
 8005c68:	007a1200 	.word	0x007a1200

08005c6c <HAL_RCC_EnableCSS>:
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005c70:	4b04      	ldr	r3, [pc, #16]	@ (8005c84 <HAL_RCC_EnableCSS+0x18>)
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	4b03      	ldr	r3, [pc, #12]	@ (8005c84 <HAL_RCC_EnableCSS+0x18>)
 8005c76:	2180      	movs	r1, #128	@ 0x80
 8005c78:	0309      	lsls	r1, r1, #12
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	601a      	str	r2, [r3, #0]
}
 8005c7e:	46c0      	nop			@ (mov r8, r8)
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40021000 	.word	0x40021000

08005c88 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note  This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
  uint32_t itflag = RCC->CIFR;
 8005c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc4 <HAL_RCC_NMI_IRQHandler+0x3c>)
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	607b      	str	r3, [r7, #4]

  /* Clear interrupt flags related to CSS */
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 8005c94:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc4 <HAL_RCC_NMI_IRQHandler+0x3c>)
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	22c0      	movs	r2, #192	@ 0xc0
 8005c9a:	0092      	lsls	r2, r2, #2
 8005c9c:	400a      	ands	r2, r1
 8005c9e:	621a      	str	r2, [r3, #32]

  /* Check RCC CSSF interrupt flag  */
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	2380      	movs	r3, #128	@ 0x80
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	d001      	beq.n	8005cae <HAL_RCC_NMI_IRQHandler+0x26>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005caa:	f000 f80d 	bl	8005cc8 <HAL_RCC_CSSCallback>
  }

  /* Check RCC LSECSSF interrupt flag  */
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	2380      	movs	r3, #128	@ 0x80
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	d001      	beq.n	8005cbc <HAL_RCC_NMI_IRQHandler+0x34>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_LSECSSCallback();
 8005cb8:	f000 f80b 	bl	8005cd2 <HAL_RCC_LSECSSCallback>
  }
}
 8005cbc:	46c0      	nop			@ (mov r8, r8)
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	b002      	add	sp, #8
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40021000 	.word	0x40021000

08005cc8 <HAL_RCC_CSSCallback>:
/**
  * @brief Handle the RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8005ccc:	46c0      	nop			@ (mov r8, r8)
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <HAL_RCC_LSECSSCallback>:
/**
  * @brief  RCC LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_LSECSSCallback(void)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 8005cd6:	46c0      	nop			@ (mov r8, r8)
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005ce4:	2313      	movs	r3, #19
 8005ce6:	18fb      	adds	r3, r7, r3
 8005ce8:	2200      	movs	r2, #0
 8005cea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cec:	2312      	movs	r3, #18
 8005cee:	18fb      	adds	r3, r7, r3
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	2380      	movs	r3, #128	@ 0x80
 8005cfa:	029b      	lsls	r3, r3, #10
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	d100      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005d00:	e0a3      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d02:	2011      	movs	r0, #17
 8005d04:	183b      	adds	r3, r7, r0
 8005d06:	2200      	movs	r2, #0
 8005d08:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d0a:	4bc3      	ldr	r3, [pc, #780]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d0e:	2380      	movs	r3, #128	@ 0x80
 8005d10:	055b      	lsls	r3, r3, #21
 8005d12:	4013      	ands	r3, r2
 8005d14:	d110      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d16:	4bc0      	ldr	r3, [pc, #768]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d1a:	4bbf      	ldr	r3, [pc, #764]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d1c:	2180      	movs	r1, #128	@ 0x80
 8005d1e:	0549      	lsls	r1, r1, #21
 8005d20:	430a      	orrs	r2, r1
 8005d22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d24:	4bbc      	ldr	r3, [pc, #752]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d28:	2380      	movs	r3, #128	@ 0x80
 8005d2a:	055b      	lsls	r3, r3, #21
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	60bb      	str	r3, [r7, #8]
 8005d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d32:	183b      	adds	r3, r7, r0
 8005d34:	2201      	movs	r2, #1
 8005d36:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d38:	4bb8      	ldr	r3, [pc, #736]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	4bb7      	ldr	r3, [pc, #732]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005d3e:	2180      	movs	r1, #128	@ 0x80
 8005d40:	0049      	lsls	r1, r1, #1
 8005d42:	430a      	orrs	r2, r1
 8005d44:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d46:	f7fc feb5 	bl	8002ab4 <HAL_GetTick>
 8005d4a:	0003      	movs	r3, r0
 8005d4c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d4e:	e00b      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d50:	f7fc feb0 	bl	8002ab4 <HAL_GetTick>
 8005d54:	0002      	movs	r2, r0
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d904      	bls.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005d5e:	2313      	movs	r3, #19
 8005d60:	18fb      	adds	r3, r7, r3
 8005d62:	2203      	movs	r2, #3
 8005d64:	701a      	strb	r2, [r3, #0]
        break;
 8005d66:	e005      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d68:	4bac      	ldr	r3, [pc, #688]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	2380      	movs	r3, #128	@ 0x80
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	4013      	ands	r3, r2
 8005d72:	d0ed      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005d74:	2313      	movs	r3, #19
 8005d76:	18fb      	adds	r3, r7, r3
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d154      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d7e:	4ba6      	ldr	r3, [pc, #664]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d82:	23c0      	movs	r3, #192	@ 0xc0
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4013      	ands	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d019      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d014      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d9a:	4b9f      	ldr	r3, [pc, #636]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d9e:	4aa0      	ldr	r2, [pc, #640]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005da4:	4b9c      	ldr	r3, [pc, #624]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005da6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005da8:	4b9b      	ldr	r3, [pc, #620]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005daa:	2180      	movs	r1, #128	@ 0x80
 8005dac:	0249      	lsls	r1, r1, #9
 8005dae:	430a      	orrs	r2, r1
 8005db0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005db2:	4b99      	ldr	r3, [pc, #612]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005db4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005db6:	4b98      	ldr	r3, [pc, #608]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005db8:	499a      	ldr	r1, [pc, #616]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005dba:	400a      	ands	r2, r1
 8005dbc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005dbe:	4b96      	ldr	r3, [pc, #600]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	4013      	ands	r3, r2
 8005dca:	d016      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dcc:	f7fc fe72 	bl	8002ab4 <HAL_GetTick>
 8005dd0:	0003      	movs	r3, r0
 8005dd2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dd4:	e00c      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dd6:	f7fc fe6d 	bl	8002ab4 <HAL_GetTick>
 8005dda:	0002      	movs	r2, r0
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	4a91      	ldr	r2, [pc, #580]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d904      	bls.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005de6:	2313      	movs	r3, #19
 8005de8:	18fb      	adds	r3, r7, r3
 8005dea:	2203      	movs	r2, #3
 8005dec:	701a      	strb	r2, [r3, #0]
            break;
 8005dee:	e004      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005df0:	4b89      	ldr	r3, [pc, #548]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005df4:	2202      	movs	r2, #2
 8005df6:	4013      	ands	r3, r2
 8005df8:	d0ed      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005dfa:	2313      	movs	r3, #19
 8005dfc:	18fb      	adds	r3, r7, r3
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e04:	4b84      	ldr	r3, [pc, #528]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e08:	4a85      	ldr	r2, [pc, #532]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	0019      	movs	r1, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e12:	4b81      	ldr	r3, [pc, #516]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e14:	430a      	orrs	r2, r1
 8005e16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e18:	e00c      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e1a:	2312      	movs	r3, #18
 8005e1c:	18fb      	adds	r3, r7, r3
 8005e1e:	2213      	movs	r2, #19
 8005e20:	18ba      	adds	r2, r7, r2
 8005e22:	7812      	ldrb	r2, [r2, #0]
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	e005      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e28:	2312      	movs	r3, #18
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	2213      	movs	r2, #19
 8005e2e:	18ba      	adds	r2, r7, r2
 8005e30:	7812      	ldrb	r2, [r2, #0]
 8005e32:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e34:	2311      	movs	r3, #17
 8005e36:	18fb      	adds	r3, r7, r3
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d105      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e3e:	4b76      	ldr	r3, [pc, #472]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e42:	4b75      	ldr	r3, [pc, #468]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e44:	4979      	ldr	r1, [pc, #484]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005e46:	400a      	ands	r2, r1
 8005e48:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	4013      	ands	r3, r2
 8005e52:	d009      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e54:	4b70      	ldr	r3, [pc, #448]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e58:	2203      	movs	r2, #3
 8005e5a:	4393      	bics	r3, r2
 8005e5c:	0019      	movs	r1, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	4b6d      	ldr	r3, [pc, #436]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e64:	430a      	orrs	r2, r1
 8005e66:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	4013      	ands	r3, r2
 8005e70:	d009      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e72:	4b69      	ldr	r3, [pc, #420]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e76:	220c      	movs	r2, #12
 8005e78:	4393      	bics	r3, r2
 8005e7a:	0019      	movs	r1, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	4b65      	ldr	r3, [pc, #404]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e82:	430a      	orrs	r2, r1
 8005e84:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2210      	movs	r2, #16
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	d009      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e90:	4b61      	ldr	r3, [pc, #388]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e94:	4a66      	ldr	r2, [pc, #408]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	0019      	movs	r1, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	4b5e      	ldr	r3, [pc, #376]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	2380      	movs	r3, #128	@ 0x80
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4013      	ands	r3, r2
 8005eae:	d009      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eb0:	4b59      	ldr	r3, [pc, #356]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb4:	4a5f      	ldr	r2, [pc, #380]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	0019      	movs	r1, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699a      	ldr	r2, [r3, #24]
 8005ebe:	4b56      	ldr	r3, [pc, #344]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	2380      	movs	r3, #128	@ 0x80
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	4013      	ands	r3, r2
 8005ece:	d009      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ed0:	4b51      	ldr	r3, [pc, #324]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed4:	4a58      	ldr	r2, [pc, #352]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	0019      	movs	r1, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69da      	ldr	r2, [r3, #28]
 8005ede:	4b4e      	ldr	r3, [pc, #312]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	4013      	ands	r3, r2
 8005eec:	d009      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eee:	4b4a      	ldr	r3, [pc, #296]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef2:	4a52      	ldr	r2, [pc, #328]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	0019      	movs	r1, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691a      	ldr	r2, [r3, #16]
 8005efc:	4b46      	ldr	r3, [pc, #280]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005efe:	430a      	orrs	r2, r1
 8005f00:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	2380      	movs	r3, #128	@ 0x80
 8005f08:	01db      	lsls	r3, r3, #7
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	d015      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f0e:	4b42      	ldr	r3, [pc, #264]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	0899      	lsrs	r1, r3, #2
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1a      	ldr	r2, [r3, #32]
 8005f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a1a      	ldr	r2, [r3, #32]
 8005f24:	2380      	movs	r3, #128	@ 0x80
 8005f26:	05db      	lsls	r3, r3, #23
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d106      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	4b39      	ldr	r3, [pc, #228]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f32:	2180      	movs	r1, #128	@ 0x80
 8005f34:	0249      	lsls	r1, r1, #9
 8005f36:	430a      	orrs	r2, r1
 8005f38:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	2380      	movs	r3, #128	@ 0x80
 8005f40:	031b      	lsls	r3, r3, #12
 8005f42:	4013      	ands	r3, r2
 8005f44:	d009      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f46:	4b34      	ldr	r3, [pc, #208]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f4a:	2240      	movs	r2, #64	@ 0x40
 8005f4c:	4393      	bics	r3, r2
 8005f4e:	0019      	movs	r1, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f54:	4b30      	ldr	r3, [pc, #192]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f56:	430a      	orrs	r2, r1
 8005f58:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	2380      	movs	r3, #128	@ 0x80
 8005f60:	039b      	lsls	r3, r3, #14
 8005f62:	4013      	ands	r3, r2
 8005f64:	d016      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005f66:	4b2c      	ldr	r3, [pc, #176]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f6a:	4a35      	ldr	r2, [pc, #212]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	0019      	movs	r1, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f74:	4b28      	ldr	r3, [pc, #160]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f76:	430a      	orrs	r2, r1
 8005f78:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f7e:	2380      	movs	r3, #128	@ 0x80
 8005f80:	03db      	lsls	r3, r3, #15
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d106      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005f86:	4b24      	ldr	r3, [pc, #144]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	4b23      	ldr	r3, [pc, #140]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f8c:	2180      	movs	r1, #128	@ 0x80
 8005f8e:	0449      	lsls	r1, r1, #17
 8005f90:	430a      	orrs	r2, r1
 8005f92:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	2380      	movs	r3, #128	@ 0x80
 8005f9a:	03db      	lsls	r3, r3, #15
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	d016      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa4:	4a27      	ldr	r2, [pc, #156]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	0019      	movs	r1, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fae:	4b1a      	ldr	r3, [pc, #104]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb8:	2380      	movs	r3, #128	@ 0x80
 8005fba:	045b      	lsls	r3, r3, #17
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d106      	bne.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005fc0:	4b15      	ldr	r3, [pc, #84]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	4b14      	ldr	r3, [pc, #80]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fc6:	2180      	movs	r1, #128	@ 0x80
 8005fc8:	0449      	lsls	r1, r1, #17
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	2380      	movs	r3, #128	@ 0x80
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	d016      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005fda:	4b0f      	ldr	r3, [pc, #60]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fde:	4a1a      	ldr	r2, [pc, #104]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	0019      	movs	r1, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	695a      	ldr	r2, [r3, #20]
 8005fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fea:	430a      	orrs	r2, r1
 8005fec:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695a      	ldr	r2, [r3, #20]
 8005ff2:	2380      	movs	r3, #128	@ 0x80
 8005ff4:	01db      	lsls	r3, r3, #7
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d106      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005ffa:	4b07      	ldr	r3, [pc, #28]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	4b06      	ldr	r3, [pc, #24]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006000:	2180      	movs	r1, #128	@ 0x80
 8006002:	0249      	lsls	r1, r1, #9
 8006004:	430a      	orrs	r2, r1
 8006006:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006008:	2312      	movs	r3, #18
 800600a:	18fb      	adds	r3, r7, r3
 800600c:	781b      	ldrb	r3, [r3, #0]
}
 800600e:	0018      	movs	r0, r3
 8006010:	46bd      	mov	sp, r7
 8006012:	b006      	add	sp, #24
 8006014:	bd80      	pop	{r7, pc}
 8006016:	46c0      	nop			@ (mov r8, r8)
 8006018:	40021000 	.word	0x40021000
 800601c:	40007000 	.word	0x40007000
 8006020:	fffffcff 	.word	0xfffffcff
 8006024:	fffeffff 	.word	0xfffeffff
 8006028:	00001388 	.word	0x00001388
 800602c:	efffffff 	.word	0xefffffff
 8006030:	fffff3ff 	.word	0xfffff3ff
 8006034:	fff3ffff 	.word	0xfff3ffff
 8006038:	ffcfffff 	.word	0xffcfffff
 800603c:	ffffcfff 	.word	0xffffcfff
 8006040:	ffbfffff 	.word	0xffbfffff
 8006044:	feffffff 	.word	0xfeffffff
 8006048:	ffff3fff 	.word	0xffff3fff

0800604c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e04a      	b.n	80060f4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	223d      	movs	r2, #61	@ 0x3d
 8006062:	5c9b      	ldrb	r3, [r3, r2]
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d107      	bne.n	800607a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	223c      	movs	r2, #60	@ 0x3c
 800606e:	2100      	movs	r1, #0
 8006070:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	0018      	movs	r0, r3
 8006076:	f7fc fb8f 	bl	8002798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	223d      	movs	r2, #61	@ 0x3d
 800607e:	2102      	movs	r1, #2
 8006080:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3304      	adds	r3, #4
 800608a:	0019      	movs	r1, r3
 800608c:	0010      	movs	r0, r2
 800608e:	f000 fabd 	bl	800660c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2248      	movs	r2, #72	@ 0x48
 8006096:	2101      	movs	r1, #1
 8006098:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	223e      	movs	r2, #62	@ 0x3e
 800609e:	2101      	movs	r1, #1
 80060a0:	5499      	strb	r1, [r3, r2]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	223f      	movs	r2, #63	@ 0x3f
 80060a6:	2101      	movs	r1, #1
 80060a8:	5499      	strb	r1, [r3, r2]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2240      	movs	r2, #64	@ 0x40
 80060ae:	2101      	movs	r1, #1
 80060b0:	5499      	strb	r1, [r3, r2]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2241      	movs	r2, #65	@ 0x41
 80060b6:	2101      	movs	r1, #1
 80060b8:	5499      	strb	r1, [r3, r2]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2242      	movs	r2, #66	@ 0x42
 80060be:	2101      	movs	r1, #1
 80060c0:	5499      	strb	r1, [r3, r2]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2243      	movs	r2, #67	@ 0x43
 80060c6:	2101      	movs	r1, #1
 80060c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2244      	movs	r2, #68	@ 0x44
 80060ce:	2101      	movs	r1, #1
 80060d0:	5499      	strb	r1, [r3, r2]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2245      	movs	r2, #69	@ 0x45
 80060d6:	2101      	movs	r1, #1
 80060d8:	5499      	strb	r1, [r3, r2]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2246      	movs	r2, #70	@ 0x46
 80060de:	2101      	movs	r1, #1
 80060e0:	5499      	strb	r1, [r3, r2]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2247      	movs	r2, #71	@ 0x47
 80060e6:	2101      	movs	r1, #1
 80060e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	223d      	movs	r2, #61	@ 0x3d
 80060ee:	2101      	movs	r1, #1
 80060f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	0018      	movs	r0, r3
 80060f6:	46bd      	mov	sp, r7
 80060f8:	b002      	add	sp, #8
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	223d      	movs	r2, #61	@ 0x3d
 8006108:	5c9b      	ldrb	r3, [r3, r2]
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b01      	cmp	r3, #1
 800610e:	d001      	beq.n	8006114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e042      	b.n	800619a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	223d      	movs	r2, #61	@ 0x3d
 8006118:	2102      	movs	r1, #2
 800611a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2101      	movs	r1, #1
 8006128:	430a      	orrs	r2, r1
 800612a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a1c      	ldr	r2, [pc, #112]	@ (80061a4 <HAL_TIM_Base_Start_IT+0xa8>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00f      	beq.n	8006156 <HAL_TIM_Base_Start_IT+0x5a>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	2380      	movs	r3, #128	@ 0x80
 800613c:	05db      	lsls	r3, r3, #23
 800613e:	429a      	cmp	r2, r3
 8006140:	d009      	beq.n	8006156 <HAL_TIM_Base_Start_IT+0x5a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a18      	ldr	r2, [pc, #96]	@ (80061a8 <HAL_TIM_Base_Start_IT+0xac>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d004      	beq.n	8006156 <HAL_TIM_Base_Start_IT+0x5a>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a16      	ldr	r2, [pc, #88]	@ (80061ac <HAL_TIM_Base_Start_IT+0xb0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d116      	bne.n	8006184 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	4a14      	ldr	r2, [pc, #80]	@ (80061b0 <HAL_TIM_Base_Start_IT+0xb4>)
 800615e:	4013      	ands	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b06      	cmp	r3, #6
 8006166:	d016      	beq.n	8006196 <HAL_TIM_Base_Start_IT+0x9a>
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	2380      	movs	r3, #128	@ 0x80
 800616c:	025b      	lsls	r3, r3, #9
 800616e:	429a      	cmp	r2, r3
 8006170:	d011      	beq.n	8006196 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2101      	movs	r1, #1
 800617e:	430a      	orrs	r2, r1
 8006180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006182:	e008      	b.n	8006196 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2101      	movs	r1, #1
 8006190:	430a      	orrs	r2, r1
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	e000      	b.n	8006198 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006196:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	0018      	movs	r0, r3
 800619c:	46bd      	mov	sp, r7
 800619e:	b004      	add	sp, #16
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	46c0      	nop			@ (mov r8, r8)
 80061a4:	40012c00 	.word	0x40012c00
 80061a8:	40000400 	.word	0x40000400
 80061ac:	40014000 	.word	0x40014000
 80061b0:	00010007 	.word	0x00010007

080061b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68da      	ldr	r2, [r3, #12]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2101      	movs	r1, #1
 80061c8:	438a      	bics	r2, r1
 80061ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	4a0d      	ldr	r2, [pc, #52]	@ (8006208 <HAL_TIM_Base_Stop_IT+0x54>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	d10d      	bne.n	80061f4 <HAL_TIM_Base_Stop_IT+0x40>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	4a0b      	ldr	r2, [pc, #44]	@ (800620c <HAL_TIM_Base_Stop_IT+0x58>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	d107      	bne.n	80061f4 <HAL_TIM_Base_Stop_IT+0x40>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2101      	movs	r1, #1
 80061f0:	438a      	bics	r2, r1
 80061f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	223d      	movs	r2, #61	@ 0x3d
 80061f8:	2101      	movs	r1, #1
 80061fa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	0018      	movs	r0, r3
 8006200:	46bd      	mov	sp, r7
 8006202:	b002      	add	sp, #8
 8006204:	bd80      	pop	{r7, pc}
 8006206:	46c0      	nop			@ (mov r8, r8)
 8006208:	00001111 	.word	0x00001111
 800620c:	00000444 	.word	0x00000444

08006210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2202      	movs	r2, #2
 800622c:	4013      	ands	r3, r2
 800622e:	d021      	beq.n	8006274 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2202      	movs	r2, #2
 8006234:	4013      	ands	r3, r2
 8006236:	d01d      	beq.n	8006274 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2203      	movs	r2, #3
 800623e:	4252      	negs	r2, r2
 8006240:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	2203      	movs	r2, #3
 8006250:	4013      	ands	r3, r2
 8006252:	d004      	beq.n	800625e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	0018      	movs	r0, r3
 8006258:	f000 f9c0 	bl	80065dc <HAL_TIM_IC_CaptureCallback>
 800625c:	e007      	b.n	800626e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	0018      	movs	r0, r3
 8006262:	f000 f9b3 	bl	80065cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	0018      	movs	r0, r3
 800626a:	f000 f9bf 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2204      	movs	r2, #4
 8006278:	4013      	ands	r3, r2
 800627a:	d022      	beq.n	80062c2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2204      	movs	r2, #4
 8006280:	4013      	ands	r3, r2
 8006282:	d01e      	beq.n	80062c2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2205      	movs	r2, #5
 800628a:	4252      	negs	r2, r2
 800628c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2202      	movs	r2, #2
 8006292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	23c0      	movs	r3, #192	@ 0xc0
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4013      	ands	r3, r2
 80062a0:	d004      	beq.n	80062ac <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	0018      	movs	r0, r3
 80062a6:	f000 f999 	bl	80065dc <HAL_TIM_IC_CaptureCallback>
 80062aa:	e007      	b.n	80062bc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	0018      	movs	r0, r3
 80062b0:	f000 f98c 	bl	80065cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	0018      	movs	r0, r3
 80062b8:	f000 f998 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2208      	movs	r2, #8
 80062c6:	4013      	ands	r3, r2
 80062c8:	d021      	beq.n	800630e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2208      	movs	r2, #8
 80062ce:	4013      	ands	r3, r2
 80062d0:	d01d      	beq.n	800630e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2209      	movs	r2, #9
 80062d8:	4252      	negs	r2, r2
 80062da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2204      	movs	r2, #4
 80062e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	2203      	movs	r2, #3
 80062ea:	4013      	ands	r3, r2
 80062ec:	d004      	beq.n	80062f8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	0018      	movs	r0, r3
 80062f2:	f000 f973 	bl	80065dc <HAL_TIM_IC_CaptureCallback>
 80062f6:	e007      	b.n	8006308 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	0018      	movs	r0, r3
 80062fc:	f000 f966 	bl	80065cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	0018      	movs	r0, r3
 8006304:	f000 f972 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2210      	movs	r2, #16
 8006312:	4013      	ands	r3, r2
 8006314:	d022      	beq.n	800635c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2210      	movs	r2, #16
 800631a:	4013      	ands	r3, r2
 800631c:	d01e      	beq.n	800635c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2211      	movs	r2, #17
 8006324:	4252      	negs	r2, r2
 8006326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2208      	movs	r2, #8
 800632c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69da      	ldr	r2, [r3, #28]
 8006334:	23c0      	movs	r3, #192	@ 0xc0
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4013      	ands	r3, r2
 800633a:	d004      	beq.n	8006346 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	0018      	movs	r0, r3
 8006340:	f000 f94c 	bl	80065dc <HAL_TIM_IC_CaptureCallback>
 8006344:	e007      	b.n	8006356 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	0018      	movs	r0, r3
 800634a:	f000 f93f 	bl	80065cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	0018      	movs	r0, r3
 8006352:	f000 f94b 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2201      	movs	r2, #1
 8006360:	4013      	ands	r3, r2
 8006362:	d00c      	beq.n	800637e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	4013      	ands	r3, r2
 800636a:	d008      	beq.n	800637e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2202      	movs	r2, #2
 8006372:	4252      	negs	r2, r2
 8006374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	0018      	movs	r0, r3
 800637a:	f7fc f811 	bl	80023a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2280      	movs	r2, #128	@ 0x80
 8006382:	4013      	ands	r3, r2
 8006384:	d104      	bne.n	8006390 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	2380      	movs	r3, #128	@ 0x80
 800638a:	019b      	lsls	r3, r3, #6
 800638c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800638e:	d00b      	beq.n	80063a8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2280      	movs	r2, #128	@ 0x80
 8006394:	4013      	ands	r3, r2
 8006396:	d007      	beq.n	80063a8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a1e      	ldr	r2, [pc, #120]	@ (8006418 <HAL_TIM_IRQHandler+0x208>)
 800639e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	0018      	movs	r0, r3
 80063a4:	f000 fad2 	bl	800694c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	2380      	movs	r3, #128	@ 0x80
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	4013      	ands	r3, r2
 80063b0:	d00b      	beq.n	80063ca <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2280      	movs	r2, #128	@ 0x80
 80063b6:	4013      	ands	r3, r2
 80063b8:	d007      	beq.n	80063ca <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a17      	ldr	r2, [pc, #92]	@ (800641c <HAL_TIM_IRQHandler+0x20c>)
 80063c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	0018      	movs	r0, r3
 80063c6:	f000 fac9 	bl	800695c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2240      	movs	r2, #64	@ 0x40
 80063ce:	4013      	ands	r3, r2
 80063d0:	d00c      	beq.n	80063ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2240      	movs	r2, #64	@ 0x40
 80063d6:	4013      	ands	r3, r2
 80063d8:	d008      	beq.n	80063ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2241      	movs	r2, #65	@ 0x41
 80063e0:	4252      	negs	r2, r2
 80063e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	0018      	movs	r0, r3
 80063e8:	f000 f908 	bl	80065fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2220      	movs	r2, #32
 80063f0:	4013      	ands	r3, r2
 80063f2:	d00c      	beq.n	800640e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2220      	movs	r2, #32
 80063f8:	4013      	ands	r3, r2
 80063fa:	d008      	beq.n	800640e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2221      	movs	r2, #33	@ 0x21
 8006402:	4252      	negs	r2, r2
 8006404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	0018      	movs	r0, r3
 800640a:	f000 fa97 	bl	800693c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800640e:	46c0      	nop			@ (mov r8, r8)
 8006410:	46bd      	mov	sp, r7
 8006412:	b004      	add	sp, #16
 8006414:	bd80      	pop	{r7, pc}
 8006416:	46c0      	nop			@ (mov r8, r8)
 8006418:	ffffdf7f 	.word	0xffffdf7f
 800641c:	fffffeff 	.word	0xfffffeff

08006420 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800642a:	230f      	movs	r3, #15
 800642c:	18fb      	adds	r3, r7, r3
 800642e:	2200      	movs	r2, #0
 8006430:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	223c      	movs	r2, #60	@ 0x3c
 8006436:	5c9b      	ldrb	r3, [r3, r2]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <HAL_TIM_ConfigClockSource+0x20>
 800643c:	2302      	movs	r3, #2
 800643e:	e0bc      	b.n	80065ba <HAL_TIM_ConfigClockSource+0x19a>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	223c      	movs	r2, #60	@ 0x3c
 8006444:	2101      	movs	r1, #1
 8006446:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	223d      	movs	r2, #61	@ 0x3d
 800644c:	2102      	movs	r1, #2
 800644e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4a5a      	ldr	r2, [pc, #360]	@ (80065c4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800645c:	4013      	ands	r3, r2
 800645e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4a59      	ldr	r2, [pc, #356]	@ (80065c8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006464:	4013      	ands	r3, r2
 8006466:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2280      	movs	r2, #128	@ 0x80
 8006476:	0192      	lsls	r2, r2, #6
 8006478:	4293      	cmp	r3, r2
 800647a:	d040      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0xde>
 800647c:	2280      	movs	r2, #128	@ 0x80
 800647e:	0192      	lsls	r2, r2, #6
 8006480:	4293      	cmp	r3, r2
 8006482:	d900      	bls.n	8006486 <HAL_TIM_ConfigClockSource+0x66>
 8006484:	e088      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x178>
 8006486:	2280      	movs	r2, #128	@ 0x80
 8006488:	0152      	lsls	r2, r2, #5
 800648a:	4293      	cmp	r3, r2
 800648c:	d100      	bne.n	8006490 <HAL_TIM_ConfigClockSource+0x70>
 800648e:	e088      	b.n	80065a2 <HAL_TIM_ConfigClockSource+0x182>
 8006490:	2280      	movs	r2, #128	@ 0x80
 8006492:	0152      	lsls	r2, r2, #5
 8006494:	4293      	cmp	r3, r2
 8006496:	d900      	bls.n	800649a <HAL_TIM_ConfigClockSource+0x7a>
 8006498:	e07e      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x178>
 800649a:	2b70      	cmp	r3, #112	@ 0x70
 800649c:	d018      	beq.n	80064d0 <HAL_TIM_ConfigClockSource+0xb0>
 800649e:	d900      	bls.n	80064a2 <HAL_TIM_ConfigClockSource+0x82>
 80064a0:	e07a      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x178>
 80064a2:	2b60      	cmp	r3, #96	@ 0x60
 80064a4:	d04f      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0x126>
 80064a6:	d900      	bls.n	80064aa <HAL_TIM_ConfigClockSource+0x8a>
 80064a8:	e076      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x178>
 80064aa:	2b50      	cmp	r3, #80	@ 0x50
 80064ac:	d03b      	beq.n	8006526 <HAL_TIM_ConfigClockSource+0x106>
 80064ae:	d900      	bls.n	80064b2 <HAL_TIM_ConfigClockSource+0x92>
 80064b0:	e072      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x178>
 80064b2:	2b40      	cmp	r3, #64	@ 0x40
 80064b4:	d057      	beq.n	8006566 <HAL_TIM_ConfigClockSource+0x146>
 80064b6:	d900      	bls.n	80064ba <HAL_TIM_ConfigClockSource+0x9a>
 80064b8:	e06e      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x178>
 80064ba:	2b30      	cmp	r3, #48	@ 0x30
 80064bc:	d063      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0x166>
 80064be:	d86b      	bhi.n	8006598 <HAL_TIM_ConfigClockSource+0x178>
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d060      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0x166>
 80064c4:	d868      	bhi.n	8006598 <HAL_TIM_ConfigClockSource+0x178>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d05d      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0x166>
 80064ca:	2b10      	cmp	r3, #16
 80064cc:	d05b      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0x166>
 80064ce:	e063      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064e0:	f000 f99e 	bl	8006820 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2277      	movs	r2, #119	@ 0x77
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	609a      	str	r2, [r3, #8]
      break;
 80064fc:	e052      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800650e:	f000 f987 	bl	8006820 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2180      	movs	r1, #128	@ 0x80
 800651e:	01c9      	lsls	r1, r1, #7
 8006520:	430a      	orrs	r2, r1
 8006522:	609a      	str	r2, [r3, #8]
      break;
 8006524:	e03e      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006532:	001a      	movs	r2, r3
 8006534:	f000 f8f8 	bl	8006728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2150      	movs	r1, #80	@ 0x50
 800653e:	0018      	movs	r0, r3
 8006540:	f000 f952 	bl	80067e8 <TIM_ITRx_SetConfig>
      break;
 8006544:	e02e      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006552:	001a      	movs	r2, r3
 8006554:	f000 f916 	bl	8006784 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2160      	movs	r1, #96	@ 0x60
 800655e:	0018      	movs	r0, r3
 8006560:	f000 f942 	bl	80067e8 <TIM_ITRx_SetConfig>
      break;
 8006564:	e01e      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006572:	001a      	movs	r2, r3
 8006574:	f000 f8d8 	bl	8006728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2140      	movs	r1, #64	@ 0x40
 800657e:	0018      	movs	r0, r3
 8006580:	f000 f932 	bl	80067e8 <TIM_ITRx_SetConfig>
      break;
 8006584:	e00e      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	0019      	movs	r1, r3
 8006590:	0010      	movs	r0, r2
 8006592:	f000 f929 	bl	80067e8 <TIM_ITRx_SetConfig>
      break;
 8006596:	e005      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006598:	230f      	movs	r3, #15
 800659a:	18fb      	adds	r3, r7, r3
 800659c:	2201      	movs	r2, #1
 800659e:	701a      	strb	r2, [r3, #0]
      break;
 80065a0:	e000      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80065a2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	223d      	movs	r2, #61	@ 0x3d
 80065a8:	2101      	movs	r1, #1
 80065aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	223c      	movs	r2, #60	@ 0x3c
 80065b0:	2100      	movs	r1, #0
 80065b2:	5499      	strb	r1, [r3, r2]

  return status;
 80065b4:	230f      	movs	r3, #15
 80065b6:	18fb      	adds	r3, r7, r3
 80065b8:	781b      	ldrb	r3, [r3, #0]
}
 80065ba:	0018      	movs	r0, r3
 80065bc:	46bd      	mov	sp, r7
 80065be:	b004      	add	sp, #16
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	46c0      	nop			@ (mov r8, r8)
 80065c4:	ffceff88 	.word	0xffceff88
 80065c8:	ffff00ff 	.word	0xffff00ff

080065cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065d4:	46c0      	nop			@ (mov r8, r8)
 80065d6:	46bd      	mov	sp, r7
 80065d8:	b002      	add	sp, #8
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065e4:	46c0      	nop			@ (mov r8, r8)
 80065e6:	46bd      	mov	sp, r7
 80065e8:	b002      	add	sp, #8
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065f4:	46c0      	nop			@ (mov r8, r8)
 80065f6:	46bd      	mov	sp, r7
 80065f8:	b002      	add	sp, #8
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006604:	46c0      	nop			@ (mov r8, r8)
 8006606:	46bd      	mov	sp, r7
 8006608:	b002      	add	sp, #8
 800660a:	bd80      	pop	{r7, pc}

0800660c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a3b      	ldr	r2, [pc, #236]	@ (800670c <TIM_Base_SetConfig+0x100>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d008      	beq.n	8006636 <TIM_Base_SetConfig+0x2a>
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	2380      	movs	r3, #128	@ 0x80
 8006628:	05db      	lsls	r3, r3, #23
 800662a:	429a      	cmp	r2, r3
 800662c:	d003      	beq.n	8006636 <TIM_Base_SetConfig+0x2a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a37      	ldr	r2, [pc, #220]	@ (8006710 <TIM_Base_SetConfig+0x104>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d108      	bne.n	8006648 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2270      	movs	r2, #112	@ 0x70
 800663a:	4393      	bics	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4313      	orrs	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a30      	ldr	r2, [pc, #192]	@ (800670c <TIM_Base_SetConfig+0x100>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d018      	beq.n	8006682 <TIM_Base_SetConfig+0x76>
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	2380      	movs	r3, #128	@ 0x80
 8006654:	05db      	lsls	r3, r3, #23
 8006656:	429a      	cmp	r2, r3
 8006658:	d013      	beq.n	8006682 <TIM_Base_SetConfig+0x76>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a2c      	ldr	r2, [pc, #176]	@ (8006710 <TIM_Base_SetConfig+0x104>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00f      	beq.n	8006682 <TIM_Base_SetConfig+0x76>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a2b      	ldr	r2, [pc, #172]	@ (8006714 <TIM_Base_SetConfig+0x108>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00b      	beq.n	8006682 <TIM_Base_SetConfig+0x76>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a2a      	ldr	r2, [pc, #168]	@ (8006718 <TIM_Base_SetConfig+0x10c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d007      	beq.n	8006682 <TIM_Base_SetConfig+0x76>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a29      	ldr	r2, [pc, #164]	@ (800671c <TIM_Base_SetConfig+0x110>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d003      	beq.n	8006682 <TIM_Base_SetConfig+0x76>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a28      	ldr	r2, [pc, #160]	@ (8006720 <TIM_Base_SetConfig+0x114>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d108      	bne.n	8006694 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4a27      	ldr	r2, [pc, #156]	@ (8006724 <TIM_Base_SetConfig+0x118>)
 8006686:	4013      	ands	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	4313      	orrs	r3, r2
 8006692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2280      	movs	r2, #128	@ 0x80
 8006698:	4393      	bics	r3, r2
 800669a:	001a      	movs	r2, r3
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	689a      	ldr	r2, [r3, #8]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a13      	ldr	r2, [pc, #76]	@ (800670c <TIM_Base_SetConfig+0x100>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00b      	beq.n	80066da <TIM_Base_SetConfig+0xce>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a14      	ldr	r2, [pc, #80]	@ (8006718 <TIM_Base_SetConfig+0x10c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d007      	beq.n	80066da <TIM_Base_SetConfig+0xce>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a13      	ldr	r2, [pc, #76]	@ (800671c <TIM_Base_SetConfig+0x110>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d003      	beq.n	80066da <TIM_Base_SetConfig+0xce>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a12      	ldr	r2, [pc, #72]	@ (8006720 <TIM_Base_SetConfig+0x114>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d103      	bne.n	80066e2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	691a      	ldr	r2, [r3, #16]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	2201      	movs	r2, #1
 80066ee:	4013      	ands	r3, r2
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d106      	bne.n	8006702 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	2201      	movs	r2, #1
 80066fa:	4393      	bics	r3, r2
 80066fc:	001a      	movs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	611a      	str	r2, [r3, #16]
  }
}
 8006702:	46c0      	nop			@ (mov r8, r8)
 8006704:	46bd      	mov	sp, r7
 8006706:	b004      	add	sp, #16
 8006708:	bd80      	pop	{r7, pc}
 800670a:	46c0      	nop			@ (mov r8, r8)
 800670c:	40012c00 	.word	0x40012c00
 8006710:	40000400 	.word	0x40000400
 8006714:	40002000 	.word	0x40002000
 8006718:	40014000 	.word	0x40014000
 800671c:	40014400 	.word	0x40014400
 8006720:	40014800 	.word	0x40014800
 8006724:	fffffcff 	.word	0xfffffcff

08006728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	2201      	movs	r2, #1
 8006740:	4393      	bics	r3, r2
 8006742:	001a      	movs	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	22f0      	movs	r2, #240	@ 0xf0
 8006752:	4393      	bics	r3, r2
 8006754:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	011b      	lsls	r3, r3, #4
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4313      	orrs	r3, r2
 800675e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	220a      	movs	r2, #10
 8006764:	4393      	bics	r3, r2
 8006766:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	621a      	str	r2, [r3, #32]
}
 800677c:	46c0      	nop			@ (mov r8, r8)
 800677e:	46bd      	mov	sp, r7
 8006780:	b006      	add	sp, #24
 8006782:	bd80      	pop	{r7, pc}

08006784 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	2210      	movs	r2, #16
 800679c:	4393      	bics	r3, r2
 800679e:	001a      	movs	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	4a0d      	ldr	r2, [pc, #52]	@ (80067e4 <TIM_TI2_ConfigInputStage+0x60>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	031b      	lsls	r3, r3, #12
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	22a0      	movs	r2, #160	@ 0xa0
 80067c0:	4393      	bics	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	011b      	lsls	r3, r3, #4
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	621a      	str	r2, [r3, #32]
}
 80067da:	46c0      	nop			@ (mov r8, r8)
 80067dc:	46bd      	mov	sp, r7
 80067de:	b006      	add	sp, #24
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	46c0      	nop			@ (mov r8, r8)
 80067e4:	ffff0fff 	.word	0xffff0fff

080067e8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4a08      	ldr	r2, [pc, #32]	@ (800681c <TIM_ITRx_SetConfig+0x34>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4313      	orrs	r3, r2
 8006806:	2207      	movs	r2, #7
 8006808:	4313      	orrs	r3, r2
 800680a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	609a      	str	r2, [r3, #8]
}
 8006812:	46c0      	nop			@ (mov r8, r8)
 8006814:	46bd      	mov	sp, r7
 8006816:	b004      	add	sp, #16
 8006818:	bd80      	pop	{r7, pc}
 800681a:	46c0      	nop			@ (mov r8, r8)
 800681c:	ffcfff8f 	.word	0xffcfff8f

08006820 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	4a09      	ldr	r2, [pc, #36]	@ (800685c <TIM_ETR_SetConfig+0x3c>)
 8006838:	4013      	ands	r3, r2
 800683a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	021a      	lsls	r2, r3, #8
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	431a      	orrs	r2, r3
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4313      	orrs	r3, r2
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	609a      	str	r2, [r3, #8]
}
 8006854:	46c0      	nop			@ (mov r8, r8)
 8006856:	46bd      	mov	sp, r7
 8006858:	b006      	add	sp, #24
 800685a:	bd80      	pop	{r7, pc}
 800685c:	ffff00ff 	.word	0xffff00ff

08006860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	223c      	movs	r2, #60	@ 0x3c
 800686e:	5c9b      	ldrb	r3, [r3, r2]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006874:	2302      	movs	r3, #2
 8006876:	e055      	b.n	8006924 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	223c      	movs	r2, #60	@ 0x3c
 800687c:	2101      	movs	r1, #1
 800687e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	223d      	movs	r2, #61	@ 0x3d
 8006884:	2102      	movs	r1, #2
 8006886:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a23      	ldr	r2, [pc, #140]	@ (800692c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d108      	bne.n	80068b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4a22      	ldr	r2, [pc, #136]	@ (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80068a6:	4013      	ands	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2270      	movs	r2, #112	@ 0x70
 80068b8:	4393      	bics	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a16      	ldr	r2, [pc, #88]	@ (800692c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d00f      	beq.n	80068f8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	2380      	movs	r3, #128	@ 0x80
 80068de:	05db      	lsls	r3, r3, #23
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d009      	beq.n	80068f8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a12      	ldr	r2, [pc, #72]	@ (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d004      	beq.n	80068f8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a11      	ldr	r2, [pc, #68]	@ (8006938 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d10c      	bne.n	8006912 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2280      	movs	r2, #128	@ 0x80
 80068fc:	4393      	bics	r3, r2
 80068fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	4313      	orrs	r3, r2
 8006908:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	223d      	movs	r2, #61	@ 0x3d
 8006916:	2101      	movs	r1, #1
 8006918:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	223c      	movs	r2, #60	@ 0x3c
 800691e:	2100      	movs	r1, #0
 8006920:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	0018      	movs	r0, r3
 8006926:	46bd      	mov	sp, r7
 8006928:	b004      	add	sp, #16
 800692a:	bd80      	pop	{r7, pc}
 800692c:	40012c00 	.word	0x40012c00
 8006930:	ff0fffff 	.word	0xff0fffff
 8006934:	40000400 	.word	0x40000400
 8006938:	40014000 	.word	0x40014000

0800693c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006944:	46c0      	nop			@ (mov r8, r8)
 8006946:	46bd      	mov	sp, r7
 8006948:	b002      	add	sp, #8
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006954:	46c0      	nop			@ (mov r8, r8)
 8006956:	46bd      	mov	sp, r7
 8006958:	b002      	add	sp, #8
 800695a:	bd80      	pop	{r7, pc}

0800695c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006964:	46c0      	nop			@ (mov r8, r8)
 8006966:	46bd      	mov	sp, r7
 8006968:	b002      	add	sp, #8
 800696a:	bd80      	pop	{r7, pc}

0800696c <memset>:
 800696c:	0003      	movs	r3, r0
 800696e:	1882      	adds	r2, r0, r2
 8006970:	4293      	cmp	r3, r2
 8006972:	d100      	bne.n	8006976 <memset+0xa>
 8006974:	4770      	bx	lr
 8006976:	7019      	strb	r1, [r3, #0]
 8006978:	3301      	adds	r3, #1
 800697a:	e7f9      	b.n	8006970 <memset+0x4>

0800697c <__libc_init_array>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	2600      	movs	r6, #0
 8006980:	4c0c      	ldr	r4, [pc, #48]	@ (80069b4 <__libc_init_array+0x38>)
 8006982:	4d0d      	ldr	r5, [pc, #52]	@ (80069b8 <__libc_init_array+0x3c>)
 8006984:	1b64      	subs	r4, r4, r5
 8006986:	10a4      	asrs	r4, r4, #2
 8006988:	42a6      	cmp	r6, r4
 800698a:	d109      	bne.n	80069a0 <__libc_init_array+0x24>
 800698c:	2600      	movs	r6, #0
 800698e:	f000 f819 	bl	80069c4 <_init>
 8006992:	4c0a      	ldr	r4, [pc, #40]	@ (80069bc <__libc_init_array+0x40>)
 8006994:	4d0a      	ldr	r5, [pc, #40]	@ (80069c0 <__libc_init_array+0x44>)
 8006996:	1b64      	subs	r4, r4, r5
 8006998:	10a4      	asrs	r4, r4, #2
 800699a:	42a6      	cmp	r6, r4
 800699c:	d105      	bne.n	80069aa <__libc_init_array+0x2e>
 800699e:	bd70      	pop	{r4, r5, r6, pc}
 80069a0:	00b3      	lsls	r3, r6, #2
 80069a2:	58eb      	ldr	r3, [r5, r3]
 80069a4:	4798      	blx	r3
 80069a6:	3601      	adds	r6, #1
 80069a8:	e7ee      	b.n	8006988 <__libc_init_array+0xc>
 80069aa:	00b3      	lsls	r3, r6, #2
 80069ac:	58eb      	ldr	r3, [r5, r3]
 80069ae:	4798      	blx	r3
 80069b0:	3601      	adds	r6, #1
 80069b2:	e7f2      	b.n	800699a <__libc_init_array+0x1e>
 80069b4:	08006a1c 	.word	0x08006a1c
 80069b8:	08006a1c 	.word	0x08006a1c
 80069bc:	08006a20 	.word	0x08006a20
 80069c0:	08006a1c 	.word	0x08006a1c

080069c4 <_init>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	46c0      	nop			@ (mov r8, r8)
 80069c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ca:	bc08      	pop	{r3}
 80069cc:	469e      	mov	lr, r3
 80069ce:	4770      	bx	lr

080069d0 <_fini>:
 80069d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d2:	46c0      	nop			@ (mov r8, r8)
 80069d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d6:	bc08      	pop	{r3}
 80069d8:	469e      	mov	lr, r3
 80069da:	4770      	bx	lr
